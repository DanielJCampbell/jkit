// $ANTLR 3.1 jkit/java/Java.g 2008-11-21 12:08:56

package jkit.java;
import jkit.core.SyntaxError;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g 
 *  and got two errors that are ok (for now):
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created 
 *          elementValuePair and elementValuePairs rules, then used them in the 
 *          annotation rule.  Allows it to recognize annotation references with 
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the Identifier portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which 
 *          has the Identifier portion in it, the parser would fail on constants in 
 *          annotation definitions because it expected two identifiers.  
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to 
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing 
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *          Again, JLS doesn't seem to allow this, but java.lang.Class has an example of
 *          of this construct.
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 * 		
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *	Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *	and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *	--a[i].foo didn't work. Fixed unaryExpression
 */
public class JavaParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "UNIT", "PACKAGE", "IMPORT", "CLASS", "INTERFACE", "ENUM", "MODIFIERS", "EXTENDS", "IMPLEMENTS", "FIELD", "METHOD", "PARAMETER", "VARARGS", "TYPE", "VOID", "TYPE_PARAMETER", "THROWS", "ANNOTATION", "SUPER", "INTVAL", "FLOATVAL", "DOUBLEVAL", "CHARVAL", "STRINGVAL", "BOOLVAL", "NULLVAL", "BLOCK", "VARDEF", "ASSERT", "IF", "FOR", "WHILE", "DOWHILE", "RETURN", "THROW", "BREAK", "CONTINUE", "ASSIGN", "VAR", "LOR", "OR", "LAND", "AND", "XOR", "EQ", "NEQ", "INSTANCEOF", "LTEQ", "GTEQ", "LT", "GT", "SHL", "SHR", "USHR", "ADD", "SUB", "DIV", "MUL", "MOD", "DEREF", "NEG", "POSTINC", "PREINC", "PREDEC", "POSTDEC", "NOT", "INV", "CAST", "SELECTOR", "INVOKE", "ARRAYINDEX", "NEW", "GETCLASS", "SYNCHRONIZED", "INIT", "TEST", "STEP", "LABEL", "FOREACH", "TRY", "CATCH", "FINALLY", "CONDEXPR", "ARRAYVAL", "SWITCH", "CASE", "DEFAULT", "ARRAYINIT", "ARGS", "LABINOP", "Identifier", "FloatingPointLiteral", "CharacterLiteral", "StringLiteral", "HexLiteral", "OctalLiteral", "DecimalLiteral", "HexDigit", "IntegerTypeSuffix", "Exponent", "FloatTypeSuffix", "EscapeSequence", "UnicodeEscape", "OctalEscape", "Letter", "JavaIDDigit", "WS", "COMMENT", "LINE_COMMENT", "'package'", "';'", "'import'", "'static'", "'.'", "'*'", "'class'", "'extends'", "'implements'", "'<'", "','", "'>'", "'&'", "'{'", "'}'", "'interface'", "'void'", "'throws'", "'['", "']'", "'='", "'public'", "'protected'", "'private'", "'abstract'", "'final'", "'native'", "'synchronized'", "'transient'", "'volatile'", "'strictfp'", "'boolean'", "'char'", "'byte'", "'short'", "'int'", "'long'", "'float'", "'double'", "'?'", "'super'", "'('", "')'", "'...'", "'null'", "'true'", "'false'", "'@'", "'default'", "'assert'", "':'", "'if'", "'else'", "'for'", "'while'", "'do'", "'try'", "'finally'", "'switch'", "'return'", "'throw'", "'break'", "'continue'", "'catch'", "'case'", "'+'", "'-'", "'/'", "'&='", "'|='", "'^='", "'%'", "'||'", "'&&'", "'|'", "'^'", "'=='", "'!='", "'instanceof'", "'++'", "'--'", "'~'", "'!'", "'new'"
    };
    public static final int T__139=139;
    public static final int SYNCHRONIZED=77;
    public static final int T__174=174;
    public static final int HexDigit=101;
    public static final int T__196=196;
    public static final int T__144=144;
    public static final int T__122=122;
    public static final int METHOD=14;
    public static final int T__115=115;
    public static final int T__137=137;
    public static final int T__140=140;
    public static final int IMPORT=6;
    public static final int PACKAGE=5;
    public static final int CONTINUE=40;
    public static final int Letter=108;
    public static final int T__138=138;
    public static final int T__173=173;
    public static final int T__119=119;
    public static final int ASSERT=32;
    public static final int T__142=142;
    public static final int T__176=176;
    public static final int FloatTypeSuffix=104;
    public static final int T__118=118;
    public static final int T__135=135;
    public static final int EXTENDS=11;
    public static final int T__113=113;
    public static final int POSTDEC=68;
    public static final int ARRAYVAL=87;
    public static final int SUPER=22;
    public static final int IntegerTypeSuffix=102;
    public static final int T__156=156;
    public static final int WS=110;
    public static final int T__159=159;
    public static final int T__177=177;
    public static final int T__158=158;
    public static final int FIELD=13;
    public static final int POSTINC=65;
    public static final int LAND=45;
    public static final int CATCH=84;
    public static final int MUL=61;
    public static final int UnicodeEscape=106;
    public static final int T__157=157;
    public static final int T__114=114;
    public static final int MODIFIERS=10;
    public static final int CONDEXPR=86;
    public static final int T__143=143;
    public static final int T__193=193;
    public static final int XOR=47;
    public static final int T__141=141;
    public static final int ADD=58;
    public static final int FOREACH=82;
    public static final int TYPE=17;
    public static final int SHL=55;
    public static final int LOR=43;
    public static final int OctalLiteral=99;
    public static final int T__167=167;
    public static final int SELECTOR=72;
    public static final int T__194=194;
    public static final int CAST=71;
    public static final int THROWS=20;
    public static final int LABEL=81;
    public static final int MOD=62;
    public static final int T__191=191;
    public static final int DOWHILE=36;
    public static final int OR=44;
    public static final int BLOCK=30;
    public static final int T__192=192;
    public static final int EscapeSequence=105;
    public static final int INSTANCEOF=50;
    public static final int FloatingPointLiteral=95;
    public static final int NEQ=49;
    public static final int T__175=175;
    public static final int T__117=117;
    public static final int WHILE=35;
    public static final int COMMENT=111;
    public static final int INVOKE=73;
    public static final int T__172=172;
    public static final int GTEQ=52;
    public static final int LABINOP=93;
    public static final int UNIT=4;
    public static final int JavaIDDigit=109;
    public static final int T__170=170;
    public static final int T__136=136;
    public static final int RETURN=37;
    public static final int IF=33;
    public static final int T__116=116;
    public static final int T__171=171;
    public static final int GETCLASS=76;
    public static final int FOR=34;
    public static final int T__189=189;
    public static final int DEFAULT=90;
    public static final int OctalEscape=107;
    public static final int STRINGVAL=27;
    public static final int T__134=134;
    public static final int T__195=195;
    public static final int NEG=64;
    public static final int DEREF=63;
    public static final int SUB=59;
    public static final int NOT=69;
    public static final int TRY=83;
    public static final int ARGS=92;
    public static final int T__162=162;
    public static final int T__160=160;
    public static final int T__123=123;
    public static final int STEP=80;
    public static final int T__145=145;
    public static final int T__187=187;
    public static final int INTVAL=23;
    public static final int SHR=56;
    public static final int PREDEC=67;
    public static final int ARRAYINIT=91;
    public static final int T__186=186;
    public static final int AND=46;
    public static final int T__181=181;
    public static final int T__128=128;
    public static final int NULLVAL=29;
    public static final int PREINC=66;
    public static final int T__161=161;
    public static final int FINALLY=85;
    public static final int T__168=168;
    public static final int T__150=150;
    public static final int Identifier=94;
    public static final int T__182=182;
    public static final int EQ=48;
    public static final int NEW=75;
    public static final int BOOLVAL=28;
    public static final int LT=53;
    public static final int T__165=165;
    public static final int T__130=130;
    public static final int T__151=151;
    public static final int LINE_COMMENT=112;
    public static final int CASE=89;
    public static final int INTERFACE=8;
    public static final int CHARVAL=26;
    public static final int HexLiteral=98;
    public static final int INV=70;
    public static final int T__125=125;
    public static final int T__149=149;
    public static final int LTEQ=51;
    public static final int T__166=166;
    public static final int BREAK=39;
    public static final int DecimalLiteral=100;
    public static final int T__132=132;
    public static final int ANNOTATION=21;
    public static final int DIV=60;
    public static final int T__190=190;
    public static final int T__124=124;
    public static final int T__131=131;
    public static final int T__169=169;
    public static final int THROW=38;
    public static final int T__126=126;
    public static final int T__148=148;
    public static final int INIT=78;
    public static final int T__188=188;
    public static final int VARDEF=31;
    public static final int DOUBLEVAL=25;
    public static final int TYPE_PARAMETER=19;
    public static final int ARRAYINDEX=74;
    public static final int ASSIGN=41;
    public static final int T__127=127;
    public static final int VOID=18;
    public static final int T__183=183;
    public static final int T__133=133;
    public static final int FLOATVAL=24;
    public static final int VARARGS=16;
    public static final int T__164=164;
    public static final int T__120=120;
    public static final int USHR=57;
    public static final int ENUM=9;
    public static final int T__163=163;
    public static final int Exponent=103;
    public static final int T__153=153;
    public static final int IMPLEMENTS=12;
    public static final int SWITCH=88;
    public static final int T__185=185;
    public static final int CharacterLiteral=96;
    public static final int T__178=178;
    public static final int GT=54;
    public static final int StringLiteral=97;
    public static final int T__129=129;
    public static final int T__180=180;
    public static final int T__152=152;
    public static final int T__121=121;
    public static final int VAR=42;
    public static final int CLASS=7;
    public static final int T__147=147;
    public static final int T__179=179;
    public static final int EOF=-1;
    public static final int T__154=154;
    public static final int T__184=184;
    public static final int PARAMETER=15;
    public static final int T__155=155;
    public static final int TEST=79;
    public static final int T__146=146;

    // delegates
    // delegators


        public JavaParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public JavaParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[384+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return JavaParser.tokenNames; }
    public String getGrammarFileName() { return "jkit/java/Java.g"; }


    public static class compilationUnit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // jkit/java/Java.g:200:1: compilationUnit : ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ -> ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ ) ;
    public final JavaParser.compilationUnit_return compilationUnit() throws RecognitionException {
        JavaParser.compilationUnit_return retval = new JavaParser.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotations_return annotations1 = null;

        JavaParser.packageDeclaration_return packageDeclaration2 = null;

        JavaParser.importDeclaration_return importDeclaration3 = null;

        JavaParser.typeDeclaration_return typeDeclaration4 = null;


        RewriteRuleSubtreeStream stream_importDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule importDeclaration");
        RewriteRuleSubtreeStream stream_packageDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule packageDeclaration");
        RewriteRuleSubtreeStream stream_annotations=new RewriteRuleSubtreeStream(adaptor,"rule annotations");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // jkit/java/Java.g:201:2: ( ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ -> ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ ) )
            // jkit/java/Java.g:201:4: ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+
            {
            // jkit/java/Java.g:201:4: ( annotations )?
            int alt1=2;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // jkit/java/Java.g:0:0: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_compilationUnit440);
                    annotations1=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotations.add(annotations1.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:201:17: ( packageDeclaration )?
            int alt2=2;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    // jkit/java/Java.g:0:0: packageDeclaration
                    {
                    pushFollow(FOLLOW_packageDeclaration_in_compilationUnit443);
                    packageDeclaration2=packageDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_packageDeclaration.add(packageDeclaration2.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:201:37: ( importDeclaration )*
            loop3:
            do {
                int alt3=2;
                alt3 = dfa3.predict(input);
                switch (alt3) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit446);
            	    importDeclaration3=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_importDeclaration.add(importDeclaration3.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);

            // jkit/java/Java.g:201:56: ( typeDeclaration )+
            int cnt4=0;
            loop4:
            do {
                int alt4=2;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: typeDeclaration
            	    {
            	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit449);
            	    typeDeclaration4=typeDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration4.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);



            // AST REWRITE
            // elements: typeDeclaration, packageDeclaration, importDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 202:3: -> ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ )
            {
                // jkit/java/Java.g:202:6: ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNIT, "UNIT"), root_1);

                // jkit/java/Java.g:202:13: ( packageDeclaration )?
                if ( stream_packageDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_packageDeclaration.nextTree());

                }
                stream_packageDeclaration.reset();
                // jkit/java/Java.g:202:33: ( importDeclaration )*
                while ( stream_importDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_importDeclaration.nextTree());

                }
                stream_importDeclaration.reset();
                if ( !(stream_typeDeclaration.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeDeclaration.nextTree());

                }
                stream_typeDeclaration.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // jkit/java/Java.g:205:1: packageDeclaration : 'package' qualifiedName ';' -> ^( PACKAGE qualifiedName ) ;
    public final JavaParser.packageDeclaration_return packageDeclaration() throws RecognitionException {
        JavaParser.packageDeclaration_return retval = new JavaParser.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal5=null;
        Token char_literal7=null;
        JavaParser.qualifiedName_return qualifiedName6 = null;


        Object string_literal5_tree=null;
        Object char_literal7_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
        RewriteRuleSubtreeStream stream_qualifiedName=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // jkit/java/Java.g:206:2: ( 'package' qualifiedName ';' -> ^( PACKAGE qualifiedName ) )
            // jkit/java/Java.g:206:4: 'package' qualifiedName ';'
            {
            string_literal5=(Token)match(input,113,FOLLOW_113_in_packageDeclaration483); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_113.add(string_literal5);

            pushFollow(FOLLOW_qualifiedName_in_packageDeclaration485);
            qualifiedName6=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedName.add(qualifiedName6.getTree());
            char_literal7=(Token)match(input,114,FOLLOW_114_in_packageDeclaration487); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(char_literal7);



            // AST REWRITE
            // elements: qualifiedName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 206:32: -> ^( PACKAGE qualifiedName )
            {
                // jkit/java/Java.g:206:35: ^( PACKAGE qualifiedName )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PACKAGE, "PACKAGE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // jkit/java/Java.g:209:1: importDeclaration : 'import' ( 'static' )? i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( IMPORT ( $i)+ ) ;
    public final JavaParser.importDeclaration_return importDeclaration() throws RecognitionException {
        JavaParser.importDeclaration_return retval = new JavaParser.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal8=null;
        Token string_literal9=null;
        Token char_literal10=null;
        Token char_literal11=null;
        Token char_literal12=null;
        Token i=null;
        List list_i=null;

        Object string_literal8_tree=null;
        Object string_literal9_tree=null;
        Object char_literal10_tree=null;
        Object char_literal11_tree=null;
        Object char_literal12_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // jkit/java/Java.g:210:2: ( 'import' ( 'static' )? i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( IMPORT ( $i)+ ) )
            // jkit/java/Java.g:210:4: 'import' ( 'static' )? i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';'
            {
            string_literal8=(Token)match(input,115,FOLLOW_115_in_importDeclaration507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_115.add(string_literal8);

            // jkit/java/Java.g:210:13: ( 'static' )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==116) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // jkit/java/Java.g:0:0: 'static'
                    {
                    string_literal9=(Token)match(input,116,FOLLOW_116_in_importDeclaration509); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_116.add(string_literal9);


                    }
                    break;

            }

            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration514); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(i);

            if (list_i==null) list_i=new ArrayList();
            list_i.add(i);

            // jkit/java/Java.g:210:37: ( '.' i+= Identifier )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==117) ) {
                    int LA6_1 = input.LA(2);

                    if ( (LA6_1==Identifier) ) {
                        alt6=1;
                    }


                }


                switch (alt6) {
            	case 1 :
            	    // jkit/java/Java.g:210:38: '.' i+= Identifier
            	    {
            	    char_literal10=(Token)match(input,117,FOLLOW_117_in_importDeclaration517); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_117.add(char_literal10);

            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration521); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Identifier.add(i);

            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i);


            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            // jkit/java/Java.g:210:58: ( '.' i+= '*' )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==117) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // jkit/java/Java.g:210:59: '.' i+= '*'
                    {
                    char_literal11=(Token)match(input,117,FOLLOW_117_in_importDeclaration526); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal11);

                    i=(Token)match(input,118,FOLLOW_118_in_importDeclaration530); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);


                    }
                    break;

            }

            char_literal12=(Token)match(input,114,FOLLOW_114_in_importDeclaration534); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(char_literal12);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: i
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 210:76: -> ^( IMPORT ( $i)+ )
            {
                // jkit/java/Java.g:210:79: ^( IMPORT ( $i)+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPORT, "IMPORT"), root_1);

                if ( !(stream_i.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDeclaration"
    // jkit/java/Java.g:213:1: typeDeclaration : ( classOrInterfaceDeclaration | ';' );
    public final JavaParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
        JavaParser.typeDeclaration_return retval = new JavaParser.typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal14=null;
        JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration13 = null;


        Object char_literal14_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // jkit/java/Java.g:214:2: ( classOrInterfaceDeclaration | ';' )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // jkit/java/Java.g:214:4: classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration556);
                    classOrInterfaceDeclaration13=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceDeclaration13.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:215:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal14=(Token)match(input,114,FOLLOW_114_in_typeDeclaration566); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal14_tree = (Object)adaptor.create(char_literal14);
                    adaptor.addChild(root_0, char_literal14_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"

    public static class classOrInterfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceDeclaration"
    // jkit/java/Java.g:218:1: classOrInterfaceDeclaration : ( modifier )* ( classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) ) ;
    public final JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration() throws RecognitionException {
        JavaParser.classOrInterfaceDeclaration_return retval = new JavaParser.classOrInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int classOrInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.modifier_return modifier15 = null;

        JavaParser.classDeclaration_return classDeclaration16 = null;

        JavaParser.enumDeclaration_return enumDeclaration17 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration18 = null;


        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_enumDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule enumDeclaration");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        RewriteRuleSubtreeStream stream_interfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // jkit/java/Java.g:219:2: ( ( modifier )* ( classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) ) )
            // jkit/java/Java.g:219:4: ( modifier )* ( classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) )
            {
            // jkit/java/Java.g:219:4: ( modifier )*
            loop9:
            do {
                int alt9=2;
                alt9 = dfa9.predict(input);
                switch (alt9) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_classOrInterfaceDeclaration578);
            	    modifier15=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_modifier.add(modifier15.getTree());

            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);

            // jkit/java/Java.g:219:14: ( classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) )
            int alt10=3;
            switch ( input.LA(1) ) {
            case 119:
                {
                alt10=1;
                }
                break;
            case ENUM:
                {
                alt10=2;
                }
                break;
            case 128:
            case 160:
                {
                alt10=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // jkit/java/Java.g:220:3: classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_classOrInterfaceDeclaration585);
                    classDeclaration16=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classDeclaration.add(classDeclaration16.getTree());


                    // AST REWRITE
                    // elements: classDeclaration, modifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 220:20: -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                    {
                        // jkit/java/Java.g:220:23: ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CLASS, "CLASS"), root_1);

                        // jkit/java/Java.g:220:31: ( ^( MODIFIERS ( modifier )* ) )?
                        if ( stream_modifier.hasNext() ) {
                            // jkit/java/Java.g:220:31: ^( MODIFIERS ( modifier )* )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                            // jkit/java/Java.g:220:43: ( modifier )*
                            while ( stream_modifier.hasNext() ) {
                                adaptor.addChild(root_2, stream_modifier.nextTree());

                            }
                            stream_modifier.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_modifier.reset();
                        adaptor.addChild(root_1, stream_classDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:221:5: enumDeclaration
                    {
                    pushFollow(FOLLOW_enumDeclaration_in_classOrInterfaceDeclaration607);
                    enumDeclaration17=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumDeclaration.add(enumDeclaration17.getTree());


                    // AST REWRITE
                    // elements: modifier, enumDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 221:21: -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                    {
                        // jkit/java/Java.g:221:24: ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ENUM, "ENUM"), root_1);

                        // jkit/java/Java.g:221:31: ( ^( MODIFIERS ( modifier )* ) )?
                        if ( stream_modifier.hasNext() ) {
                            // jkit/java/Java.g:221:31: ^( MODIFIERS ( modifier )* )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                            // jkit/java/Java.g:221:43: ( modifier )*
                            while ( stream_modifier.hasNext() ) {
                                adaptor.addChild(root_2, stream_modifier.nextTree());

                            }
                            stream_modifier.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_modifier.reset();
                        adaptor.addChild(root_1, stream_enumDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:222:5: interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration629);
                    interfaceDeclaration18=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceDeclaration.add(interfaceDeclaration18.getTree());


                    // AST REWRITE
                    // elements: modifier, interfaceDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 222:26: -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                    {
                        // jkit/java/Java.g:222:29: ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                        // jkit/java/Java.g:222:41: ( ^( MODIFIERS ( modifier )* ) )?
                        if ( stream_modifier.hasNext() ) {
                            // jkit/java/Java.g:222:41: ^( MODIFIERS ( modifier )* )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                            // jkit/java/Java.g:222:53: ( modifier )*
                            while ( stream_modifier.hasNext() ) {
                                adaptor.addChild(root_2, stream_modifier.nextTree());

                            }
                            stream_modifier.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_modifier.reset();
                        adaptor.addChild(root_1, stream_interfaceDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, classOrInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceDeclaration"

    public static class classDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classDeclaration"
    // jkit/java/Java.g:226:1: classDeclaration : 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody -> ^( Identifier ( typeParameters )? ) ( ^( EXTENDS type ) )? ( ^( IMPLEMENTS typeList ) )? ( classBody )? ;
    public final JavaParser.classDeclaration_return classDeclaration() throws RecognitionException {
        JavaParser.classDeclaration_return retval = new JavaParser.classDeclaration_return();
        retval.start = input.LT(1);
        int classDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal19=null;
        Token Identifier20=null;
        Token string_literal22=null;
        Token string_literal24=null;
        JavaParser.typeParameters_return typeParameters21 = null;

        JavaParser.type_return type23 = null;

        JavaParser.typeList_return typeList25 = null;

        JavaParser.classBody_return classBody26 = null;


        Object string_literal19_tree=null;
        Object Identifier20_tree=null;
        Object string_literal22_tree=null;
        Object string_literal24_tree=null;
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // jkit/java/Java.g:227:2: ( 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody -> ^( Identifier ( typeParameters )? ) ( ^( EXTENDS type ) )? ( ^( IMPLEMENTS typeList ) )? ( classBody )? )
            // jkit/java/Java.g:227:4: 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody
            {
            string_literal19=(Token)match(input,119,FOLLOW_119_in_classDeclaration662); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal19);

            Identifier20=(Token)match(input,Identifier,FOLLOW_Identifier_in_classDeclaration664); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier20);

            // jkit/java/Java.g:227:23: ( typeParameters )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==122) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // jkit/java/Java.g:227:24: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_classDeclaration667);
                    typeParameters21=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters21.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:228:9: ( 'extends' type )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==120) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // jkit/java/Java.g:228:10: 'extends' type
                    {
                    string_literal22=(Token)match(input,120,FOLLOW_120_in_classDeclaration680); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(string_literal22);

                    pushFollow(FOLLOW_type_in_classDeclaration682);
                    type23=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type23.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:229:9: ( 'implements' typeList )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==121) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // jkit/java/Java.g:229:10: 'implements' typeList
                    {
                    string_literal24=(Token)match(input,121,FOLLOW_121_in_classDeclaration696); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(string_literal24);

                    pushFollow(FOLLOW_typeList_in_classDeclaration698);
                    typeList25=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList25.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_classDeclaration710);
            classBody26=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classBody.add(classBody26.getTree());


            // AST REWRITE
            // elements: typeList, Identifier, classBody, type, typeParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 230:19: -> ^( Identifier ( typeParameters )? ) ( ^( EXTENDS type ) )? ( ^( IMPLEMENTS typeList ) )? ( classBody )?
            {
                // jkit/java/Java.g:230:22: ^( Identifier ( typeParameters )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/Java.g:230:35: ( typeParameters )?
                if ( stream_typeParameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeParameters.nextTree());

                }
                stream_typeParameters.reset();

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/Java.g:230:52: ( ^( EXTENDS type ) )?
                if ( stream_type.hasNext() ) {
                    // jkit/java/Java.g:230:52: ^( EXTENDS type )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXTENDS, "EXTENDS"), root_1);

                    adaptor.addChild(root_1, stream_type.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_type.reset();
                // jkit/java/Java.g:230:69: ( ^( IMPLEMENTS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:230:69: ^( IMPLEMENTS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPLEMENTS, "IMPLEMENTS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();
                // jkit/java/Java.g:230:93: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_classBody.nextTree());

                }
                stream_classBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, classDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classDeclaration"

    public static class typeParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameters"
    // jkit/java/Java.g:233:1: typeParameters : '<' t+= typeParameter ( ',' t+= typeParameter )* '>' -> ( $t)* ;
    public final JavaParser.typeParameters_return typeParameters() throws RecognitionException {
        JavaParser.typeParameters_return retval = new JavaParser.typeParameters_return();
        retval.start = input.LT(1);
        int typeParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal27=null;
        Token char_literal28=null;
        Token char_literal29=null;
        List list_t=null;
        JavaParser.typeParameter_return t = null;
        Object char_literal27_tree=null;
        Object char_literal28_tree=null;
        Object char_literal29_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_typeParameter=new RewriteRuleSubtreeStream(adaptor,"rule typeParameter");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // jkit/java/Java.g:234:2: ( '<' t+= typeParameter ( ',' t+= typeParameter )* '>' -> ( $t)* )
            // jkit/java/Java.g:234:4: '<' t+= typeParameter ( ',' t+= typeParameter )* '>'
            {
            char_literal27=(Token)match(input,122,FOLLOW_122_in_typeParameters747); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(char_literal27);

            pushFollow(FOLLOW_typeParameter_in_typeParameters751);
            t=typeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeParameter.add(t.getTree());
            if (list_t==null) list_t=new ArrayList();
            list_t.add(t.getTree());

            // jkit/java/Java.g:234:25: ( ',' t+= typeParameter )*
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==123) ) {
                    alt14=1;
                }


                switch (alt14) {
            	case 1 :
            	    // jkit/java/Java.g:234:26: ',' t+= typeParameter
            	    {
            	    char_literal28=(Token)match(input,123,FOLLOW_123_in_typeParameters754); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_123.add(char_literal28);

            	    pushFollow(FOLLOW_typeParameter_in_typeParameters758);
            	    t=typeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeParameter.add(t.getTree());
            	    if (list_t==null) list_t=new ArrayList();
            	    list_t.add(t.getTree());


            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);

            char_literal29=(Token)match(input,124,FOLLOW_124_in_typeParameters762); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_124.add(char_literal29);



            // AST REWRITE
            // elements: t
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: t
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
            root_0 = (Object)adaptor.nil();
            // 234:53: -> ( $t)*
            {
                // jkit/java/Java.g:234:56: ( $t)*
                while ( stream_t.hasNext() ) {
                    adaptor.addChild(root_0, stream_t.nextTree());

                }
                stream_t.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, typeParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameters"

    public static class typeParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameter"
    // jkit/java/Java.g:237:1: typeParameter : Identifier ( 'extends' bound )? -> ^( TYPE_PARAMETER Identifier ( ^( EXTENDS bound ) )? ) ;
    public final JavaParser.typeParameter_return typeParameter() throws RecognitionException {
        JavaParser.typeParameter_return retval = new JavaParser.typeParameter_return();
        retval.start = input.LT(1);
        int typeParameter_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier30=null;
        Token string_literal31=null;
        JavaParser.bound_return bound32 = null;


        Object Identifier30_tree=null;
        Object string_literal31_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_bound=new RewriteRuleSubtreeStream(adaptor,"rule bound");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // jkit/java/Java.g:238:2: ( Identifier ( 'extends' bound )? -> ^( TYPE_PARAMETER Identifier ( ^( EXTENDS bound ) )? ) )
            // jkit/java/Java.g:238:4: Identifier ( 'extends' bound )?
            {
            Identifier30=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeParameter779); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier30);

            // jkit/java/Java.g:238:15: ( 'extends' bound )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==120) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // jkit/java/Java.g:238:16: 'extends' bound
                    {
                    string_literal31=(Token)match(input,120,FOLLOW_120_in_typeParameter782); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(string_literal31);

                    pushFollow(FOLLOW_bound_in_typeParameter784);
                    bound32=bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound.add(bound32.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bound, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 238:34: -> ^( TYPE_PARAMETER Identifier ( ^( EXTENDS bound ) )? )
            {
                // jkit/java/Java.g:238:37: ^( TYPE_PARAMETER Identifier ( ^( EXTENDS bound ) )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETER, "TYPE_PARAMETER"), root_1);

                adaptor.addChild(root_1, stream_Identifier.nextNode());
                // jkit/java/Java.g:238:65: ( ^( EXTENDS bound ) )?
                if ( stream_bound.hasNext() ) {
                    // jkit/java/Java.g:238:65: ^( EXTENDS bound )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXTENDS, "EXTENDS"), root_2);

                    adaptor.addChild(root_2, stream_bound.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_bound.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, typeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameter"

    public static class bound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bound"
    // jkit/java/Java.g:241:1: bound : t+= type ( '&' t+= type )* -> ( $t)* ;
    public final JavaParser.bound_return bound() throws RecognitionException {
        JavaParser.bound_return retval = new JavaParser.bound_return();
        retval.start = input.LT(1);
        int bound_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal33=null;
        List list_t=null;
        JavaParser.type_return t = null;
        Object char_literal33_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // jkit/java/Java.g:242:2: (t+= type ( '&' t+= type )* -> ( $t)* )
            // jkit/java/Java.g:242:4: t+= type ( '&' t+= type )*
            {
            pushFollow(FOLLOW_type_in_bound816);
            t=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(t.getTree());
            if (list_t==null) list_t=new ArrayList();
            list_t.add(t.getTree());

            // jkit/java/Java.g:242:12: ( '&' t+= type )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==125) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // jkit/java/Java.g:242:13: '&' t+= type
            	    {
            	    char_literal33=(Token)match(input,125,FOLLOW_125_in_bound819); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(char_literal33);

            	    pushFollow(FOLLOW_type_in_bound823);
            	    t=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type.add(t.getTree());
            	    if (list_t==null) list_t=new ArrayList();
            	    list_t.add(t.getTree());


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);



            // AST REWRITE
            // elements: t
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: t
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
            root_0 = (Object)adaptor.nil();
            // 242:27: -> ( $t)*
            {
                // jkit/java/Java.g:242:30: ( $t)*
                while ( stream_t.hasNext() ) {
                    adaptor.addChild(root_0, stream_t.nextTree());

                }
                stream_t.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, bound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bound"

    public static class enumDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumDeclaration"
    // jkit/java/Java.g:245:1: enumDeclaration : ENUM Identifier ( 'implements' typeList )? enumBody ;
    public final JavaParser.enumDeclaration_return enumDeclaration() throws RecognitionException {
        JavaParser.enumDeclaration_return retval = new JavaParser.enumDeclaration_return();
        retval.start = input.LT(1);
        int enumDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token ENUM34=null;
        Token Identifier35=null;
        Token string_literal36=null;
        JavaParser.typeList_return typeList37 = null;

        JavaParser.enumBody_return enumBody38 = null;


        Object ENUM34_tree=null;
        Object Identifier35_tree=null;
        Object string_literal36_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // jkit/java/Java.g:246:2: ( ENUM Identifier ( 'implements' typeList )? enumBody )
            // jkit/java/Java.g:246:4: ENUM Identifier ( 'implements' typeList )? enumBody
            {
            root_0 = (Object)adaptor.nil();

            ENUM34=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumDeclaration842); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENUM34_tree = (Object)adaptor.create(ENUM34);
            adaptor.addChild(root_0, ENUM34_tree);
            }
            Identifier35=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumDeclaration844); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier35_tree = (Object)adaptor.create(Identifier35);
            adaptor.addChild(root_0, Identifier35_tree);
            }
            // jkit/java/Java.g:246:20: ( 'implements' typeList )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==121) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // jkit/java/Java.g:246:21: 'implements' typeList
                    {
                    string_literal36=(Token)match(input,121,FOLLOW_121_in_enumDeclaration847); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal36_tree = (Object)adaptor.create(string_literal36);
                    adaptor.addChild(root_0, string_literal36_tree);
                    }
                    pushFollow(FOLLOW_typeList_in_enumDeclaration849);
                    typeList37=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeList37.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumDeclaration853);
            enumBody38=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumBody38.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, enumDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBody"
    // jkit/java/Java.g:249:1: enumBody : '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' ;
    public final JavaParser.enumBody_return enumBody() throws RecognitionException {
        JavaParser.enumBody_return retval = new JavaParser.enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal39=null;
        Token char_literal41=null;
        Token char_literal43=null;
        JavaParser.enumConstants_return enumConstants40 = null;

        JavaParser.enumBodyDeclarations_return enumBodyDeclarations42 = null;


        Object char_literal39_tree=null;
        Object char_literal41_tree=null;
        Object char_literal43_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // jkit/java/Java.g:250:2: ( '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' )
            // jkit/java/Java.g:250:4: '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal39=(Token)match(input,126,FOLLOW_126_in_enumBody865); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal39_tree = (Object)adaptor.create(char_literal39);
            adaptor.addChild(root_0, char_literal39_tree);
            }
            // jkit/java/Java.g:250:8: ( enumConstants )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==Identifier||LA18_0==160) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // jkit/java/Java.g:0:0: enumConstants
                    {
                    pushFollow(FOLLOW_enumConstants_in_enumBody867);
                    enumConstants40=enumConstants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstants40.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:250:23: ( ',' )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==123) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // jkit/java/Java.g:0:0: ','
                    {
                    char_literal41=(Token)match(input,123,FOLLOW_123_in_enumBody870); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal41_tree = (Object)adaptor.create(char_literal41);
                    adaptor.addChild(root_0, char_literal41_tree);
                    }

                    }
                    break;

            }

            // jkit/java/Java.g:250:28: ( enumBodyDeclarations )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==114) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // jkit/java/Java.g:0:0: enumBodyDeclarations
                    {
                    pushFollow(FOLLOW_enumBodyDeclarations_in_enumBody873);
                    enumBodyDeclarations42=enumBodyDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumBodyDeclarations42.getTree());

                    }
                    break;

            }

            char_literal43=(Token)match(input,127,FOLLOW_127_in_enumBody876); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal43_tree = (Object)adaptor.create(char_literal43);
            adaptor.addChild(root_0, char_literal43_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumConstants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstants"
    // jkit/java/Java.g:253:1: enumConstants : enumConstant ( ',' enumConstant )* ;
    public final JavaParser.enumConstants_return enumConstants() throws RecognitionException {
        JavaParser.enumConstants_return retval = new JavaParser.enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal45=null;
        JavaParser.enumConstant_return enumConstant44 = null;

        JavaParser.enumConstant_return enumConstant46 = null;


        Object char_literal45_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // jkit/java/Java.g:254:2: ( enumConstant ( ',' enumConstant )* )
            // jkit/java/Java.g:254:4: enumConstant ( ',' enumConstant )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_enumConstant_in_enumConstants887);
            enumConstant44=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant44.getTree());
            // jkit/java/Java.g:254:17: ( ',' enumConstant )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==123) ) {
                    int LA21_1 = input.LA(2);

                    if ( (LA21_1==Identifier||LA21_1==160) ) {
                        alt21=1;
                    }


                }


                switch (alt21) {
            	case 1 :
            	    // jkit/java/Java.g:254:18: ',' enumConstant
            	    {
            	    char_literal45=(Token)match(input,123,FOLLOW_123_in_enumConstants890); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal45_tree = (Object)adaptor.create(char_literal45);
            	    adaptor.addChild(root_0, char_literal45_tree);
            	    }
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants892);
            	    enumConstant46=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant46.getTree());

            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstant"
    // jkit/java/Java.g:257:1: enumConstant : ( annotations )? Identifier ( arguments )? ( classBody )? -> ( annotations )? Identifier ( ( arguments )? )? ( ( classBody )? )? ;
    public final JavaParser.enumConstant_return enumConstant() throws RecognitionException {
        JavaParser.enumConstant_return retval = new JavaParser.enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier48=null;
        JavaParser.annotations_return annotations47 = null;

        JavaParser.arguments_return arguments49 = null;

        JavaParser.classBody_return classBody50 = null;


        Object Identifier48_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_annotations=new RewriteRuleSubtreeStream(adaptor,"rule annotations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // jkit/java/Java.g:258:2: ( ( annotations )? Identifier ( arguments )? ( classBody )? -> ( annotations )? Identifier ( ( arguments )? )? ( ( classBody )? )? )
            // jkit/java/Java.g:258:4: ( annotations )? Identifier ( arguments )? ( classBody )?
            {
            // jkit/java/Java.g:258:4: ( annotations )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==160) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // jkit/java/Java.g:0:0: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_enumConstant906);
                    annotations47=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotations.add(annotations47.getTree());

                    }
                    break;

            }

            Identifier48=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumConstant909); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier48);

            // jkit/java/Java.g:258:28: ( arguments )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==154) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // jkit/java/Java.g:258:29: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant912);
                    arguments49=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments49.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:258:41: ( classBody )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==126) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // jkit/java/Java.g:258:42: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant917);
                    classBody50=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody50.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arguments, classBody, Identifier, annotations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 258:54: -> ( annotations )? Identifier ( ( arguments )? )? ( ( classBody )? )?
            {
                // jkit/java/Java.g:258:56: ( annotations )?
                if ( stream_annotations.hasNext() ) {
                    adaptor.addChild(root_0, stream_annotations.nextTree());

                }
                stream_annotations.reset();
                adaptor.addChild(root_0, stream_Identifier.nextNode());
                // jkit/java/Java.g:258:80: ( ( arguments )? )?
                if ( stream_arguments.hasNext() ) {
                    // jkit/java/Java.g:258:81: ( arguments )?
                    if ( stream_arguments.hasNext() ) {
                        adaptor.addChild(root_0, stream_arguments.nextTree());

                    }
                    stream_arguments.reset();

                }
                stream_arguments.reset();
                // jkit/java/Java.g:258:94: ( ( classBody )? )?
                if ( stream_classBody.hasNext() ) {
                    // jkit/java/Java.g:258:95: ( classBody )?
                    if ( stream_classBody.hasNext() ) {
                        adaptor.addChild(root_0, stream_classBody.nextTree());

                    }
                    stream_classBody.reset();

                }
                stream_classBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class enumBodyDeclarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBodyDeclarations"
    // jkit/java/Java.g:261:1: enumBodyDeclarations : ';' ( classBodyDeclaration )* ;
    public final JavaParser.enumBodyDeclarations_return enumBodyDeclarations() throws RecognitionException {
        JavaParser.enumBodyDeclarations_return retval = new JavaParser.enumBodyDeclarations_return();
        retval.start = input.LT(1);
        int enumBodyDeclarations_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal51=null;
        JavaParser.classBodyDeclaration_return classBodyDeclaration52 = null;


        Object char_literal51_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // jkit/java/Java.g:262:2: ( ';' ( classBodyDeclaration )* )
            // jkit/java/Java.g:262:4: ';' ( classBodyDeclaration )*
            {
            root_0 = (Object)adaptor.nil();

            char_literal51=(Token)match(input,114,FOLLOW_114_in_enumBodyDeclarations949); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal51_tree = (Object)adaptor.create(char_literal51);
            adaptor.addChild(root_0, char_literal51_tree);
            }
            // jkit/java/Java.g:262:8: ( classBodyDeclaration )*
            loop25:
            do {
                int alt25=2;
                alt25 = dfa25.predict(input);
                switch (alt25) {
            	case 1 :
            	    // jkit/java/Java.g:262:9: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations952);
            	    classBodyDeclaration52=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBodyDeclaration52.getTree());

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, enumBodyDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBodyDeclarations"

    public static class interfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceDeclaration"
    // jkit/java/Java.g:265:1: interfaceDeclaration : ( normalInterfaceDeclaration | annotationTypeDeclaration );
    public final JavaParser.interfaceDeclaration_return interfaceDeclaration() throws RecognitionException {
        JavaParser.interfaceDeclaration_return retval = new JavaParser.interfaceDeclaration_return();
        retval.start = input.LT(1);
        int interfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.normalInterfaceDeclaration_return normalInterfaceDeclaration53 = null;

        JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration54 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // jkit/java/Java.g:266:2: ( normalInterfaceDeclaration | annotationTypeDeclaration )
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==128) ) {
                alt26=1;
            }
            else if ( (LA26_0==160) ) {
                alt26=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }
            switch (alt26) {
                case 1 :
                    // jkit/java/Java.g:266:4: normalInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration966);
                    normalInterfaceDeclaration53=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalInterfaceDeclaration53.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:267:4: annotationTypeDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration971);
                    annotationTypeDeclaration54=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration54.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, interfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceDeclaration"

    public static class normalInterfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalInterfaceDeclaration"
    // jkit/java/Java.g:270:1: normalInterfaceDeclaration : 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody -> ^( Identifier ( typeParameters )? ) ( ^( IMPLEMENTS typeList ) )? ( interfaceBody )? ;
    public final JavaParser.normalInterfaceDeclaration_return normalInterfaceDeclaration() throws RecognitionException {
        JavaParser.normalInterfaceDeclaration_return retval = new JavaParser.normalInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int normalInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal55=null;
        Token Identifier56=null;
        Token string_literal58=null;
        JavaParser.typeParameters_return typeParameters57 = null;

        JavaParser.typeList_return typeList59 = null;

        JavaParser.interfaceBody_return interfaceBody60 = null;


        Object string_literal55_tree=null;
        Object Identifier56_tree=null;
        Object string_literal58_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // jkit/java/Java.g:271:2: ( 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody -> ^( Identifier ( typeParameters )? ) ( ^( IMPLEMENTS typeList ) )? ( interfaceBody )? )
            // jkit/java/Java.g:271:4: 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody
            {
            string_literal55=(Token)match(input,128,FOLLOW_128_in_normalInterfaceDeclaration983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(string_literal55);

            Identifier56=(Token)match(input,Identifier,FOLLOW_Identifier_in_normalInterfaceDeclaration985); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier56);

            // jkit/java/Java.g:271:27: ( typeParameters )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==122) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // jkit/java/Java.g:0:0: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration987);
                    typeParameters57=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters57.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:271:43: ( 'extends' typeList )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==120) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // jkit/java/Java.g:271:44: 'extends' typeList
                    {
                    string_literal58=(Token)match(input,120,FOLLOW_120_in_normalInterfaceDeclaration991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(string_literal58);

                    pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration993);
                    typeList59=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList59.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_normalInterfaceDeclaration997);
            interfaceBody60=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceBody.add(interfaceBody60.getTree());


            // AST REWRITE
            // elements: typeParameters, interfaceBody, typeList, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 271:79: -> ^( Identifier ( typeParameters )? ) ( ^( IMPLEMENTS typeList ) )? ( interfaceBody )?
            {
                // jkit/java/Java.g:271:82: ^( Identifier ( typeParameters )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/Java.g:271:95: ( typeParameters )?
                if ( stream_typeParameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeParameters.nextTree());

                }
                stream_typeParameters.reset();

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/Java.g:271:112: ( ^( IMPLEMENTS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:271:112: ^( IMPLEMENTS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPLEMENTS, "IMPLEMENTS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();
                // jkit/java/Java.g:271:136: ( interfaceBody )?
                if ( stream_interfaceBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_interfaceBody.nextTree());

                }
                stream_interfaceBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, normalInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalInterfaceDeclaration"

    public static class typeList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // jkit/java/Java.g:274:1: typeList : type ( ',' type )* ;
    public final JavaParser.typeList_return typeList() throws RecognitionException {
        JavaParser.typeList_return retval = new JavaParser.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal62=null;
        JavaParser.type_return type61 = null;

        JavaParser.type_return type63 = null;


        Object char_literal62_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // jkit/java/Java.g:275:2: ( type ( ',' type )* )
            // jkit/java/Java.g:275:4: type ( ',' type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList1028);
            type61=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type61.getTree());
            // jkit/java/Java.g:275:9: ( ',' type )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==123) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // jkit/java/Java.g:275:10: ',' type
            	    {
            	    char_literal62=(Token)match(input,123,FOLLOW_123_in_typeList1031); if (state.failed) return retval;
            	    pushFollow(FOLLOW_type_in_typeList1034);
            	    type63=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type63.getTree());

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class classBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // jkit/java/Java.g:278:1: classBody : '{' ( classBodyDeclaration )* '}' ;
    public final JavaParser.classBody_return classBody() throws RecognitionException {
        JavaParser.classBody_return retval = new JavaParser.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal64=null;
        Token char_literal66=null;
        JavaParser.classBodyDeclaration_return classBodyDeclaration65 = null;


        Object char_literal64_tree=null;
        Object char_literal66_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // jkit/java/Java.g:279:2: ( '{' ( classBodyDeclaration )* '}' )
            // jkit/java/Java.g:279:4: '{' ( classBodyDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal64=(Token)match(input,126,FOLLOW_126_in_classBody1048); if (state.failed) return retval;
            // jkit/java/Java.g:279:9: ( classBodyDeclaration )*
            loop30:
            do {
                int alt30=2;
                alt30 = dfa30.predict(input);
                switch (alt30) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_classBody1051);
            	    classBodyDeclaration65=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBodyDeclaration65.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);

            char_literal66=(Token)match(input,127,FOLLOW_127_in_classBody1054); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // jkit/java/Java.g:282:1: interfaceBody : '{' ( interfaceBodyDeclaration )* '}' ;
    public final JavaParser.interfaceBody_return interfaceBody() throws RecognitionException {
        JavaParser.interfaceBody_return retval = new JavaParser.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal67=null;
        Token char_literal69=null;
        JavaParser.interfaceBodyDeclaration_return interfaceBodyDeclaration68 = null;


        Object char_literal67_tree=null;
        Object char_literal69_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // jkit/java/Java.g:283:2: ( '{' ( interfaceBodyDeclaration )* '}' )
            // jkit/java/Java.g:283:4: '{' ( interfaceBodyDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal67=(Token)match(input,126,FOLLOW_126_in_interfaceBody1067); if (state.failed) return retval;
            // jkit/java/Java.g:283:9: ( interfaceBodyDeclaration )*
            loop31:
            do {
                int alt31=2;
                alt31 = dfa31.predict(input);
                switch (alt31) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: interfaceBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody1070);
            	    interfaceBodyDeclaration68=interfaceBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceBodyDeclaration68.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);

            char_literal69=(Token)match(input,127,FOLLOW_127_in_interfaceBody1073); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class classBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBodyDeclaration"
    // jkit/java/Java.g:286:1: classBodyDeclaration : ( ';' | ( 'static' )? block | ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) ) );
    public final JavaParser.classBodyDeclaration_return classBodyDeclaration() throws RecognitionException {
        JavaParser.classBodyDeclaration_return retval = new JavaParser.classBodyDeclaration_return();
        retval.start = input.LT(1);
        int classBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal70=null;
        Token string_literal71=null;
        Token string_literal77=null;
        Token Identifier78=null;
        Token Identifier80=null;
        JavaParser.block_return block72 = null;

        JavaParser.modifier_return modifier73 = null;

        JavaParser.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl74 = null;

        JavaParser.methodDeclaration_return methodDeclaration75 = null;

        JavaParser.fieldDeclaration_return fieldDeclaration76 = null;

        JavaParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest79 = null;

        JavaParser.constructorDeclaratorRest_return constructorDeclaratorRest81 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration82 = null;

        JavaParser.classDeclaration_return classDeclaration83 = null;


        Object char_literal70_tree=null;
        Object string_literal71_tree=null;
        Object string_literal77_tree=null;
        Object Identifier78_tree=null;
        Object Identifier80_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_constructorDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constructorDeclaratorRest");
        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_fieldDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule fieldDeclaration");
        RewriteRuleSubtreeStream stream_genericMethodOrConstructorDecl=new RewriteRuleSubtreeStream(adaptor,"rule genericMethodOrConstructorDecl");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        RewriteRuleSubtreeStream stream_voidMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule voidMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_methodDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaration");
        RewriteRuleSubtreeStream stream_interfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // jkit/java/Java.g:287:2: ( ';' | ( 'static' )? block | ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) ) )
            int alt35=3;
            alt35 = dfa35.predict(input);
            switch (alt35) {
                case 1 :
                    // jkit/java/Java.g:287:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal70=(Token)match(input,114,FOLLOW_114_in_classBodyDeclaration1085); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:288:4: ( 'static' )? block
                    {
                    root_0 = (Object)adaptor.nil();

                    // jkit/java/Java.g:288:4: ( 'static' )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==116) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            // jkit/java/Java.g:0:0: 'static'
                            {
                            string_literal71=(Token)match(input,116,FOLLOW_116_in_classBodyDeclaration1091); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal71_tree = (Object)adaptor.create(string_literal71);
                            adaptor.addChild(root_0, string_literal71_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_classBodyDeclaration1094);
                    block72=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block72.getTree());

                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:289:4: ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) )
                    {
                    // jkit/java/Java.g:289:4: ( modifier )*
                    loop33:
                    do {
                        int alt33=2;
                        alt33 = dfa33.predict(input);
                        switch (alt33) {
                    	case 1 :
                    	    // jkit/java/Java.g:0:0: modifier
                    	    {
                    	    pushFollow(FOLLOW_modifier_in_classBodyDeclaration1099);
                    	    modifier73=modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_modifier.add(modifier73.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop33;
                        }
                    } while (true);

                    // jkit/java/Java.g:289:14: ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) )
                    int alt34=7;
                    alt34 = dfa34.predict(input);
                    switch (alt34) {
                        case 1 :
                            // jkit/java/Java.g:290:6: genericMethodOrConstructorDecl
                            {
                            pushFollow(FOLLOW_genericMethodOrConstructorDecl_in_classBodyDeclaration1109);
                            genericMethodOrConstructorDecl74=genericMethodOrConstructorDecl();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericMethodOrConstructorDecl.add(genericMethodOrConstructorDecl74.getTree());


                            // AST REWRITE
                            // elements: genericMethodOrConstructorDecl, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 290:37: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl )
                            {
                                // jkit/java/Java.g:290:40: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:290:49: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:290:49: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:290:61: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_genericMethodOrConstructorDecl.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:291:9: methodDeclaration
                            {
                            pushFollow(FOLLOW_methodDeclaration_in_classBodyDeclaration1135);
                            methodDeclaration75=methodDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_methodDeclaration.add(methodDeclaration75.getTree());


                            // AST REWRITE
                            // elements: methodDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 291:27: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration )
                            {
                                // jkit/java/Java.g:291:30: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:291:39: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:291:39: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:291:51: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_methodDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:292:9: fieldDeclaration
                            {
                            pushFollow(FOLLOW_fieldDeclaration_in_classBodyDeclaration1161);
                            fieldDeclaration76=fieldDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldDeclaration.add(fieldDeclaration76.getTree());


                            // AST REWRITE
                            // elements: modifier, fieldDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 292:26: -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration )
                            {
                                // jkit/java/Java.g:292:29: ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FIELD, "FIELD"), root_1);

                                // jkit/java/Java.g:292:37: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:292:37: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:292:49: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_fieldDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // jkit/java/Java.g:293:8: 'void' Identifier voidMethodDeclaratorRest
                            {
                            string_literal77=(Token)match(input,129,FOLLOW_129_in_classBodyDeclaration1186); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_129.add(string_literal77);

                            Identifier78=(Token)match(input,Identifier,FOLLOW_Identifier_in_classBodyDeclaration1188); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier78);

                            pushFollow(FOLLOW_voidMethodDeclaratorRest_in_classBodyDeclaration1190);
                            voidMethodDeclaratorRest79=voidMethodDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_voidMethodDeclaratorRest.add(voidMethodDeclaratorRest79.getTree());


                            // AST REWRITE
                            // elements: Identifier, voidMethodDeclaratorRest, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 293:51: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? )
                            {
                                // jkit/java/Java.g:293:54: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:293:63: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:293:63: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:293:75: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:293:98: ^( TYPE VOID )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, (Object)adaptor.create(VOID, "VOID"));

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:293:111: ( voidMethodDeclaratorRest )?
                                if ( stream_voidMethodDeclaratorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_voidMethodDeclaratorRest.nextTree());

                                }
                                stream_voidMethodDeclaratorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // jkit/java/Java.g:294:8: Identifier constructorDeclaratorRest
                            {
                            Identifier80=(Token)match(input,Identifier,FOLLOW_Identifier_in_classBodyDeclaration1224); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier80);

                            pushFollow(FOLLOW_constructorDeclaratorRest_in_classBodyDeclaration1226);
                            constructorDeclaratorRest81=constructorDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constructorDeclaratorRest.add(constructorDeclaratorRest81.getTree());


                            // AST REWRITE
                            // elements: constructorDeclaratorRest, Identifier, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 294:45: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) constructorDeclaratorRest )
                            {
                                // jkit/java/Java.g:294:48: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) constructorDeclaratorRest )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:294:57: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:294:57: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:294:69: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:294:92: ^( TYPE VOID )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, (Object)adaptor.create(VOID, "VOID"));

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_constructorDeclaratorRest.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 6 :
                            // jkit/java/Java.g:295:8: interfaceDeclaration
                            {
                            pushFollow(FOLLOW_interfaceDeclaration_in_classBodyDeclaration1259);
                            interfaceDeclaration82=interfaceDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceDeclaration.add(interfaceDeclaration82.getTree());


                            // AST REWRITE
                            // elements: modifier, interfaceDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 295:29: -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                            {
                                // jkit/java/Java.g:295:32: ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                                // jkit/java/Java.g:295:44: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:295:44: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:295:56: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_interfaceDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 7 :
                            // jkit/java/Java.g:296:8: classDeclaration
                            {
                            pushFollow(FOLLOW_classDeclaration_in_classBodyDeclaration1284);
                            classDeclaration83=classDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classDeclaration.add(classDeclaration83.getTree());


                            // AST REWRITE
                            // elements: classDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 296:25: -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                            {
                                // jkit/java/Java.g:296:28: ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CLASS, "CLASS"), root_1);

                                // jkit/java/Java.g:296:36: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:296:36: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:296:48: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_classDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, classBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBodyDeclaration"

    public static class genericMethodOrConstructorDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorDecl"
    // jkit/java/Java.g:300:1: genericMethodOrConstructorDecl : typeParameters genericMethodOrConstructorRest ;
    public final JavaParser.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl() throws RecognitionException {
        JavaParser.genericMethodOrConstructorDecl_return retval = new JavaParser.genericMethodOrConstructorDecl_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorDecl_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.typeParameters_return typeParameters84 = null;

        JavaParser.genericMethodOrConstructorRest_return genericMethodOrConstructorRest85 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // jkit/java/Java.g:301:2: ( typeParameters genericMethodOrConstructorRest )
            // jkit/java/Java.g:301:4: typeParameters genericMethodOrConstructorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeParameters_in_genericMethodOrConstructorDecl1318);
            typeParameters84=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameters84.getTree());
            pushFollow(FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl1320);
            genericMethodOrConstructorRest85=genericMethodOrConstructorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, genericMethodOrConstructorRest85.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, genericMethodOrConstructorDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorDecl"

    public static class genericMethodOrConstructorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorRest"
    // jkit/java/Java.g:304:1: genericMethodOrConstructorRest : ( type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? | 'void' Identifier methodDeclaratorRest -> Identifier ^( TYPE VOID ) ( methodDeclaratorRest )? | Identifier constructorDeclaratorRest -> Identifier ^( TYPE VOID ) constructorDeclaratorRest );
    public final JavaParser.genericMethodOrConstructorRest_return genericMethodOrConstructorRest() throws RecognitionException {
        JavaParser.genericMethodOrConstructorRest_return retval = new JavaParser.genericMethodOrConstructorRest_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorRest_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier87=null;
        Token string_literal89=null;
        Token Identifier90=null;
        Token Identifier92=null;
        JavaParser.type_return type86 = null;

        JavaParser.methodDeclaratorRest_return methodDeclaratorRest88 = null;

        JavaParser.methodDeclaratorRest_return methodDeclaratorRest91 = null;

        JavaParser.constructorDeclaratorRest_return constructorDeclaratorRest93 = null;


        Object Identifier87_tree=null;
        Object string_literal89_tree=null;
        Object Identifier90_tree=null;
        Object Identifier92_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_constructorDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constructorDeclaratorRest");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_methodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // jkit/java/Java.g:305:2: ( type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? | 'void' Identifier methodDeclaratorRest -> Identifier ^( TYPE VOID ) ( methodDeclaratorRest )? | Identifier constructorDeclaratorRest -> Identifier ^( TYPE VOID ) constructorDeclaratorRest )
            int alt36=3;
            switch ( input.LA(1) ) {
            case Identifier:
                {
                int LA36_1 = input.LA(2);

                if ( (LA36_1==Identifier||LA36_1==117||LA36_1==122||LA36_1==131) ) {
                    alt36=1;
                }
                else if ( (LA36_1==154) ) {
                    alt36=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 1, input);

                    throw nvae;
                }
                }
                break;
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
                {
                alt36=1;
                }
                break;
            case 129:
                {
                alt36=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }

            switch (alt36) {
                case 1 :
                    // jkit/java/Java.g:305:4: type Identifier methodDeclaratorRest
                    {
                    pushFollow(FOLLOW_type_in_genericMethodOrConstructorRest1332);
                    type86=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type86.getTree());
                    Identifier87=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1334); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier87);

                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1336);
                    methodDeclaratorRest88=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest88.getTree());


                    // AST REWRITE
                    // elements: type, Identifier, methodDeclaratorRest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 305:41: -> Identifier type ( methodDeclaratorRest )?
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        adaptor.addChild(root_0, stream_type.nextTree());
                        // jkit/java/Java.g:305:60: ( methodDeclaratorRest )?
                        if ( stream_methodDeclaratorRest.hasNext() ) {
                            adaptor.addChild(root_0, stream_methodDeclaratorRest.nextTree());

                        }
                        stream_methodDeclaratorRest.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:306:4: 'void' Identifier methodDeclaratorRest
                    {
                    string_literal89=(Token)match(input,129,FOLLOW_129_in_genericMethodOrConstructorRest1350); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_129.add(string_literal89);

                    Identifier90=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1352); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier90);

                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1354);
                    methodDeclaratorRest91=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest91.getTree());


                    // AST REWRITE
                    // elements: methodDeclaratorRest, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 306:43: -> Identifier ^( TYPE VOID ) ( methodDeclaratorRest )?
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/Java.g:306:57: ^( TYPE VOID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(VOID, "VOID"));

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/Java.g:306:70: ( methodDeclaratorRest )?
                        if ( stream_methodDeclaratorRest.hasNext() ) {
                            adaptor.addChild(root_0, stream_methodDeclaratorRest.nextTree());

                        }
                        stream_methodDeclaratorRest.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:307:4: Identifier constructorDeclaratorRest
                    {
                    Identifier92=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1372); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier92);

                    pushFollow(FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest1374);
                    constructorDeclaratorRest93=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constructorDeclaratorRest.add(constructorDeclaratorRest93.getTree());


                    // AST REWRITE
                    // elements: Identifier, constructorDeclaratorRest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 307:41: -> Identifier ^( TYPE VOID ) constructorDeclaratorRest
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/Java.g:307:55: ^( TYPE VOID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(VOID, "VOID"));

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_constructorDeclaratorRest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, genericMethodOrConstructorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorRest"

    public static class methodDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaration"
    // jkit/java/Java.g:310:1: methodDeclaration : type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? ;
    public final JavaParser.methodDeclaration_return methodDeclaration() throws RecognitionException {
        JavaParser.methodDeclaration_return retval = new JavaParser.methodDeclaration_return();
        retval.start = input.LT(1);
        int methodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier95=null;
        JavaParser.type_return type94 = null;

        JavaParser.methodDeclaratorRest_return methodDeclaratorRest96 = null;


        Object Identifier95_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_methodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // jkit/java/Java.g:311:2: ( type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? )
            // jkit/java/Java.g:311:4: type Identifier methodDeclaratorRest
            {
            pushFollow(FOLLOW_type_in_methodDeclaration1397);
            type94=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type94.getTree());
            Identifier95=(Token)match(input,Identifier,FOLLOW_Identifier_in_methodDeclaration1399); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier95);

            pushFollow(FOLLOW_methodDeclaratorRest_in_methodDeclaration1401);
            methodDeclaratorRest96=methodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest96.getTree());


            // AST REWRITE
            // elements: type, methodDeclaratorRest, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 311:41: -> Identifier type ( methodDeclaratorRest )?
            {
                adaptor.addChild(root_0, stream_Identifier.nextNode());
                adaptor.addChild(root_0, stream_type.nextTree());
                // jkit/java/Java.g:311:60: ( methodDeclaratorRest )?
                if ( stream_methodDeclaratorRest.hasNext() ) {
                    adaptor.addChild(root_0, stream_methodDeclaratorRest.nextTree());

                }
                stream_methodDeclaratorRest.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, methodDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodDeclaration"

    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fieldDeclaration"
    // jkit/java/Java.g:314:1: fieldDeclaration : type variableDeclarators ';' -> type variableDeclarators ;
    public final JavaParser.fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        JavaParser.fieldDeclaration_return retval = new JavaParser.fieldDeclaration_return();
        retval.start = input.LT(1);
        int fieldDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal99=null;
        JavaParser.type_return type97 = null;

        JavaParser.variableDeclarators_return variableDeclarators98 = null;


        Object char_literal99_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // jkit/java/Java.g:315:2: ( type variableDeclarators ';' -> type variableDeclarators )
            // jkit/java/Java.g:315:4: type variableDeclarators ';'
            {
            pushFollow(FOLLOW_type_in_fieldDeclaration1421);
            type97=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type97.getTree());
            pushFollow(FOLLOW_variableDeclarators_in_fieldDeclaration1423);
            variableDeclarators98=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarators.add(variableDeclarators98.getTree());
            char_literal99=(Token)match(input,114,FOLLOW_114_in_fieldDeclaration1425); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(char_literal99);



            // AST REWRITE
            // elements: variableDeclarators, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 315:33: -> type variableDeclarators
            {
                adaptor.addChild(root_0, stream_type.nextTree());
                adaptor.addChild(root_0, stream_variableDeclarators.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, fieldDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fieldDeclaration"

    public static class interfaceBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBodyDeclaration"
    // jkit/java/Java.g:318:1: interfaceBodyDeclaration : ( ( modifier )* ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) ) | ';' );
    public final JavaParser.interfaceBodyDeclaration_return interfaceBodyDeclaration() throws RecognitionException {
        JavaParser.interfaceBodyDeclaration_return retval = new JavaParser.interfaceBodyDeclaration_return();
        retval.start = input.LT(1);
        int interfaceBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier103=null;
        Token string_literal106=null;
        Token Identifier107=null;
        Token char_literal111=null;
        JavaParser.modifier_return modifier100 = null;

        JavaParser.constantDeclaration_return constantDeclaration101 = null;

        JavaParser.type_return type102 = null;

        JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest104 = null;

        JavaParser.interfaceGenericMethodDecl_return interfaceGenericMethodDecl105 = null;

        JavaParser.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest108 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration109 = null;

        JavaParser.classDeclaration_return classDeclaration110 = null;


        Object Identifier103_tree=null;
        Object string_literal106_tree=null;
        Object Identifier107_tree=null;
        Object char_literal111_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_interfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule interfaceMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_voidInterfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule voidInterfaceMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_constantDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclaration");
        RewriteRuleSubtreeStream stream_interfaceGenericMethodDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceGenericMethodDecl");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        RewriteRuleSubtreeStream stream_interfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // jkit/java/Java.g:319:2: ( ( modifier )* ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) ) | ';' )
            int alt39=2;
            alt39 = dfa39.predict(input);
            switch (alt39) {
                case 1 :
                    // jkit/java/Java.g:319:4: ( modifier )* ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) )
                    {
                    // jkit/java/Java.g:319:4: ( modifier )*
                    loop37:
                    do {
                        int alt37=2;
                        alt37 = dfa37.predict(input);
                        switch (alt37) {
                    	case 1 :
                    	    // jkit/java/Java.g:0:0: modifier
                    	    {
                    	    pushFollow(FOLLOW_modifier_in_interfaceBodyDeclaration1444);
                    	    modifier100=modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_modifier.add(modifier100.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop37;
                        }
                    } while (true);

                    // jkit/java/Java.g:319:14: ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) )
                    int alt38=6;
                    alt38 = dfa38.predict(input);
                    switch (alt38) {
                        case 1 :
                            // jkit/java/Java.g:320:3: constantDeclaration
                            {
                            pushFollow(FOLLOW_constantDeclaration_in_interfaceBodyDeclaration1451);
                            constantDeclaration101=constantDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constantDeclaration.add(constantDeclaration101.getTree());


                            // AST REWRITE
                            // elements: constantDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 320:23: -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration )
                            {
                                // jkit/java/Java.g:320:26: ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FIELD, "FIELD"), root_1);

                                // jkit/java/Java.g:320:34: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:320:34: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:320:46: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_constantDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:321:5: type Identifier interfaceMethodDeclaratorRest
                            {
                            pushFollow(FOLLOW_type_in_interfaceBodyDeclaration1473);
                            type102=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type102.getTree());
                            Identifier103=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceBodyDeclaration1475); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier103);

                            pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1477);
                            interfaceMethodDeclaratorRest104=interfaceMethodDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest104.getTree());


                            // AST REWRITE
                            // elements: interfaceMethodDeclaratorRest, type, Identifier, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 321:51: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? )
                            {
                                // jkit/java/Java.g:321:54: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:321:63: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:321:63: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:321:75: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                // jkit/java/Java.g:321:103: ( interfaceMethodDeclaratorRest )?
                                if ( stream_interfaceMethodDeclaratorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_interfaceMethodDeclaratorRest.nextTree());

                                }
                                stream_interfaceMethodDeclaratorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:322:5: interfaceGenericMethodDecl
                            {
                            pushFollow(FOLLOW_interfaceGenericMethodDecl_in_interfaceBodyDeclaration1504);
                            interfaceGenericMethodDecl105=interfaceGenericMethodDecl();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceGenericMethodDecl.add(interfaceGenericMethodDecl105.getTree());


                            // AST REWRITE
                            // elements: modifier, interfaceGenericMethodDecl
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 322:32: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl )
                            {
                                // jkit/java/Java.g:322:35: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:322:44: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:322:44: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:322:56: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_interfaceGenericMethodDecl.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // jkit/java/Java.g:323:5: 'void' Identifier voidInterfaceMethodDeclaratorRest
                            {
                            string_literal106=(Token)match(input,129,FOLLOW_129_in_interfaceBodyDeclaration1526); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_129.add(string_literal106);

                            Identifier107=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceBodyDeclaration1528); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier107);

                            pushFollow(FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1530);
                            voidInterfaceMethodDeclaratorRest108=voidInterfaceMethodDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_voidInterfaceMethodDeclaratorRest.add(voidInterfaceMethodDeclaratorRest108.getTree());


                            // AST REWRITE
                            // elements: Identifier, modifier, voidInterfaceMethodDeclaratorRest
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 323:57: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? )
                            {
                                // jkit/java/Java.g:323:60: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:323:69: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:323:69: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:323:81: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:323:104: ^( TYPE VOID )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, (Object)adaptor.create(VOID, "VOID"));

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:323:117: ( voidInterfaceMethodDeclaratorRest )?
                                if ( stream_voidInterfaceMethodDeclaratorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_voidInterfaceMethodDeclaratorRest.nextTree());

                                }
                                stream_voidInterfaceMethodDeclaratorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // jkit/java/Java.g:324:5: interfaceDeclaration
                            {
                            pushFollow(FOLLOW_interfaceDeclaration_in_interfaceBodyDeclaration1561);
                            interfaceDeclaration109=interfaceDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceDeclaration.add(interfaceDeclaration109.getTree());


                            // AST REWRITE
                            // elements: interfaceDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 324:26: -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                            {
                                // jkit/java/Java.g:324:29: ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                                // jkit/java/Java.g:324:41: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:324:41: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:324:53: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_interfaceDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 6 :
                            // jkit/java/Java.g:325:5: classDeclaration
                            {
                            pushFollow(FOLLOW_classDeclaration_in_interfaceBodyDeclaration1584);
                            classDeclaration110=classDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classDeclaration.add(classDeclaration110.getTree());


                            // AST REWRITE
                            // elements: classDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 325:22: -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                            {
                                // jkit/java/Java.g:325:25: ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CLASS, "CLASS"), root_1);

                                // jkit/java/Java.g:325:33: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:325:33: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:325:45: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_classDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:327:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal111=(Token)match(input,114,FOLLOW_114_in_interfaceBodyDeclaration1609); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, interfaceBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBodyDeclaration"

    public static class methodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaratorRest"
    // jkit/java/Java.g:330:1: methodDeclaratorRest : formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ) ;
    public final JavaParser.methodDeclaratorRest_return methodDeclaratorRest() throws RecognitionException {
        JavaParser.methodDeclaratorRest_return retval = new JavaParser.methodDeclaratorRest_return();
        retval.start = input.LT(1);
        int methodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal113=null;
        Token char_literal116=null;
        JavaParser.formalParameters_return formalParameters112 = null;

        JavaParser.typeList_return typeList114 = null;

        JavaParser.methodBody_return methodBody115 = null;


        Object string_literal113_tree=null;
        Object char_literal116_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // jkit/java/Java.g:331:2: ( formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ) )
            // jkit/java/Java.g:331:4: formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            {
            pushFollow(FOLLOW_formalParameters_in_methodDeclaratorRest1623);
            formalParameters112=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters112.getTree());
            // jkit/java/Java.g:332:9: ( 'throws' typeList )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==130) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // jkit/java/Java.g:332:10: 'throws' typeList
                    {
                    string_literal113=(Token)match(input,130,FOLLOW_130_in_methodDeclaratorRest1635); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_130.add(string_literal113);

                    pushFollow(FOLLOW_typeList_in_methodDeclaratorRest1637);
                    typeList114=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList114.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:333:9: ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==126) ) {
                alt41=1;
            }
            else if ( (LA41_0==114) ) {
                alt41=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }
            switch (alt41) {
                case 1 :
                    // jkit/java/Java.g:333:13: methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_methodDeclaratorRest1653);
                    methodBody115=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodBody.add(methodBody115.getTree());


                    // AST REWRITE
                    // elements: typeList, methodBody, formalParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 333:24: -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody
                    {
                        // jkit/java/Java.g:333:27: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();
                        // jkit/java/Java.g:333:45: ( ^( THROWS typeList ) )?
                        if ( stream_typeList.hasNext() ) {
                            // jkit/java/Java.g:333:45: ^( THROWS typeList )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                            adaptor.addChild(root_1, stream_typeList.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_typeList.reset();
                        adaptor.addChild(root_0, stream_methodBody.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:334:13: ';'
                    {
                    char_literal116=(Token)match(input,114,FOLLOW_114_in_methodDeclaratorRest1681); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_114.add(char_literal116);



                    // AST REWRITE
                    // elements: typeList, formalParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 334:17: -> ( formalParameters )? ( ^( THROWS typeList ) )?
                    {
                        // jkit/java/Java.g:334:20: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();
                        // jkit/java/Java.g:334:38: ( ^( THROWS typeList ) )?
                        if ( stream_typeList.hasNext() ) {
                            // jkit/java/Java.g:334:38: ^( THROWS typeList )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                            adaptor.addChild(root_1, stream_typeList.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_typeList.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, methodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodDeclaratorRest"

    public static class voidMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidMethodDeclaratorRest"
    // jkit/java/Java.g:338:1: voidMethodDeclaratorRest : formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ) ;
    public final JavaParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest() throws RecognitionException {
        JavaParser.voidMethodDeclaratorRest_return retval = new JavaParser.voidMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal118=null;
        Token char_literal121=null;
        JavaParser.formalParameters_return formalParameters117 = null;

        JavaParser.typeList_return typeList119 = null;

        JavaParser.methodBody_return methodBody120 = null;


        Object string_literal118_tree=null;
        Object char_literal121_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // jkit/java/Java.g:339:2: ( formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ) )
            // jkit/java/Java.g:339:4: formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            {
            pushFollow(FOLLOW_formalParameters_in_voidMethodDeclaratorRest1715);
            formalParameters117=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters117.getTree());
            // jkit/java/Java.g:339:21: ( 'throws' typeList )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==130) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // jkit/java/Java.g:339:22: 'throws' typeList
                    {
                    string_literal118=(Token)match(input,130,FOLLOW_130_in_voidMethodDeclaratorRest1718); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_130.add(string_literal118);

                    pushFollow(FOLLOW_typeList_in_voidMethodDeclaratorRest1720);
                    typeList119=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList119.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:340:9: ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==126) ) {
                alt43=1;
            }
            else if ( (LA43_0==114) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    // jkit/java/Java.g:340:13: methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_voidMethodDeclaratorRest1736);
                    methodBody120=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodBody.add(methodBody120.getTree());


                    // AST REWRITE
                    // elements: methodBody, typeList, formalParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 340:24: -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody
                    {
                        // jkit/java/Java.g:340:27: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();
                        // jkit/java/Java.g:340:45: ( ^( THROWS typeList ) )?
                        if ( stream_typeList.hasNext() ) {
                            // jkit/java/Java.g:340:45: ^( THROWS typeList )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                            adaptor.addChild(root_1, stream_typeList.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_typeList.reset();
                        adaptor.addChild(root_0, stream_methodBody.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:341:13: ';'
                    {
                    char_literal121=(Token)match(input,114,FOLLOW_114_in_voidMethodDeclaratorRest1764); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_114.add(char_literal121);



                    // AST REWRITE
                    // elements: formalParameters, typeList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 341:17: -> ( formalParameters )? ( ^( THROWS typeList ) )?
                    {
                        // jkit/java/Java.g:341:20: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();
                        // jkit/java/Java.g:341:38: ( ^( THROWS typeList ) )?
                        if ( stream_typeList.hasNext() ) {
                            // jkit/java/Java.g:341:38: ^( THROWS typeList )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                            adaptor.addChild(root_1, stream_typeList.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_typeList.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, voidMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidMethodDeclaratorRest"

    public static class interfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodDeclaratorRest"
    // jkit/java/Java.g:345:1: interfaceMethodDeclaratorRest : formalParameters ( 'throws' typeList )? ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ;
    public final JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest() throws RecognitionException {
        JavaParser.interfaceMethodDeclaratorRest_return retval = new JavaParser.interfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int interfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal123=null;
        Token char_literal125=null;
        JavaParser.formalParameters_return formalParameters122 = null;

        JavaParser.typeList_return typeList124 = null;


        Object string_literal123_tree=null;
        Object char_literal125_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // jkit/java/Java.g:346:2: ( formalParameters ( 'throws' typeList )? ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            // jkit/java/Java.g:346:4: formalParameters ( 'throws' typeList )? ';'
            {
            pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest1798);
            formalParameters122=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters122.getTree());
            // jkit/java/Java.g:346:21: ( 'throws' typeList )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==130) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // jkit/java/Java.g:346:22: 'throws' typeList
                    {
                    string_literal123=(Token)match(input,130,FOLLOW_130_in_interfaceMethodDeclaratorRest1801); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_130.add(string_literal123);

                    pushFollow(FOLLOW_typeList_in_interfaceMethodDeclaratorRest1803);
                    typeList124=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList124.getTree());

                    }
                    break;

            }

            char_literal125=(Token)match(input,114,FOLLOW_114_in_interfaceMethodDeclaratorRest1807); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(char_literal125);



            // AST REWRITE
            // elements: typeList, formalParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 346:46: -> ( formalParameters )? ( ^( THROWS typeList ) )?
            {
                // jkit/java/Java.g:346:49: ( formalParameters )?
                if ( stream_formalParameters.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameters.nextTree());

                }
                stream_formalParameters.reset();
                // jkit/java/Java.g:346:67: ( ^( THROWS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:346:67: ^( THROWS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, interfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodDeclaratorRest"

    public static class interfaceGenericMethodDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceGenericMethodDecl"
    // jkit/java/Java.g:349:1: interfaceGenericMethodDecl : typeParameters ( type Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier type interfaceMethodDeclaratorRest | 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest ) ;
    public final JavaParser.interfaceGenericMethodDecl_return interfaceGenericMethodDecl() throws RecognitionException {
        JavaParser.interfaceGenericMethodDecl_return retval = new JavaParser.interfaceGenericMethodDecl_return();
        retval.start = input.LT(1);
        int interfaceGenericMethodDecl_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier128=null;
        Token string_literal130=null;
        Token Identifier131=null;
        JavaParser.typeParameters_return typeParameters126 = null;

        JavaParser.type_return type127 = null;

        JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest129 = null;

        JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest132 = null;


        Object Identifier128_tree=null;
        Object string_literal130_tree=null;
        Object Identifier131_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_interfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule interfaceMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // jkit/java/Java.g:350:2: ( typeParameters ( type Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier type interfaceMethodDeclaratorRest | 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest ) )
            // jkit/java/Java.g:350:4: typeParameters ( type Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier type interfaceMethodDeclaratorRest | 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest )
            {
            pushFollow(FOLLOW_typeParameters_in_interfaceGenericMethodDecl1831);
            typeParameters126=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters126.getTree());
            // jkit/java/Java.g:351:3: ( type Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier type interfaceMethodDeclaratorRest | 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==Identifier||(LA45_0>=144 && LA45_0<=151)) ) {
                alt45=1;
            }
            else if ( (LA45_0==129) ) {
                alt45=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }
            switch (alt45) {
                case 1 :
                    // jkit/java/Java.g:351:4: type Identifier interfaceMethodDeclaratorRest
                    {
                    pushFollow(FOLLOW_type_in_interfaceGenericMethodDecl1837);
                    type127=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type127.getTree());
                    Identifier128=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceGenericMethodDecl1839); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier128);

                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl1841);
                    interfaceMethodDeclaratorRest129=interfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest129.getTree());


                    // AST REWRITE
                    // elements: typeParameters, interfaceMethodDeclaratorRest, type, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 351:50: -> typeParameters Identifier type interfaceMethodDeclaratorRest
                    {
                        adaptor.addChild(root_0, stream_typeParameters.nextTree());
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        adaptor.addChild(root_0, stream_type.nextTree());
                        adaptor.addChild(root_0, stream_interfaceMethodDeclaratorRest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:352:5: 'void' Identifier interfaceMethodDeclaratorRest
                    {
                    string_literal130=(Token)match(input,129,FOLLOW_129_in_interfaceGenericMethodDecl1857); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_129.add(string_literal130);

                    Identifier131=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceGenericMethodDecl1859); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier131);

                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl1861);
                    interfaceMethodDeclaratorRest132=interfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest132.getTree());


                    // AST REWRITE
                    // elements: interfaceMethodDeclaratorRest, Identifier, typeParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 352:53: -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest
                    {
                        adaptor.addChild(root_0, stream_typeParameters.nextTree());
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/Java.g:352:82: ^( TYPE VOID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(VOID, "VOID"));

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_interfaceMethodDeclaratorRest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, interfaceGenericMethodDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceGenericMethodDecl"

    public static class voidInterfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidInterfaceMethodDeclaratorRest"
    // jkit/java/Java.g:356:1: voidInterfaceMethodDeclaratorRest : formalParameters ( 'throws' typeList )? ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ;
    public final JavaParser.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest() throws RecognitionException {
        JavaParser.voidInterfaceMethodDeclaratorRest_return retval = new JavaParser.voidInterfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidInterfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal134=null;
        Token char_literal136=null;
        JavaParser.formalParameters_return formalParameters133 = null;

        JavaParser.typeList_return typeList135 = null;


        Object string_literal134_tree=null;
        Object char_literal136_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // jkit/java/Java.g:357:2: ( formalParameters ( 'throws' typeList )? ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            // jkit/java/Java.g:357:4: formalParameters ( 'throws' typeList )? ';'
            {
            pushFollow(FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest1891);
            formalParameters133=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters133.getTree());
            // jkit/java/Java.g:357:21: ( 'throws' typeList )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==130) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // jkit/java/Java.g:357:22: 'throws' typeList
                    {
                    string_literal134=(Token)match(input,130,FOLLOW_130_in_voidInterfaceMethodDeclaratorRest1894); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_130.add(string_literal134);

                    pushFollow(FOLLOW_typeList_in_voidInterfaceMethodDeclaratorRest1896);
                    typeList135=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList135.getTree());

                    }
                    break;

            }

            char_literal136=(Token)match(input,114,FOLLOW_114_in_voidInterfaceMethodDeclaratorRest1900); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(char_literal136);



            // AST REWRITE
            // elements: formalParameters, typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 357:46: -> ( formalParameters )? ( ^( THROWS typeList ) )?
            {
                // jkit/java/Java.g:357:49: ( formalParameters )?
                if ( stream_formalParameters.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameters.nextTree());

                }
                stream_formalParameters.reset();
                // jkit/java/Java.g:357:67: ( ^( THROWS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:357:67: ^( THROWS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, voidInterfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidInterfaceMethodDeclaratorRest"

    public static class constructorDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorDeclaratorRest"
    // jkit/java/Java.g:360:1: constructorDeclaratorRest : formalParameters ( 'throws' typeList )? methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody ;
    public final JavaParser.constructorDeclaratorRest_return constructorDeclaratorRest() throws RecognitionException {
        JavaParser.constructorDeclaratorRest_return retval = new JavaParser.constructorDeclaratorRest_return();
        retval.start = input.LT(1);
        int constructorDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal138=null;
        JavaParser.formalParameters_return formalParameters137 = null;

        JavaParser.typeList_return typeList139 = null;

        JavaParser.methodBody_return methodBody140 = null;


        Object string_literal138_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // jkit/java/Java.g:361:2: ( formalParameters ( 'throws' typeList )? methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody )
            // jkit/java/Java.g:361:4: formalParameters ( 'throws' typeList )? methodBody
            {
            pushFollow(FOLLOW_formalParameters_in_constructorDeclaratorRest1924);
            formalParameters137=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters137.getTree());
            // jkit/java/Java.g:361:21: ( 'throws' typeList )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==130) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // jkit/java/Java.g:361:22: 'throws' typeList
                    {
                    string_literal138=(Token)match(input,130,FOLLOW_130_in_constructorDeclaratorRest1927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_130.add(string_literal138);

                    pushFollow(FOLLOW_typeList_in_constructorDeclaratorRest1929);
                    typeList139=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList139.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_methodBody_in_constructorDeclaratorRest1933);
            methodBody140=methodBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_methodBody.add(methodBody140.getTree());


            // AST REWRITE
            // elements: formalParameters, methodBody, typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 361:53: -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody
            {
                // jkit/java/Java.g:361:56: ( formalParameters )?
                if ( stream_formalParameters.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameters.nextTree());

                }
                stream_formalParameters.reset();
                // jkit/java/Java.g:361:74: ( ^( THROWS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:361:74: ^( THROWS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();
                adaptor.addChild(root_0, stream_methodBody.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, constructorDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructorDeclaratorRest"

    public static class variableDeclarators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarators"
    // jkit/java/Java.g:365:1: variableDeclarators : i+= variableDeclarator ( ',' i+= variableDeclarator )* -> ( $i)+ ;
    public final JavaParser.variableDeclarators_return variableDeclarators() throws RecognitionException {
        JavaParser.variableDeclarators_return retval = new JavaParser.variableDeclarators_return();
        retval.start = input.LT(1);
        int variableDeclarators_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal141=null;
        List list_i=null;
        JavaParser.variableDeclarator_return i = null;
        Object char_literal141_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleSubtreeStream stream_variableDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // jkit/java/Java.g:366:2: (i+= variableDeclarator ( ',' i+= variableDeclarator )* -> ( $i)+ )
            // jkit/java/Java.g:366:4: i+= variableDeclarator ( ',' i+= variableDeclarator )*
            {
            pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators1962);
            i=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarator.add(i.getTree());
            if (list_i==null) list_i=new ArrayList();
            list_i.add(i.getTree());

            // jkit/java/Java.g:366:26: ( ',' i+= variableDeclarator )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==123) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // jkit/java/Java.g:366:27: ',' i+= variableDeclarator
            	    {
            	    char_literal141=(Token)match(input,123,FOLLOW_123_in_variableDeclarators1965); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_123.add(char_literal141);

            	    pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators1969);
            	    i=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableDeclarator.add(i.getTree());
            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i.getTree());


            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: i
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
            root_0 = (Object)adaptor.nil();
            // 366:55: -> ( $i)+
            {
                if ( !(stream_i.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_0, stream_i.nextTree());

                }
                stream_i.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, variableDeclarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarators"

    public static class variableDeclarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarator"
    // jkit/java/Java.g:369:1: variableDeclarator : Identifier variableDeclaratorRest -> ^( Identifier ( variableDeclaratorRest )? ) ;
    public final JavaParser.variableDeclarator_return variableDeclarator() throws RecognitionException {
        JavaParser.variableDeclarator_return retval = new JavaParser.variableDeclarator_return();
        retval.start = input.LT(1);
        int variableDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier142=null;
        JavaParser.variableDeclaratorRest_return variableDeclaratorRest143 = null;


        Object Identifier142_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_variableDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // jkit/java/Java.g:370:2: ( Identifier variableDeclaratorRest -> ^( Identifier ( variableDeclaratorRest )? ) )
            // jkit/java/Java.g:370:4: Identifier variableDeclaratorRest
            {
            Identifier142=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclarator1988); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier142);

            pushFollow(FOLLOW_variableDeclaratorRest_in_variableDeclarator1990);
            variableDeclaratorRest143=variableDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorRest.add(variableDeclaratorRest143.getTree());


            // AST REWRITE
            // elements: Identifier, variableDeclaratorRest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 370:38: -> ^( Identifier ( variableDeclaratorRest )? )
            {
                // jkit/java/Java.g:370:41: ^( Identifier ( variableDeclaratorRest )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/Java.g:370:54: ( variableDeclaratorRest )?
                if ( stream_variableDeclaratorRest.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableDeclaratorRest.nextTree());

                }
                stream_variableDeclaratorRest.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, variableDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarator"

    public static class variableDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorRest"
    // jkit/java/Java.g:373:1: variableDeclaratorRest : ( ( '[' ']' )+ ( '=' variableInitializer )? -> ( '[' )+ ( variableInitializer )? | '=' variableInitializer -> variableInitializer | );
    public final JavaParser.variableDeclaratorRest_return variableDeclaratorRest() throws RecognitionException {
        JavaParser.variableDeclaratorRest_return retval = new JavaParser.variableDeclaratorRest_return();
        retval.start = input.LT(1);
        int variableDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal144=null;
        Token char_literal145=null;
        Token char_literal146=null;
        Token char_literal148=null;
        JavaParser.variableInitializer_return variableInitializer147 = null;

        JavaParser.variableInitializer_return variableInitializer149 = null;


        Object char_literal144_tree=null;
        Object char_literal145_tree=null;
        Object char_literal146_tree=null;
        Object char_literal148_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // jkit/java/Java.g:374:2: ( ( '[' ']' )+ ( '=' variableInitializer )? -> ( '[' )+ ( variableInitializer )? | '=' variableInitializer -> variableInitializer | )
            int alt51=3;
            switch ( input.LA(1) ) {
            case 131:
                {
                alt51=1;
                }
                break;
            case 133:
                {
                alt51=2;
                }
                break;
            case EOF:
            case 114:
            case 123:
                {
                alt51=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }

            switch (alt51) {
                case 1 :
                    // jkit/java/Java.g:374:4: ( '[' ']' )+ ( '=' variableInitializer )?
                    {
                    // jkit/java/Java.g:374:4: ( '[' ']' )+
                    int cnt49=0;
                    loop49:
                    do {
                        int alt49=2;
                        int LA49_0 = input.LA(1);

                        if ( (LA49_0==131) ) {
                            alt49=1;
                        }


                        switch (alt49) {
                    	case 1 :
                    	    // jkit/java/Java.g:374:5: '[' ']'
                    	    {
                    	    char_literal144=(Token)match(input,131,FOLLOW_131_in_variableDeclaratorRest2012); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_131.add(char_literal144);

                    	    char_literal145=(Token)match(input,132,FOLLOW_132_in_variableDeclaratorRest2014); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_132.add(char_literal145);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt49 >= 1 ) break loop49;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(49, input);
                                throw eee;
                        }
                        cnt49++;
                    } while (true);

                    // jkit/java/Java.g:374:15: ( '=' variableInitializer )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==133) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // jkit/java/Java.g:374:16: '=' variableInitializer
                            {
                            char_literal146=(Token)match(input,133,FOLLOW_133_in_variableDeclaratorRest2019); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_133.add(char_literal146);

                            pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest2021);
                            variableInitializer147=variableInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer147.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: 131, variableInitializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 374:42: -> ( '[' )+ ( variableInitializer )?
                    {
                        if ( !(stream_131.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_131.hasNext() ) {
                            adaptor.addChild(root_0, stream_131.nextNode());

                        }
                        stream_131.reset();
                        // jkit/java/Java.g:374:50: ( variableInitializer )?
                        if ( stream_variableInitializer.hasNext() ) {
                            adaptor.addChild(root_0, stream_variableInitializer.nextTree());

                        }
                        stream_variableInitializer.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:375:4: '=' variableInitializer
                    {
                    char_literal148=(Token)match(input,133,FOLLOW_133_in_variableDeclaratorRest2036); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal148);

                    pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest2038);
                    variableInitializer149=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer149.getTree());


                    // AST REWRITE
                    // elements: variableInitializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 375:28: -> variableInitializer
                    {
                        adaptor.addChild(root_0, stream_variableInitializer.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:377:2: 
                    {
                    root_0 = (Object)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, variableDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorRest"

    public static class constantDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclaration"
    // jkit/java/Java.g:379:1: constantDeclaration : type constantDeclarators ';' -> type constantDeclarators ;
    public final JavaParser.constantDeclaration_return constantDeclaration() throws RecognitionException {
        JavaParser.constantDeclaration_return retval = new JavaParser.constantDeclaration_return();
        retval.start = input.LT(1);
        int constantDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal152=null;
        JavaParser.type_return type150 = null;

        JavaParser.constantDeclarators_return constantDeclarators151 = null;


        Object char_literal152_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_constantDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // jkit/java/Java.g:380:2: ( type constantDeclarators ';' -> type constantDeclarators )
            // jkit/java/Java.g:380:4: type constantDeclarators ';'
            {
            pushFollow(FOLLOW_type_in_constantDeclaration2056);
            type150=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type150.getTree());
            pushFollow(FOLLOW_constantDeclarators_in_constantDeclaration2058);
            constantDeclarators151=constantDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constantDeclarators.add(constantDeclarators151.getTree());
            char_literal152=(Token)match(input,114,FOLLOW_114_in_constantDeclaration2060); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(char_literal152);



            // AST REWRITE
            // elements: type, constantDeclarators
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 380:33: -> type constantDeclarators
            {
                adaptor.addChild(root_0, stream_type.nextTree());
                adaptor.addChild(root_0, stream_constantDeclarators.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, constantDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclaration"

    public static class constantDeclarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarator"
    // jkit/java/Java.g:383:1: constantDeclarator : Identifier constantDeclaratorRest -> ^( Identifier constantDeclaratorRest ) ;
    public final JavaParser.constantDeclarator_return constantDeclarator() throws RecognitionException {
        JavaParser.constantDeclarator_return retval = new JavaParser.constantDeclarator_return();
        retval.start = input.LT(1);
        int constantDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier153=null;
        JavaParser.constantDeclaratorRest_return constantDeclaratorRest154 = null;


        Object Identifier153_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_constantDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // jkit/java/Java.g:384:2: ( Identifier constantDeclaratorRest -> ^( Identifier constantDeclaratorRest ) )
            // jkit/java/Java.g:384:4: Identifier constantDeclaratorRest
            {
            Identifier153=(Token)match(input,Identifier,FOLLOW_Identifier_in_constantDeclarator2077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier153);

            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclarator2079);
            constantDeclaratorRest154=constantDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constantDeclaratorRest.add(constantDeclaratorRest154.getTree());


            // AST REWRITE
            // elements: Identifier, constantDeclaratorRest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 384:38: -> ^( Identifier constantDeclaratorRest )
            {
                // jkit/java/Java.g:384:41: ^( Identifier constantDeclaratorRest )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                adaptor.addChild(root_1, stream_constantDeclaratorRest.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, constantDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarator"

    public static class constantDeclarators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarators"
    // jkit/java/Java.g:387:1: constantDeclarators : i+= constantDeclarator ( ',' i+= constantDeclarator )* -> ( $i)+ ;
    public final JavaParser.constantDeclarators_return constantDeclarators() throws RecognitionException {
        JavaParser.constantDeclarators_return retval = new JavaParser.constantDeclarators_return();
        retval.start = input.LT(1);
        int constantDeclarators_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal155=null;
        List list_i=null;
        JavaParser.constantDeclarator_return i = null;
        Object char_literal155_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleSubtreeStream stream_constantDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // jkit/java/Java.g:388:2: (i+= constantDeclarator ( ',' i+= constantDeclarator )* -> ( $i)+ )
            // jkit/java/Java.g:388:4: i+= constantDeclarator ( ',' i+= constantDeclarator )*
            {
            pushFollow(FOLLOW_constantDeclarator_in_constantDeclarators2102);
            i=constantDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constantDeclarator.add(i.getTree());
            if (list_i==null) list_i=new ArrayList();
            list_i.add(i.getTree());

            // jkit/java/Java.g:388:26: ( ',' i+= constantDeclarator )*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==123) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // jkit/java/Java.g:388:27: ',' i+= constantDeclarator
            	    {
            	    char_literal155=(Token)match(input,123,FOLLOW_123_in_constantDeclarators2105); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_123.add(char_literal155);

            	    pushFollow(FOLLOW_constantDeclarator_in_constantDeclarators2109);
            	    i=constantDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_constantDeclarator.add(i.getTree());
            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i.getTree());


            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: i
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
            root_0 = (Object)adaptor.nil();
            // 388:55: -> ( $i)+
            {
                if ( !(stream_i.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_0, stream_i.nextTree());

                }
                stream_i.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, constantDeclarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarators"

    public static class constantDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclaratorRest"
    // jkit/java/Java.g:391:1: constantDeclaratorRest : ( '[' ']' )* '=' variableInitializer -> ( '[' )* variableInitializer ;
    public final JavaParser.constantDeclaratorRest_return constantDeclaratorRest() throws RecognitionException {
        JavaParser.constantDeclaratorRest_return retval = new JavaParser.constantDeclaratorRest_return();
        retval.start = input.LT(1);
        int constantDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal156=null;
        Token char_literal157=null;
        Token char_literal158=null;
        JavaParser.variableInitializer_return variableInitializer159 = null;


        Object char_literal156_tree=null;
        Object char_literal157_tree=null;
        Object char_literal158_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // jkit/java/Java.g:392:2: ( ( '[' ']' )* '=' variableInitializer -> ( '[' )* variableInitializer )
            // jkit/java/Java.g:392:4: ( '[' ']' )* '=' variableInitializer
            {
            // jkit/java/Java.g:392:4: ( '[' ']' )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==131) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // jkit/java/Java.g:392:5: '[' ']'
            	    {
            	    char_literal156=(Token)match(input,131,FOLLOW_131_in_constantDeclaratorRest2130); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_131.add(char_literal156);

            	    char_literal157=(Token)match(input,132,FOLLOW_132_in_constantDeclaratorRest2132); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_132.add(char_literal157);


            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);

            char_literal158=(Token)match(input,133,FOLLOW_133_in_constantDeclaratorRest2136); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal158);

            pushFollow(FOLLOW_variableInitializer_in_constantDeclaratorRest2138);
            variableInitializer159=variableInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer159.getTree());


            // AST REWRITE
            // elements: variableInitializer, 131
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 392:39: -> ( '[' )* variableInitializer
            {
                // jkit/java/Java.g:392:42: ( '[' )*
                while ( stream_131.hasNext() ) {
                    adaptor.addChild(root_0, stream_131.nextNode());

                }
                stream_131.reset();
                adaptor.addChild(root_0, stream_variableInitializer.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, constantDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclaratorRest"

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorId"
    // jkit/java/Java.g:395:1: variableDeclaratorId : Identifier ( '[' ']' )* ;
    public final JavaParser.variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
        JavaParser.variableDeclaratorId_return retval = new JavaParser.variableDeclaratorId_return();
        retval.start = input.LT(1);
        int variableDeclaratorId_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier160=null;
        Token char_literal161=null;
        Token char_literal162=null;

        Object Identifier160_tree=null;
        Object char_literal161_tree=null;
        Object char_literal162_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // jkit/java/Java.g:396:2: ( Identifier ( '[' ']' )* )
            // jkit/java/Java.g:396:4: Identifier ( '[' ']' )*
            {
            root_0 = (Object)adaptor.nil();

            Identifier160=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaratorId2157); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier160_tree = (Object)adaptor.create(Identifier160);
            adaptor.addChild(root_0, Identifier160_tree);
            }
            // jkit/java/Java.g:396:15: ( '[' ']' )*
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==131) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // jkit/java/Java.g:396:16: '[' ']'
            	    {
            	    char_literal161=(Token)match(input,131,FOLLOW_131_in_variableDeclaratorId2160); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal161_tree = (Object)adaptor.create(char_literal161);
            	    adaptor.addChild(root_0, char_literal161_tree);
            	    }
            	    char_literal162=(Token)match(input,132,FOLLOW_132_in_variableDeclaratorId2162); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal162_tree = (Object)adaptor.create(char_literal162);
            	    adaptor.addChild(root_0, char_literal162_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, variableDeclaratorId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorId"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // jkit/java/Java.g:399:1: variableInitializer : ( arrayInitializer | expression );
    public final JavaParser.variableInitializer_return variableInitializer() throws RecognitionException {
        JavaParser.variableInitializer_return retval = new JavaParser.variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.arrayInitializer_return arrayInitializer163 = null;

        JavaParser.expression_return expression164 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // jkit/java/Java.g:400:2: ( arrayInitializer | expression )
            int alt55=2;
            alt55 = dfa55.predict(input);
            switch (alt55) {
                case 1 :
                    // jkit/java/Java.g:400:4: arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer2175);
                    arrayInitializer163=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer163.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:401:9: expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer2185);
                    expression164=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression164.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // jkit/java/Java.g:404:1: arrayInitializer : '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}' -> ^( ARRAYVAL ( variableInitializer )* ) ;
    public final JavaParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
        JavaParser.arrayInitializer_return retval = new JavaParser.arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal165=null;
        Token char_literal167=null;
        Token char_literal169=null;
        Token char_literal170=null;
        JavaParser.variableInitializer_return variableInitializer166 = null;

        JavaParser.variableInitializer_return variableInitializer168 = null;


        Object char_literal165_tree=null;
        Object char_literal167_tree=null;
        Object char_literal169_tree=null;
        Object char_literal170_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // jkit/java/Java.g:405:2: ( '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}' -> ^( ARRAYVAL ( variableInitializer )* ) )
            // jkit/java/Java.g:405:4: '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}'
            {
            char_literal165=(Token)match(input,126,FOLLOW_126_in_arrayInitializer2197); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal165);

            // jkit/java/Java.g:405:8: ( variableInitializer ( ',' variableInitializer )* ( ',' )? )?
            int alt58=2;
            alt58 = dfa58.predict(input);
            switch (alt58) {
                case 1 :
                    // jkit/java/Java.g:405:9: variableInitializer ( ',' variableInitializer )* ( ',' )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer2200);
                    variableInitializer166=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer166.getTree());
                    // jkit/java/Java.g:405:29: ( ',' variableInitializer )*
                    loop56:
                    do {
                        int alt56=2;
                        alt56 = dfa56.predict(input);
                        switch (alt56) {
                    	case 1 :
                    	    // jkit/java/Java.g:405:30: ',' variableInitializer
                    	    {
                    	    char_literal167=(Token)match(input,123,FOLLOW_123_in_arrayInitializer2203); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_123.add(char_literal167);

                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer2205);
                    	    variableInitializer168=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer168.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop56;
                        }
                    } while (true);

                    // jkit/java/Java.g:405:56: ( ',' )?
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==123) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // jkit/java/Java.g:405:57: ','
                            {
                            char_literal169=(Token)match(input,123,FOLLOW_123_in_arrayInitializer2210); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_123.add(char_literal169);


                            }
                            break;

                    }


                    }
                    break;

            }

            char_literal170=(Token)match(input,127,FOLLOW_127_in_arrayInitializer2217); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal170);



            // AST REWRITE
            // elements: variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 405:70: -> ^( ARRAYVAL ( variableInitializer )* )
            {
                // jkit/java/Java.g:405:73: ^( ARRAYVAL ( variableInitializer )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYVAL, "ARRAYVAL"), root_1);

                // jkit/java/Java.g:405:84: ( variableInitializer )*
                while ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifier"
    // jkit/java/Java.g:408:1: modifier : ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' );
    public final JavaParser.modifier_return modifier() throws RecognitionException {
        JavaParser.modifier_return retval = new JavaParser.modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal172=null;
        Token string_literal173=null;
        Token string_literal174=null;
        Token string_literal175=null;
        Token string_literal176=null;
        Token string_literal177=null;
        Token string_literal178=null;
        Token string_literal179=null;
        Token string_literal180=null;
        Token string_literal181=null;
        Token string_literal182=null;
        JavaParser.annotation_return annotation171 = null;


        Object string_literal172_tree=null;
        Object string_literal173_tree=null;
        Object string_literal174_tree=null;
        Object string_literal175_tree=null;
        Object string_literal176_tree=null;
        Object string_literal177_tree=null;
        Object string_literal178_tree=null;
        Object string_literal179_tree=null;
        Object string_literal180_tree=null;
        Object string_literal181_tree=null;
        Object string_literal182_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // jkit/java/Java.g:409:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )
            int alt59=12;
            alt59 = dfa59.predict(input);
            switch (alt59) {
                case 1 :
                    // jkit/java/Java.g:409:9: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_modifier2242);
                    annotation171=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation171.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:410:9: 'public'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal172=(Token)match(input,134,FOLLOW_134_in_modifier2252); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal172_tree = (Object)adaptor.create(string_literal172);
                    adaptor.addChild(root_0, string_literal172_tree);
                    }

                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:411:9: 'protected'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal173=(Token)match(input,135,FOLLOW_135_in_modifier2262); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal173_tree = (Object)adaptor.create(string_literal173);
                    adaptor.addChild(root_0, string_literal173_tree);
                    }

                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:412:9: 'private'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal174=(Token)match(input,136,FOLLOW_136_in_modifier2272); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal174_tree = (Object)adaptor.create(string_literal174);
                    adaptor.addChild(root_0, string_literal174_tree);
                    }

                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:413:9: 'static'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal175=(Token)match(input,116,FOLLOW_116_in_modifier2282); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal175_tree = (Object)adaptor.create(string_literal175);
                    adaptor.addChild(root_0, string_literal175_tree);
                    }

                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:414:9: 'abstract'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal176=(Token)match(input,137,FOLLOW_137_in_modifier2292); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal176_tree = (Object)adaptor.create(string_literal176);
                    adaptor.addChild(root_0, string_literal176_tree);
                    }

                    }
                    break;
                case 7 :
                    // jkit/java/Java.g:415:9: 'final'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal177=(Token)match(input,138,FOLLOW_138_in_modifier2302); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal177_tree = (Object)adaptor.create(string_literal177);
                    adaptor.addChild(root_0, string_literal177_tree);
                    }

                    }
                    break;
                case 8 :
                    // jkit/java/Java.g:416:9: 'native'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal178=(Token)match(input,139,FOLLOW_139_in_modifier2312); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal178_tree = (Object)adaptor.create(string_literal178);
                    adaptor.addChild(root_0, string_literal178_tree);
                    }

                    }
                    break;
                case 9 :
                    // jkit/java/Java.g:417:9: 'synchronized'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal179=(Token)match(input,140,FOLLOW_140_in_modifier2322); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal179_tree = (Object)adaptor.create(string_literal179);
                    adaptor.addChild(root_0, string_literal179_tree);
                    }

                    }
                    break;
                case 10 :
                    // jkit/java/Java.g:418:9: 'transient'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal180=(Token)match(input,141,FOLLOW_141_in_modifier2332); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal180_tree = (Object)adaptor.create(string_literal180);
                    adaptor.addChild(root_0, string_literal180_tree);
                    }

                    }
                    break;
                case 11 :
                    // jkit/java/Java.g:419:9: 'volatile'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal181=(Token)match(input,142,FOLLOW_142_in_modifier2342); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal181_tree = (Object)adaptor.create(string_literal181);
                    adaptor.addChild(root_0, string_literal181_tree);
                    }

                    }
                    break;
                case 12 :
                    // jkit/java/Java.g:420:9: 'strictfp'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal182=(Token)match(input,143,FOLLOW_143_in_modifier2352); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal182_tree = (Object)adaptor.create(string_literal182);
                    adaptor.addChild(root_0, string_literal182_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public static class packageOrTypeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageOrTypeName"
    // jkit/java/Java.g:423:1: packageOrTypeName : Identifier ( '.' Identifier )* ;
    public final JavaParser.packageOrTypeName_return packageOrTypeName() throws RecognitionException {
        JavaParser.packageOrTypeName_return retval = new JavaParser.packageOrTypeName_return();
        retval.start = input.LT(1);
        int packageOrTypeName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier183=null;
        Token char_literal184=null;
        Token Identifier185=null;

        Object Identifier183_tree=null;
        Object char_literal184_tree=null;
        Object Identifier185_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // jkit/java/Java.g:424:2: ( Identifier ( '.' Identifier )* )
            // jkit/java/Java.g:424:4: Identifier ( '.' Identifier )*
            {
            root_0 = (Object)adaptor.nil();

            Identifier183=(Token)match(input,Identifier,FOLLOW_Identifier_in_packageOrTypeName2366); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier183_tree = (Object)adaptor.create(Identifier183);
            adaptor.addChild(root_0, Identifier183_tree);
            }
            // jkit/java/Java.g:424:15: ( '.' Identifier )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==117) ) {
                    int LA60_1 = input.LA(2);

                    if ( (LA60_1==Identifier) ) {
                        int LA60_2 = input.LA(3);

                        if ( (synpred83_Java()) ) {
                            alt60=1;
                        }


                    }


                }


                switch (alt60) {
            	case 1 :
            	    // jkit/java/Java.g:424:16: '.' Identifier
            	    {
            	    char_literal184=(Token)match(input,117,FOLLOW_117_in_packageOrTypeName2369); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal184_tree = (Object)adaptor.create(char_literal184);
            	    adaptor.addChild(root_0, char_literal184_tree);
            	    }
            	    Identifier185=(Token)match(input,Identifier,FOLLOW_Identifier_in_packageOrTypeName2371); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    Identifier185_tree = (Object)adaptor.create(Identifier185);
            	    adaptor.addChild(root_0, Identifier185_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, packageOrTypeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageOrTypeName"

    public static class enumConstantName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstantName"
    // jkit/java/Java.g:427:1: enumConstantName : Identifier ;
    public final JavaParser.enumConstantName_return enumConstantName() throws RecognitionException {
        JavaParser.enumConstantName_return retval = new JavaParser.enumConstantName_return();
        retval.start = input.LT(1);
        int enumConstantName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier186=null;

        Object Identifier186_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // jkit/java/Java.g:428:5: ( Identifier )
            // jkit/java/Java.g:428:9: Identifier
            {
            root_0 = (Object)adaptor.nil();

            Identifier186=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumConstantName2389); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier186_tree = (Object)adaptor.create(Identifier186);
            adaptor.addChild(root_0, Identifier186_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, enumConstantName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstantName"

    public static class typeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // jkit/java/Java.g:431:1: typeName : ( Identifier | packageOrTypeName '.' Identifier );
    public final JavaParser.typeName_return typeName() throws RecognitionException {
        JavaParser.typeName_return retval = new JavaParser.typeName_return();
        retval.start = input.LT(1);
        int typeName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier187=null;
        Token char_literal189=null;
        Token Identifier190=null;
        JavaParser.packageOrTypeName_return packageOrTypeName188 = null;


        Object Identifier187_tree=null;
        Object char_literal189_tree=null;
        Object Identifier190_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // jkit/java/Java.g:432:2: ( Identifier | packageOrTypeName '.' Identifier )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==Identifier) ) {
                int LA61_1 = input.LA(2);

                if ( (LA61_1==EOF) ) {
                    alt61=1;
                }
                else if ( (LA61_1==117) ) {
                    alt61=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 61, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    // jkit/java/Java.g:432:6: Identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    Identifier187=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeName2405); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier187_tree = (Object)adaptor.create(Identifier187);
                    adaptor.addChild(root_0, Identifier187_tree);
                    }

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:433:9: packageOrTypeName '.' Identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_packageOrTypeName_in_typeName2415);
                    packageOrTypeName188=packageOrTypeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, packageOrTypeName188.getTree());
                    char_literal189=(Token)match(input,117,FOLLOW_117_in_typeName2417); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal189_tree = (Object)adaptor.create(char_literal189);
                    adaptor.addChild(root_0, char_literal189_tree);
                    }
                    Identifier190=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeName2419); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier190_tree = (Object)adaptor.create(Identifier190);
                    adaptor.addChild(root_0, Identifier190_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, typeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // jkit/java/Java.g:436:1: type : (i+= refComponent ( '.' i+= refComponent )* ( '[' ']' )* -> ^( TYPE ( $i)+ ( '[' )* ) | primitiveType ( '[' ']' )* -> ^( TYPE primitiveType ( '[' )* ) );
    public final JavaParser.type_return type() throws RecognitionException {
        JavaParser.type_return retval = new JavaParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal191=null;
        Token char_literal192=null;
        Token char_literal193=null;
        Token char_literal195=null;
        Token char_literal196=null;
        List list_i=null;
        JavaParser.primitiveType_return primitiveType194 = null;

        JavaParser.refComponent_return i = null;
        Object char_literal191_tree=null;
        Object char_literal192_tree=null;
        Object char_literal193_tree=null;
        Object char_literal195_tree=null;
        Object char_literal196_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleSubtreeStream stream_refComponent=new RewriteRuleSubtreeStream(adaptor,"rule refComponent");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // jkit/java/Java.g:437:2: (i+= refComponent ( '.' i+= refComponent )* ( '[' ']' )* -> ^( TYPE ( $i)+ ( '[' )* ) | primitiveType ( '[' ']' )* -> ^( TYPE primitiveType ( '[' )* ) )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==Identifier) ) {
                alt65=1;
            }
            else if ( ((LA65_0>=144 && LA65_0<=151)) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }
            switch (alt65) {
                case 1 :
                    // jkit/java/Java.g:437:4: i+= refComponent ( '.' i+= refComponent )* ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_refComponent_in_type2432);
                    i=refComponent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i.getTree());

                    // jkit/java/Java.g:437:20: ( '.' i+= refComponent )*
                    loop62:
                    do {
                        int alt62=2;
                        alt62 = dfa62.predict(input);
                        switch (alt62) {
                    	case 1 :
                    	    // jkit/java/Java.g:437:21: '.' i+= refComponent
                    	    {
                    	    char_literal191=(Token)match(input,117,FOLLOW_117_in_type2435); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_117.add(char_literal191);

                    	    pushFollow(FOLLOW_refComponent_in_type2439);
                    	    i=refComponent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop62;
                        }
                    } while (true);

                    // jkit/java/Java.g:437:43: ( '[' ']' )*
                    loop63:
                    do {
                        int alt63=2;
                        alt63 = dfa63.predict(input);
                        switch (alt63) {
                    	case 1 :
                    	    // jkit/java/Java.g:437:44: '[' ']'
                    	    {
                    	    char_literal192=(Token)match(input,131,FOLLOW_131_in_type2444); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_131.add(char_literal192);

                    	    char_literal193=(Token)match(input,132,FOLLOW_132_in_type2446); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_132.add(char_literal193);


                    	    }
                    	    break;

                    	default :
                    	    break loop63;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: 131, i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: i
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                    root_0 = (Object)adaptor.nil();
                    // 437:54: -> ^( TYPE ( $i)+ ( '[' )* )
                    {
                        // jkit/java/Java.g:437:57: ^( TYPE ( $i)+ ( '[' )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        if ( !(stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextTree());

                        }
                        stream_i.reset();
                        // jkit/java/Java.g:437:68: ( '[' )*
                        while ( stream_131.hasNext() ) {
                            adaptor.addChild(root_1, stream_131.nextNode());

                        }
                        stream_131.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:438:4: primitiveType ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_primitiveType_in_type2468);
                    primitiveType194=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType194.getTree());
                    // jkit/java/Java.g:438:18: ( '[' ']' )*
                    loop64:
                    do {
                        int alt64=2;
                        alt64 = dfa64.predict(input);
                        switch (alt64) {
                    	case 1 :
                    	    // jkit/java/Java.g:438:19: '[' ']'
                    	    {
                    	    char_literal195=(Token)match(input,131,FOLLOW_131_in_type2471); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_131.add(char_literal195);

                    	    char_literal196=(Token)match(input,132,FOLLOW_132_in_type2473); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_132.add(char_literal196);


                    	    }
                    	    break;

                    	default :
                    	    break loop64;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: primitiveType, 131
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 438:29: -> ^( TYPE primitiveType ( '[' )* )
                    {
                        // jkit/java/Java.g:438:32: ^( TYPE primitiveType ( '[' )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, stream_primitiveType.nextTree());
                        // jkit/java/Java.g:438:53: ( '[' )*
                        while ( stream_131.hasNext() ) {
                            adaptor.addChild(root_1, stream_131.nextNode());

                        }
                        stream_131.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class refComponent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "refComponent"
    // jkit/java/Java.g:441:1: refComponent : Identifier ( typeArguments )? -> ^( Identifier ( typeArguments )? ) ;
    public final JavaParser.refComponent_return refComponent() throws RecognitionException {
        JavaParser.refComponent_return retval = new JavaParser.refComponent_return();
        retval.start = input.LT(1);
        int refComponent_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier197=null;
        JavaParser.typeArguments_return typeArguments198 = null;


        Object Identifier197_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_typeArguments=new RewriteRuleSubtreeStream(adaptor,"rule typeArguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // jkit/java/Java.g:442:5: ( Identifier ( typeArguments )? -> ^( Identifier ( typeArguments )? ) )
            // jkit/java/Java.g:442:7: Identifier ( typeArguments )?
            {
            Identifier197=(Token)match(input,Identifier,FOLLOW_Identifier_in_refComponent2502); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier197);

            // jkit/java/Java.g:442:18: ( typeArguments )?
            int alt66=2;
            alt66 = dfa66.predict(input);
            switch (alt66) {
                case 1 :
                    // jkit/java/Java.g:442:19: typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_refComponent2505);
                    typeArguments198=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeArguments.add(typeArguments198.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: Identifier, typeArguments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 442:35: -> ^( Identifier ( typeArguments )? )
            {
                // jkit/java/Java.g:442:38: ^( Identifier ( typeArguments )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/Java.g:442:51: ( typeArguments )?
                if ( stream_typeArguments.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeArguments.nextTree());

                }
                stream_typeArguments.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, refComponent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "refComponent"

    public static class primitiveType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // jkit/java/Java.g:445:1: primitiveType : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
    public final JavaParser.primitiveType_return primitiveType() throws RecognitionException {
        JavaParser.primitiveType_return retval = new JavaParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        Object root_0 = null;

        Token set199=null;

        Object set199_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // jkit/java/Java.g:446:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
            // jkit/java/Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set199=(Token)input.LT(1);
            if ( (input.LA(1)>=144 && input.LA(1)<=151) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set199));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class variableModifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableModifier"
    // jkit/java/Java.g:456:1: variableModifier : ( 'final' | annotation );
    public final JavaParser.variableModifier_return variableModifier() throws RecognitionException {
        JavaParser.variableModifier_return retval = new JavaParser.variableModifier_return();
        retval.start = input.LT(1);
        int variableModifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal200=null;
        JavaParser.annotation_return annotation201 = null;


        Object string_literal200_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // jkit/java/Java.g:457:2: ( 'final' | annotation )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==138) ) {
                alt67=1;
            }
            else if ( (LA67_0==160) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    // jkit/java/Java.g:457:4: 'final'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal200=(Token)match(input,138,FOLLOW_138_in_variableModifier2605); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal200_tree = (Object)adaptor.create(string_literal200);
                    adaptor.addChild(root_0, string_literal200_tree);
                    }

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:458:9: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_variableModifier2615);
                    annotation201=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation201.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, variableModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableModifier"

    public static class typeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArguments"
    // jkit/java/Java.g:461:1: typeArguments : '<' t+= typeArgument ( ',' t+= typeArgument )* '>' -> ( $t)+ ;
    public final JavaParser.typeArguments_return typeArguments() throws RecognitionException {
        JavaParser.typeArguments_return retval = new JavaParser.typeArguments_return();
        retval.start = input.LT(1);
        int typeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal202=null;
        Token char_literal203=null;
        Token char_literal204=null;
        List list_t=null;
        JavaParser.typeArgument_return t = null;
        Object char_literal202_tree=null;
        Object char_literal203_tree=null;
        Object char_literal204_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_typeArgument=new RewriteRuleSubtreeStream(adaptor,"rule typeArgument");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // jkit/java/Java.g:462:2: ( '<' t+= typeArgument ( ',' t+= typeArgument )* '>' -> ( $t)+ )
            // jkit/java/Java.g:462:4: '<' t+= typeArgument ( ',' t+= typeArgument )* '>'
            {
            char_literal202=(Token)match(input,122,FOLLOW_122_in_typeArguments2626); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(char_literal202);

            pushFollow(FOLLOW_typeArgument_in_typeArguments2630);
            t=typeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeArgument.add(t.getTree());
            if (list_t==null) list_t=new ArrayList();
            list_t.add(t.getTree());

            // jkit/java/Java.g:462:24: ( ',' t+= typeArgument )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==123) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // jkit/java/Java.g:462:25: ',' t+= typeArgument
            	    {
            	    char_literal203=(Token)match(input,123,FOLLOW_123_in_typeArguments2633); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_123.add(char_literal203);

            	    pushFollow(FOLLOW_typeArgument_in_typeArguments2637);
            	    t=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeArgument.add(t.getTree());
            	    if (list_t==null) list_t=new ArrayList();
            	    list_t.add(t.getTree());


            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);

            char_literal204=(Token)match(input,124,FOLLOW_124_in_typeArguments2641); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_124.add(char_literal204);



            // AST REWRITE
            // elements: t
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: t
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
            root_0 = (Object)adaptor.nil();
            // 462:51: -> ( $t)+
            {
                if ( !(stream_t.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_t.hasNext() ) {
                    adaptor.addChild(root_0, stream_t.nextTree());

                }
                stream_t.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, typeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArguments"

    public static class typeArgument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArgument"
    // jkit/java/Java.g:465:1: typeArgument : ( type | '?' ( ( 'extends' type )? -> ^( TYPE '?' ( ^( EXTENDS type ) )? ) | ( 'super' type )? -> ^( TYPE '?' ( ^( SUPER type ) )? ) ) );
    public final JavaParser.typeArgument_return typeArgument() throws RecognitionException {
        JavaParser.typeArgument_return retval = new JavaParser.typeArgument_return();
        retval.start = input.LT(1);
        int typeArgument_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal206=null;
        Token string_literal207=null;
        Token string_literal209=null;
        JavaParser.type_return type205 = null;

        JavaParser.type_return type208 = null;

        JavaParser.type_return type210 = null;


        Object char_literal206_tree=null;
        Object string_literal207_tree=null;
        Object string_literal209_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // jkit/java/Java.g:466:2: ( type | '?' ( ( 'extends' type )? -> ^( TYPE '?' ( ^( EXTENDS type ) )? ) | ( 'super' type )? -> ^( TYPE '?' ( ^( SUPER type ) )? ) ) )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==Identifier||(LA72_0>=144 && LA72_0<=151)) ) {
                alt72=1;
            }
            else if ( (LA72_0==152) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    // jkit/java/Java.g:466:4: type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_typeArgument2659);
                    type205=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type205.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:467:4: '?' ( ( 'extends' type )? -> ^( TYPE '?' ( ^( EXTENDS type ) )? ) | ( 'super' type )? -> ^( TYPE '?' ( ^( SUPER type ) )? ) )
                    {
                    char_literal206=(Token)match(input,152,FOLLOW_152_in_typeArgument2664); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_152.add(char_literal206);

                    // jkit/java/Java.g:467:8: ( ( 'extends' type )? -> ^( TYPE '?' ( ^( EXTENDS type ) )? ) | ( 'super' type )? -> ^( TYPE '?' ( ^( SUPER type ) )? ) )
                    int alt71=2;
                    alt71 = dfa71.predict(input);
                    switch (alt71) {
                        case 1 :
                            // jkit/java/Java.g:468:4: ( 'extends' type )?
                            {
                            // jkit/java/Java.g:468:4: ( 'extends' type )?
                            int alt69=2;
                            int LA69_0 = input.LA(1);

                            if ( (LA69_0==120) ) {
                                alt69=1;
                            }
                            switch (alt69) {
                                case 1 :
                                    // jkit/java/Java.g:468:5: 'extends' type
                                    {
                                    string_literal207=(Token)match(input,120,FOLLOW_120_in_typeArgument2673); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_120.add(string_literal207);

                                    pushFollow(FOLLOW_type_in_typeArgument2675);
                                    type208=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type208.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: type, 152
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 468:22: -> ^( TYPE '?' ( ^( EXTENDS type ) )? )
                            {
                                // jkit/java/Java.g:468:25: ^( TYPE '?' ( ^( EXTENDS type ) )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                                adaptor.addChild(root_1, stream_152.nextNode());
                                // jkit/java/Java.g:468:36: ( ^( EXTENDS type ) )?
                                if ( stream_type.hasNext() ) {
                                    // jkit/java/Java.g:468:36: ^( EXTENDS type )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXTENDS, "EXTENDS"), root_2);

                                    adaptor.addChild(root_2, stream_type.nextTree());

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_type.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:469:12: ( 'super' type )?
                            {
                            // jkit/java/Java.g:469:12: ( 'super' type )?
                            int alt70=2;
                            int LA70_0 = input.LA(1);

                            if ( (LA70_0==153) ) {
                                alt70=1;
                            }
                            switch (alt70) {
                                case 1 :
                                    // jkit/java/Java.g:469:13: 'super' type
                                    {
                                    string_literal209=(Token)match(input,153,FOLLOW_153_in_typeArgument2706); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_153.add(string_literal209);

                                    pushFollow(FOLLOW_type_in_typeArgument2708);
                                    type210=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type210.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: 152, type
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 469:28: -> ^( TYPE '?' ( ^( SUPER type ) )? )
                            {
                                // jkit/java/Java.g:469:31: ^( TYPE '?' ( ^( SUPER type ) )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                                adaptor.addChild(root_1, stream_152.nextNode());
                                // jkit/java/Java.g:469:42: ( ^( SUPER type ) )?
                                if ( stream_type.hasNext() ) {
                                    // jkit/java/Java.g:469:42: ^( SUPER type )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SUPER, "SUPER"), root_2);

                                    adaptor.addChild(root_2, stream_type.nextTree());

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_type.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, typeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArgument"

    public static class qualifiedNameList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedNameList"
    // jkit/java/Java.g:473:1: qualifiedNameList : qualifiedName ( ',' qualifiedName )* ;
    public final JavaParser.qualifiedNameList_return qualifiedNameList() throws RecognitionException {
        JavaParser.qualifiedNameList_return retval = new JavaParser.qualifiedNameList_return();
        retval.start = input.LT(1);
        int qualifiedNameList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal212=null;
        JavaParser.qualifiedName_return qualifiedName211 = null;

        JavaParser.qualifiedName_return qualifiedName213 = null;


        Object char_literal212_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // jkit/java/Java.g:474:2: ( qualifiedName ( ',' qualifiedName )* )
            // jkit/java/Java.g:474:4: qualifiedName ( ',' qualifiedName )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList2748);
            qualifiedName211=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName211.getTree());
            // jkit/java/Java.g:474:18: ( ',' qualifiedName )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==123) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // jkit/java/Java.g:474:19: ',' qualifiedName
            	    {
            	    char_literal212=(Token)match(input,123,FOLLOW_123_in_qualifiedNameList2751); if (state.failed) return retval;
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList2754);
            	    qualifiedName213=qualifiedName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName213.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, qualifiedNameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList"

    public static class formalParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameters"
    // jkit/java/Java.g:477:1: formalParameters : '(' ( formalParameterDecls )? ')' -> ( formalParameterDecls )? ;
    public final JavaParser.formalParameters_return formalParameters() throws RecognitionException {
        JavaParser.formalParameters_return retval = new JavaParser.formalParameters_return();
        retval.start = input.LT(1);
        int formalParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal214=null;
        Token char_literal216=null;
        JavaParser.formalParameterDecls_return formalParameterDecls215 = null;


        Object char_literal214_tree=null;
        Object char_literal216_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");
        RewriteRuleSubtreeStream stream_formalParameterDecls=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterDecls");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // jkit/java/Java.g:478:2: ( '(' ( formalParameterDecls )? ')' -> ( formalParameterDecls )? )
            // jkit/java/Java.g:478:4: '(' ( formalParameterDecls )? ')'
            {
            char_literal214=(Token)match(input,154,FOLLOW_154_in_formalParameters2768); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(char_literal214);

            // jkit/java/Java.g:478:8: ( formalParameterDecls )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==Identifier||LA74_0==138||(LA74_0>=144 && LA74_0<=151)||LA74_0==160) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // jkit/java/Java.g:0:0: formalParameterDecls
                    {
                    pushFollow(FOLLOW_formalParameterDecls_in_formalParameters2770);
                    formalParameterDecls215=formalParameterDecls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterDecls.add(formalParameterDecls215.getTree());

                    }
                    break;

            }

            char_literal216=(Token)match(input,155,FOLLOW_155_in_formalParameters2773); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(char_literal216);



            // AST REWRITE
            // elements: formalParameterDecls
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 478:34: -> ( formalParameterDecls )?
            {
                // jkit/java/Java.g:478:37: ( formalParameterDecls )?
                if ( stream_formalParameterDecls.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameterDecls.nextTree());

                }
                stream_formalParameterDecls.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, formalParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameters"

    public static class formalParameterDecls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterDecls"
    // jkit/java/Java.g:481:1: formalParameterDecls : ( variableModifier )* type ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS type variableDeclaratorId ) ) ;
    public final JavaParser.formalParameterDecls_return formalParameterDecls() throws RecognitionException {
        JavaParser.formalParameterDecls_return retval = new JavaParser.formalParameterDecls_return();
        retval.start = input.LT(1);
        int formalParameterDecls_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal220=null;
        Token string_literal222=null;
        JavaParser.variableModifier_return variableModifier217 = null;

        JavaParser.type_return type218 = null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId219 = null;

        JavaParser.formalParameterDecls_return formalParameterDecls221 = null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId223 = null;


        Object char_literal220_tree=null;
        Object string_literal222_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_formalParameterDecls=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterDecls");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // jkit/java/Java.g:482:2: ( ( variableModifier )* type ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS type variableDeclaratorId ) ) )
            // jkit/java/Java.g:482:4: ( variableModifier )* type ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS type variableDeclaratorId ) )
            {
            // jkit/java/Java.g:482:4: ( variableModifier )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==138||LA75_0==160) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameterDecls2790);
            	    variableModifier217=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier217.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameterDecls2793);
            type218=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type218.getTree());
            // jkit/java/Java.g:482:27: ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS type variableDeclaratorId ) )
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==Identifier) ) {
                alt77=1;
            }
            else if ( (LA77_0==156) ) {
                alt77=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }
            switch (alt77) {
                case 1 :
                    // jkit/java/Java.g:483:9: variableDeclaratorId ( ',' formalParameterDecls )?
                    {
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDecls2805);
                    variableDeclaratorId219=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId219.getTree());
                    // jkit/java/Java.g:483:30: ( ',' formalParameterDecls )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==123) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // jkit/java/Java.g:483:31: ',' formalParameterDecls
                            {
                            char_literal220=(Token)match(input,123,FOLLOW_123_in_formalParameterDecls2808); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_123.add(char_literal220);

                            pushFollow(FOLLOW_formalParameterDecls_in_formalParameterDecls2810);
                            formalParameterDecls221=formalParameterDecls();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_formalParameterDecls.add(formalParameterDecls221.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: type, formalParameterDecls, variableDeclaratorId
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 483:58: -> ^( PARAMETER type variableDeclaratorId ) ( formalParameterDecls )?
                    {
                        // jkit/java/Java.g:483:61: ^( PARAMETER type variableDeclaratorId )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETER, "PARAMETER"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/Java.g:483:100: ( formalParameterDecls )?
                        if ( stream_formalParameterDecls.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameterDecls.nextTree());

                        }
                        stream_formalParameterDecls.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:484:11: '...' variableDeclaratorId
                    {
                    string_literal222=(Token)match(input,156,FOLLOW_156_in_formalParameterDecls2837); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_156.add(string_literal222);

                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDecls2839);
                    variableDeclaratorId223=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId223.getTree());


                    // AST REWRITE
                    // elements: variableDeclaratorId, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 484:38: -> ^( VARARGS type variableDeclaratorId )
                    {
                        // jkit/java/Java.g:484:41: ^( VARARGS type variableDeclaratorId )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARARGS, "VARARGS"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, formalParameterDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterDecls"

    public static class methodBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodBody"
    // jkit/java/Java.g:489:1: methodBody : block -> block ;
    public final JavaParser.methodBody_return methodBody() throws RecognitionException {
        JavaParser.methodBody_return retval = new JavaParser.methodBody_return();
        retval.start = input.LT(1);
        int methodBody_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.block_return block224 = null;


        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // jkit/java/Java.g:490:2: ( block -> block )
            // jkit/java/Java.g:490:4: block
            {
            pushFollow(FOLLOW_block_in_methodBody2875);
            block224=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block224.getTree());


            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 490:10: -> block
            {
                adaptor.addChild(root_0, stream_block.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, methodBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodBody"

    public static class qualifiedName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName"
    // jkit/java/Java.g:493:1: qualifiedName : i+= Identifier ( '.' i+= Identifier )* -> ( $i)+ ;
    public final JavaParser.qualifiedName_return qualifiedName() throws RecognitionException {
        JavaParser.qualifiedName_return retval = new JavaParser.qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal225=null;
        Token i=null;
        List list_i=null;

        Object char_literal225_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // jkit/java/Java.g:494:2: (i+= Identifier ( '.' i+= Identifier )* -> ( $i)+ )
            // jkit/java/Java.g:494:4: i+= Identifier ( '.' i+= Identifier )*
            {
            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName2893); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(i);

            if (list_i==null) list_i=new ArrayList();
            list_i.add(i);

            // jkit/java/Java.g:494:18: ( '.' i+= Identifier )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==117) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // jkit/java/Java.g:494:19: '.' i+= Identifier
            	    {
            	    char_literal225=(Token)match(input,117,FOLLOW_117_in_qualifiedName2896); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_117.add(char_literal225);

            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName2900); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Identifier.add(i);

            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i);


            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: i
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 494:39: -> ( $i)+
            {
                if ( !(stream_i.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_0, stream_i.nextNode());

                }
                stream_i.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // jkit/java/Java.g:497:1: literal : ( integerLiteral -> ^( INTVAL integerLiteral ) | FloatingPointLiteral -> ^( FLOATVAL FloatingPointLiteral ) | CharacterLiteral -> ^( CHARVAL CharacterLiteral ) | StringLiteral -> ^( STRINGVAL StringLiteral ) | booleanLiteral -> ^( BOOLVAL booleanLiteral ) | 'null' -> ^( NULLVAL ) );
    public final JavaParser.literal_return literal() throws RecognitionException {
        JavaParser.literal_return retval = new JavaParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        Object root_0 = null;

        Token FloatingPointLiteral227=null;
        Token CharacterLiteral228=null;
        Token StringLiteral229=null;
        Token string_literal231=null;
        JavaParser.integerLiteral_return integerLiteral226 = null;

        JavaParser.booleanLiteral_return booleanLiteral230 = null;


        Object FloatingPointLiteral227_tree=null;
        Object CharacterLiteral228_tree=null;
        Object StringLiteral229_tree=null;
        Object string_literal231_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_FloatingPointLiteral=new RewriteRuleTokenStream(adaptor,"token FloatingPointLiteral");
        RewriteRuleTokenStream stream_CharacterLiteral=new RewriteRuleTokenStream(adaptor,"token CharacterLiteral");
        RewriteRuleSubtreeStream stream_booleanLiteral=new RewriteRuleSubtreeStream(adaptor,"rule booleanLiteral");
        RewriteRuleSubtreeStream stream_integerLiteral=new RewriteRuleSubtreeStream(adaptor,"rule integerLiteral");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // jkit/java/Java.g:498:2: ( integerLiteral -> ^( INTVAL integerLiteral ) | FloatingPointLiteral -> ^( FLOATVAL FloatingPointLiteral ) | CharacterLiteral -> ^( CHARVAL CharacterLiteral ) | StringLiteral -> ^( STRINGVAL StringLiteral ) | booleanLiteral -> ^( BOOLVAL booleanLiteral ) | 'null' -> ^( NULLVAL ) )
            int alt79=6;
            switch ( input.LA(1) ) {
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
                {
                alt79=1;
                }
                break;
            case FloatingPointLiteral:
                {
                alt79=2;
                }
                break;
            case CharacterLiteral:
                {
                alt79=3;
                }
                break;
            case StringLiteral:
                {
                alt79=4;
                }
                break;
            case 158:
            case 159:
                {
                alt79=5;
                }
                break;
            case 157:
                {
                alt79=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }

            switch (alt79) {
                case 1 :
                    // jkit/java/Java.g:498:6: integerLiteral
                    {
                    pushFollow(FOLLOW_integerLiteral_in_literal2923);
                    integerLiteral226=integerLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_integerLiteral.add(integerLiteral226.getTree());


                    // AST REWRITE
                    // elements: integerLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 498:21: -> ^( INTVAL integerLiteral )
                    {
                        // jkit/java/Java.g:498:24: ^( INTVAL integerLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTVAL, "INTVAL"), root_1);

                        adaptor.addChild(root_1, stream_integerLiteral.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:499:9: FloatingPointLiteral
                    {
                    FloatingPointLiteral227=(Token)match(input,FloatingPointLiteral,FOLLOW_FloatingPointLiteral_in_literal2941); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FloatingPointLiteral.add(FloatingPointLiteral227);



                    // AST REWRITE
                    // elements: FloatingPointLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 499:30: -> ^( FLOATVAL FloatingPointLiteral )
                    {
                        // jkit/java/Java.g:499:33: ^( FLOATVAL FloatingPointLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FLOATVAL, "FLOATVAL"), root_1);

                        adaptor.addChild(root_1, stream_FloatingPointLiteral.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:500:9: CharacterLiteral
                    {
                    CharacterLiteral228=(Token)match(input,CharacterLiteral,FOLLOW_CharacterLiteral_in_literal2959); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CharacterLiteral.add(CharacterLiteral228);



                    // AST REWRITE
                    // elements: CharacterLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 500:26: -> ^( CHARVAL CharacterLiteral )
                    {
                        // jkit/java/Java.g:500:29: ^( CHARVAL CharacterLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CHARVAL, "CHARVAL"), root_1);

                        adaptor.addChild(root_1, stream_CharacterLiteral.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:501:9: StringLiteral
                    {
                    StringLiteral229=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_literal2977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral229);



                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 501:23: -> ^( STRINGVAL StringLiteral )
                    {
                        // jkit/java/Java.g:501:26: ^( STRINGVAL StringLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STRINGVAL, "STRINGVAL"), root_1);

                        adaptor.addChild(root_1, stream_StringLiteral.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:502:9: booleanLiteral
                    {
                    pushFollow(FOLLOW_booleanLiteral_in_literal2995);
                    booleanLiteral230=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_booleanLiteral.add(booleanLiteral230.getTree());


                    // AST REWRITE
                    // elements: booleanLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 502:24: -> ^( BOOLVAL booleanLiteral )
                    {
                        // jkit/java/Java.g:502:27: ^( BOOLVAL booleanLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BOOLVAL, "BOOLVAL"), root_1);

                        adaptor.addChild(root_1, stream_booleanLiteral.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:503:9: 'null'
                    {
                    string_literal231=(Token)match(input,157,FOLLOW_157_in_literal3013); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(string_literal231);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 503:16: -> ^( NULLVAL )
                    {
                        // jkit/java/Java.g:503:19: ^( NULLVAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NULLVAL, "NULLVAL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class integerLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integerLiteral"
    // jkit/java/Java.g:506:1: integerLiteral : ( HexLiteral | OctalLiteral | DecimalLiteral );
    public final JavaParser.integerLiteral_return integerLiteral() throws RecognitionException {
        JavaParser.integerLiteral_return retval = new JavaParser.integerLiteral_return();
        retval.start = input.LT(1);
        int integerLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token set232=null;

        Object set232_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // jkit/java/Java.g:507:5: ( HexLiteral | OctalLiteral | DecimalLiteral )
            // jkit/java/Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set232=(Token)input.LT(1);
            if ( (input.LA(1)>=HexLiteral && input.LA(1)<=DecimalLiteral) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set232));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, integerLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integerLiteral"

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "booleanLiteral"
    // jkit/java/Java.g:512:1: booleanLiteral : ( 'true' | 'false' );
    public final JavaParser.booleanLiteral_return booleanLiteral() throws RecognitionException {
        JavaParser.booleanLiteral_return retval = new JavaParser.booleanLiteral_return();
        retval.start = input.LT(1);
        int booleanLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token set233=null;

        Object set233_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // jkit/java/Java.g:513:5: ( 'true' | 'false' )
            // jkit/java/Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set233=(Token)input.LT(1);
            if ( (input.LA(1)>=158 && input.LA(1)<=159) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set233));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, booleanLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"

    public static class annotations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotations"
    // jkit/java/Java.g:519:1: annotations : ( annotation )+ ;
    public final JavaParser.annotations_return annotations() throws RecognitionException {
        JavaParser.annotations_return retval = new JavaParser.annotations_return();
        retval.start = input.LT(1);
        int annotations_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotation_return annotation234 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // jkit/java/Java.g:520:2: ( ( annotation )+ )
            // jkit/java/Java.g:520:4: ( annotation )+
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:520:4: ( annotation )+
            int cnt80=0;
            loop80:
            do {
                int alt80=2;
                alt80 = dfa80.predict(input);
                switch (alt80) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations3101);
            	    annotation234=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation234.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt80 >= 1 ) break loop80;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(80, input);
                        throw eee;
                }
                cnt80++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, annotations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotations"

    public static class annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // jkit/java/Java.g:523:1: annotation : '@' annotationName ( '(' ( elementValuePairs )? ')' )? -> ^( ANNOTATION annotationName ) ;
    public final JavaParser.annotation_return annotation() throws RecognitionException {
        JavaParser.annotation_return retval = new JavaParser.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal235=null;
        Token char_literal237=null;
        Token char_literal239=null;
        JavaParser.annotationName_return annotationName236 = null;

        JavaParser.elementValuePairs_return elementValuePairs238 = null;


        Object char_literal235_tree=null;
        Object char_literal237_tree=null;
        Object char_literal239_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleSubtreeStream stream_annotationName=new RewriteRuleSubtreeStream(adaptor,"rule annotationName");
        RewriteRuleSubtreeStream stream_elementValuePairs=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairs");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // jkit/java/Java.g:524:2: ( '@' annotationName ( '(' ( elementValuePairs )? ')' )? -> ^( ANNOTATION annotationName ) )
            // jkit/java/Java.g:524:4: '@' annotationName ( '(' ( elementValuePairs )? ')' )?
            {
            char_literal235=(Token)match(input,160,FOLLOW_160_in_annotation3113); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(char_literal235);

            pushFollow(FOLLOW_annotationName_in_annotation3115);
            annotationName236=annotationName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationName.add(annotationName236.getTree());
            // jkit/java/Java.g:524:23: ( '(' ( elementValuePairs )? ')' )?
            int alt82=2;
            alt82 = dfa82.predict(input);
            switch (alt82) {
                case 1 :
                    // jkit/java/Java.g:524:24: '(' ( elementValuePairs )? ')'
                    {
                    char_literal237=(Token)match(input,154,FOLLOW_154_in_annotation3118); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_154.add(char_literal237);

                    // jkit/java/Java.g:524:28: ( elementValuePairs )?
                    int alt81=2;
                    alt81 = dfa81.predict(input);
                    switch (alt81) {
                        case 1 :
                            // jkit/java/Java.g:0:0: elementValuePairs
                            {
                            pushFollow(FOLLOW_elementValuePairs_in_annotation3120);
                            elementValuePairs238=elementValuePairs();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairs.add(elementValuePairs238.getTree());

                            }
                            break;

                    }

                    char_literal239=(Token)match(input,155,FOLLOW_155_in_annotation3123); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_155.add(char_literal239);


                    }
                    break;

            }



            // AST REWRITE
            // elements: annotationName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 524:53: -> ^( ANNOTATION annotationName )
            {
                // jkit/java/Java.g:524:56: ^( ANNOTATION annotationName )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_annotationName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationName"
    // jkit/java/Java.g:527:1: annotationName : Identifier ( '.' Identifier )* ;
    public final JavaParser.annotationName_return annotationName() throws RecognitionException {
        JavaParser.annotationName_return retval = new JavaParser.annotationName_return();
        retval.start = input.LT(1);
        int annotationName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier240=null;
        Token char_literal241=null;
        Token Identifier242=null;

        Object Identifier240_tree=null;
        Object char_literal241_tree=null;
        Object Identifier242_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // jkit/java/Java.g:528:2: ( Identifier ( '.' Identifier )* )
            // jkit/java/Java.g:528:4: Identifier ( '.' Identifier )*
            {
            root_0 = (Object)adaptor.nil();

            Identifier240=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationName3145); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier240_tree = (Object)adaptor.create(Identifier240);
            adaptor.addChild(root_0, Identifier240_tree);
            }
            // jkit/java/Java.g:528:15: ( '.' Identifier )*
            loop83:
            do {
                int alt83=2;
                alt83 = dfa83.predict(input);
                switch (alt83) {
            	case 1 :
            	    // jkit/java/Java.g:528:16: '.' Identifier
            	    {
            	    char_literal241=(Token)match(input,117,FOLLOW_117_in_annotationName3148); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal241_tree = (Object)adaptor.create(char_literal241);
            	    adaptor.addChild(root_0, char_literal241_tree);
            	    }
            	    Identifier242=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationName3150); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    Identifier242_tree = (Object)adaptor.create(Identifier242);
            	    adaptor.addChild(root_0, Identifier242_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, annotationName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationName"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairs"
    // jkit/java/Java.g:531:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
    public final JavaParser.elementValuePairs_return elementValuePairs() throws RecognitionException {
        JavaParser.elementValuePairs_return retval = new JavaParser.elementValuePairs_return();
        retval.start = input.LT(1);
        int elementValuePairs_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal244=null;
        JavaParser.elementValuePair_return elementValuePair243 = null;

        JavaParser.elementValuePair_return elementValuePair245 = null;


        Object char_literal244_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // jkit/java/Java.g:532:2: ( elementValuePair ( ',' elementValuePair )* )
            // jkit/java/Java.g:532:4: elementValuePair ( ',' elementValuePair )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs3164);
            elementValuePair243=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair243.getTree());
            // jkit/java/Java.g:532:21: ( ',' elementValuePair )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==123) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // jkit/java/Java.g:532:22: ',' elementValuePair
            	    {
            	    char_literal244=(Token)match(input,123,FOLLOW_123_in_elementValuePairs3167); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal244_tree = (Object)adaptor.create(char_literal244);
            	    adaptor.addChild(root_0, char_literal244_tree);
            	    }
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs3169);
            	    elementValuePair245=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair245.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, elementValuePairs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePair"
    // jkit/java/Java.g:535:1: elementValuePair : ( Identifier '=' )? elementValue ;
    public final JavaParser.elementValuePair_return elementValuePair() throws RecognitionException {
        JavaParser.elementValuePair_return retval = new JavaParser.elementValuePair_return();
        retval.start = input.LT(1);
        int elementValuePair_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier246=null;
        Token char_literal247=null;
        JavaParser.elementValue_return elementValue248 = null;


        Object Identifier246_tree=null;
        Object char_literal247_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // jkit/java/Java.g:536:2: ( ( Identifier '=' )? elementValue )
            // jkit/java/Java.g:536:4: ( Identifier '=' )? elementValue
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:536:4: ( Identifier '=' )?
            int alt85=2;
            alt85 = dfa85.predict(input);
            switch (alt85) {
                case 1 :
                    // jkit/java/Java.g:536:5: Identifier '='
                    {
                    Identifier246=(Token)match(input,Identifier,FOLLOW_Identifier_in_elementValuePair3184); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier246_tree = (Object)adaptor.create(Identifier246);
                    adaptor.addChild(root_0, Identifier246_tree);
                    }
                    char_literal247=(Token)match(input,133,FOLLOW_133_in_elementValuePair3186); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal247_tree = (Object)adaptor.create(char_literal247);
                    adaptor.addChild(root_0, char_literal247_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_elementValue_in_elementValuePair3190);
            elementValue248=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue248.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, elementValuePair_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValue"
    // jkit/java/Java.g:539:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );
    public final JavaParser.elementValue_return elementValue() throws RecognitionException {
        JavaParser.elementValue_return retval = new JavaParser.elementValue_return();
        retval.start = input.LT(1);
        int elementValue_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.conditionalExpression_return conditionalExpression249 = null;

        JavaParser.annotation_return annotation250 = null;

        JavaParser.elementValueArrayInitializer_return elementValueArrayInitializer251 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // jkit/java/Java.g:540:2: ( conditionalExpression | annotation | elementValueArrayInitializer )
            int alt86=3;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    // jkit/java/Java.g:540:4: conditionalExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_conditionalExpression_in_elementValue3202);
                    conditionalExpression249=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression249.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:541:6: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_elementValue3209);
                    annotation250=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation250.getTree());

                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:542:6: elementValueArrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue3216);
                    elementValueArrayInitializer251=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValueArrayInitializer251.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, elementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // jkit/java/Java.g:545:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? '}' ;
    public final JavaParser.elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        JavaParser.elementValueArrayInitializer_return retval = new JavaParser.elementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int elementValueArrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal252=null;
        Token char_literal254=null;
        Token char_literal256=null;
        JavaParser.elementValue_return elementValue253 = null;

        JavaParser.elementValue_return elementValue255 = null;


        Object char_literal252_tree=null;
        Object char_literal254_tree=null;
        Object char_literal256_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // jkit/java/Java.g:546:2: ( '{' ( elementValue ( ',' elementValue )* )? '}' )
            // jkit/java/Java.g:546:4: '{' ( elementValue ( ',' elementValue )* )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal252=(Token)match(input,126,FOLLOW_126_in_elementValueArrayInitializer3228); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal252_tree = (Object)adaptor.create(char_literal252);
            adaptor.addChild(root_0, char_literal252_tree);
            }
            // jkit/java/Java.g:546:8: ( elementValue ( ',' elementValue )* )?
            int alt88=2;
            alt88 = dfa88.predict(input);
            switch (alt88) {
                case 1 :
                    // jkit/java/Java.g:546:9: elementValue ( ',' elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer3231);
                    elementValue253=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue253.getTree());
                    // jkit/java/Java.g:546:22: ( ',' elementValue )*
                    loop87:
                    do {
                        int alt87=2;
                        int LA87_0 = input.LA(1);

                        if ( (LA87_0==123) ) {
                            alt87=1;
                        }


                        switch (alt87) {
                    	case 1 :
                    	    // jkit/java/Java.g:546:23: ',' elementValue
                    	    {
                    	    char_literal254=(Token)match(input,123,FOLLOW_123_in_elementValueArrayInitializer3234); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal254_tree = (Object)adaptor.create(char_literal254);
                    	    adaptor.addChild(root_0, char_literal254_tree);
                    	    }
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer3236);
                    	    elementValue255=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue255.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop87;
                        }
                    } while (true);


                    }
                    break;

            }

            char_literal256=(Token)match(input,127,FOLLOW_127_in_elementValueArrayInitializer3243); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal256_tree = (Object)adaptor.create(char_literal256);
            adaptor.addChild(root_0, char_literal256_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, elementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // jkit/java/Java.g:549:1: annotationTypeDeclaration : '@' 'interface' Identifier annotationTypeBody ;
    public final JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration() throws RecognitionException {
        JavaParser.annotationTypeDeclaration_return retval = new JavaParser.annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal257=null;
        Token string_literal258=null;
        Token Identifier259=null;
        JavaParser.annotationTypeBody_return annotationTypeBody260 = null;


        Object char_literal257_tree=null;
        Object string_literal258_tree=null;
        Object Identifier259_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // jkit/java/Java.g:550:2: ( '@' 'interface' Identifier annotationTypeBody )
            // jkit/java/Java.g:550:4: '@' 'interface' Identifier annotationTypeBody
            {
            root_0 = (Object)adaptor.nil();

            char_literal257=(Token)match(input,160,FOLLOW_160_in_annotationTypeDeclaration3255); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal257_tree = (Object)adaptor.create(char_literal257);
            adaptor.addChild(root_0, char_literal257_tree);
            }
            string_literal258=(Token)match(input,128,FOLLOW_128_in_annotationTypeDeclaration3257); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal258_tree = (Object)adaptor.create(string_literal258);
            adaptor.addChild(root_0, string_literal258_tree);
            }
            Identifier259=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationTypeDeclaration3259); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier259_tree = (Object)adaptor.create(Identifier259);
            adaptor.addChild(root_0, Identifier259_tree);
            }
            pushFollow(FOLLOW_annotationTypeBody_in_annotationTypeDeclaration3261);
            annotationTypeBody260=annotationTypeBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeBody260.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationTypeBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeBody"
    // jkit/java/Java.g:553:1: annotationTypeBody : '{' ( annotationTypeElementDeclarations )? '}' ;
    public final JavaParser.annotationTypeBody_return annotationTypeBody() throws RecognitionException {
        JavaParser.annotationTypeBody_return retval = new JavaParser.annotationTypeBody_return();
        retval.start = input.LT(1);
        int annotationTypeBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal261=null;
        Token char_literal263=null;
        JavaParser.annotationTypeElementDeclarations_return annotationTypeElementDeclarations262 = null;


        Object char_literal261_tree=null;
        Object char_literal263_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // jkit/java/Java.g:554:2: ( '{' ( annotationTypeElementDeclarations )? '}' )
            // jkit/java/Java.g:554:4: '{' ( annotationTypeElementDeclarations )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal261=(Token)match(input,126,FOLLOW_126_in_annotationTypeBody3273); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal261_tree = (Object)adaptor.create(char_literal261);
            adaptor.addChild(root_0, char_literal261_tree);
            }
            // jkit/java/Java.g:554:8: ( annotationTypeElementDeclarations )?
            int alt89=2;
            alt89 = dfa89.predict(input);
            switch (alt89) {
                case 1 :
                    // jkit/java/Java.g:554:9: annotationTypeElementDeclarations
                    {
                    pushFollow(FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody3276);
                    annotationTypeElementDeclarations262=annotationTypeElementDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclarations262.getTree());

                    }
                    break;

            }

            char_literal263=(Token)match(input,127,FOLLOW_127_in_annotationTypeBody3280); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal263_tree = (Object)adaptor.create(char_literal263);
            adaptor.addChild(root_0, char_literal263_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, annotationTypeBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeBody"

    public static class annotationTypeElementDeclarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclarations"
    // jkit/java/Java.g:557:1: annotationTypeElementDeclarations : ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )* ;
    public final JavaParser.annotationTypeElementDeclarations_return annotationTypeElementDeclarations() throws RecognitionException {
        JavaParser.annotationTypeElementDeclarations_return retval = new JavaParser.annotationTypeElementDeclarations_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclarations_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration264 = null;

        JavaParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration265 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // jkit/java/Java.g:558:2: ( ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )* )
            // jkit/java/Java.g:558:4: ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )*
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:558:4: ( annotationTypeElementDeclaration )
            // jkit/java/Java.g:558:5: annotationTypeElementDeclaration
            {
            pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3293);
            annotationTypeElementDeclaration264=annotationTypeElementDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclaration264.getTree());

            }

            // jkit/java/Java.g:558:39: ( annotationTypeElementDeclaration )*
            loop90:
            do {
                int alt90=2;
                alt90 = dfa90.predict(input);
                switch (alt90) {
            	case 1 :
            	    // jkit/java/Java.g:558:40: annotationTypeElementDeclaration
            	    {
            	    pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3297);
            	    annotationTypeElementDeclaration265=annotationTypeElementDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclaration265.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, annotationTypeElementDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclarations"

    public static class annotationTypeElementDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclaration"
    // jkit/java/Java.g:561:1: annotationTypeElementDeclaration : ( modifier )* annotationTypeElementRest ;
    public final JavaParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration() throws RecognitionException {
        JavaParser.annotationTypeElementDeclaration_return retval = new JavaParser.annotationTypeElementDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclaration_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.modifier_return modifier266 = null;

        JavaParser.annotationTypeElementRest_return annotationTypeElementRest267 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // jkit/java/Java.g:562:2: ( ( modifier )* annotationTypeElementRest )
            // jkit/java/Java.g:562:4: ( modifier )* annotationTypeElementRest
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:562:4: ( modifier )*
            loop91:
            do {
                int alt91=2;
                alt91 = dfa91.predict(input);
                switch (alt91) {
            	case 1 :
            	    // jkit/java/Java.g:562:5: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_annotationTypeElementDeclaration3312);
            	    modifier266=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier266.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);

            pushFollow(FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration3316);
            annotationTypeElementRest267=annotationTypeElementRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementRest267.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, annotationTypeElementDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclaration"

    public static class annotationTypeElementRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementRest"
    // jkit/java/Java.g:565:1: annotationTypeElementRest : ( type annotationMethodOrConstantRest ';' | classDeclaration ( ';' )? | interfaceDeclaration ( ';' )? | enumDeclaration ( ';' )? | annotationTypeDeclaration ( ';' )? );
    public final JavaParser.annotationTypeElementRest_return annotationTypeElementRest() throws RecognitionException {
        JavaParser.annotationTypeElementRest_return retval = new JavaParser.annotationTypeElementRest_return();
        retval.start = input.LT(1);
        int annotationTypeElementRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal270=null;
        Token char_literal272=null;
        Token char_literal274=null;
        Token char_literal276=null;
        Token char_literal278=null;
        JavaParser.type_return type268 = null;

        JavaParser.annotationMethodOrConstantRest_return annotationMethodOrConstantRest269 = null;

        JavaParser.classDeclaration_return classDeclaration271 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration273 = null;

        JavaParser.enumDeclaration_return enumDeclaration275 = null;

        JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration277 = null;


        Object char_literal270_tree=null;
        Object char_literal272_tree=null;
        Object char_literal274_tree=null;
        Object char_literal276_tree=null;
        Object char_literal278_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // jkit/java/Java.g:566:2: ( type annotationMethodOrConstantRest ';' | classDeclaration ( ';' )? | interfaceDeclaration ( ';' )? | enumDeclaration ( ';' )? | annotationTypeDeclaration ( ';' )? )
            int alt96=5;
            switch ( input.LA(1) ) {
            case Identifier:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
                {
                alt96=1;
                }
                break;
            case 119:
                {
                alt96=2;
                }
                break;
            case 128:
                {
                alt96=3;
                }
                break;
            case 160:
                {
                int LA96_5 = input.LA(2);

                if ( (LA96_5==128) ) {
                    int LA96_7 = input.LA(3);

                    if ( (synpred134_Java()) ) {
                        alt96=3;
                    }
                    else if ( (true) ) {
                        alt96=5;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 96, 7, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 5, input);

                    throw nvae;
                }
                }
                break;
            case ENUM:
                {
                alt96=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;
            }

            switch (alt96) {
                case 1 :
                    // jkit/java/Java.g:566:4: type annotationMethodOrConstantRest ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_annotationTypeElementRest3328);
                    type268=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type268.getTree());
                    pushFollow(FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest3330);
                    annotationMethodOrConstantRest269=annotationMethodOrConstantRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationMethodOrConstantRest269.getTree());
                    char_literal270=(Token)match(input,114,FOLLOW_114_in_annotationTypeElementRest3332); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal270_tree = (Object)adaptor.create(char_literal270);
                    adaptor.addChild(root_0, char_literal270_tree);
                    }

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:567:6: classDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_annotationTypeElementRest3339);
                    classDeclaration271=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration271.getTree());
                    // jkit/java/Java.g:567:23: ( ';' )?
                    int alt92=2;
                    alt92 = dfa92.predict(input);
                    switch (alt92) {
                        case 1 :
                            // jkit/java/Java.g:0:0: ';'
                            {
                            char_literal272=(Token)match(input,114,FOLLOW_114_in_annotationTypeElementRest3341); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal272_tree = (Object)adaptor.create(char_literal272);
                            adaptor.addChild(root_0, char_literal272_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:568:6: interfaceDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_annotationTypeElementRest3349);
                    interfaceDeclaration273=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration273.getTree());
                    // jkit/java/Java.g:568:27: ( ';' )?
                    int alt93=2;
                    alt93 = dfa93.predict(input);
                    switch (alt93) {
                        case 1 :
                            // jkit/java/Java.g:0:0: ';'
                            {
                            char_literal274=(Token)match(input,114,FOLLOW_114_in_annotationTypeElementRest3351); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal274_tree = (Object)adaptor.create(char_literal274);
                            adaptor.addChild(root_0, char_literal274_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:569:6: enumDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enumDeclaration_in_annotationTypeElementRest3359);
                    enumDeclaration275=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDeclaration275.getTree());
                    // jkit/java/Java.g:569:22: ( ';' )?
                    int alt94=2;
                    alt94 = dfa94.predict(input);
                    switch (alt94) {
                        case 1 :
                            // jkit/java/Java.g:0:0: ';'
                            {
                            char_literal276=(Token)match(input,114,FOLLOW_114_in_annotationTypeElementRest3361); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal276_tree = (Object)adaptor.create(char_literal276);
                            adaptor.addChild(root_0, char_literal276_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:570:6: annotationTypeDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest3369);
                    annotationTypeDeclaration277=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration277.getTree());
                    // jkit/java/Java.g:570:32: ( ';' )?
                    int alt95=2;
                    alt95 = dfa95.predict(input);
                    switch (alt95) {
                        case 1 :
                            // jkit/java/Java.g:0:0: ';'
                            {
                            char_literal278=(Token)match(input,114,FOLLOW_114_in_annotationTypeElementRest3371); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal278_tree = (Object)adaptor.create(char_literal278);
                            adaptor.addChild(root_0, char_literal278_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, annotationTypeElementRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementRest"

    public static class annotationMethodOrConstantRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodOrConstantRest"
    // jkit/java/Java.g:573:1: annotationMethodOrConstantRest : ( annotationMethodRest | annotationConstantRest );
    public final JavaParser.annotationMethodOrConstantRest_return annotationMethodOrConstantRest() throws RecognitionException {
        JavaParser.annotationMethodOrConstantRest_return retval = new JavaParser.annotationMethodOrConstantRest_return();
        retval.start = input.LT(1);
        int annotationMethodOrConstantRest_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotationMethodRest_return annotationMethodRest279 = null;

        JavaParser.annotationConstantRest_return annotationConstantRest280 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // jkit/java/Java.g:574:2: ( annotationMethodRest | annotationConstantRest )
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==Identifier) ) {
                int LA97_1 = input.LA(2);

                if ( (LA97_1==154) ) {
                    alt97=1;
                }
                else if ( (LA97_1==114||LA97_1==123||LA97_1==131||LA97_1==133) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;
            }
            switch (alt97) {
                case 1 :
                    // jkit/java/Java.g:574:4: annotationMethodRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest3384);
                    annotationMethodRest279=annotationMethodRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationMethodRest279.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:575:6: annotationConstantRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest3391);
                    annotationConstantRest280=annotationConstantRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationConstantRest280.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, annotationMethodOrConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodOrConstantRest"

    public static class annotationMethodRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodRest"
    // jkit/java/Java.g:578:1: annotationMethodRest : Identifier '(' ')' ( defaultValue )? ;
    public final JavaParser.annotationMethodRest_return annotationMethodRest() throws RecognitionException {
        JavaParser.annotationMethodRest_return retval = new JavaParser.annotationMethodRest_return();
        retval.start = input.LT(1);
        int annotationMethodRest_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier281=null;
        Token char_literal282=null;
        Token char_literal283=null;
        JavaParser.defaultValue_return defaultValue284 = null;


        Object Identifier281_tree=null;
        Object char_literal282_tree=null;
        Object char_literal283_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // jkit/java/Java.g:579:3: ( Identifier '(' ')' ( defaultValue )? )
            // jkit/java/Java.g:579:5: Identifier '(' ')' ( defaultValue )?
            {
            root_0 = (Object)adaptor.nil();

            Identifier281=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationMethodRest3404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier281_tree = (Object)adaptor.create(Identifier281);
            adaptor.addChild(root_0, Identifier281_tree);
            }
            char_literal282=(Token)match(input,154,FOLLOW_154_in_annotationMethodRest3406); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal282_tree = (Object)adaptor.create(char_literal282);
            adaptor.addChild(root_0, char_literal282_tree);
            }
            char_literal283=(Token)match(input,155,FOLLOW_155_in_annotationMethodRest3408); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal283_tree = (Object)adaptor.create(char_literal283);
            adaptor.addChild(root_0, char_literal283_tree);
            }
            // jkit/java/Java.g:579:24: ( defaultValue )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==161) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // jkit/java/Java.g:579:25: defaultValue
                    {
                    pushFollow(FOLLOW_defaultValue_in_annotationMethodRest3411);
                    defaultValue284=defaultValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defaultValue284.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, annotationMethodRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodRest"

    public static class annotationConstantRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationConstantRest"
    // jkit/java/Java.g:582:1: annotationConstantRest : variableDeclarators ;
    public final JavaParser.annotationConstantRest_return annotationConstantRest() throws RecognitionException {
        JavaParser.annotationConstantRest_return retval = new JavaParser.annotationConstantRest_return();
        retval.start = input.LT(1);
        int annotationConstantRest_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.variableDeclarators_return variableDeclarators285 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // jkit/java/Java.g:583:3: ( variableDeclarators )
            // jkit/java/Java.g:583:5: variableDeclarators
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclarators_in_annotationConstantRest3428);
            variableDeclarators285=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarators285.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, annotationConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationConstantRest"

    public static class defaultValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultValue"
    // jkit/java/Java.g:586:1: defaultValue : 'default' elementValue ;
    public final JavaParser.defaultValue_return defaultValue() throws RecognitionException {
        JavaParser.defaultValue_return retval = new JavaParser.defaultValue_return();
        retval.start = input.LT(1);
        int defaultValue_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal286=null;
        JavaParser.elementValue_return elementValue287 = null;


        Object string_literal286_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // jkit/java/Java.g:587:3: ( 'default' elementValue )
            // jkit/java/Java.g:587:5: 'default' elementValue
            {
            root_0 = (Object)adaptor.nil();

            string_literal286=(Token)match(input,161,FOLLOW_161_in_defaultValue3443); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal286_tree = (Object)adaptor.create(string_literal286);
            adaptor.addChild(root_0, string_literal286_tree);
            }
            pushFollow(FOLLOW_elementValue_in_defaultValue3445);
            elementValue287=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue287.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, defaultValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "defaultValue"

    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // jkit/java/Java.g:592:1: block : '{' ( blockStatement )* '}' -> ^( BLOCK ( blockStatement )* ) ;
    public final JavaParser.block_return block() throws RecognitionException {
        JavaParser.block_return retval = new JavaParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal288=null;
        Token char_literal290=null;
        JavaParser.blockStatement_return blockStatement289 = null;


        Object char_literal288_tree=null;
        Object char_literal290_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // jkit/java/Java.g:593:2: ( '{' ( blockStatement )* '}' -> ^( BLOCK ( blockStatement )* ) )
            // jkit/java/Java.g:593:4: '{' ( blockStatement )* '}'
            {
            char_literal288=(Token)match(input,126,FOLLOW_126_in_block3459); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal288);

            // jkit/java/Java.g:593:8: ( blockStatement )*
            loop99:
            do {
                int alt99=2;
                alt99 = dfa99.predict(input);
                switch (alt99) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block3461);
            	    blockStatement289=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement289.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);

            char_literal290=(Token)match(input,127,FOLLOW_127_in_block3464); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal290);



            // AST REWRITE
            // elements: blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 593:28: -> ^( BLOCK ( blockStatement )* )
            {
                // jkit/java/Java.g:593:31: ^( BLOCK ( blockStatement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, "BLOCK"), root_1);

                // jkit/java/Java.g:593:39: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // jkit/java/Java.g:596:1: blockStatement : ( localVariableDeclaration | classOrInterfaceDeclaration | statement );
    public final JavaParser.blockStatement_return blockStatement() throws RecognitionException {
        JavaParser.blockStatement_return retval = new JavaParser.blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.localVariableDeclaration_return localVariableDeclaration291 = null;

        JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration292 = null;

        JavaParser.statement_return statement293 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // jkit/java/Java.g:597:2: ( localVariableDeclaration | classOrInterfaceDeclaration | statement )
            int alt100=3;
            alt100 = dfa100.predict(input);
            switch (alt100) {
                case 1 :
                    // jkit/java/Java.g:597:4: localVariableDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_blockStatement3485);
                    localVariableDeclaration291=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration291.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:598:4: classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_blockStatement3490);
                    classOrInterfaceDeclaration292=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceDeclaration292.getTree());

                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:599:7: statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_blockStatement3498);
                    statement293=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement293.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclaration"
    // jkit/java/Java.g:602:1: localVariableDeclaration : ( variableModifier )* type variableDeclarators ';' -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) ;
    public final JavaParser.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        JavaParser.localVariableDeclaration_return retval = new JavaParser.localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal297=null;
        JavaParser.variableModifier_return variableModifier294 = null;

        JavaParser.type_return type295 = null;

        JavaParser.variableDeclarators_return variableDeclarators296 = null;


        Object char_literal297_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // jkit/java/Java.g:603:2: ( ( variableModifier )* type variableDeclarators ';' -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) )
            // jkit/java/Java.g:603:4: ( variableModifier )* type variableDeclarators ';'
            {
            // jkit/java/Java.g:603:4: ( variableModifier )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==138||LA101_0==160) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_localVariableDeclaration3510);
            	    variableModifier294=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier294.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_localVariableDeclaration3513);
            type295=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type295.getTree());
            pushFollow(FOLLOW_variableDeclarators_in_localVariableDeclaration3515);
            variableDeclarators296=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarators.add(variableDeclarators296.getTree());
            char_literal297=(Token)match(input,114,FOLLOW_114_in_localVariableDeclaration3517); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(char_literal297);



            // AST REWRITE
            // elements: type, variableDeclarators, variableModifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 603:51: -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
            {
                // jkit/java/Java.g:603:54: ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARDEF, "VARDEF"), root_1);

                // jkit/java/Java.g:603:63: ^( MODIFIERS ( variableModifier )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                // jkit/java/Java.g:603:75: ( variableModifier )*
                while ( stream_variableModifier.hasNext() ) {
                    adaptor.addChild(root_2, stream_variableModifier.nextTree());

                }
                stream_variableModifier.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_variableDeclarators.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // jkit/java/Java.g:606:1: statement : ( block | lc= 'assert' expression ( ':' expression )? ';' -> ^( ASSERT[$lc] expression ( expression )? ) | lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> ^( IF[$lc] parExpression statement ( statement )? ) | lc= 'for' '(' forControl ')' statement -> ^( FOR[$lc] forControl statement ) | lc= 'while' parExpression statement -> ^( WHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'do' statement 'while' parExpression ';' -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) ) | lc= 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups ) | lc= 'synchronized' parExpression block -> ^( SYNCHRONIZED[$lc] parExpression block ) | lc= 'return' ( expression )? ';' -> ^( RETURN[$lc] ( expression )? ) | lc= 'throw' expression ';' -> ^( THROW[$lc] expression ) | lc= 'break' ( Identifier )? ';' -> ^( BREAK[$lc] ( Identifier )? ) | lc= 'continue' ( Identifier )? ';' -> ^( CONTINUE[$lc] ( Identifier )? ) | ';' -> ^( BLOCK ) | statementExpression ';' -> statementExpression | lc= Identifier ':' statement -> ^( LABEL[$lc] Identifier statement ) );
    public final JavaParser.statement_return statement() throws RecognitionException {
        JavaParser.statement_return retval = new JavaParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token fc=null;
        Token char_literal300=null;
        Token char_literal302=null;
        Token string_literal305=null;
        Token char_literal307=null;
        Token char_literal309=null;
        Token string_literal314=null;
        Token char_literal316=null;
        Token char_literal323=null;
        Token char_literal325=null;
        Token char_literal329=null;
        Token char_literal331=null;
        Token Identifier332=null;
        Token char_literal333=null;
        Token Identifier334=null;
        Token char_literal335=null;
        Token char_literal336=null;
        Token char_literal338=null;
        Token char_literal339=null;
        JavaParser.block_return block298 = null;

        JavaParser.expression_return expression299 = null;

        JavaParser.expression_return expression301 = null;

        JavaParser.parExpression_return parExpression303 = null;

        JavaParser.statement_return statement304 = null;

        JavaParser.statement_return statement306 = null;

        JavaParser.forControl_return forControl308 = null;

        JavaParser.statement_return statement310 = null;

        JavaParser.parExpression_return parExpression311 = null;

        JavaParser.statement_return statement312 = null;

        JavaParser.statement_return statement313 = null;

        JavaParser.parExpression_return parExpression315 = null;

        JavaParser.block_return block317 = null;

        JavaParser.catches_return catches318 = null;

        JavaParser.block_return block319 = null;

        JavaParser.catches_return catches320 = null;

        JavaParser.block_return block321 = null;

        JavaParser.parExpression_return parExpression322 = null;

        JavaParser.switchBlockStatementGroups_return switchBlockStatementGroups324 = null;

        JavaParser.parExpression_return parExpression326 = null;

        JavaParser.block_return block327 = null;

        JavaParser.expression_return expression328 = null;

        JavaParser.expression_return expression330 = null;

        JavaParser.statementExpression_return statementExpression337 = null;

        JavaParser.statement_return statement340 = null;


        Object lc_tree=null;
        Object fc_tree=null;
        Object char_literal300_tree=null;
        Object char_literal302_tree=null;
        Object string_literal305_tree=null;
        Object char_literal307_tree=null;
        Object char_literal309_tree=null;
        Object string_literal314_tree=null;
        Object char_literal316_tree=null;
        Object char_literal323_tree=null;
        Object char_literal325_tree=null;
        Object char_literal329_tree=null;
        Object char_literal331_tree=null;
        Object Identifier332_tree=null;
        Object char_literal333_tree=null;
        Object Identifier334_tree=null;
        Object char_literal335_tree=null;
        Object char_literal336_tree=null;
        Object char_literal338_tree=null;
        Object char_literal339_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleSubtreeStream stream_parExpression=new RewriteRuleSubtreeStream(adaptor,"rule parExpression");
        RewriteRuleSubtreeStream stream_statementExpression=new RewriteRuleSubtreeStream(adaptor,"rule statementExpression");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
        RewriteRuleSubtreeStream stream_switchBlockStatementGroups=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockStatementGroups");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_forControl=new RewriteRuleSubtreeStream(adaptor,"rule forControl");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // jkit/java/Java.g:607:2: ( block | lc= 'assert' expression ( ':' expression )? ';' -> ^( ASSERT[$lc] expression ( expression )? ) | lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> ^( IF[$lc] parExpression statement ( statement )? ) | lc= 'for' '(' forControl ')' statement -> ^( FOR[$lc] forControl statement ) | lc= 'while' parExpression statement -> ^( WHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'do' statement 'while' parExpression ';' -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) ) | lc= 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups ) | lc= 'synchronized' parExpression block -> ^( SYNCHRONIZED[$lc] parExpression block ) | lc= 'return' ( expression )? ';' -> ^( RETURN[$lc] ( expression )? ) | lc= 'throw' expression ';' -> ^( THROW[$lc] expression ) | lc= 'break' ( Identifier )? ';' -> ^( BREAK[$lc] ( Identifier )? ) | lc= 'continue' ( Identifier )? ';' -> ^( CONTINUE[$lc] ( Identifier )? ) | ';' -> ^( BLOCK ) | statementExpression ';' -> statementExpression | lc= Identifier ':' statement -> ^( LABEL[$lc] Identifier statement ) )
            int alt108=16;
            alt108 = dfa108.predict(input);
            switch (alt108) {
                case 1 :
                    // jkit/java/Java.g:607:4: block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_block_in_statement3546);
                    block298=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block298.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:608:7: lc= 'assert' expression ( ':' expression )? ';'
                    {
                    lc=(Token)match(input,162,FOLLOW_162_in_statement3556); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(lc);

                    pushFollow(FOLLOW_expression_in_statement3558);
                    expression299=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression299.getTree());
                    // jkit/java/Java.g:608:30: ( ':' expression )?
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==163) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            // jkit/java/Java.g:608:31: ':' expression
                            {
                            char_literal300=(Token)match(input,163,FOLLOW_163_in_statement3561); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_163.add(char_literal300);

                            pushFollow(FOLLOW_expression_in_statement3563);
                            expression301=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression301.getTree());

                            }
                            break;

                    }

                    char_literal302=(Token)match(input,114,FOLLOW_114_in_statement3567); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_114.add(char_literal302);



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 608:52: -> ^( ASSERT[$lc] expression ( expression )? )
                    {
                        // jkit/java/Java.g:608:55: ^( ASSERT[$lc] expression ( expression )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSERT, lc), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        // jkit/java/Java.g:608:80: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:609:7: lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )?
                    {
                    lc=(Token)match(input,164,FOLLOW_164_in_statement3589); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_164.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement3591);
                    parExpression303=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression303.getTree());
                    pushFollow(FOLLOW_statement_in_statement3593);
                    statement304=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement304.getTree());
                    // jkit/java/Java.g:609:39: ( options {k=1; } : 'else' statement )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==165) ) {
                        int LA103_1 = input.LA(2);

                        if ( (synpred147_Java()) ) {
                            alt103=1;
                        }
                    }
                    switch (alt103) {
                        case 1 :
                            // jkit/java/Java.g:609:55: 'else' statement
                            {
                            string_literal305=(Token)match(input,165,FOLLOW_165_in_statement3603); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_165.add(string_literal305);

                            pushFollow(FOLLOW_statement_in_statement3605);
                            statement306=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement306.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: statement, parExpression, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 609:74: -> ^( IF[$lc] parExpression statement ( statement )? )
                    {
                        // jkit/java/Java.g:609:77: ^( IF[$lc] parExpression statement ( statement )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IF, lc), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());
                        // jkit/java/Java.g:609:111: ( statement )?
                        if ( stream_statement.hasNext() ) {
                            adaptor.addChild(root_1, stream_statement.nextTree());

                        }
                        stream_statement.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:610:7: lc= 'for' '(' forControl ')' statement
                    {
                    lc=(Token)match(input,166,FOLLOW_166_in_statement3631); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_166.add(lc);

                    char_literal307=(Token)match(input,154,FOLLOW_154_in_statement3633); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_154.add(char_literal307);

                    pushFollow(FOLLOW_forControl_in_statement3635);
                    forControl308=forControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_forControl.add(forControl308.getTree());
                    char_literal309=(Token)match(input,155,FOLLOW_155_in_statement3637); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_155.add(char_literal309);

                    pushFollow(FOLLOW_statement_in_statement3639);
                    statement310=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement310.getTree());


                    // AST REWRITE
                    // elements: statement, forControl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 610:45: -> ^( FOR[$lc] forControl statement )
                    {
                        // jkit/java/Java.g:610:48: ^( FOR[$lc] forControl statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FOR, lc), root_1);

                        adaptor.addChild(root_1, stream_forControl.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:611:7: lc= 'while' parExpression statement
                    {
                    lc=(Token)match(input,167,FOLLOW_167_in_statement3660); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement3662);
                    parExpression311=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression311.getTree());
                    pushFollow(FOLLOW_statement_in_statement3664);
                    statement312=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement312.getTree());


                    // AST REWRITE
                    // elements: statement, parExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 611:42: -> ^( WHILE[$lc] ^( TEST parExpression ) statement )
                    {
                        // jkit/java/Java.g:611:45: ^( WHILE[$lc] ^( TEST parExpression ) statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(WHILE, lc), root_1);

                        // jkit/java/Java.g:611:58: ^( TEST parExpression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TEST, "TEST"), root_2);

                        adaptor.addChild(root_2, stream_parExpression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:612:7: lc= 'do' statement 'while' parExpression ';'
                    {
                    lc=(Token)match(input,168,FOLLOW_168_in_statement3689); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_168.add(lc);

                    pushFollow(FOLLOW_statement_in_statement3691);
                    statement313=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement313.getTree());
                    string_literal314=(Token)match(input,167,FOLLOW_167_in_statement3693); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(string_literal314);

                    pushFollow(FOLLOW_parExpression_in_statement3695);
                    parExpression315=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression315.getTree());
                    char_literal316=(Token)match(input,114,FOLLOW_114_in_statement3697); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_114.add(char_literal316);



                    // AST REWRITE
                    // elements: statement, parExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 612:51: -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement )
                    {
                        // jkit/java/Java.g:612:54: ^( DOWHILE[$lc] ^( TEST parExpression ) statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DOWHILE, lc), root_1);

                        // jkit/java/Java.g:612:69: ^( TEST parExpression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TEST, "TEST"), root_2);

                        adaptor.addChild(root_2, stream_parExpression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // jkit/java/Java.g:613:7: lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) )
                    {
                    lc=(Token)match(input,169,FOLLOW_169_in_statement3722); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_169.add(lc);

                    pushFollow(FOLLOW_block_in_statement3724);
                    block317=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block317.getTree());
                    // jkit/java/Java.g:614:7: ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) )
                    int alt104=3;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==176) ) {
                        int LA104_1 = input.LA(2);

                        if ( (LA104_1==154) ) {
                            int LA104_3 = input.LA(3);

                            if ( (synpred152_Java()) ) {
                                alt104=1;
                            }
                            else if ( (synpred153_Java()) ) {
                                alt104=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 104, 3, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 104, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA104_0==170) ) {
                        alt104=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 104, 0, input);

                        throw nvae;
                    }
                    switch (alt104) {
                        case 1 :
                            // jkit/java/Java.g:614:9: catches fc= 'finally' block
                            {
                            pushFollow(FOLLOW_catches_in_statement3734);
                            catches318=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_catches.add(catches318.getTree());
                            fc=(Token)match(input,170,FOLLOW_170_in_statement3738); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_170.add(fc);

                            pushFollow(FOLLOW_block_in_statement3740);
                            block319=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_block.add(block319.getTree());


                            // AST REWRITE
                            // elements: block, catches, block
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 614:36: -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) )
                            {
                                // jkit/java/Java.g:614:39: ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TRY, lc), root_1);

                                adaptor.addChild(root_1, stream_block.nextTree());
                                adaptor.addChild(root_1, stream_catches.nextTree());
                                // jkit/java/Java.g:614:64: ^( FINALLY[$fc] block )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(FINALLY, fc), root_2);

                                adaptor.addChild(root_2, stream_block.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:615:9: catches
                            {
                            pushFollow(FOLLOW_catches_in_statement3768);
                            catches320=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_catches.add(catches320.getTree());


                            // AST REWRITE
                            // elements: catches, block
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 615:17: -> ^( TRY[$lc] block catches )
                            {
                                // jkit/java/Java.g:615:20: ^( TRY[$lc] block catches )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TRY, lc), root_1);

                                adaptor.addChild(root_1, stream_block.nextTree());
                                adaptor.addChild(root_1, stream_catches.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:616:9: fc= 'finally' block
                            {
                            fc=(Token)match(input,170,FOLLOW_170_in_statement3791); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_170.add(fc);

                            pushFollow(FOLLOW_block_in_statement3793);
                            block321=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_block.add(block321.getTree());


                            // AST REWRITE
                            // elements: block, block
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 616:28: -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) )
                            {
                                // jkit/java/Java.g:616:31: ^( TRY[$lc] block ^( FINALLY[$fc] block ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TRY, lc), root_1);

                                adaptor.addChild(root_1, stream_block.nextTree());
                                // jkit/java/Java.g:616:48: ^( FINALLY[$fc] block )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(FINALLY, fc), root_2);

                                adaptor.addChild(root_2, stream_block.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 8 :
                    // jkit/java/Java.g:618:7: lc= 'switch' parExpression '{' switchBlockStatementGroups '}'
                    {
                    lc=(Token)match(input,171,FOLLOW_171_in_statement3827); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement3829);
                    parExpression322=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression322.getTree());
                    char_literal323=(Token)match(input,126,FOLLOW_126_in_statement3831); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_126.add(char_literal323);

                    pushFollow(FOLLOW_switchBlockStatementGroups_in_statement3833);
                    switchBlockStatementGroups324=switchBlockStatementGroups();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchBlockStatementGroups.add(switchBlockStatementGroups324.getTree());
                    char_literal325=(Token)match(input,127,FOLLOW_127_in_statement3835); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(char_literal325);



                    // AST REWRITE
                    // elements: switchBlockStatementGroups, parExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 618:68: -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups )
                    {
                        // jkit/java/Java.g:618:71: ^( SWITCH[$lc] parExpression switchBlockStatementGroups )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SWITCH, lc), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_switchBlockStatementGroups.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // jkit/java/Java.g:619:7: lc= 'synchronized' parExpression block
                    {
                    lc=(Token)match(input,140,FOLLOW_140_in_statement3856); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_140.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement3858);
                    parExpression326=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression326.getTree());
                    pushFollow(FOLLOW_block_in_statement3860);
                    block327=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block327.getTree());


                    // AST REWRITE
                    // elements: parExpression, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 619:45: -> ^( SYNCHRONIZED[$lc] parExpression block )
                    {
                        // jkit/java/Java.g:619:48: ^( SYNCHRONIZED[$lc] parExpression block )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SYNCHRONIZED, lc), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // jkit/java/Java.g:620:7: lc= 'return' ( expression )? ';'
                    {
                    lc=(Token)match(input,172,FOLLOW_172_in_statement3881); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_172.add(lc);

                    // jkit/java/Java.g:620:19: ( expression )?
                    int alt105=2;
                    alt105 = dfa105.predict(input);
                    switch (alt105) {
                        case 1 :
                            // jkit/java/Java.g:0:0: expression
                            {
                            pushFollow(FOLLOW_expression_in_statement3883);
                            expression328=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression328.getTree());

                            }
                            break;

                    }

                    char_literal329=(Token)match(input,114,FOLLOW_114_in_statement3886); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_114.add(char_literal329);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 620:35: -> ^( RETURN[$lc] ( expression )? )
                    {
                        // jkit/java/Java.g:620:38: ^( RETURN[$lc] ( expression )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RETURN, lc), root_1);

                        // jkit/java/Java.g:620:52: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // jkit/java/Java.g:621:7: lc= 'throw' expression ';'
                    {
                    lc=(Token)match(input,173,FOLLOW_173_in_statement3906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_173.add(lc);

                    pushFollow(FOLLOW_expression_in_statement3908);
                    expression330=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression330.getTree());
                    char_literal331=(Token)match(input,114,FOLLOW_114_in_statement3910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_114.add(char_literal331);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 621:33: -> ^( THROW[$lc] expression )
                    {
                        // jkit/java/Java.g:621:36: ^( THROW[$lc] expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROW, lc), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // jkit/java/Java.g:622:7: lc= 'break' ( Identifier )? ';'
                    {
                    lc=(Token)match(input,174,FOLLOW_174_in_statement3929); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_174.add(lc);

                    // jkit/java/Java.g:622:18: ( Identifier )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==Identifier) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // jkit/java/Java.g:0:0: Identifier
                            {
                            Identifier332=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement3931); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier332);


                            }
                            break;

                    }

                    char_literal333=(Token)match(input,114,FOLLOW_114_in_statement3934); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_114.add(char_literal333);



                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 622:34: -> ^( BREAK[$lc] ( Identifier )? )
                    {
                        // jkit/java/Java.g:622:37: ^( BREAK[$lc] ( Identifier )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BREAK, lc), root_1);

                        // jkit/java/Java.g:622:50: ( Identifier )?
                        if ( stream_Identifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_Identifier.nextNode());

                        }
                        stream_Identifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // jkit/java/Java.g:623:7: lc= 'continue' ( Identifier )? ';'
                    {
                    lc=(Token)match(input,175,FOLLOW_175_in_statement3954); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_175.add(lc);

                    // jkit/java/Java.g:623:21: ( Identifier )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==Identifier) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // jkit/java/Java.g:0:0: Identifier
                            {
                            Identifier334=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement3956); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier334);


                            }
                            break;

                    }

                    char_literal335=(Token)match(input,114,FOLLOW_114_in_statement3959); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_114.add(char_literal335);



                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 623:37: -> ^( CONTINUE[$lc] ( Identifier )? )
                    {
                        // jkit/java/Java.g:623:40: ^( CONTINUE[$lc] ( Identifier )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CONTINUE, lc), root_1);

                        // jkit/java/Java.g:623:56: ( Identifier )?
                        if ( stream_Identifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_Identifier.nextNode());

                        }
                        stream_Identifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // jkit/java/Java.g:624:7: ';'
                    {
                    char_literal336=(Token)match(input,114,FOLLOW_114_in_statement3977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_114.add(char_literal336);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 624:11: -> ^( BLOCK )
                    {
                        // jkit/java/Java.g:624:14: ^( BLOCK )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, "BLOCK"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    // jkit/java/Java.g:625:7: statementExpression ';'
                    {
                    pushFollow(FOLLOW_statementExpression_in_statement3992);
                    statementExpression337=statementExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statementExpression.add(statementExpression337.getTree());
                    char_literal338=(Token)match(input,114,FOLLOW_114_in_statement3994); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_114.add(char_literal338);



                    // AST REWRITE
                    // elements: statementExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 625:31: -> statementExpression
                    {
                        adaptor.addChild(root_0, stream_statementExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 16 :
                    // jkit/java/Java.g:626:7: lc= Identifier ':' statement
                    {
                    lc=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement4008); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(lc);

                    char_literal339=(Token)match(input,163,FOLLOW_163_in_statement4010); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_163.add(char_literal339);

                    pushFollow(FOLLOW_statement_in_statement4012);
                    statement340=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement340.getTree());


                    // AST REWRITE
                    // elements: Identifier, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 626:35: -> ^( LABEL[$lc] Identifier statement )
                    {
                        // jkit/java/Java.g:626:38: ^( LABEL[$lc] Identifier statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABEL, lc), root_1);

                        adaptor.addChild(root_1, stream_Identifier.nextNode());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class catches_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catches"
    // jkit/java/Java.g:629:1: catches : catchClause ( catchClause )* ;
    public final JavaParser.catches_return catches() throws RecognitionException {
        JavaParser.catches_return retval = new JavaParser.catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.catchClause_return catchClause341 = null;

        JavaParser.catchClause_return catchClause342 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // jkit/java/Java.g:630:2: ( catchClause ( catchClause )* )
            // jkit/java/Java.g:630:4: catchClause ( catchClause )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_catchClause_in_catches4034);
            catchClause341=catchClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause341.getTree());
            // jkit/java/Java.g:630:16: ( catchClause )*
            loop109:
            do {
                int alt109=2;
                alt109 = dfa109.predict(input);
                switch (alt109) {
            	case 1 :
            	    // jkit/java/Java.g:630:17: catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches4037);
            	    catchClause342=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause342.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // jkit/java/Java.g:633:1: catchClause : lc= 'catch' '(' formalParameter ')' block -> ^( CATCH[$lc] ^( PARAMETER formalParameter ) block ) ;
    public final JavaParser.catchClause_return catchClause() throws RecognitionException {
        JavaParser.catchClause_return retval = new JavaParser.catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token char_literal343=null;
        Token char_literal345=null;
        JavaParser.formalParameter_return formalParameter344 = null;

        JavaParser.block_return block346 = null;


        Object lc_tree=null;
        Object char_literal343_tree=null;
        Object char_literal345_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");
        RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // jkit/java/Java.g:634:2: (lc= 'catch' '(' formalParameter ')' block -> ^( CATCH[$lc] ^( PARAMETER formalParameter ) block ) )
            // jkit/java/Java.g:634:4: lc= 'catch' '(' formalParameter ')' block
            {
            lc=(Token)match(input,176,FOLLOW_176_in_catchClause4053); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(lc);

            char_literal343=(Token)match(input,154,FOLLOW_154_in_catchClause4055); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(char_literal343);

            pushFollow(FOLLOW_formalParameter_in_catchClause4057);
            formalParameter344=formalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter344.getTree());
            char_literal345=(Token)match(input,155,FOLLOW_155_in_catchClause4059); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(char_literal345);

            pushFollow(FOLLOW_block_in_catchClause4061);
            block346=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block346.getTree());


            // AST REWRITE
            // elements: block, formalParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 634:45: -> ^( CATCH[$lc] ^( PARAMETER formalParameter ) block )
            {
                // jkit/java/Java.g:634:48: ^( CATCH[$lc] ^( PARAMETER formalParameter ) block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CATCH, lc), root_1);

                // jkit/java/Java.g:634:61: ^( PARAMETER formalParameter )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETER, "PARAMETER"), root_2);

                adaptor.addChild(root_2, stream_formalParameter.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class formalParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameter"
    // jkit/java/Java.g:637:1: formalParameter : ( variableModifier )* type variableDeclaratorId ;
    public final JavaParser.formalParameter_return formalParameter() throws RecognitionException {
        JavaParser.formalParameter_return retval = new JavaParser.formalParameter_return();
        retval.start = input.LT(1);
        int formalParameter_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.variableModifier_return variableModifier347 = null;

        JavaParser.type_return type348 = null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId349 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // jkit/java/Java.g:638:2: ( ( variableModifier )* type variableDeclaratorId )
            // jkit/java/Java.g:638:4: ( variableModifier )* type variableDeclaratorId
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:638:4: ( variableModifier )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( (LA110_0==138||LA110_0==160) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameter4087);
            	    variableModifier347=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifier347.getTree());

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameter4090);
            type348=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type348.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameter4092);
            variableDeclaratorId349=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclaratorId349.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, formalParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameter"

    public static class switchBlockStatementGroups_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroups"
    // jkit/java/Java.g:641:1: switchBlockStatementGroups : ( switchBlockStatementGroup )* ;
    public final JavaParser.switchBlockStatementGroups_return switchBlockStatementGroups() throws RecognitionException {
        JavaParser.switchBlockStatementGroups_return retval = new JavaParser.switchBlockStatementGroups_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroups_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.switchBlockStatementGroup_return switchBlockStatementGroup350 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // jkit/java/Java.g:642:2: ( ( switchBlockStatementGroup )* )
            // jkit/java/Java.g:642:4: ( switchBlockStatementGroup )*
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:642:4: ( switchBlockStatementGroup )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==161||LA111_0==177) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // jkit/java/Java.g:642:5: switchBlockStatementGroup
            	    {
            	    pushFollow(FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups4106);
            	    switchBlockStatementGroup350=switchBlockStatementGroup();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchBlockStatementGroup350.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, switchBlockStatementGroups_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroups"

    public static class switchBlockStatementGroup_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroup"
    // jkit/java/Java.g:645:1: switchBlockStatementGroup : switchLabel ( blockStatement )* -> ^( switchLabel ^( BLOCK ( blockStatement )* ) ) ;
    public final JavaParser.switchBlockStatementGroup_return switchBlockStatementGroup() throws RecognitionException {
        JavaParser.switchBlockStatementGroup_return retval = new JavaParser.switchBlockStatementGroup_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroup_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.switchLabel_return switchLabel351 = null;

        JavaParser.blockStatement_return blockStatement352 = null;


        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        RewriteRuleSubtreeStream stream_switchLabel=new RewriteRuleSubtreeStream(adaptor,"rule switchLabel");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // jkit/java/Java.g:646:2: ( switchLabel ( blockStatement )* -> ^( switchLabel ^( BLOCK ( blockStatement )* ) ) )
            // jkit/java/Java.g:646:4: switchLabel ( blockStatement )*
            {
            pushFollow(FOLLOW_switchLabel_in_switchBlockStatementGroup4120);
            switchLabel351=switchLabel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_switchLabel.add(switchLabel351.getTree());
            // jkit/java/Java.g:646:16: ( blockStatement )*
            loop112:
            do {
                int alt112=2;
                alt112 = dfa112.predict(input);
                switch (alt112) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchBlockStatementGroup4122);
            	    blockStatement352=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement352.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);



            // AST REWRITE
            // elements: blockStatement, switchLabel
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 646:32: -> ^( switchLabel ^( BLOCK ( blockStatement )* ) )
            {
                // jkit/java/Java.g:646:35: ^( switchLabel ^( BLOCK ( blockStatement )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_switchLabel.nextNode(), root_1);

                // jkit/java/Java.g:646:49: ^( BLOCK ( blockStatement )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, "BLOCK"), root_2);

                // jkit/java/Java.g:646:57: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_2, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, switchBlockStatementGroup_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroup"

    public static class switchLabel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchLabel"
    // jkit/java/Java.g:649:1: switchLabel : (lc= 'case' constantExpression ':' -> ^( CASE[$lc] constantExpression ) | lc= 'case' enumConstantName ':' -> ^( CASE[$lc] enumConstantName ) | lc= 'default' ':' -> ^( DEFAULT ) );
    public final JavaParser.switchLabel_return switchLabel() throws RecognitionException {
        JavaParser.switchLabel_return retval = new JavaParser.switchLabel_return();
        retval.start = input.LT(1);
        int switchLabel_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token char_literal354=null;
        Token char_literal356=null;
        Token char_literal357=null;
        JavaParser.constantExpression_return constantExpression353 = null;

        JavaParser.enumConstantName_return enumConstantName355 = null;


        Object lc_tree=null;
        Object char_literal354_tree=null;
        Object char_literal356_tree=null;
        Object char_literal357_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleSubtreeStream stream_enumConstantName=new RewriteRuleSubtreeStream(adaptor,"rule enumConstantName");
        RewriteRuleSubtreeStream stream_constantExpression=new RewriteRuleSubtreeStream(adaptor,"rule constantExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // jkit/java/Java.g:650:2: (lc= 'case' constantExpression ':' -> ^( CASE[$lc] constantExpression ) | lc= 'case' enumConstantName ':' -> ^( CASE[$lc] enumConstantName ) | lc= 'default' ':' -> ^( DEFAULT ) )
            int alt113=3;
            alt113 = dfa113.predict(input);
            switch (alt113) {
                case 1 :
                    // jkit/java/Java.g:650:4: lc= 'case' constantExpression ':'
                    {
                    lc=(Token)match(input,177,FOLLOW_177_in_switchLabel4150); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_177.add(lc);

                    pushFollow(FOLLOW_constantExpression_in_switchLabel4152);
                    constantExpression353=constantExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constantExpression.add(constantExpression353.getTree());
                    char_literal354=(Token)match(input,163,FOLLOW_163_in_switchLabel4154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_163.add(char_literal354);



                    // AST REWRITE
                    // elements: constantExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 650:37: -> ^( CASE[$lc] constantExpression )
                    {
                        // jkit/java/Java.g:650:40: ^( CASE[$lc] constantExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CASE, lc), root_1);

                        adaptor.addChild(root_1, stream_constantExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:651:4: lc= 'case' enumConstantName ':'
                    {
                    lc=(Token)match(input,177,FOLLOW_177_in_switchLabel4170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_177.add(lc);

                    pushFollow(FOLLOW_enumConstantName_in_switchLabel4172);
                    enumConstantName355=enumConstantName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumConstantName.add(enumConstantName355.getTree());
                    char_literal356=(Token)match(input,163,FOLLOW_163_in_switchLabel4174); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_163.add(char_literal356);



                    // AST REWRITE
                    // elements: enumConstantName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 651:35: -> ^( CASE[$lc] enumConstantName )
                    {
                        // jkit/java/Java.g:651:38: ^( CASE[$lc] enumConstantName )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CASE, lc), root_1);

                        adaptor.addChild(root_1, stream_enumConstantName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:652:4: lc= 'default' ':'
                    {
                    lc=(Token)match(input,161,FOLLOW_161_in_switchLabel4190); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_161.add(lc);

                    char_literal357=(Token)match(input,163,FOLLOW_163_in_switchLabel4192); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_163.add(char_literal357);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 652:21: -> ^( DEFAULT )
                    {
                        // jkit/java/Java.g:652:24: ^( DEFAULT )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DEFAULT, "DEFAULT"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, switchLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchLabel"

    public static class moreStatementExpressions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moreStatementExpressions"
    // jkit/java/Java.g:655:1: moreStatementExpressions : ( ',' statementExpression )* ;
    public final JavaParser.moreStatementExpressions_return moreStatementExpressions() throws RecognitionException {
        JavaParser.moreStatementExpressions_return retval = new JavaParser.moreStatementExpressions_return();
        retval.start = input.LT(1);
        int moreStatementExpressions_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal358=null;
        JavaParser.statementExpression_return statementExpression359 = null;


        Object char_literal358_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // jkit/java/Java.g:656:2: ( ( ',' statementExpression )* )
            // jkit/java/Java.g:656:4: ( ',' statementExpression )*
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:656:4: ( ',' statementExpression )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==123) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // jkit/java/Java.g:656:5: ',' statementExpression
            	    {
            	    char_literal358=(Token)match(input,123,FOLLOW_123_in_moreStatementExpressions4211); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal358_tree = (Object)adaptor.create(char_literal358);
            	    adaptor.addChild(root_0, char_literal358_tree);
            	    }
            	    pushFollow(FOLLOW_statementExpression_in_moreStatementExpressions4213);
            	    statementExpression359=statementExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statementExpression359.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, moreStatementExpressions_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moreStatementExpressions"

    public static class forControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forControl"
    // jkit/java/Java.g:659:1: forControl options {k=3; } : ( forVarControl -> ^( FOREACH forVarControl ) | ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )? -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? ) );
    public final JavaParser.forControl_return forControl() throws RecognitionException {
        JavaParser.forControl_return retval = new JavaParser.forControl_return();
        retval.start = input.LT(1);
        int forControl_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal362=null;
        Token char_literal363=null;
        JavaParser.expression_return fc = null;

        JavaParser.forUpdate_return fu = null;

        JavaParser.forVarControl_return forVarControl360 = null;

        JavaParser.forInit_return forInit361 = null;


        Object char_literal362_tree=null;
        Object char_literal363_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleSubtreeStream stream_forUpdate=new RewriteRuleSubtreeStream(adaptor,"rule forUpdate");
        RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
        RewriteRuleSubtreeStream stream_forVarControl=new RewriteRuleSubtreeStream(adaptor,"rule forVarControl");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // jkit/java/Java.g:661:2: ( forVarControl -> ^( FOREACH forVarControl ) | ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )? -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? ) )
            int alt118=2;
            alt118 = dfa118.predict(input);
            switch (alt118) {
                case 1 :
                    // jkit/java/Java.g:661:4: forVarControl
                    {
                    pushFollow(FOLLOW_forVarControl_in_forControl4234);
                    forVarControl360=forVarControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_forVarControl.add(forVarControl360.getTree());


                    // AST REWRITE
                    // elements: forVarControl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 661:18: -> ^( FOREACH forVarControl )
                    {
                        // jkit/java/Java.g:661:21: ^( FOREACH forVarControl )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FOREACH, "FOREACH"), root_1);

                        adaptor.addChild(root_1, stream_forVarControl.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:662:4: ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )?
                    {
                    // jkit/java/Java.g:662:4: ( forInit )?
                    int alt115=2;
                    alt115 = dfa115.predict(input);
                    switch (alt115) {
                        case 1 :
                            // jkit/java/Java.g:0:0: forInit
                            {
                            pushFollow(FOLLOW_forInit_in_forControl4247);
                            forInit361=forInit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forInit.add(forInit361.getTree());

                            }
                            break;

                    }

                    char_literal362=(Token)match(input,114,FOLLOW_114_in_forControl4250); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_114.add(char_literal362);

                    // jkit/java/Java.g:662:19: (fc= expression )?
                    int alt116=2;
                    alt116 = dfa116.predict(input);
                    switch (alt116) {
                        case 1 :
                            // jkit/java/Java.g:0:0: fc= expression
                            {
                            pushFollow(FOLLOW_expression_in_forControl4254);
                            fc=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(fc.getTree());

                            }
                            break;

                    }

                    char_literal363=(Token)match(input,114,FOLLOW_114_in_forControl4257); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_114.add(char_literal363);

                    // jkit/java/Java.g:662:38: (fu= forUpdate )?
                    int alt117=2;
                    alt117 = dfa117.predict(input);
                    switch (alt117) {
                        case 1 :
                            // jkit/java/Java.g:0:0: fu= forUpdate
                            {
                            pushFollow(FOLLOW_forUpdate_in_forControl4261);
                            fu=forUpdate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forUpdate.add(fu.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: forUpdate, expression, forInit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 662:50: -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? )
                    {
                        // jkit/java/Java.g:662:53: ^( INIT ( forInit )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INIT, "INIT"), root_1);

                        // jkit/java/Java.g:662:60: ( forInit )?
                        if ( stream_forInit.hasNext() ) {
                            adaptor.addChild(root_1, stream_forInit.nextTree());

                        }
                        stream_forInit.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/Java.g:662:70: ^( TEST ( expression )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TEST, "TEST"), root_1);

                        // jkit/java/Java.g:662:77: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/Java.g:662:90: ^( STEP ( forUpdate )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STEP, "STEP"), root_1);

                        // jkit/java/Java.g:662:97: ( forUpdate )?
                        if ( stream_forUpdate.hasNext() ) {
                            adaptor.addChild(root_1, stream_forUpdate.nextTree());

                        }
                        stream_forUpdate.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, forControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forControl"

    public static class forInit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // jkit/java/Java.g:665:1: forInit : ( ( variableModifier )* type variableDeclarators -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) | expressionList );
    public final JavaParser.forInit_return forInit() throws RecognitionException {
        JavaParser.forInit_return retval = new JavaParser.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.variableModifier_return variableModifier364 = null;

        JavaParser.type_return type365 = null;

        JavaParser.variableDeclarators_return variableDeclarators366 = null;

        JavaParser.expressionList_return expressionList367 = null;


        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // jkit/java/Java.g:666:2: ( ( variableModifier )* type variableDeclarators -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) | expressionList )
            int alt120=2;
            alt120 = dfa120.predict(input);
            switch (alt120) {
                case 1 :
                    // jkit/java/Java.g:666:4: ( variableModifier )* type variableDeclarators
                    {
                    // jkit/java/Java.g:666:4: ( variableModifier )*
                    loop119:
                    do {
                        int alt119=2;
                        int LA119_0 = input.LA(1);

                        if ( (LA119_0==138||LA119_0==160) ) {
                            alt119=1;
                        }


                        switch (alt119) {
                    	case 1 :
                    	    // jkit/java/Java.g:0:0: variableModifier
                    	    {
                    	    pushFollow(FOLLOW_variableModifier_in_forInit4296);
                    	    variableModifier364=variableModifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier364.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop119;
                        }
                    } while (true);

                    pushFollow(FOLLOW_type_in_forInit4299);
                    type365=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type365.getTree());
                    pushFollow(FOLLOW_variableDeclarators_in_forInit4301);
                    variableDeclarators366=variableDeclarators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableDeclarators.add(variableDeclarators366.getTree());


                    // AST REWRITE
                    // elements: variableModifier, variableDeclarators, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 666:47: -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
                    {
                        // jkit/java/Java.g:666:50: ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARDEF, "VARDEF"), root_1);

                        // jkit/java/Java.g:666:59: ^( MODIFIERS ( variableModifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/Java.g:666:71: ( variableModifier )*
                        while ( stream_variableModifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_variableModifier.nextTree());

                        }
                        stream_variableModifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_variableDeclarators.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:667:4: expressionList
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expressionList_in_forInit4323);
                    expressionList367=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList367.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class forVarControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forVarControl"
    // jkit/java/Java.g:670:1: forVarControl : ( variableModifier )* type Identifier ':' expression -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier ) expression ;
    public final JavaParser.forVarControl_return forVarControl() throws RecognitionException {
        JavaParser.forVarControl_return retval = new JavaParser.forVarControl_return();
        retval.start = input.LT(1);
        int forVarControl_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier370=null;
        Token char_literal371=null;
        JavaParser.variableModifier_return variableModifier368 = null;

        JavaParser.type_return type369 = null;

        JavaParser.expression_return expression372 = null;


        Object Identifier370_tree=null;
        Object char_literal371_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // jkit/java/Java.g:671:2: ( ( variableModifier )* type Identifier ':' expression -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier ) expression )
            // jkit/java/Java.g:671:4: ( variableModifier )* type Identifier ':' expression
            {
            // jkit/java/Java.g:671:4: ( variableModifier )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==138||LA121_0==160) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_forVarControl4335);
            	    variableModifier368=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier368.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_forVarControl4338);
            type369=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type369.getTree());
            Identifier370=(Token)match(input,Identifier,FOLLOW_Identifier_in_forVarControl4340); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier370);

            char_literal371=(Token)match(input,163,FOLLOW_163_in_forVarControl4342); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(char_literal371);

            pushFollow(FOLLOW_expression_in_forVarControl4344);
            expression372=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression372.getTree());


            // AST REWRITE
            // elements: expression, variableModifier, Identifier, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 671:53: -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier ) expression
            {
                // jkit/java/Java.g:671:56: ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARDEF, "VARDEF"), root_1);

                // jkit/java/Java.g:671:65: ^( MODIFIERS ( variableModifier )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                // jkit/java/Java.g:671:77: ( variableModifier )*
                while ( stream_variableModifier.hasNext() ) {
                    adaptor.addChild(root_2, stream_variableModifier.nextTree());

                }
                stream_variableModifier.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_Identifier.nextNode());

                adaptor.addChild(root_0, root_1);
                }
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, forVarControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forVarControl"

    public static class forUpdate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forUpdate"
    // jkit/java/Java.g:674:1: forUpdate : expressionList ;
    public final JavaParser.forUpdate_return forUpdate() throws RecognitionException {
        JavaParser.forUpdate_return retval = new JavaParser.forUpdate_return();
        retval.start = input.LT(1);
        int forUpdate_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.expressionList_return expressionList373 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // jkit/java/Java.g:675:2: ( expressionList )
            // jkit/java/Java.g:675:4: expressionList
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expressionList_in_forUpdate4374);
            expressionList373=expressionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList373.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, forUpdate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forUpdate"

    public static class parExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // jkit/java/Java.g:680:1: parExpression : '(' expression ')' ;
    public final JavaParser.parExpression_return parExpression() throws RecognitionException {
        JavaParser.parExpression_return retval = new JavaParser.parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal374=null;
        Token char_literal376=null;
        JavaParser.expression_return expression375 = null;


        Object char_literal374_tree=null;
        Object char_literal376_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // jkit/java/Java.g:681:2: ( '(' expression ')' )
            // jkit/java/Java.g:681:4: '(' expression ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal374=(Token)match(input,154,FOLLOW_154_in_parExpression4387); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_parExpression4390);
            expression375=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression375.getTree());
            char_literal376=(Token)match(input,155,FOLLOW_155_in_parExpression4392); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class expressionList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // jkit/java/Java.g:684:1: expressionList : expression ( ',' expression )* ;
    public final JavaParser.expressionList_return expressionList() throws RecognitionException {
        JavaParser.expressionList_return retval = new JavaParser.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal378=null;
        JavaParser.expression_return expression377 = null;

        JavaParser.expression_return expression379 = null;


        Object char_literal378_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // jkit/java/Java.g:685:5: ( expression ( ',' expression )* )
            // jkit/java/Java.g:685:9: expression ( ',' expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList4410);
            expression377=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression377.getTree());
            // jkit/java/Java.g:685:20: ( ',' expression )*
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==123) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    // jkit/java/Java.g:685:21: ',' expression
            	    {
            	    char_literal378=(Token)match(input,123,FOLLOW_123_in_expressionList4413); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList4416);
            	    expression379=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression379.getTree());

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class statementExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statementExpression"
    // jkit/java/Java.g:688:1: statementExpression : expression ;
    public final JavaParser.statementExpression_return statementExpression() throws RecognitionException {
        JavaParser.statementExpression_return retval = new JavaParser.statementExpression_return();
        retval.start = input.LT(1);
        int statementExpression_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.expression_return expression380 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // jkit/java/Java.g:689:2: ( expression )
            // jkit/java/Java.g:689:4: expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_statementExpression4432);
            expression380=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression380.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, statementExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statementExpression"

    public static class constantExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantExpression"
    // jkit/java/Java.g:692:1: constantExpression : expression ;
    public final JavaParser.constantExpression_return constantExpression() throws RecognitionException {
        JavaParser.constantExpression_return retval = new JavaParser.constantExpression_return();
        retval.start = input.LT(1);
        int constantExpression_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.expression_return expression381 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // jkit/java/Java.g:693:2: ( expression )
            // jkit/java/Java.g:693:4: expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_constantExpression4444);
            expression381=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression381.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, constantExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantExpression"

    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // jkit/java/Java.g:696:1: expression : conditionalExpression ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression ) ;
    public final JavaParser.expression_return expression() throws RecognitionException {
        JavaParser.expression_return retval = new JavaParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal383=null;
        Token char_literal385=null;
        Token char_literal387=null;
        Token char_literal389=null;
        Token char_literal391=null;
        Token string_literal393=null;
        Token string_literal395=null;
        Token string_literal397=null;
        Token char_literal399=null;
        Token char_literal401=null;
        Token char_literal402=null;
        Token char_literal404=null;
        Token char_literal405=null;
        Token char_literal407=null;
        Token char_literal408=null;
        Token char_literal409=null;
        Token char_literal410=null;
        Token i=null;
        List list_i=null;
        JavaParser.conditionalExpression_return conditionalExpression382 = null;

        JavaParser.expression_return expression384 = null;

        JavaParser.expression_return expression386 = null;

        JavaParser.expression_return expression388 = null;

        JavaParser.expression_return expression390 = null;

        JavaParser.expression_return expression392 = null;

        JavaParser.expression_return expression394 = null;

        JavaParser.expression_return expression396 = null;

        JavaParser.expression_return expression398 = null;

        JavaParser.expression_return expression400 = null;

        JavaParser.expression_return expression403 = null;

        JavaParser.expression_return expression406 = null;

        JavaParser.expression_return expression411 = null;


        Object char_literal383_tree=null;
        Object char_literal385_tree=null;
        Object char_literal387_tree=null;
        Object char_literal389_tree=null;
        Object char_literal391_tree=null;
        Object string_literal393_tree=null;
        Object string_literal395_tree=null;
        Object string_literal397_tree=null;
        Object char_literal399_tree=null;
        Object char_literal401_tree=null;
        Object char_literal402_tree=null;
        Object char_literal404_tree=null;
        Object char_literal405_tree=null;
        Object char_literal407_tree=null;
        Object char_literal408_tree=null;
        Object char_literal409_tree=null;
        Object char_literal410_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // jkit/java/Java.g:697:2: ( conditionalExpression ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression ) )
            // jkit/java/Java.g:697:4: conditionalExpression ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression )
            {
            pushFollow(FOLLOW_conditionalExpression_in_expression4456);
            conditionalExpression382=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalExpression.add(conditionalExpression382.getTree());
            // jkit/java/Java.g:698:3: ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression )
            int alt123=13;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // jkit/java/Java.g:699:4: '=' expression
                    {
                    char_literal383=(Token)match(input,133,FOLLOW_133_in_expression4466); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal383);

                    pushFollow(FOLLOW_expression_in_expression4468);
                    expression384=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression384.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 699:19: -> ^( ASSIGN conditionalExpression expression )
                    {
                        // jkit/java/Java.g:699:22: ^( ASSIGN conditionalExpression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:700:6: i+= '+' '=' expression
                    {
                    i=(Token)match(input,178,FOLLOW_178_in_expression4487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal385=(Token)match(input,133,FOLLOW_133_in_expression4489); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal385);

                    pushFollow(FOLLOW_expression_in_expression4491);
                    expression386=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression386.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, conditionalExpression, i, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 700:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:700:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:700:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:701:6: i+= '-' '=' expression
                    {
                    i=(Token)match(input,179,FOLLOW_179_in_expression4519); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_179.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal387=(Token)match(input,133,FOLLOW_133_in_expression4521); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal387);

                    pushFollow(FOLLOW_expression_in_expression4523);
                    expression388=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression388.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, conditionalExpression, i, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 701:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:701:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:701:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:702:6: i+= '*' '=' expression
                    {
                    i=(Token)match(input,118,FOLLOW_118_in_expression4551); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal389=(Token)match(input,133,FOLLOW_133_in_expression4553); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal389);

                    pushFollow(FOLLOW_expression_in_expression4555);
                    expression390=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression390.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression, conditionalExpression, i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 702:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:702:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:702:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:703:6: i+= '/' '=' expression
                    {
                    i=(Token)match(input,180,FOLLOW_180_in_expression4583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_180.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal391=(Token)match(input,133,FOLLOW_133_in_expression4585); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal391);

                    pushFollow(FOLLOW_expression_in_expression4587);
                    expression392=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression392.getTree());


                    // AST REWRITE
                    // elements: i, expression, conditionalExpression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 703:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:703:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:703:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:704:6: '&=' expression
                    {
                    string_literal393=(Token)match(input,181,FOLLOW_181_in_expression4616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_181.add(string_literal393);

                    pushFollow(FOLLOW_expression_in_expression4618);
                    expression394=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression394.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 704:22: -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) )
                    {
                        // jkit/java/Java.g:704:25: ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:704:56: ^( AND conditionalExpression expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(AND, "AND"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // jkit/java/Java.g:705:6: '|=' expression
                    {
                    string_literal395=(Token)match(input,182,FOLLOW_182_in_expression4641); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_182.add(string_literal395);

                    pushFollow(FOLLOW_expression_in_expression4643);
                    expression396=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression396.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 705:22: -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) )
                    {
                        // jkit/java/Java.g:705:25: ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:705:56: ^( OR conditionalExpression expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(OR, "OR"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // jkit/java/Java.g:706:6: '^=' expression
                    {
                    string_literal397=(Token)match(input,183,FOLLOW_183_in_expression4666); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_183.add(string_literal397);

                    pushFollow(FOLLOW_expression_in_expression4668);
                    expression398=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression398.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 706:22: -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) )
                    {
                        // jkit/java/Java.g:706:25: ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:706:56: ^( XOR conditionalExpression expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(XOR, "XOR"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // jkit/java/Java.g:707:6: i+= '%' '=' expression
                    {
                    i=(Token)match(input,184,FOLLOW_184_in_expression4696); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal399=(Token)match(input,133,FOLLOW_133_in_expression4698); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal399);

                    pushFollow(FOLLOW_expression_in_expression4700);
                    expression400=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression400.getTree());


                    // AST REWRITE
                    // elements: expression, i, conditionalExpression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 707:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:707:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:707:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // jkit/java/Java.g:708:6: i+= '<' '<' '=' expression
                    {
                    i=(Token)match(input,122,FOLLOW_122_in_expression4728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_122.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal401=(Token)match(input,122,FOLLOW_122_in_expression4730); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_122.add(char_literal401);

                    char_literal402=(Token)match(input,133,FOLLOW_133_in_expression4732); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal402);

                    pushFollow(FOLLOW_expression_in_expression4734);
                    expression403=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression403.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, i, conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 708:32: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:708:35: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:708:66: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // jkit/java/Java.g:709:6: i+= '>' '>' '=' expression
                    {
                    i=(Token)match(input,124,FOLLOW_124_in_expression4762); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal404=(Token)match(input,124,FOLLOW_124_in_expression4764); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(char_literal404);

                    char_literal405=(Token)match(input,133,FOLLOW_133_in_expression4766); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal405);

                    pushFollow(FOLLOW_expression_in_expression4768);
                    expression406=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression406.getTree());


                    // AST REWRITE
                    // elements: i, conditionalExpression, expression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 709:32: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:709:35: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:709:66: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // jkit/java/Java.g:710:6: '>' '>' '>' '=' expression
                    {
                    char_literal407=(Token)match(input,124,FOLLOW_124_in_expression4794); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(char_literal407);

                    char_literal408=(Token)match(input,124,FOLLOW_124_in_expression4796); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(char_literal408);

                    char_literal409=(Token)match(input,124,FOLLOW_124_in_expression4798); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(char_literal409);

                    char_literal410=(Token)match(input,133,FOLLOW_133_in_expression4800); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal410);

                    pushFollow(FOLLOW_expression_in_expression4802);
                    expression411=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression411.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 710:33: -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) )
                    {
                        // jkit/java/Java.g:710:36: ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:710:67: ^( USHR conditionalExpression expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(USHR, "USHR"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // jkit/java/Java.g:711:6: 
                    {

                    // AST REWRITE
                    // elements: conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 711:6: -> conditionalExpression
                    {
                        adaptor.addChild(root_0, stream_conditionalExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // jkit/java/Java.g:715:1: conditionalExpression : conditionalOrExpression ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression ) ;
    public final JavaParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        JavaParser.conditionalExpression_return retval = new JavaParser.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal413=null;
        Token char_literal415=null;
        JavaParser.conditionalOrExpression_return conditionalOrExpression412 = null;

        JavaParser.expression_return expression414 = null;

        JavaParser.expression_return expression416 = null;


        Object char_literal413_tree=null;
        Object char_literal415_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // jkit/java/Java.g:716:5: ( conditionalOrExpression ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression ) )
            // jkit/java/Java.g:716:9: conditionalOrExpression ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression )
            {
            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression4849);
            conditionalOrExpression412=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalOrExpression.add(conditionalOrExpression412.getTree());
            // jkit/java/Java.g:717:6: ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression )
            int alt124=2;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    // jkit/java/Java.g:718:7: '?' expression ':' expression
                    {
                    char_literal413=(Token)match(input,152,FOLLOW_152_in_conditionalExpression4866); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_152.add(char_literal413);

                    pushFollow(FOLLOW_expression_in_conditionalExpression4868);
                    expression414=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression414.getTree());
                    char_literal415=(Token)match(input,163,FOLLOW_163_in_conditionalExpression4870); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_163.add(char_literal415);

                    pushFollow(FOLLOW_expression_in_conditionalExpression4872);
                    expression416=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression416.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalOrExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 718:37: -> ^( CONDEXPR conditionalOrExpression expression expression )
                    {
                        // jkit/java/Java.g:718:40: ^( CONDEXPR conditionalOrExpression expression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CONDEXPR, "CONDEXPR"), root_1);

                        adaptor.addChild(root_1, stream_conditionalOrExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:719:9: 
                    {

                    // AST REWRITE
                    // elements: conditionalOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 719:9: -> conditionalOrExpression
                    {
                        adaptor.addChild(root_0, stream_conditionalOrExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // jkit/java/Java.g:723:1: conditionalOrExpression : conditionalAndExpression ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression ) ;
    public final JavaParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        JavaParser.conditionalOrExpression_return retval = new JavaParser.conditionalOrExpression_return();
        retval.start = input.LT(1);
        int conditionalOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal418=null;
        JavaParser.conditionalAndExpression_return conditionalAndExpression417 = null;

        JavaParser.conditionalOrExpression_return conditionalOrExpression419 = null;


        Object string_literal418_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleSubtreeStream stream_conditionalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalAndExpression");
        RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // jkit/java/Java.g:724:5: ( conditionalAndExpression ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression ) )
            // jkit/java/Java.g:724:9: conditionalAndExpression ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression )
            {
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression4919);
            conditionalAndExpression417=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalAndExpression.add(conditionalAndExpression417.getTree());
            // jkit/java/Java.g:725:6: ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression )
            int alt125=2;
            alt125 = dfa125.predict(input);
            switch (alt125) {
                case 1 :
                    // jkit/java/Java.g:726:7: ( '||' conditionalOrExpression )
                    {
                    // jkit/java/Java.g:726:7: ( '||' conditionalOrExpression )
                    // jkit/java/Java.g:726:8: '||' conditionalOrExpression
                    {
                    string_literal418=(Token)match(input,185,FOLLOW_185_in_conditionalOrExpression4937); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_185.add(string_literal418);

                    pushFollow(FOLLOW_conditionalOrExpression_in_conditionalOrExpression4939);
                    conditionalOrExpression419=conditionalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditionalOrExpression.add(conditionalOrExpression419.getTree());

                    }



                    // AST REWRITE
                    // elements: conditionalAndExpression, conditionalOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 726:38: -> ^( LOR conditionalAndExpression conditionalOrExpression )
                    {
                        // jkit/java/Java.g:726:41: ^( LOR conditionalAndExpression conditionalOrExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOR, "LOR"), root_1);

                        adaptor.addChild(root_1, stream_conditionalAndExpression.nextTree());
                        adaptor.addChild(root_1, stream_conditionalOrExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:727:9: 
                    {

                    // AST REWRITE
                    // elements: conditionalAndExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 727:9: -> conditionalAndExpression
                    {
                        adaptor.addChild(root_0, stream_conditionalAndExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, conditionalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // jkit/java/Java.g:731:1: conditionalAndExpression : inclusiveOrExpression ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression ) ;
    public final JavaParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        JavaParser.conditionalAndExpression_return retval = new JavaParser.conditionalAndExpression_return();
        retval.start = input.LT(1);
        int conditionalAndExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal421=null;
        JavaParser.inclusiveOrExpression_return inclusiveOrExpression420 = null;

        JavaParser.conditionalAndExpression_return conditionalAndExpression422 = null;


        Object string_literal421_tree=null;
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleSubtreeStream stream_conditionalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalAndExpression");
        RewriteRuleSubtreeStream stream_inclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule inclusiveOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // jkit/java/Java.g:732:5: ( inclusiveOrExpression ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression ) )
            // jkit/java/Java.g:732:9: inclusiveOrExpression ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression )
            {
            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression4985);
            inclusiveOrExpression420=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inclusiveOrExpression.add(inclusiveOrExpression420.getTree());
            // jkit/java/Java.g:733:6: ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression )
            int alt126=2;
            alt126 = dfa126.predict(input);
            switch (alt126) {
                case 1 :
                    // jkit/java/Java.g:734:7: ( '&&' conditionalAndExpression )
                    {
                    // jkit/java/Java.g:734:7: ( '&&' conditionalAndExpression )
                    // jkit/java/Java.g:734:8: '&&' conditionalAndExpression
                    {
                    string_literal421=(Token)match(input,186,FOLLOW_186_in_conditionalAndExpression5003); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_186.add(string_literal421);

                    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalAndExpression5005);
                    conditionalAndExpression422=conditionalAndExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditionalAndExpression.add(conditionalAndExpression422.getTree());

                    }



                    // AST REWRITE
                    // elements: conditionalAndExpression, inclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 734:39: -> ^( LAND inclusiveOrExpression conditionalAndExpression )
                    {
                        // jkit/java/Java.g:734:42: ^( LAND inclusiveOrExpression conditionalAndExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LAND, "LAND"), root_1);

                        adaptor.addChild(root_1, stream_inclusiveOrExpression.nextTree());
                        adaptor.addChild(root_1, stream_conditionalAndExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:735:9: 
                    {

                    // AST REWRITE
                    // elements: inclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 735:9: -> inclusiveOrExpression
                    {
                        adaptor.addChild(root_0, stream_inclusiveOrExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, conditionalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // jkit/java/Java.g:739:1: inclusiveOrExpression : exclusiveOrExpression ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression ) ;
    public final JavaParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        JavaParser.inclusiveOrExpression_return retval = new JavaParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal424=null;
        JavaParser.exclusiveOrExpression_return exclusiveOrExpression423 = null;

        JavaParser.inclusiveOrExpression_return inclusiveOrExpression425 = null;


        Object char_literal424_tree=null;
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleSubtreeStream stream_inclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule inclusiveOrExpression");
        RewriteRuleSubtreeStream stream_exclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule exclusiveOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // jkit/java/Java.g:740:5: ( exclusiveOrExpression ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression ) )
            // jkit/java/Java.g:740:9: exclusiveOrExpression ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression )
            {
            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5057);
            exclusiveOrExpression423=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exclusiveOrExpression.add(exclusiveOrExpression423.getTree());
            // jkit/java/Java.g:741:9: ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression )
            int alt127=2;
            alt127 = dfa127.predict(input);
            switch (alt127) {
                case 1 :
                    // jkit/java/Java.g:742:10: ( '|' inclusiveOrExpression )
                    {
                    // jkit/java/Java.g:742:10: ( '|' inclusiveOrExpression )
                    // jkit/java/Java.g:742:11: '|' inclusiveOrExpression
                    {
                    char_literal424=(Token)match(input,187,FOLLOW_187_in_inclusiveOrExpression5079); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_187.add(char_literal424);

                    pushFollow(FOLLOW_inclusiveOrExpression_in_inclusiveOrExpression5081);
                    inclusiveOrExpression425=inclusiveOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inclusiveOrExpression.add(inclusiveOrExpression425.getTree());

                    }



                    // AST REWRITE
                    // elements: exclusiveOrExpression, inclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 742:38: -> ^( OR exclusiveOrExpression inclusiveOrExpression )
                    {
                        // jkit/java/Java.g:742:41: ^( OR exclusiveOrExpression inclusiveOrExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OR, "OR"), root_1);

                        adaptor.addChild(root_1, stream_exclusiveOrExpression.nextTree());
                        adaptor.addChild(root_1, stream_inclusiveOrExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:743:6: 
                    {

                    // AST REWRITE
                    // elements: exclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 743:6: -> exclusiveOrExpression
                    {
                        adaptor.addChild(root_0, stream_exclusiveOrExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // jkit/java/Java.g:747:1: exclusiveOrExpression : andExpression ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression ) ;
    public final JavaParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        JavaParser.exclusiveOrExpression_return retval = new JavaParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal427=null;
        JavaParser.andExpression_return andExpression426 = null;

        JavaParser.exclusiveOrExpression_return exclusiveOrExpression428 = null;


        Object char_literal427_tree=null;
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        RewriteRuleSubtreeStream stream_exclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule exclusiveOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // jkit/java/Java.g:748:5: ( andExpression ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression ) )
            // jkit/java/Java.g:748:9: andExpression ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression )
            {
            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression5128);
            andExpression426=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression426.getTree());
            // jkit/java/Java.g:749:5: ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression )
            int alt128=2;
            alt128 = dfa128.predict(input);
            switch (alt128) {
                case 1 :
                    // jkit/java/Java.g:750:6: ( '^' exclusiveOrExpression )
                    {
                    // jkit/java/Java.g:750:6: ( '^' exclusiveOrExpression )
                    // jkit/java/Java.g:750:7: '^' exclusiveOrExpression
                    {
                    char_literal427=(Token)match(input,188,FOLLOW_188_in_exclusiveOrExpression5144); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_188.add(char_literal427);

                    pushFollow(FOLLOW_exclusiveOrExpression_in_exclusiveOrExpression5146);
                    exclusiveOrExpression428=exclusiveOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exclusiveOrExpression.add(exclusiveOrExpression428.getTree());

                    }



                    // AST REWRITE
                    // elements: andExpression, exclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 750:34: -> ^( XOR andExpression exclusiveOrExpression )
                    {
                        // jkit/java/Java.g:750:37: ^( XOR andExpression exclusiveOrExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XOR, "XOR"), root_1);

                        adaptor.addChild(root_1, stream_andExpression.nextTree());
                        adaptor.addChild(root_1, stream_exclusiveOrExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:751:8: 
                    {

                    // AST REWRITE
                    // elements: andExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 751:8: -> andExpression
                    {
                        adaptor.addChild(root_0, stream_andExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // jkit/java/Java.g:755:1: andExpression : equalityExpression ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression ) ;
    public final JavaParser.andExpression_return andExpression() throws RecognitionException {
        JavaParser.andExpression_return retval = new JavaParser.andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal430=null;
        JavaParser.equalityExpression_return equalityExpression429 = null;

        JavaParser.andExpression_return andExpression431 = null;


        Object char_literal430_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_equalityExpression=new RewriteRuleSubtreeStream(adaptor,"rule equalityExpression");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // jkit/java/Java.g:756:5: ( equalityExpression ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression ) )
            // jkit/java/Java.g:756:9: equalityExpression ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression )
            {
            pushFollow(FOLLOW_equalityExpression_in_andExpression5190);
            equalityExpression429=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_equalityExpression.add(equalityExpression429.getTree());
            // jkit/java/Java.g:757:5: ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression )
            int alt129=2;
            alt129 = dfa129.predict(input);
            switch (alt129) {
                case 1 :
                    // jkit/java/Java.g:758:6: ( '&' andExpression )
                    {
                    // jkit/java/Java.g:758:6: ( '&' andExpression )
                    // jkit/java/Java.g:758:7: '&' andExpression
                    {
                    char_literal430=(Token)match(input,125,FOLLOW_125_in_andExpression5206); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_125.add(char_literal430);

                    pushFollow(FOLLOW_andExpression_in_andExpression5208);
                    andExpression431=andExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_andExpression.add(andExpression431.getTree());

                    }



                    // AST REWRITE
                    // elements: andExpression, equalityExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 758:26: -> ^( AND equalityExpression andExpression )
                    {
                        // jkit/java/Java.g:758:29: ^( AND equalityExpression andExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AND, "AND"), root_1);

                        adaptor.addChild(root_1, stream_equalityExpression.nextTree());
                        adaptor.addChild(root_1, stream_andExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:759:8: 
                    {

                    // AST REWRITE
                    // elements: equalityExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 759:8: -> equalityExpression
                    {
                        adaptor.addChild(root_0, stream_equalityExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // jkit/java/Java.g:763:1: equalityExpression : instanceOfExpression ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression ) ;
    public final JavaParser.equalityExpression_return equalityExpression() throws RecognitionException {
        JavaParser.equalityExpression_return retval = new JavaParser.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal433=null;
        Token string_literal435=null;
        JavaParser.instanceOfExpression_return instanceOfExpression432 = null;

        JavaParser.instanceOfExpression_return instanceOfExpression434 = null;

        JavaParser.instanceOfExpression_return instanceOfExpression436 = null;


        Object string_literal433_tree=null;
        Object string_literal435_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_instanceOfExpression=new RewriteRuleSubtreeStream(adaptor,"rule instanceOfExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // jkit/java/Java.g:764:5: ( instanceOfExpression ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression ) )
            // jkit/java/Java.g:764:9: instanceOfExpression ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression )
            {
            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5252);
            instanceOfExpression432=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_instanceOfExpression.add(instanceOfExpression432.getTree());
            // jkit/java/Java.g:765:5: ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression )
            int alt130=3;
            alt130 = dfa130.predict(input);
            switch (alt130) {
                case 1 :
                    // jkit/java/Java.g:766:6: ( '==' instanceOfExpression )
                    {
                    // jkit/java/Java.g:766:6: ( '==' instanceOfExpression )
                    // jkit/java/Java.g:766:7: '==' instanceOfExpression
                    {
                    string_literal433=(Token)match(input,189,FOLLOW_189_in_equalityExpression5268); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_189.add(string_literal433);

                    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5270);
                    instanceOfExpression434=instanceOfExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_instanceOfExpression.add(instanceOfExpression434.getTree());

                    }



                    // AST REWRITE
                    // elements: instanceOfExpression, instanceOfExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 766:34: -> ^( EQ instanceOfExpression instanceOfExpression )
                    {
                        // jkit/java/Java.g:766:37: ^( EQ instanceOfExpression instanceOfExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EQ, "EQ"), root_1);

                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());
                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:767:8: ( '!=' instanceOfExpression )
                    {
                    // jkit/java/Java.g:767:8: ( '!=' instanceOfExpression )
                    // jkit/java/Java.g:767:9: '!=' instanceOfExpression
                    {
                    string_literal435=(Token)match(input,190,FOLLOW_190_in_equalityExpression5291); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(string_literal435);

                    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5293);
                    instanceOfExpression436=instanceOfExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_instanceOfExpression.add(instanceOfExpression436.getTree());

                    }



                    // AST REWRITE
                    // elements: instanceOfExpression, instanceOfExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 767:36: -> ^( NEQ instanceOfExpression instanceOfExpression )
                    {
                        // jkit/java/Java.g:767:39: ^( NEQ instanceOfExpression instanceOfExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEQ, "NEQ"), root_1);

                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());
                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:768:8: 
                    {

                    // AST REWRITE
                    // elements: instanceOfExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 768:8: -> instanceOfExpression
                    {
                        adaptor.addChild(root_0, stream_instanceOfExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // jkit/java/Java.g:772:1: instanceOfExpression : relationalExpression ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression ) ;
    public final JavaParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        JavaParser.instanceOfExpression_return retval = new JavaParser.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal438=null;
        JavaParser.relationalExpression_return relationalExpression437 = null;

        JavaParser.type_return type439 = null;


        Object string_literal438_tree=null;
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_relationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule relationalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // jkit/java/Java.g:773:5: ( relationalExpression ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression ) )
            // jkit/java/Java.g:773:9: relationalExpression ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression )
            {
            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression5337);
            relationalExpression437=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_relationalExpression.add(relationalExpression437.getTree());
            // jkit/java/Java.g:774:5: ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression )
            int alt131=2;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // jkit/java/Java.g:775:6: ( 'instanceof' type )
                    {
                    // jkit/java/Java.g:775:6: ( 'instanceof' type )
                    // jkit/java/Java.g:775:7: 'instanceof' type
                    {
                    string_literal438=(Token)match(input,191,FOLLOW_191_in_instanceOfExpression5352); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_191.add(string_literal438);

                    pushFollow(FOLLOW_type_in_instanceOfExpression5354);
                    type439=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type439.getTree());

                    }



                    // AST REWRITE
                    // elements: type, relationalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 775:26: -> ^( INSTANCEOF relationalExpression type )
                    {
                        // jkit/java/Java.g:775:29: ^( INSTANCEOF relationalExpression type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INSTANCEOF, "INSTANCEOF"), root_1);

                        adaptor.addChild(root_1, stream_relationalExpression.nextTree());
                        adaptor.addChild(root_1, stream_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:776:8: 
                    {

                    // AST REWRITE
                    // elements: relationalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 776:8: -> relationalExpression
                    {
                        adaptor.addChild(root_0, stream_relationalExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // jkit/java/Java.g:780:1: relationalExpression : shiftExpression ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression ) ;
    public final JavaParser.relationalExpression_return relationalExpression() throws RecognitionException {
        JavaParser.relationalExpression_return retval = new JavaParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal441=null;
        Token char_literal442=null;
        Token char_literal444=null;
        Token char_literal446=null;
        Token char_literal447=null;
        Token char_literal449=null;
        JavaParser.shiftExpression_return shiftExpression440 = null;

        JavaParser.shiftExpression_return shiftExpression443 = null;

        JavaParser.shiftExpression_return shiftExpression445 = null;

        JavaParser.shiftExpression_return shiftExpression448 = null;

        JavaParser.shiftExpression_return shiftExpression450 = null;


        Object char_literal441_tree=null;
        Object char_literal442_tree=null;
        Object char_literal444_tree=null;
        Object char_literal446_tree=null;
        Object char_literal447_tree=null;
        Object char_literal449_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_shiftExpression=new RewriteRuleSubtreeStream(adaptor,"rule shiftExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // jkit/java/Java.g:781:5: ( shiftExpression ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression ) )
            // jkit/java/Java.g:781:9: shiftExpression ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression )
            {
            pushFollow(FOLLOW_shiftExpression_in_relationalExpression5398);
            shiftExpression440=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression440.getTree());
            // jkit/java/Java.g:782:5: ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression )
            int alt132=5;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // jkit/java/Java.g:783:6: ( '<' '=' shiftExpression )
                    {
                    // jkit/java/Java.g:783:6: ( '<' '=' shiftExpression )
                    // jkit/java/Java.g:783:7: '<' '=' shiftExpression
                    {
                    char_literal441=(Token)match(input,122,FOLLOW_122_in_relationalExpression5414); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_122.add(char_literal441);

                    char_literal442=(Token)match(input,133,FOLLOW_133_in_relationalExpression5416); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal442);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5418);
                    shiftExpression443=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression443.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 783:32: -> ^( LTEQ shiftExpression shiftExpression )
                    {
                        // jkit/java/Java.g:783:35: ^( LTEQ shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LTEQ, "LTEQ"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:784:8: ( '<' shiftExpression )
                    {
                    // jkit/java/Java.g:784:8: ( '<' shiftExpression )
                    // jkit/java/Java.g:784:9: '<' shiftExpression
                    {
                    char_literal444=(Token)match(input,122,FOLLOW_122_in_relationalExpression5439); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_122.add(char_literal444);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5441);
                    shiftExpression445=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression445.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 784:30: -> ^( LT shiftExpression shiftExpression )
                    {
                        // jkit/java/Java.g:784:33: ^( LT shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LT, "LT"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:785:8: ( '>' '=' shiftExpression )
                    {
                    // jkit/java/Java.g:785:8: ( '>' '=' shiftExpression )
                    // jkit/java/Java.g:785:9: '>' '=' shiftExpression
                    {
                    char_literal446=(Token)match(input,124,FOLLOW_124_in_relationalExpression5462); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(char_literal446);

                    char_literal447=(Token)match(input,133,FOLLOW_133_in_relationalExpression5464); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal447);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5466);
                    shiftExpression448=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression448.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 785:34: -> ^( GTEQ shiftExpression shiftExpression )
                    {
                        // jkit/java/Java.g:785:37: ^( GTEQ shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GTEQ, "GTEQ"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:786:8: ( '>' shiftExpression )
                    {
                    // jkit/java/Java.g:786:8: ( '>' shiftExpression )
                    // jkit/java/Java.g:786:9: '>' shiftExpression
                    {
                    char_literal449=(Token)match(input,124,FOLLOW_124_in_relationalExpression5487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(char_literal449);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5489);
                    shiftExpression450=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression450.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 786:30: -> ^( GT shiftExpression shiftExpression )
                    {
                        // jkit/java/Java.g:786:33: ^( GT shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GT, "GT"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:787:8: 
                    {

                    // AST REWRITE
                    // elements: shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 787:8: -> shiftExpression
                    {
                        adaptor.addChild(root_0, stream_shiftExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // jkit/java/Java.g:791:1: shiftExpression : additiveExpression ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression ) ;
    public final JavaParser.shiftExpression_return shiftExpression() throws RecognitionException {
        JavaParser.shiftExpression_return retval = new JavaParser.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal452=null;
        Token char_literal453=null;
        Token char_literal455=null;
        Token char_literal456=null;
        Token char_literal457=null;
        Token i=null;
        List list_i=null;
        JavaParser.additiveExpression_return additiveExpression451 = null;

        JavaParser.additiveExpression_return additiveExpression454 = null;

        JavaParser.additiveExpression_return additiveExpression458 = null;


        Object char_literal452_tree=null;
        Object char_literal453_tree=null;
        Object char_literal455_tree=null;
        Object char_literal456_tree=null;
        Object char_literal457_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // jkit/java/Java.g:792:5: ( additiveExpression ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression ) )
            // jkit/java/Java.g:792:9: additiveExpression ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression )
            {
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression5534);
            additiveExpression451=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression451.getTree());
            // jkit/java/Java.g:793:5: ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression )
            int alt136=3;
            alt136 = dfa136.predict(input);
            switch (alt136) {
                case 1 :
                    // jkit/java/Java.g:794:6: ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+
                    {
                    // jkit/java/Java.g:794:6: ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+
                    int cnt134=0;
                    loop134:
                    do {
                        int alt134=2;
                        alt134 = dfa134.predict(input);
                        switch (alt134) {
                    	case 1 :
                    	    // jkit/java/Java.g:794:7: (i+= '<' '<' | i+= '>' '>' ) additiveExpression
                    	    {
                    	    // jkit/java/Java.g:794:7: (i+= '<' '<' | i+= '>' '>' )
                    	    int alt133=2;
                    	    int LA133_0 = input.LA(1);

                    	    if ( (LA133_0==122) ) {
                    	        alt133=1;
                    	    }
                    	    else if ( (LA133_0==124) ) {
                    	        alt133=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 133, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt133) {
                    	        case 1 :
                    	            // jkit/java/Java.g:794:8: i+= '<' '<'
                    	            {
                    	            i=(Token)match(input,122,FOLLOW_122_in_shiftExpression5553); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_122.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);

                    	            char_literal452=(Token)match(input,122,FOLLOW_122_in_shiftExpression5555); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_122.add(char_literal452);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // jkit/java/Java.g:794:19: i+= '>' '>'
                    	            {
                    	            i=(Token)match(input,124,FOLLOW_124_in_shiftExpression5559); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_124.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);

                    	            char_literal453=(Token)match(input,124,FOLLOW_124_in_shiftExpression5561); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_124.add(char_literal453);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression5564);
                    	    additiveExpression454=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression454.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt134 >= 1 ) break loop134;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(134, input);
                                throw eee;
                        }
                        cnt134++;
                    } while (true);



                    // AST REWRITE
                    // elements: i, additiveExpression, additiveExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 794:52: -> ^( LABINOP additiveExpression ( $i additiveExpression )+ )
                    {
                        // jkit/java/Java.g:794:55: ^( LABINOP additiveExpression ( $i additiveExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_1);

                        adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                        if ( !(stream_i.hasNext()||stream_additiveExpression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext()||stream_additiveExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                            adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                        }
                        stream_i.reset();
                        stream_additiveExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:796:8: ( '>' '>' '>' additiveExpression )+
                    {
                    // jkit/java/Java.g:796:8: ( '>' '>' '>' additiveExpression )+
                    int cnt135=0;
                    loop135:
                    do {
                        int alt135=2;
                        alt135 = dfa135.predict(input);
                        switch (alt135) {
                    	case 1 :
                    	    // jkit/java/Java.g:796:9: '>' '>' '>' additiveExpression
                    	    {
                    	    char_literal455=(Token)match(input,124,FOLLOW_124_in_shiftExpression5598); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_124.add(char_literal455);

                    	    char_literal456=(Token)match(input,124,FOLLOW_124_in_shiftExpression5600); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_124.add(char_literal456);

                    	    char_literal457=(Token)match(input,124,FOLLOW_124_in_shiftExpression5602); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_124.add(char_literal457);

                    	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression5604);
                    	    additiveExpression458=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression458.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt135 >= 1 ) break loop135;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(135, input);
                                throw eee;
                        }
                        cnt135++;
                    } while (true);



                    // AST REWRITE
                    // elements: additiveExpression, additiveExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 796:42: -> ^( USHR additiveExpression ( additiveExpression )+ )
                    {
                        // jkit/java/Java.g:796:45: ^( USHR additiveExpression ( additiveExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(USHR, "USHR"), root_1);

                        adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                        if ( !(stream_additiveExpression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_additiveExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                        }
                        stream_additiveExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:797:8: 
                    {

                    // AST REWRITE
                    // elements: additiveExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 797:8: -> additiveExpression
                    {
                        adaptor.addChild(root_0, stream_additiveExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // jkit/java/Java.g:801:1: additiveExpression : multiplicativeExpression ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression ) ;
    public final JavaParser.additiveExpression_return additiveExpression() throws RecognitionException {
        JavaParser.additiveExpression_return retval = new JavaParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        Object root_0 = null;

        Token i=null;
        List list_i=null;
        JavaParser.multiplicativeExpression_return multiplicativeExpression459 = null;

        JavaParser.multiplicativeExpression_return multiplicativeExpression460 = null;


        Object i_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleSubtreeStream stream_multiplicativeExpression=new RewriteRuleSubtreeStream(adaptor,"rule multiplicativeExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // jkit/java/Java.g:802:5: ( multiplicativeExpression ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression ) )
            // jkit/java/Java.g:802:9: multiplicativeExpression ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression )
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5647);
            multiplicativeExpression459=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(multiplicativeExpression459.getTree());
            // jkit/java/Java.g:803:5: ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression )
            int alt139=2;
            alt139 = dfa139.predict(input);
            switch (alt139) {
                case 1 :
                    // jkit/java/Java.g:804:6: ( (i+= '+' | i+= '-' ) multiplicativeExpression )+
                    {
                    // jkit/java/Java.g:804:6: ( (i+= '+' | i+= '-' ) multiplicativeExpression )+
                    int cnt138=0;
                    loop138:
                    do {
                        int alt138=2;
                        alt138 = dfa138.predict(input);
                        switch (alt138) {
                    	case 1 :
                    	    // jkit/java/Java.g:804:7: (i+= '+' | i+= '-' ) multiplicativeExpression
                    	    {
                    	    // jkit/java/Java.g:804:7: (i+= '+' | i+= '-' )
                    	    int alt137=2;
                    	    int LA137_0 = input.LA(1);

                    	    if ( (LA137_0==178) ) {
                    	        alt137=1;
                    	    }
                    	    else if ( (LA137_0==179) ) {
                    	        alt137=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 137, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt137) {
                    	        case 1 :
                    	            // jkit/java/Java.g:804:8: i+= '+'
                    	            {
                    	            i=(Token)match(input,178,FOLLOW_178_in_additiveExpression5666); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_178.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // jkit/java/Java.g:804:15: i+= '-'
                    	            {
                    	            i=(Token)match(input,179,FOLLOW_179_in_additiveExpression5670); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_179.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5673);
                    	    multiplicativeExpression460=multiplicativeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_multiplicativeExpression.add(multiplicativeExpression460.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt138 >= 1 ) break loop138;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(138, input);
                                throw eee;
                        }
                        cnt138++;
                    } while (true);



                    // AST REWRITE
                    // elements: multiplicativeExpression, i, multiplicativeExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 804:50: -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ )
                    {
                        // jkit/java/Java.g:804:53: ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_1);

                        adaptor.addChild(root_1, stream_multiplicativeExpression.nextTree());
                        if ( !(stream_multiplicativeExpression.hasNext()||stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_multiplicativeExpression.hasNext()||stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                            adaptor.addChild(root_1, stream_multiplicativeExpression.nextTree());

                        }
                        stream_multiplicativeExpression.reset();
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:805:8: 
                    {

                    // AST REWRITE
                    // elements: multiplicativeExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 805:8: -> multiplicativeExpression
                    {
                        adaptor.addChild(root_0, stream_multiplicativeExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // jkit/java/Java.g:809:1: multiplicativeExpression : unaryExpression ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression ) ;
    public final JavaParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        JavaParser.multiplicativeExpression_return retval = new JavaParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        Object root_0 = null;

        Token i=null;
        List list_i=null;
        JavaParser.unaryExpression_return unaryExpression461 = null;

        JavaParser.unaryExpression_return unaryExpression462 = null;


        Object i_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // jkit/java/Java.g:810:5: ( unaryExpression ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression ) )
            // jkit/java/Java.g:810:9: unaryExpression ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression )
            {
            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5724);
            unaryExpression461=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression461.getTree());
            // jkit/java/Java.g:811:5: ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression )
            int alt142=2;
            alt142 = dfa142.predict(input);
            switch (alt142) {
                case 1 :
                    // jkit/java/Java.g:812:6: ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+
                    {
                    // jkit/java/Java.g:812:6: ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+
                    int cnt141=0;
                    loop141:
                    do {
                        int alt141=2;
                        alt141 = dfa141.predict(input);
                        switch (alt141) {
                    	case 1 :
                    	    // jkit/java/Java.g:812:8: (i+= '*' | i+= '/' | i+= '%' ) unaryExpression
                    	    {
                    	    // jkit/java/Java.g:812:8: (i+= '*' | i+= '/' | i+= '%' )
                    	    int alt140=3;
                    	    switch ( input.LA(1) ) {
                    	    case 118:
                    	        {
                    	        alt140=1;
                    	        }
                    	        break;
                    	    case 180:
                    	        {
                    	        alt140=2;
                    	        }
                    	        break;
                    	    case 184:
                    	        {
                    	        alt140=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 140, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt140) {
                    	        case 1 :
                    	            // jkit/java/Java.g:812:9: i+= '*'
                    	            {
                    	            i=(Token)match(input,118,FOLLOW_118_in_multiplicativeExpression5744); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_118.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // jkit/java/Java.g:812:16: i+= '/'
                    	            {
                    	            i=(Token)match(input,180,FOLLOW_180_in_multiplicativeExpression5748); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_180.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // jkit/java/Java.g:812:23: i+= '%'
                    	            {
                    	            i=(Token)match(input,184,FOLLOW_184_in_multiplicativeExpression5752); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_184.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5755);
                    	    unaryExpression462=unaryExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression462.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt141 >= 1 ) break loop141;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(141, input);
                                throw eee;
                        }
                        cnt141++;
                    } while (true);



                    // AST REWRITE
                    // elements: unaryExpression, unaryExpression, i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 812:49: -> ^( LABINOP unaryExpression ( $i unaryExpression )+ )
                    {
                        // jkit/java/Java.g:812:52: ^( LABINOP unaryExpression ( $i unaryExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());
                        if ( !(stream_unaryExpression.hasNext()||stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_unaryExpression.hasNext()||stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                            adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        }
                        stream_unaryExpression.reset();
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:813:8: 
                    {

                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 813:8: -> unaryExpression
                    {
                        adaptor.addChild(root_0, stream_unaryExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // jkit/java/Java.g:817:1: unaryExpression : ( '+' unaryExpression -> unaryExpression | '-' unaryExpression -> ^( NEG unaryExpression ) | '++' unaryExpression -> ^( PREINC unaryExpression ) | '--' unaryExpression -> ^( PREDEC unaryExpression ) | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus );
    public final JavaParser.unaryExpression_return unaryExpression() throws RecognitionException {
        JavaParser.unaryExpression_return retval = new JavaParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal463=null;
        Token char_literal465=null;
        Token string_literal467=null;
        Token string_literal469=null;
        JavaParser.unaryExpression_return unaryExpression464 = null;

        JavaParser.unaryExpression_return unaryExpression466 = null;

        JavaParser.unaryExpression_return unaryExpression468 = null;

        JavaParser.unaryExpression_return unaryExpression470 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus471 = null;


        Object char_literal463_tree=null;
        Object char_literal465_tree=null;
        Object string_literal467_tree=null;
        Object string_literal469_tree=null;
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_unaryExpressionNotPlusMinus=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionNotPlusMinus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // jkit/java/Java.g:818:5: ( '+' unaryExpression -> unaryExpression | '-' unaryExpression -> ^( NEG unaryExpression ) | '++' unaryExpression -> ^( PREINC unaryExpression ) | '--' unaryExpression -> ^( PREDEC unaryExpression ) | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus )
            int alt143=5;
            alt143 = dfa143.predict(input);
            switch (alt143) {
                case 1 :
                    // jkit/java/Java.g:818:9: '+' unaryExpression
                    {
                    char_literal463=(Token)match(input,178,FOLLOW_178_in_unaryExpression5807); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(char_literal463);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5809);
                    unaryExpression464=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression464.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 818:29: -> unaryExpression
                    {
                        adaptor.addChild(root_0, stream_unaryExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:819:7: '-' unaryExpression
                    {
                    char_literal465=(Token)match(input,179,FOLLOW_179_in_unaryExpression5821); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_179.add(char_literal465);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5823);
                    unaryExpression466=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression466.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 819:27: -> ^( NEG unaryExpression )
                    {
                        // jkit/java/Java.g:819:30: ^( NEG unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEG, "NEG"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:820:9: '++' unaryExpression
                    {
                    string_literal467=(Token)match(input,192,FOLLOW_192_in_unaryExpression5841); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_192.add(string_literal467);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5843);
                    unaryExpression468=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression468.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 820:30: -> ^( PREINC unaryExpression )
                    {
                        // jkit/java/Java.g:820:33: ^( PREINC unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PREINC, "PREINC"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:821:9: '--' unaryExpression
                    {
                    string_literal469=(Token)match(input,193,FOLLOW_193_in_unaryExpression5861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(string_literal469);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5863);
                    unaryExpression470=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression470.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 821:30: -> ^( PREDEC unaryExpression )
                    {
                        // jkit/java/Java.g:821:33: ^( PREDEC unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PREDEC, "PREDEC"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:822:9: unaryExpressionNotPlusMinus
                    {
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression5881);
                    unaryExpressionNotPlusMinus471=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus471.getTree());


                    // AST REWRITE
                    // elements: unaryExpressionNotPlusMinus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 822:37: -> unaryExpressionNotPlusMinus
                    {
                        adaptor.addChild(root_0, stream_unaryExpressionNotPlusMinus.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // jkit/java/Java.g:825:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression -> ^( INV unaryExpression ) | '!' unaryExpression -> ^( NOT unaryExpression ) | castExpression | primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary ) );
    public final JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        JavaParser.unaryExpressionNotPlusMinus_return retval = new JavaParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal472=null;
        Token char_literal474=null;
        Token string_literal479=null;
        Token string_literal480=null;
        Token string_literal481=null;
        Token string_literal482=null;
        JavaParser.unaryExpression_return unaryExpression473 = null;

        JavaParser.unaryExpression_return unaryExpression475 = null;

        JavaParser.castExpression_return castExpression476 = null;

        JavaParser.primary_return primary477 = null;

        JavaParser.selector_return selector478 = null;


        Object char_literal472_tree=null;
        Object char_literal474_tree=null;
        Object string_literal479_tree=null;
        Object string_literal480_tree=null;
        Object string_literal481_tree=null;
        Object string_literal482_tree=null;
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_primary=new RewriteRuleSubtreeStream(adaptor,"rule primary");
        RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // jkit/java/Java.g:826:5: ( '~' unaryExpression -> ^( INV unaryExpression ) | '!' unaryExpression -> ^( NOT unaryExpression ) | castExpression | primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary ) )
            int alt147=4;
            alt147 = dfa147.predict(input);
            switch (alt147) {
                case 1 :
                    // jkit/java/Java.g:826:9: '~' unaryExpression
                    {
                    char_literal472=(Token)match(input,194,FOLLOW_194_in_unaryExpressionNotPlusMinus5912); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_194.add(char_literal472);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5914);
                    unaryExpression473=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression473.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 826:29: -> ^( INV unaryExpression )
                    {
                        // jkit/java/Java.g:826:32: ^( INV unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INV, "INV"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:827:8: '!' unaryExpression
                    {
                    char_literal474=(Token)match(input,195,FOLLOW_195_in_unaryExpressionNotPlusMinus5931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_195.add(char_literal474);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5933);
                    unaryExpression475=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression475.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 827:28: -> ^( NOT unaryExpression )
                    {
                        // jkit/java/Java.g:827:31: ^( NOT unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NOT, "NOT"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:828:9: castExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus5951);
                    castExpression476=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, castExpression476.getTree());

                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:829:6: primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary )
                    {
                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus5958);
                    primary477=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primary.add(primary477.getTree());
                    // jkit/java/Java.g:830:3: ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary )
                    int alt146=4;
                    alt146 = dfa146.predict(input);
                    switch (alt146) {
                        case 1 :
                            // jkit/java/Java.g:831:4: ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) )
                            {
                            // jkit/java/Java.g:831:4: ( selector )+
                            int cnt144=0;
                            loop144:
                            do {
                                int alt144=2;
                                alt144 = dfa144.predict(input);
                                switch (alt144) {
                            	case 1 :
                            	    // jkit/java/Java.g:0:0: selector
                            	    {
                            	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus5968);
                            	    selector478=selector();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_selector.add(selector478.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt144 >= 1 ) break loop144;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(144, input);
                                        throw eee;
                                }
                                cnt144++;
                            } while (true);

                            // jkit/java/Java.g:832:4: ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) )
                            int alt145=3;
                            alt145 = dfa145.predict(input);
                            switch (alt145) {
                                case 1 :
                                    // jkit/java/Java.g:833:5: '++'
                                    {
                                    string_literal479=(Token)match(input,192,FOLLOW_192_in_unaryExpressionNotPlusMinus5981); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_192.add(string_literal479);



                                    // AST REWRITE
                                    // elements: primary, selector
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (Object)adaptor.nil();
                                    // 833:10: -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) )
                                    {
                                        // jkit/java/Java.g:833:13: ^( POSTINC ^( SELECTOR primary ( selector )+ ) )
                                        {
                                        Object root_1 = (Object)adaptor.nil();
                                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTINC, "POSTINC"), root_1);

                                        // jkit/java/Java.g:833:23: ^( SELECTOR primary ( selector )+ )
                                        {
                                        Object root_2 = (Object)adaptor.nil();
                                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTOR, "SELECTOR"), root_2);

                                        adaptor.addChild(root_2, stream_primary.nextTree());
                                        if ( !(stream_selector.hasNext()) ) {
                                            throw new RewriteEarlyExitException();
                                        }
                                        while ( stream_selector.hasNext() ) {
                                            adaptor.addChild(root_2, stream_selector.nextTree());

                                        }
                                        stream_selector.reset();

                                        adaptor.addChild(root_1, root_2);
                                        }

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // jkit/java/Java.g:834:6: '--'
                                    {
                                    string_literal480=(Token)match(input,193,FOLLOW_193_in_unaryExpressionNotPlusMinus6003); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_193.add(string_literal480);



                                    // AST REWRITE
                                    // elements: primary, selector
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (Object)adaptor.nil();
                                    // 834:11: -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) )
                                    {
                                        // jkit/java/Java.g:834:14: ^( POSTDEC ^( SELECTOR primary ( selector )+ ) )
                                        {
                                        Object root_1 = (Object)adaptor.nil();
                                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTDEC, "POSTDEC"), root_1);

                                        // jkit/java/Java.g:834:24: ^( SELECTOR primary ( selector )+ )
                                        {
                                        Object root_2 = (Object)adaptor.nil();
                                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTOR, "SELECTOR"), root_2);

                                        adaptor.addChild(root_2, stream_primary.nextTree());
                                        if ( !(stream_selector.hasNext()) ) {
                                            throw new RewriteEarlyExitException();
                                        }
                                        while ( stream_selector.hasNext() ) {
                                            adaptor.addChild(root_2, stream_selector.nextTree());

                                        }
                                        stream_selector.reset();

                                        adaptor.addChild(root_1, root_2);
                                        }

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 3 :
                                    // jkit/java/Java.g:835:7: 
                                    {

                                    // AST REWRITE
                                    // elements: selector, primary
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (Object)adaptor.nil();
                                    // 835:7: -> ^( SELECTOR primary ( selector )+ )
                                    {
                                        // jkit/java/Java.g:835:10: ^( SELECTOR primary ( selector )+ )
                                        {
                                        Object root_1 = (Object)adaptor.nil();
                                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTOR, "SELECTOR"), root_1);

                                        adaptor.addChild(root_1, stream_primary.nextTree());
                                        if ( !(stream_selector.hasNext()) ) {
                                            throw new RewriteEarlyExitException();
                                        }
                                        while ( stream_selector.hasNext() ) {
                                            adaptor.addChild(root_1, stream_selector.nextTree());

                                        }
                                        stream_selector.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:837:6: '++'
                            {
                            string_literal481=(Token)match(input,192,FOLLOW_192_in_unaryExpressionNotPlusMinus6047); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_192.add(string_literal481);



                            // AST REWRITE
                            // elements: primary
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 837:11: -> ^( POSTINC primary )
                            {
                                // jkit/java/Java.g:837:14: ^( POSTINC primary )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTINC, "POSTINC"), root_1);

                                adaptor.addChild(root_1, stream_primary.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:838:6: '--'
                            {
                            string_literal482=(Token)match(input,193,FOLLOW_193_in_unaryExpressionNotPlusMinus6062); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_193.add(string_literal482);



                            // AST REWRITE
                            // elements: primary
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 838:11: -> ^( POSTDEC primary )
                            {
                                // jkit/java/Java.g:838:14: ^( POSTDEC primary )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTDEC, "POSTDEC"), root_1);

                                adaptor.addChild(root_1, stream_primary.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // jkit/java/Java.g:839:6: 
                            {

                            // AST REWRITE
                            // elements: primary
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 839:6: -> primary
                            {
                                adaptor.addChild(root_0, stream_primary.nextTree());

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class castExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // jkit/java/Java.g:843:1: castExpression : ( '(' primitiveType ')' unaryExpression -> ^( CAST ^( TYPE primitiveType ) unaryExpression ) | '(' type ')' unaryExpressionNotPlusMinus -> ^( CAST type unaryExpressionNotPlusMinus ) | '(' expression ')' unaryExpressionNotPlusMinus ->);
    public final JavaParser.castExpression_return castExpression() throws RecognitionException {
        JavaParser.castExpression_return retval = new JavaParser.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal483=null;
        Token char_literal485=null;
        Token char_literal487=null;
        Token char_literal489=null;
        Token char_literal491=null;
        Token char_literal493=null;
        JavaParser.primitiveType_return primitiveType484 = null;

        JavaParser.unaryExpression_return unaryExpression486 = null;

        JavaParser.type_return type488 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus490 = null;

        JavaParser.expression_return expression492 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus494 = null;


        Object char_literal483_tree=null;
        Object char_literal485_tree=null;
        Object char_literal487_tree=null;
        Object char_literal489_tree=null;
        Object char_literal491_tree=null;
        Object char_literal493_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_unaryExpressionNotPlusMinus=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionNotPlusMinus");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // jkit/java/Java.g:844:5: ( '(' primitiveType ')' unaryExpression -> ^( CAST ^( TYPE primitiveType ) unaryExpression ) | '(' type ')' unaryExpressionNotPlusMinus -> ^( CAST type unaryExpressionNotPlusMinus ) | '(' expression ')' unaryExpressionNotPlusMinus ->)
            int alt148=3;
            alt148 = dfa148.predict(input);
            switch (alt148) {
                case 1 :
                    // jkit/java/Java.g:844:8: '(' primitiveType ')' unaryExpression
                    {
                    char_literal483=(Token)match(input,154,FOLLOW_154_in_castExpression6101); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_154.add(char_literal483);

                    pushFollow(FOLLOW_primitiveType_in_castExpression6103);
                    primitiveType484=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType484.getTree());
                    char_literal485=(Token)match(input,155,FOLLOW_155_in_castExpression6105); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_155.add(char_literal485);

                    pushFollow(FOLLOW_unaryExpression_in_castExpression6107);
                    unaryExpression486=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression486.getTree());


                    // AST REWRITE
                    // elements: primitiveType, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 844:46: -> ^( CAST ^( TYPE primitiveType ) unaryExpression )
                    {
                        // jkit/java/Java.g:844:49: ^( CAST ^( TYPE primitiveType ) unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CAST, "CAST"), root_1);

                        // jkit/java/Java.g:844:56: ^( TYPE primitiveType )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                        adaptor.addChild(root_2, stream_primitiveType.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:845:8: '(' type ')' unaryExpressionNotPlusMinus
                    {
                    char_literal487=(Token)match(input,154,FOLLOW_154_in_castExpression6130); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_154.add(char_literal487);

                    pushFollow(FOLLOW_type_in_castExpression6132);
                    type488=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type488.getTree());
                    char_literal489=(Token)match(input,155,FOLLOW_155_in_castExpression6134); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_155.add(char_literal489);

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6136);
                    unaryExpressionNotPlusMinus490=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus490.getTree());


                    // AST REWRITE
                    // elements: type, unaryExpressionNotPlusMinus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 845:49: -> ^( CAST type unaryExpressionNotPlusMinus )
                    {
                        // jkit/java/Java.g:845:52: ^( CAST type unaryExpressionNotPlusMinus )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CAST, "CAST"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_unaryExpressionNotPlusMinus.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:846:8: '(' expression ')' unaryExpressionNotPlusMinus
                    {
                    char_literal491=(Token)match(input,154,FOLLOW_154_in_castExpression6155); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_154.add(char_literal491);

                    pushFollow(FOLLOW_expression_in_castExpression6157);
                    expression492=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression492.getTree());
                    char_literal493=(Token)match(input,155,FOLLOW_155_in_castExpression6159); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_155.add(char_literal493);

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6161);
                    unaryExpressionNotPlusMinus494=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus494.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 846:55: ->
                    {
                        root_0 = null;
                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class primary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary"
    // jkit/java/Java.g:849:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | literal | 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) ) | 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) ) | type '.' 'class' -> ^( GETCLASS type ) | 'void' '.' 'class' -> ^( GETCLASS ^( TYPE VOID ) ) | 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) ) | Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) ) );
    public final JavaParser.primary_return primary() throws RecognitionException {
        JavaParser.primary_return retval = new JavaParser.primary_return();
        retval.start = input.LT(1);
        int primary_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal499=null;
        Token char_literal502=null;
        Token char_literal504=null;
        Token char_literal505=null;
        Token char_literal506=null;
        Token char_literal507=null;
        Token char_literal508=null;
        Token string_literal510=null;
        Token char_literal512=null;
        Token char_literal513=null;
        Token char_literal515=null;
        Token char_literal516=null;
        Token char_literal517=null;
        Token char_literal518=null;
        Token char_literal519=null;
        Token char_literal523=null;
        Token string_literal524=null;
        Token string_literal525=null;
        Token char_literal526=null;
        Token string_literal527=null;
        Token string_literal528=null;
        Token Identifier530=null;
        List list_i=null;
        JavaParser.parExpression_return parExpression495 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments496 = null;

        JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix497 = null;

        JavaParser.literal_return literal498 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments500 = null;

        JavaParser.primitiveType_return primitiveType501 = null;

        JavaParser.expression_return expression503 = null;

        JavaParser.arrayInitializer_return arrayInitializer509 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments511 = null;

        JavaParser.expression_return expression514 = null;

        JavaParser.arrayInitializer_return arrayInitializer520 = null;

        JavaParser.classCreatorRest_return classCreatorRest521 = null;

        JavaParser.type_return type522 = null;

        JavaParser.arguments_return arguments529 = null;

        JavaParser.arguments_return arguments531 = null;

        JavaParser.refComponent_return i = null;
        Object string_literal499_tree=null;
        Object char_literal502_tree=null;
        Object char_literal504_tree=null;
        Object char_literal505_tree=null;
        Object char_literal506_tree=null;
        Object char_literal507_tree=null;
        Object char_literal508_tree=null;
        Object string_literal510_tree=null;
        Object char_literal512_tree=null;
        Object char_literal513_tree=null;
        Object char_literal515_tree=null;
        Object char_literal516_tree=null;
        Object char_literal517_tree=null;
        Object char_literal518_tree=null;
        Object char_literal519_tree=null;
        Object char_literal523_tree=null;
        Object string_literal524_tree=null;
        Object string_literal525_tree=null;
        Object char_literal526_tree=null;
        Object string_literal527_tree=null;
        Object string_literal528_tree=null;
        Object Identifier530_tree=null;
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_arrayInitializer=new RewriteRuleSubtreeStream(adaptor,"rule arrayInitializer");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classCreatorRest=new RewriteRuleSubtreeStream(adaptor,"rule classCreatorRest");
        RewriteRuleSubtreeStream stream_explicitGenericInvocationSuffix=new RewriteRuleSubtreeStream(adaptor,"rule explicitGenericInvocationSuffix");
        RewriteRuleSubtreeStream stream_refComponent=new RewriteRuleSubtreeStream(adaptor,"rule refComponent");
        RewriteRuleSubtreeStream stream_nonWildcardTypeArguments=new RewriteRuleSubtreeStream(adaptor,"rule nonWildcardTypeArguments");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // jkit/java/Java.g:850:5: ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | literal | 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) ) | 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) ) | type '.' 'class' -> ^( GETCLASS type ) | 'void' '.' 'class' -> ^( GETCLASS ^( TYPE VOID ) ) | 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) ) | Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) ) )
            int alt162=9;
            alt162 = dfa162.predict(input);
            switch (alt162) {
                case 1 :
                    // jkit/java/Java.g:850:7: parExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_primary6181);
                    parExpression495=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression495.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:851:6: nonWildcardTypeArguments explicitGenericInvocationSuffix
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6188);
                    nonWildcardTypeArguments496=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments496.getTree());
                    pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary6190);
                    explicitGenericInvocationSuffix497=explicitGenericInvocationSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicitGenericInvocationSuffix.add(explicitGenericInvocationSuffix497.getTree());


                    // AST REWRITE
                    // elements: nonWildcardTypeArguments, explicitGenericInvocationSuffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 851:63: -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                    {
                        // jkit/java/Java.g:851:66: ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                        // jkit/java/Java.g:851:75: ^( TYPE_PARAMETER nonWildcardTypeArguments )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETER, "TYPE_PARAMETER"), root_2);

                        adaptor.addChild(root_2, stream_nonWildcardTypeArguments.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_explicitGenericInvocationSuffix.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:852:9: literal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primary6214);
                    literal498=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal498.getTree());

                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:853:9: 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) )
                    {
                    string_literal499=(Token)match(input,196,FOLLOW_196_in_primary6224); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_196.add(string_literal499);

                    // jkit/java/Java.g:853:15: ( nonWildcardTypeArguments )?
                    int alt149=2;
                    int LA149_0 = input.LA(1);

                    if ( (LA149_0==122) ) {
                        alt149=1;
                    }
                    switch (alt149) {
                        case 1 :
                            // jkit/java/Java.g:0:0: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6226);
                            nonWildcardTypeArguments500=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments500.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_primitiveType_in_primary6229);
                    primitiveType501=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType501.getTree());
                    // jkit/java/Java.g:854:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) )
                    int alt153=2;
                    alt153 = dfa153.predict(input);
                    switch (alt153) {
                        case 1 :
                            // jkit/java/Java.g:855:7: ( '[' expression ']' )+ ( '[' ']' )*
                            {
                            // jkit/java/Java.g:855:7: ( '[' expression ']' )+
                            int cnt150=0;
                            loop150:
                            do {
                                int alt150=2;
                                alt150 = dfa150.predict(input);
                                switch (alt150) {
                            	case 1 :
                            	    // jkit/java/Java.g:855:8: '[' expression ']'
                            	    {
                            	    char_literal502=(Token)match(input,131,FOLLOW_131_in_primary6245); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_131.add(char_literal502);

                            	    pushFollow(FOLLOW_expression_in_primary6247);
                            	    expression503=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_expression.add(expression503.getTree());
                            	    char_literal504=(Token)match(input,132,FOLLOW_132_in_primary6249); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_132.add(char_literal504);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt150 >= 1 ) break loop150;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(150, input);
                                        throw eee;
                                }
                                cnt150++;
                            } while (true);

                            // jkit/java/Java.g:855:29: ( '[' ']' )*
                            loop151:
                            do {
                                int alt151=2;
                                alt151 = dfa151.predict(input);
                                switch (alt151) {
                            	case 1 :
                            	    // jkit/java/Java.g:855:30: '[' ']'
                            	    {
                            	    char_literal505=(Token)match(input,131,FOLLOW_131_in_primary6254); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_131.add(char_literal505);

                            	    char_literal506=(Token)match(input,132,FOLLOW_132_in_primary6256); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_132.add(char_literal506);


                            	    }
                            	    break;

                            	default :
                            	    break loop151;
                                }
                            } while (true);



                            // AST REWRITE
                            // elements: expression, 131, primitiveType
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 855:40: -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* )
                            {
                                // jkit/java/Java.g:855:43: ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                                // jkit/java/Java.g:855:49: ^( TYPE primitiveType ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, stream_primitiveType.nextTree());
                                // jkit/java/Java.g:855:70: ( '[' )*
                                while ( stream_131.hasNext() ) {
                                    adaptor.addChild(root_2, stream_131.nextNode());

                                }
                                stream_131.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:855:76: ( expression )*
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:856:9: ( '[' ']' )+ arrayInitializer
                            {
                            // jkit/java/Java.g:856:9: ( '[' ']' )+
                            int cnt152=0;
                            loop152:
                            do {
                                int alt152=2;
                                int LA152_0 = input.LA(1);

                                if ( (LA152_0==131) ) {
                                    alt152=1;
                                }


                                switch (alt152) {
                            	case 1 :
                            	    // jkit/java/Java.g:856:10: '[' ']'
                            	    {
                            	    char_literal507=(Token)match(input,131,FOLLOW_131_in_primary6287); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_131.add(char_literal507);

                            	    char_literal508=(Token)match(input,132,FOLLOW_132_in_primary6289); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_132.add(char_literal508);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt152 >= 1 ) break loop152;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(152, input);
                                        throw eee;
                                }
                                cnt152++;
                            } while (true);

                            pushFollow(FOLLOW_arrayInitializer_in_primary6293);
                            arrayInitializer509=arrayInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arrayInitializer.add(arrayInitializer509.getTree());


                            // AST REWRITE
                            // elements: primitiveType, arrayInitializer, 131
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 856:37: -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer )
                            {
                                // jkit/java/Java.g:856:40: ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYINIT, "ARRAYINIT"), root_1);

                                // jkit/java/Java.g:856:52: ^( TYPE primitiveType ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, stream_primitiveType.nextTree());
                                // jkit/java/Java.g:856:73: ( '[' )*
                                while ( stream_131.hasNext() ) {
                                    adaptor.addChild(root_2, stream_131.nextNode());

                                }
                                stream_131.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_arrayInitializer.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:858:9: 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) )
                    {
                    string_literal510=(Token)match(input,196,FOLLOW_196_in_primary6325); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_196.add(string_literal510);

                    // jkit/java/Java.g:858:15: ( nonWildcardTypeArguments )?
                    int alt154=2;
                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==122) ) {
                        alt154=1;
                    }
                    switch (alt154) {
                        case 1 :
                            // jkit/java/Java.g:0:0: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6327);
                            nonWildcardTypeArguments511=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments511.getTree());

                            }
                            break;

                    }

                    // jkit/java/Java.g:858:41: (i+= refComponent ( '.' i+= refComponent )* )
                    // jkit/java/Java.g:858:42: i+= refComponent ( '.' i+= refComponent )*
                    {
                    pushFollow(FOLLOW_refComponent_in_primary6333);
                    i=refComponent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i.getTree());

                    // jkit/java/Java.g:858:58: ( '.' i+= refComponent )*
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);

                        if ( (LA155_0==117) ) {
                            alt155=1;
                        }


                        switch (alt155) {
                    	case 1 :
                    	    // jkit/java/Java.g:858:59: '.' i+= refComponent
                    	    {
                    	    char_literal512=(Token)match(input,117,FOLLOW_117_in_primary6336); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_117.add(char_literal512);

                    	    pushFollow(FOLLOW_refComponent_in_primary6340);
                    	    i=refComponent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop155;
                        }
                    } while (true);


                    }

                    // jkit/java/Java.g:859:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) )
                    int alt159=3;
                    alt159 = dfa159.predict(input);
                    switch (alt159) {
                        case 1 :
                            // jkit/java/Java.g:860:7: ( '[' expression ']' )+ ( '[' ']' )*
                            {
                            // jkit/java/Java.g:860:7: ( '[' expression ']' )+
                            int cnt156=0;
                            loop156:
                            do {
                                int alt156=2;
                                alt156 = dfa156.predict(input);
                                switch (alt156) {
                            	case 1 :
                            	    // jkit/java/Java.g:860:8: '[' expression ']'
                            	    {
                            	    char_literal513=(Token)match(input,131,FOLLOW_131_in_primary6359); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_131.add(char_literal513);

                            	    pushFollow(FOLLOW_expression_in_primary6361);
                            	    expression514=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_expression.add(expression514.getTree());
                            	    char_literal515=(Token)match(input,132,FOLLOW_132_in_primary6363); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_132.add(char_literal515);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt156 >= 1 ) break loop156;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(156, input);
                                        throw eee;
                                }
                                cnt156++;
                            } while (true);

                            // jkit/java/Java.g:860:29: ( '[' ']' )*
                            loop157:
                            do {
                                int alt157=2;
                                alt157 = dfa157.predict(input);
                                switch (alt157) {
                            	case 1 :
                            	    // jkit/java/Java.g:860:30: '[' ']'
                            	    {
                            	    char_literal516=(Token)match(input,131,FOLLOW_131_in_primary6368); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_131.add(char_literal516);

                            	    char_literal517=(Token)match(input,132,FOLLOW_132_in_primary6370); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_132.add(char_literal517);


                            	    }
                            	    break;

                            	default :
                            	    break loop157;
                                }
                            } while (true);



                            // AST REWRITE
                            // elements: expression, 131, i
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: i
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                            root_0 = (Object)adaptor.nil();
                            // 860:40: -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* )
                            {
                                // jkit/java/Java.g:860:43: ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                                // jkit/java/Java.g:860:49: ^( TYPE ( $i)+ ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                if ( !(stream_i.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_i.hasNext() ) {
                                    adaptor.addChild(root_2, stream_i.nextTree());

                                }
                                stream_i.reset();
                                // jkit/java/Java.g:860:60: ( '[' )*
                                while ( stream_131.hasNext() ) {
                                    adaptor.addChild(root_2, stream_131.nextNode());

                                }
                                stream_131.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:860:66: ( expression )*
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:861:9: ( '[' ']' )+ arrayInitializer
                            {
                            // jkit/java/Java.g:861:9: ( '[' ']' )+
                            int cnt158=0;
                            loop158:
                            do {
                                int alt158=2;
                                int LA158_0 = input.LA(1);

                                if ( (LA158_0==131) ) {
                                    alt158=1;
                                }


                                switch (alt158) {
                            	case 1 :
                            	    // jkit/java/Java.g:861:10: '[' ']'
                            	    {
                            	    char_literal518=(Token)match(input,131,FOLLOW_131_in_primary6403); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_131.add(char_literal518);

                            	    char_literal519=(Token)match(input,132,FOLLOW_132_in_primary6405); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_132.add(char_literal519);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt158 >= 1 ) break loop158;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(158, input);
                                        throw eee;
                                }
                                cnt158++;
                            } while (true);

                            pushFollow(FOLLOW_arrayInitializer_in_primary6409);
                            arrayInitializer520=arrayInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arrayInitializer.add(arrayInitializer520.getTree());


                            // AST REWRITE
                            // elements: arrayInitializer, 131, i
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: i
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                            root_0 = (Object)adaptor.nil();
                            // 861:37: -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer )
                            {
                                // jkit/java/Java.g:861:40: ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYINIT, "ARRAYINIT"), root_1);

                                // jkit/java/Java.g:861:52: ^( TYPE ( $i)+ ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                if ( !(stream_i.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_i.hasNext() ) {
                                    adaptor.addChild(root_2, stream_i.nextTree());

                                }
                                stream_i.reset();
                                // jkit/java/Java.g:861:63: ( '[' )*
                                while ( stream_131.hasNext() ) {
                                    adaptor.addChild(root_2, stream_131.nextNode());

                                }
                                stream_131.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_arrayInitializer.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:862:9: classCreatorRest
                            {
                            pushFollow(FOLLOW_classCreatorRest_in_primary6438);
                            classCreatorRest521=classCreatorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classCreatorRest.add(classCreatorRest521.getTree());


                            // AST REWRITE
                            // elements: i, classCreatorRest
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: i
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                            root_0 = (Object)adaptor.nil();
                            // 862:26: -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? )
                            {
                                // jkit/java/Java.g:862:29: ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                                // jkit/java/Java.g:862:35: ^( TYPE ( $i)+ )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                if ( !(stream_i.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_i.hasNext() ) {
                                    adaptor.addChild(root_2, stream_i.nextTree());

                                }
                                stream_i.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:862:47: ( classCreatorRest )?
                                if ( stream_classCreatorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_classCreatorRest.nextTree());

                                }
                                stream_classCreatorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:864:9: type '.' 'class'
                    {
                    pushFollow(FOLLOW_type_in_primary6470);
                    type522=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type522.getTree());
                    char_literal523=(Token)match(input,117,FOLLOW_117_in_primary6472); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal523);

                    string_literal524=(Token)match(input,119,FOLLOW_119_in_primary6474); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_119.add(string_literal524);



                    // AST REWRITE
                    // elements: type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 864:26: -> ^( GETCLASS type )
                    {
                        // jkit/java/Java.g:864:29: ^( GETCLASS type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GETCLASS, "GETCLASS"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // jkit/java/Java.g:865:9: 'void' '.' 'class'
                    {
                    string_literal525=(Token)match(input,129,FOLLOW_129_in_primary6496); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_129.add(string_literal525);

                    char_literal526=(Token)match(input,117,FOLLOW_117_in_primary6498); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal526);

                    string_literal527=(Token)match(input,119,FOLLOW_119_in_primary6500); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_119.add(string_literal527);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 865:28: -> ^( GETCLASS ^( TYPE VOID ) )
                    {
                        // jkit/java/Java.g:865:31: ^( GETCLASS ^( TYPE VOID ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GETCLASS, "GETCLASS"), root_1);

                        // jkit/java/Java.g:865:42: ^( TYPE VOID )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                        adaptor.addChild(root_2, (Object)adaptor.create(VOID, "VOID"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // jkit/java/Java.g:866:8: 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) )
                    {
                    string_literal528=(Token)match(input,153,FOLLOW_153_in_primary6521); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_153.add(string_literal528);

                    // jkit/java/Java.g:867:3: ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) )
                    int alt160=2;
                    alt160 = dfa160.predict(input);
                    switch (alt160) {
                        case 1 :
                            // jkit/java/Java.g:868:4: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primary6531);
                            arguments529=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments529.getTree());


                            // AST REWRITE
                            // elements: 153, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 868:14: -> ^( INVOKE 'super' ( arguments )? )
                            {
                                // jkit/java/Java.g:868:17: ^( INVOKE 'super' ( arguments )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                                adaptor.addChild(root_1, stream_153.nextNode());
                                // jkit/java/Java.g:868:34: ( arguments )?
                                if ( stream_arguments.hasNext() ) {
                                    adaptor.addChild(root_1, stream_arguments.nextTree());

                                }
                                stream_arguments.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:869:6: 
                            {

                            // AST REWRITE
                            // elements: 153
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 869:6: -> ^( VAR 'super' )
                            {
                                // jkit/java/Java.g:869:9: ^( VAR 'super' )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VAR, "VAR"), root_1);

                                adaptor.addChild(root_1, stream_153.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // jkit/java/Java.g:871:9: Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) )
                    {
                    Identifier530=(Token)match(input,Identifier,FOLLOW_Identifier_in_primary6569); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier530);

                    // jkit/java/Java.g:872:6: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) )
                    int alt161=2;
                    alt161 = dfa161.predict(input);
                    switch (alt161) {
                        case 1 :
                            // jkit/java/Java.g:873:7: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primary6585);
                            arguments531=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments531.getTree());


                            // AST REWRITE
                            // elements: Identifier, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 873:17: -> ^( INVOKE Identifier ( arguments )? )
                            {
                                // jkit/java/Java.g:873:20: ^( INVOKE Identifier ( arguments )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:873:40: ( arguments )?
                                if ( stream_arguments.hasNext() ) {
                                    adaptor.addChild(root_1, stream_arguments.nextTree());

                                }
                                stream_arguments.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:874:9: 
                            {

                            // AST REWRITE
                            // elements: Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 874:9: -> ^( VAR Identifier )
                            {
                                // jkit/java/Java.g:874:12: ^( VAR Identifier )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VAR, "VAR"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, primary_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class innerCreator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerCreator"
    // jkit/java/Java.g:878:1: innerCreator : Identifier classCreatorRest -> Identifier ( classCreatorRest )? ;
    public final JavaParser.innerCreator_return innerCreator() throws RecognitionException {
        JavaParser.innerCreator_return retval = new JavaParser.innerCreator_return();
        retval.start = input.LT(1);
        int innerCreator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier532=null;
        JavaParser.classCreatorRest_return classCreatorRest533 = null;


        Object Identifier532_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_classCreatorRest=new RewriteRuleSubtreeStream(adaptor,"rule classCreatorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // jkit/java/Java.g:879:2: ( Identifier classCreatorRest -> Identifier ( classCreatorRest )? )
            // jkit/java/Java.g:879:4: Identifier classCreatorRest
            {
            Identifier532=(Token)match(input,Identifier,FOLLOW_Identifier_in_innerCreator6630); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier532);

            pushFollow(FOLLOW_classCreatorRest_in_innerCreator6632);
            classCreatorRest533=classCreatorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classCreatorRest.add(classCreatorRest533.getTree());


            // AST REWRITE
            // elements: Identifier, classCreatorRest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 879:32: -> Identifier ( classCreatorRest )?
            {
                adaptor.addChild(root_0, stream_Identifier.nextNode());
                // jkit/java/Java.g:879:46: ( classCreatorRest )?
                if ( stream_classCreatorRest.hasNext() ) {
                    adaptor.addChild(root_0, stream_classCreatorRest.nextTree());

                }
                stream_classCreatorRest.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, innerCreator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "innerCreator"

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classCreatorRest"
    // jkit/java/Java.g:882:1: classCreatorRest : arguments ( classBody )? -> ( arguments )? ( classBody )? ;
    public final JavaParser.classCreatorRest_return classCreatorRest() throws RecognitionException {
        JavaParser.classCreatorRest_return retval = new JavaParser.classCreatorRest_return();
        retval.start = input.LT(1);
        int classCreatorRest_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.arguments_return arguments534 = null;

        JavaParser.classBody_return classBody535 = null;


        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // jkit/java/Java.g:883:2: ( arguments ( classBody )? -> ( arguments )? ( classBody )? )
            // jkit/java/Java.g:883:4: arguments ( classBody )?
            {
            pushFollow(FOLLOW_arguments_in_classCreatorRest6650);
            arguments534=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arguments.add(arguments534.getTree());
            // jkit/java/Java.g:883:14: ( classBody )?
            int alt163=2;
            alt163 = dfa163.predict(input);
            switch (alt163) {
                case 1 :
                    // jkit/java/Java.g:0:0: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_classCreatorRest6652);
                    classBody535=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody535.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arguments, classBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 883:25: -> ( arguments )? ( classBody )?
            {
                // jkit/java/Java.g:883:28: ( arguments )?
                if ( stream_arguments.hasNext() ) {
                    adaptor.addChild(root_0, stream_arguments.nextTree());

                }
                stream_arguments.reset();
                // jkit/java/Java.g:883:39: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_classBody.nextTree());

                }
                stream_classBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, classCreatorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classCreatorRest"

    public static class explicitGenericInvocation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocation"
    // jkit/java/Java.g:886:1: explicitGenericInvocation : nonWildcardTypeArguments explicitGenericInvocationSuffix ;
    public final JavaParser.explicitGenericInvocation_return explicitGenericInvocation() throws RecognitionException {
        JavaParser.explicitGenericInvocation_return retval = new JavaParser.explicitGenericInvocation_return();
        retval.start = input.LT(1);
        int explicitGenericInvocation_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments536 = null;

        JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix537 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // jkit/java/Java.g:887:2: ( nonWildcardTypeArguments explicitGenericInvocationSuffix )
            // jkit/java/Java.g:887:4: nonWildcardTypeArguments explicitGenericInvocationSuffix
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation6673);
            nonWildcardTypeArguments536=nonWildcardTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments536.getTree());
            pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_explicitGenericInvocation6675);
            explicitGenericInvocationSuffix537=explicitGenericInvocationSuffix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, explicitGenericInvocationSuffix537.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, explicitGenericInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocation"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // jkit/java/Java.g:890:1: nonWildcardTypeArguments : '<' typeList '>' -> typeList ;
    public final JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        JavaParser.nonWildcardTypeArguments_return retval = new JavaParser.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);
        int nonWildcardTypeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal538=null;
        Token char_literal540=null;
        JavaParser.typeList_return typeList539 = null;


        Object char_literal538_tree=null;
        Object char_literal540_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // jkit/java/Java.g:891:2: ( '<' typeList '>' -> typeList )
            // jkit/java/Java.g:891:4: '<' typeList '>'
            {
            char_literal538=(Token)match(input,122,FOLLOW_122_in_nonWildcardTypeArguments6687); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(char_literal538);

            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments6689);
            typeList539=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeList.add(typeList539.getTree());
            char_literal540=(Token)match(input,124,FOLLOW_124_in_nonWildcardTypeArguments6691); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_124.add(char_literal540);



            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 891:21: -> typeList
            {
                adaptor.addChild(root_0, stream_typeList.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, nonWildcardTypeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"

    public static class explicitGenericInvocationSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocationSuffix"
    // jkit/java/Java.g:894:1: explicitGenericInvocationSuffix : ( 'super' superSuffix -> 'super' ( superSuffix )? | Identifier arguments -> Identifier ( arguments )? );
    public final JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix() throws RecognitionException {
        JavaParser.explicitGenericInvocationSuffix_return retval = new JavaParser.explicitGenericInvocationSuffix_return();
        retval.start = input.LT(1);
        int explicitGenericInvocationSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal541=null;
        Token Identifier543=null;
        JavaParser.superSuffix_return superSuffix542 = null;

        JavaParser.arguments_return arguments544 = null;


        Object string_literal541_tree=null;
        Object Identifier543_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_superSuffix=new RewriteRuleSubtreeStream(adaptor,"rule superSuffix");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // jkit/java/Java.g:895:2: ( 'super' superSuffix -> 'super' ( superSuffix )? | Identifier arguments -> Identifier ( arguments )? )
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==153) ) {
                alt164=1;
            }
            else if ( (LA164_0==Identifier) ) {
                alt164=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 164, 0, input);

                throw nvae;
            }
            switch (alt164) {
                case 1 :
                    // jkit/java/Java.g:895:4: 'super' superSuffix
                    {
                    string_literal541=(Token)match(input,153,FOLLOW_153_in_explicitGenericInvocationSuffix6707); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_153.add(string_literal541);

                    pushFollow(FOLLOW_superSuffix_in_explicitGenericInvocationSuffix6709);
                    superSuffix542=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_superSuffix.add(superSuffix542.getTree());


                    // AST REWRITE
                    // elements: 153, superSuffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 895:24: -> 'super' ( superSuffix )?
                    {
                        adaptor.addChild(root_0, stream_153.nextNode());
                        // jkit/java/Java.g:895:35: ( superSuffix )?
                        if ( stream_superSuffix.hasNext() ) {
                            adaptor.addChild(root_0, stream_superSuffix.nextTree());

                        }
                        stream_superSuffix.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:896:6: Identifier arguments
                    {
                    Identifier543=(Token)match(input,Identifier,FOLLOW_Identifier_in_explicitGenericInvocationSuffix6723); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier543);

                    pushFollow(FOLLOW_arguments_in_explicitGenericInvocationSuffix6725);
                    arguments544=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments544.getTree());


                    // AST REWRITE
                    // elements: arguments, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 896:27: -> Identifier ( arguments )?
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/Java.g:896:41: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            adaptor.addChild(root_0, stream_arguments.nextTree());

                        }
                        stream_arguments.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, explicitGenericInvocationSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocationSuffix"

    public static class superSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "superSuffix"
    // jkit/java/Java.g:899:1: superSuffix : ( arguments -> ( arguments )? | '.' Identifier ( arguments )? );
    public final JavaParser.superSuffix_return superSuffix() throws RecognitionException {
        JavaParser.superSuffix_return retval = new JavaParser.superSuffix_return();
        retval.start = input.LT(1);
        int superSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal546=null;
        Token Identifier547=null;
        JavaParser.arguments_return arguments545 = null;

        JavaParser.arguments_return arguments548 = null;


        Object char_literal546_tree=null;
        Object Identifier547_tree=null;
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // jkit/java/Java.g:900:2: ( arguments -> ( arguments )? | '.' Identifier ( arguments )? )
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==154) ) {
                alt166=1;
            }
            else if ( (LA166_0==117) ) {
                alt166=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;
            }
            switch (alt166) {
                case 1 :
                    // jkit/java/Java.g:900:4: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_superSuffix6744);
                    arguments545=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments545.getTree());


                    // AST REWRITE
                    // elements: arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 900:14: -> ( arguments )?
                    {
                        // jkit/java/Java.g:900:17: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            adaptor.addChild(root_0, stream_arguments.nextTree());

                        }
                        stream_arguments.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:901:6: '.' Identifier ( arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal546=(Token)match(input,117,FOLLOW_117_in_superSuffix6756); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal546_tree = (Object)adaptor.create(char_literal546);
                    adaptor.addChild(root_0, char_literal546_tree);
                    }
                    Identifier547=(Token)match(input,Identifier,FOLLOW_Identifier_in_superSuffix6758); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier547_tree = (Object)adaptor.create(Identifier547);
                    adaptor.addChild(root_0, Identifier547_tree);
                    }
                    // jkit/java/Java.g:901:21: ( arguments )?
                    int alt165=2;
                    alt165 = dfa165.predict(input);
                    switch (alt165) {
                        case 1 :
                            // jkit/java/Java.g:901:22: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_superSuffix6761);
                            arguments548=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments548.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, superSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "superSuffix"

    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selector"
    // jkit/java/Java.g:904:1: selector : ( '.' 'super' arguments -> ^( INVOKE 'super' ( arguments )? ) | '.' 'new' ( nonWildcardTypeArguments )? innerCreator -> ^( NEW innerCreator ) | '.' nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | '.' Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) ) | '[' expression ']' -> ^( ARRAYINDEX expression ) );
    public final JavaParser.selector_return selector() throws RecognitionException {
        JavaParser.selector_return retval = new JavaParser.selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal549=null;
        Token string_literal550=null;
        Token char_literal552=null;
        Token string_literal553=null;
        Token char_literal556=null;
        Token char_literal559=null;
        Token Identifier560=null;
        Token char_literal562=null;
        Token char_literal564=null;
        JavaParser.arguments_return arguments551 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments554 = null;

        JavaParser.innerCreator_return innerCreator555 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments557 = null;

        JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix558 = null;

        JavaParser.arguments_return arguments561 = null;

        JavaParser.expression_return expression563 = null;


        Object char_literal549_tree=null;
        Object string_literal550_tree=null;
        Object char_literal552_tree=null;
        Object string_literal553_tree=null;
        Object char_literal556_tree=null;
        Object char_literal559_tree=null;
        Object Identifier560_tree=null;
        Object char_literal562_tree=null;
        Object char_literal564_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_innerCreator=new RewriteRuleSubtreeStream(adaptor,"rule innerCreator");
        RewriteRuleSubtreeStream stream_explicitGenericInvocationSuffix=new RewriteRuleSubtreeStream(adaptor,"rule explicitGenericInvocationSuffix");
        RewriteRuleSubtreeStream stream_nonWildcardTypeArguments=new RewriteRuleSubtreeStream(adaptor,"rule nonWildcardTypeArguments");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // jkit/java/Java.g:905:2: ( '.' 'super' arguments -> ^( INVOKE 'super' ( arguments )? ) | '.' 'new' ( nonWildcardTypeArguments )? innerCreator -> ^( NEW innerCreator ) | '.' nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | '.' Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) ) | '[' expression ']' -> ^( ARRAYINDEX expression ) )
            int alt169=5;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==117) ) {
                switch ( input.LA(2) ) {
                case 153:
                    {
                    alt169=1;
                    }
                    break;
                case 196:
                    {
                    alt169=2;
                    }
                    break;
                case Identifier:
                    {
                    alt169=4;
                    }
                    break;
                case 122:
                    {
                    alt169=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 169, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA169_0==131) ) {
                alt169=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;
            }
            switch (alt169) {
                case 1 :
                    // jkit/java/Java.g:905:4: '.' 'super' arguments
                    {
                    char_literal549=(Token)match(input,117,FOLLOW_117_in_selector6775); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal549);

                    string_literal550=(Token)match(input,153,FOLLOW_153_in_selector6777); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_153.add(string_literal550);

                    pushFollow(FOLLOW_arguments_in_selector6779);
                    arguments551=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments551.getTree());


                    // AST REWRITE
                    // elements: arguments, 153
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 905:26: -> ^( INVOKE 'super' ( arguments )? )
                    {
                        // jkit/java/Java.g:905:29: ^( INVOKE 'super' ( arguments )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                        adaptor.addChild(root_1, stream_153.nextNode());
                        // jkit/java/Java.g:905:46: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            adaptor.addChild(root_1, stream_arguments.nextTree());

                        }
                        stream_arguments.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:906:6: '.' 'new' ( nonWildcardTypeArguments )? innerCreator
                    {
                    char_literal552=(Token)match(input,117,FOLLOW_117_in_selector6797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal552);

                    string_literal553=(Token)match(input,196,FOLLOW_196_in_selector6799); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_196.add(string_literal553);

                    // jkit/java/Java.g:906:16: ( nonWildcardTypeArguments )?
                    int alt167=2;
                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==122) ) {
                        alt167=1;
                    }
                    switch (alt167) {
                        case 1 :
                            // jkit/java/Java.g:906:17: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector6802);
                            nonWildcardTypeArguments554=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments554.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_innerCreator_in_selector6806);
                    innerCreator555=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_innerCreator.add(innerCreator555.getTree());


                    // AST REWRITE
                    // elements: innerCreator
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 906:57: -> ^( NEW innerCreator )
                    {
                        // jkit/java/Java.g:906:60: ^( NEW innerCreator )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                        adaptor.addChild(root_1, stream_innerCreator.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:907:5: '.' nonWildcardTypeArguments explicitGenericInvocationSuffix
                    {
                    char_literal556=(Token)match(input,117,FOLLOW_117_in_selector6820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal556);

                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector6822);
                    nonWildcardTypeArguments557=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments557.getTree());
                    pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_selector6824);
                    explicitGenericInvocationSuffix558=explicitGenericInvocationSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicitGenericInvocationSuffix.add(explicitGenericInvocationSuffix558.getTree());


                    // AST REWRITE
                    // elements: nonWildcardTypeArguments, explicitGenericInvocationSuffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 907:66: -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                    {
                        // jkit/java/Java.g:907:69: ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                        // jkit/java/Java.g:907:78: ^( TYPE_PARAMETER nonWildcardTypeArguments )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETER, "TYPE_PARAMETER"), root_2);

                        adaptor.addChild(root_2, stream_nonWildcardTypeArguments.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_explicitGenericInvocationSuffix.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:908:4: '.' Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) )
                    {
                    char_literal559=(Token)match(input,117,FOLLOW_117_in_selector6843); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal559);

                    Identifier560=(Token)match(input,Identifier,FOLLOW_Identifier_in_selector6845); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier560);

                    // jkit/java/Java.g:909:3: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) )
                    int alt168=2;
                    alt168 = dfa168.predict(input);
                    switch (alt168) {
                        case 1 :
                            // jkit/java/Java.g:910:4: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector6855);
                            arguments561=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments561.getTree());


                            // AST REWRITE
                            // elements: Identifier, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 910:14: -> ^( INVOKE Identifier ( arguments )? )
                            {
                                // jkit/java/Java.g:910:17: ^( INVOKE Identifier ( arguments )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:910:37: ( arguments )?
                                if ( stream_arguments.hasNext() ) {
                                    adaptor.addChild(root_1, stream_arguments.nextTree());

                                }
                                stream_arguments.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:911:6: 
                            {

                            // AST REWRITE
                            // elements: Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 911:6: -> ^( DEREF Identifier )
                            {
                                // jkit/java/Java.g:911:9: ^( DEREF Identifier )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DEREF, "DEREF"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:913:6: '[' expression ']'
                    {
                    char_literal562=(Token)match(input,131,FOLLOW_131_in_selector6890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_131.add(char_literal562);

                    pushFollow(FOLLOW_expression_in_selector6892);
                    expression563=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression563.getTree());
                    char_literal564=(Token)match(input,132,FOLLOW_132_in_selector6894); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_132.add(char_literal564);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 913:25: -> ^( ARRAYINDEX expression )
                    {
                        // jkit/java/Java.g:913:28: ^( ARRAYINDEX expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYINDEX, "ARRAYINDEX"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selector"

    public static class arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // jkit/java/Java.g:916:1: arguments : '(' ( expressionList )? ')' ;
    public final JavaParser.arguments_return arguments() throws RecognitionException {
        JavaParser.arguments_return retval = new JavaParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal565=null;
        Token char_literal567=null;
        JavaParser.expressionList_return expressionList566 = null;


        Object char_literal565_tree=null;
        Object char_literal567_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // jkit/java/Java.g:917:2: ( '(' ( expressionList )? ')' )
            // jkit/java/Java.g:917:4: '(' ( expressionList )? ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal565=(Token)match(input,154,FOLLOW_154_in_arguments6913); if (state.failed) return retval;
            // jkit/java/Java.g:917:9: ( expressionList )?
            int alt170=2;
            alt170 = dfa170.predict(input);
            switch (alt170) {
                case 1 :
                    // jkit/java/Java.g:0:0: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments6916);
                    expressionList566=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList566.getTree());

                    }
                    break;

            }

            char_literal567=(Token)match(input,155,FOLLOW_155_in_arguments6919); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred1_Java
    public final void synpred1_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:201:4: ( annotations )
        // jkit/java/Java.g:201:4: annotations
        {
        pushFollow(FOLLOW_annotations_in_synpred1_Java440);
        annotations();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_Java

    // $ANTLR start synpred38_Java
    public final void synpred38_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:291:9: ( methodDeclaration )
        // jkit/java/Java.g:291:9: methodDeclaration
        {
        pushFollow(FOLLOW_methodDeclaration_in_synpred38_Java1135);
        methodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_Java

    // $ANTLR start synpred39_Java
    public final void synpred39_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:292:9: ( fieldDeclaration )
        // jkit/java/Java.g:292:9: fieldDeclaration
        {
        pushFollow(FOLLOW_fieldDeclaration_in_synpred39_Java1161);
        fieldDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_Java

    // $ANTLR start synpred46_Java
    public final void synpred46_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:320:3: ( constantDeclaration )
        // jkit/java/Java.g:320:3: constantDeclaration
        {
        pushFollow(FOLLOW_constantDeclaration_in_synpred46_Java1451);
        constantDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred46_Java

    // $ANTLR start synpred47_Java
    public final void synpred47_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:321:5: ( type Identifier interfaceMethodDeclaratorRest )
        // jkit/java/Java.g:321:5: type Identifier interfaceMethodDeclaratorRest
        {
        pushFollow(FOLLOW_type_in_synpred47_Java1473);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,Identifier,FOLLOW_Identifier_in_synpred47_Java1475); if (state.failed) return ;
        pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_synpred47_Java1477);
        interfaceMethodDeclaratorRest();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred47_Java

    // $ANTLR start synpred83_Java
    public final void synpred83_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:424:16: ( '.' Identifier )
        // jkit/java/Java.g:424:16: '.' Identifier
        {
        match(input,117,FOLLOW_117_in_synpred83_Java2369); if (state.failed) return ;
        match(input,Identifier,FOLLOW_Identifier_in_synpred83_Java2371); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred83_Java

    // $ANTLR start synpred101_Java
    public final void synpred101_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:468:4: ( ( 'extends' type )? )
        // jkit/java/Java.g:468:4: ( 'extends' type )?
        {
        // jkit/java/Java.g:468:4: ( 'extends' type )?
        int alt180=2;
        int LA180_0 = input.LA(1);

        if ( (LA180_0==120) ) {
            alt180=1;
        }
        switch (alt180) {
            case 1 :
                // jkit/java/Java.g:468:5: 'extends' type
                {
                match(input,120,FOLLOW_120_in_synpred101_Java2673); if (state.failed) return ;
                pushFollow(FOLLOW_type_in_synpred101_Java2675);
                type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred101_Java

    // $ANTLR start synpred117_Java
    public final void synpred117_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:520:4: ( annotation )
        // jkit/java/Java.g:520:4: annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred117_Java3101);
        annotation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred117_Java

    // $ANTLR start synpred134_Java
    public final void synpred134_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:568:6: ( interfaceDeclaration ( ';' )? )
        // jkit/java/Java.g:568:6: interfaceDeclaration ( ';' )?
        {
        pushFollow(FOLLOW_interfaceDeclaration_in_synpred134_Java3349);
        interfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;
        // jkit/java/Java.g:568:27: ( ';' )?
        int alt185=2;
        int LA185_0 = input.LA(1);

        if ( (LA185_0==114) ) {
            alt185=1;
        }
        switch (alt185) {
            case 1 :
                // jkit/java/Java.g:0:0: ';'
                {
                match(input,114,FOLLOW_114_in_synpred134_Java3351); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred134_Java

    // $ANTLR start synpred141_Java
    public final void synpred141_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:597:4: ( localVariableDeclaration )
        // jkit/java/Java.g:597:4: localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred141_Java3485);
        localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred141_Java

    // $ANTLR start synpred142_Java
    public final void synpred142_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:598:4: ( classOrInterfaceDeclaration )
        // jkit/java/Java.g:598:4: classOrInterfaceDeclaration
        {
        pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred142_Java3490);
        classOrInterfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred142_Java

    // $ANTLR start synpred147_Java
    public final void synpred147_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:609:55: ( 'else' statement )
        // jkit/java/Java.g:609:55: 'else' statement
        {
        match(input,165,FOLLOW_165_in_synpred147_Java3603); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred147_Java3605);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred147_Java

    // $ANTLR start synpred152_Java
    public final void synpred152_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:614:9: ( catches 'finally' block )
        // jkit/java/Java.g:614:9: catches 'finally' block
        {
        pushFollow(FOLLOW_catches_in_synpred152_Java3734);
        catches();

        state._fsp--;
        if (state.failed) return ;
        match(input,170,FOLLOW_170_in_synpred152_Java3738); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred152_Java3740);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_Java

    // $ANTLR start synpred153_Java
    public final void synpred153_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:615:9: ( catches )
        // jkit/java/Java.g:615:9: catches
        {
        pushFollow(FOLLOW_catches_in_synpred153_Java3768);
        catches();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred153_Java

    // $ANTLR start synpred170_Java
    public final void synpred170_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:650:4: ( 'case' constantExpression ':' )
        // jkit/java/Java.g:650:4: 'case' constantExpression ':'
        {
        match(input,177,FOLLOW_177_in_synpred170_Java4150); if (state.failed) return ;
        pushFollow(FOLLOW_constantExpression_in_synpred170_Java4152);
        constantExpression();

        state._fsp--;
        if (state.failed) return ;
        match(input,163,FOLLOW_163_in_synpred170_Java4154); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred170_Java

    // $ANTLR start synpred171_Java
    public final void synpred171_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:651:4: ( 'case' enumConstantName ':' )
        // jkit/java/Java.g:651:4: 'case' enumConstantName ':'
        {
        match(input,177,FOLLOW_177_in_synpred171_Java4170); if (state.failed) return ;
        pushFollow(FOLLOW_enumConstantName_in_synpred171_Java4172);
        enumConstantName();

        state._fsp--;
        if (state.failed) return ;
        match(input,163,FOLLOW_163_in_synpred171_Java4174); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred171_Java

    // $ANTLR start synpred173_Java
    public final void synpred173_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:661:4: ( forVarControl )
        // jkit/java/Java.g:661:4: forVarControl
        {
        pushFollow(FOLLOW_forVarControl_in_synpred173_Java4234);
        forVarControl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_Java

    // $ANTLR start synpred178_Java
    public final void synpred178_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:666:4: ( ( variableModifier )* type variableDeclarators )
        // jkit/java/Java.g:666:4: ( variableModifier )* type variableDeclarators
        {
        // jkit/java/Java.g:666:4: ( variableModifier )*
        loop193:
        do {
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==138||LA193_0==160) ) {
                alt193=1;
            }


            switch (alt193) {
        	case 1 :
        	    // jkit/java/Java.g:0:0: variableModifier
        	    {
        	    pushFollow(FOLLOW_variableModifier_in_synpred178_Java4296);
        	    variableModifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop193;
            }
        } while (true);

        pushFollow(FOLLOW_type_in_synpred178_Java4299);
        type();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_variableDeclarators_in_synpred178_Java4301);
        variableDeclarators();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_Java

    // $ANTLR start synpred181_Java
    public final void synpred181_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:699:4: ( '=' expression )
        // jkit/java/Java.g:699:4: '=' expression
        {
        match(input,133,FOLLOW_133_in_synpred181_Java4466); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred181_Java4468);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_Java

    // $ANTLR start synpred182_Java
    public final void synpred182_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:700:6: ( '+' '=' expression )
        // jkit/java/Java.g:700:6: '+' '=' expression
        {
        match(input,178,FOLLOW_178_in_synpred182_Java4487); if (state.failed) return ;
        match(input,133,FOLLOW_133_in_synpred182_Java4489); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred182_Java4491);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_Java

    // $ANTLR start synpred183_Java
    public final void synpred183_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:701:6: ( '-' '=' expression )
        // jkit/java/Java.g:701:6: '-' '=' expression
        {
        match(input,179,FOLLOW_179_in_synpred183_Java4519); if (state.failed) return ;
        match(input,133,FOLLOW_133_in_synpred183_Java4521); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred183_Java4523);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_Java

    // $ANTLR start synpred184_Java
    public final void synpred184_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:702:6: ( '*' '=' expression )
        // jkit/java/Java.g:702:6: '*' '=' expression
        {
        match(input,118,FOLLOW_118_in_synpred184_Java4551); if (state.failed) return ;
        match(input,133,FOLLOW_133_in_synpred184_Java4553); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred184_Java4555);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred184_Java

    // $ANTLR start synpred185_Java
    public final void synpred185_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:703:6: ( '/' '=' expression )
        // jkit/java/Java.g:703:6: '/' '=' expression
        {
        match(input,180,FOLLOW_180_in_synpred185_Java4583); if (state.failed) return ;
        match(input,133,FOLLOW_133_in_synpred185_Java4585); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred185_Java4587);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred185_Java

    // $ANTLR start synpred186_Java
    public final void synpred186_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:704:6: ( '&=' expression )
        // jkit/java/Java.g:704:6: '&=' expression
        {
        match(input,181,FOLLOW_181_in_synpred186_Java4616); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred186_Java4618);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_Java

    // $ANTLR start synpred187_Java
    public final void synpred187_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:705:6: ( '|=' expression )
        // jkit/java/Java.g:705:6: '|=' expression
        {
        match(input,182,FOLLOW_182_in_synpred187_Java4641); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred187_Java4643);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_Java

    // $ANTLR start synpred188_Java
    public final void synpred188_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:706:6: ( '^=' expression )
        // jkit/java/Java.g:706:6: '^=' expression
        {
        match(input,183,FOLLOW_183_in_synpred188_Java4666); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred188_Java4668);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_Java

    // $ANTLR start synpred189_Java
    public final void synpred189_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:707:6: ( '%' '=' expression )
        // jkit/java/Java.g:707:6: '%' '=' expression
        {
        match(input,184,FOLLOW_184_in_synpred189_Java4696); if (state.failed) return ;
        match(input,133,FOLLOW_133_in_synpred189_Java4698); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred189_Java4700);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_Java

    // $ANTLR start synpred190_Java
    public final void synpred190_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:708:6: ( '<' '<' '=' expression )
        // jkit/java/Java.g:708:6: '<' '<' '=' expression
        {
        match(input,122,FOLLOW_122_in_synpred190_Java4728); if (state.failed) return ;
        match(input,122,FOLLOW_122_in_synpred190_Java4730); if (state.failed) return ;
        match(input,133,FOLLOW_133_in_synpred190_Java4732); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred190_Java4734);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_Java

    // $ANTLR start synpred191_Java
    public final void synpred191_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:709:6: ( '>' '>' '=' expression )
        // jkit/java/Java.g:709:6: '>' '>' '=' expression
        {
        match(input,124,FOLLOW_124_in_synpred191_Java4762); if (state.failed) return ;
        match(input,124,FOLLOW_124_in_synpred191_Java4764); if (state.failed) return ;
        match(input,133,FOLLOW_133_in_synpred191_Java4766); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred191_Java4768);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_Java

    // $ANTLR start synpred192_Java
    public final void synpred192_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:710:6: ( '>' '>' '>' '=' expression )
        // jkit/java/Java.g:710:6: '>' '>' '>' '=' expression
        {
        match(input,124,FOLLOW_124_in_synpred192_Java4794); if (state.failed) return ;
        match(input,124,FOLLOW_124_in_synpred192_Java4796); if (state.failed) return ;
        match(input,124,FOLLOW_124_in_synpred192_Java4798); if (state.failed) return ;
        match(input,133,FOLLOW_133_in_synpred192_Java4800); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred192_Java4802);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_Java

    // $ANTLR start synpred203_Java
    public final void synpred203_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:784:8: ( ( '<' shiftExpression ) )
        // jkit/java/Java.g:784:8: ( '<' shiftExpression )
        {
        // jkit/java/Java.g:784:8: ( '<' shiftExpression )
        // jkit/java/Java.g:784:9: '<' shiftExpression
        {
        match(input,122,FOLLOW_122_in_synpred203_Java5439); if (state.failed) return ;
        pushFollow(FOLLOW_shiftExpression_in_synpred203_Java5441);
        shiftExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred203_Java

    // $ANTLR start synpred207_Java
    public final void synpred207_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:794:7: ( ( '<' '<' | '>' '>' ) additiveExpression )
        // jkit/java/Java.g:794:7: ( '<' '<' | '>' '>' ) additiveExpression
        {
        // jkit/java/Java.g:794:7: ( '<' '<' | '>' '>' )
        int alt194=2;
        int LA194_0 = input.LA(1);

        if ( (LA194_0==122) ) {
            alt194=1;
        }
        else if ( (LA194_0==124) ) {
            alt194=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 194, 0, input);

            throw nvae;
        }
        switch (alt194) {
            case 1 :
                // jkit/java/Java.g:794:8: '<' '<'
                {
                match(input,122,FOLLOW_122_in_synpred207_Java5553); if (state.failed) return ;
                match(input,122,FOLLOW_122_in_synpred207_Java5555); if (state.failed) return ;

                }
                break;
            case 2 :
                // jkit/java/Java.g:794:19: '>' '>'
                {
                match(input,124,FOLLOW_124_in_synpred207_Java5559); if (state.failed) return ;
                match(input,124,FOLLOW_124_in_synpred207_Java5561); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_additiveExpression_in_synpred207_Java5564);
        additiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred207_Java

    // $ANTLR start synpred208_Java
    public final void synpred208_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:794:6: ( ( ( '<' '<' | '>' '>' ) additiveExpression )+ )
        // jkit/java/Java.g:794:6: ( ( '<' '<' | '>' '>' ) additiveExpression )+
        {
        // jkit/java/Java.g:794:6: ( ( '<' '<' | '>' '>' ) additiveExpression )+
        int cnt196=0;
        loop196:
        do {
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==122||LA196_0==124) ) {
                alt196=1;
            }


            switch (alt196) {
        	case 1 :
        	    // jkit/java/Java.g:794:7: ( '<' '<' | '>' '>' ) additiveExpression
        	    {
        	    // jkit/java/Java.g:794:7: ( '<' '<' | '>' '>' )
        	    int alt195=2;
        	    int LA195_0 = input.LA(1);

        	    if ( (LA195_0==122) ) {
        	        alt195=1;
        	    }
        	    else if ( (LA195_0==124) ) {
        	        alt195=2;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        NoViableAltException nvae =
        	            new NoViableAltException("", 195, 0, input);

        	        throw nvae;
        	    }
        	    switch (alt195) {
        	        case 1 :
        	            // jkit/java/Java.g:794:8: '<' '<'
        	            {
        	            match(input,122,FOLLOW_122_in_synpred208_Java5553); if (state.failed) return ;
        	            match(input,122,FOLLOW_122_in_synpred208_Java5555); if (state.failed) return ;

        	            }
        	            break;
        	        case 2 :
        	            // jkit/java/Java.g:794:19: '>' '>'
        	            {
        	            match(input,124,FOLLOW_124_in_synpred208_Java5559); if (state.failed) return ;
        	            match(input,124,FOLLOW_124_in_synpred208_Java5561); if (state.failed) return ;

        	            }
        	            break;

        	    }

        	    pushFollow(FOLLOW_additiveExpression_in_synpred208_Java5564);
        	    additiveExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt196 >= 1 ) break loop196;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(196, input);
                    throw eee;
            }
            cnt196++;
        } while (true);


        }
    }
    // $ANTLR end synpred208_Java

    // $ANTLR start synpred209_Java
    public final void synpred209_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:796:9: ( '>' '>' '>' additiveExpression )
        // jkit/java/Java.g:796:9: '>' '>' '>' additiveExpression
        {
        match(input,124,FOLLOW_124_in_synpred209_Java5598); if (state.failed) return ;
        match(input,124,FOLLOW_124_in_synpred209_Java5600); if (state.failed) return ;
        match(input,124,FOLLOW_124_in_synpred209_Java5602); if (state.failed) return ;
        pushFollow(FOLLOW_additiveExpression_in_synpred209_Java5604);
        additiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred209_Java

    // $ANTLR start synpred210_Java
    public final void synpred210_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:796:8: ( ( '>' '>' '>' additiveExpression )+ )
        // jkit/java/Java.g:796:8: ( '>' '>' '>' additiveExpression )+
        {
        // jkit/java/Java.g:796:8: ( '>' '>' '>' additiveExpression )+
        int cnt197=0;
        loop197:
        do {
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==124) ) {
                alt197=1;
            }


            switch (alt197) {
        	case 1 :
        	    // jkit/java/Java.g:796:9: '>' '>' '>' additiveExpression
        	    {
        	    match(input,124,FOLLOW_124_in_synpred210_Java5598); if (state.failed) return ;
        	    match(input,124,FOLLOW_124_in_synpred210_Java5600); if (state.failed) return ;
        	    match(input,124,FOLLOW_124_in_synpred210_Java5602); if (state.failed) return ;
        	    pushFollow(FOLLOW_additiveExpression_in_synpred210_Java5604);
        	    additiveExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt197 >= 1 ) break loop197;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(197, input);
                    throw eee;
            }
            cnt197++;
        } while (true);


        }
    }
    // $ANTLR end synpred210_Java

    // $ANTLR start synpred224_Java
    public final void synpred224_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:828:9: ( castExpression )
        // jkit/java/Java.g:828:9: castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred224_Java5951);
        castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred224_Java

    // $ANTLR start synpred231_Java
    public final void synpred231_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:844:8: ( '(' primitiveType ')' unaryExpression )
        // jkit/java/Java.g:844:8: '(' primitiveType ')' unaryExpression
        {
        match(input,154,FOLLOW_154_in_synpred231_Java6101); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred231_Java6103);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;
        match(input,155,FOLLOW_155_in_synpred231_Java6105); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred231_Java6107);
        unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred231_Java

    // $ANTLR start synpred232_Java
    public final void synpred232_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:845:8: ( '(' type ')' unaryExpressionNotPlusMinus )
        // jkit/java/Java.g:845:8: '(' type ')' unaryExpressionNotPlusMinus
        {
        match(input,154,FOLLOW_154_in_synpred232_Java6130); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred232_Java6132);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,155,FOLLOW_155_in_synpred232_Java6134); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_synpred232_Java6136);
        unaryExpressionNotPlusMinus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_Java

    // $ANTLR start synpred237_Java
    public final void synpred237_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:855:8: ( '[' expression ']' )
        // jkit/java/Java.g:855:8: '[' expression ']'
        {
        match(input,131,FOLLOW_131_in_synpred237_Java6245); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred237_Java6247);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,132,FOLLOW_132_in_synpred237_Java6249); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_Java

    // $ANTLR start synpred241_Java
    public final void synpred241_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:853:9: ( 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer ) )
        // jkit/java/Java.g:853:9: 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer )
        {
        match(input,196,FOLLOW_196_in_synpred241_Java6224); if (state.failed) return ;
        // jkit/java/Java.g:853:15: ( nonWildcardTypeArguments )?
        int alt204=2;
        int LA204_0 = input.LA(1);

        if ( (LA204_0==122) ) {
            alt204=1;
        }
        switch (alt204) {
            case 1 :
                // jkit/java/Java.g:0:0: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred241_Java6226);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_primitiveType_in_synpred241_Java6229);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;
        // jkit/java/Java.g:854:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer )
        int alt208=2;
        alt208 = dfa208.predict(input);
        switch (alt208) {
            case 1 :
                // jkit/java/Java.g:855:7: ( '[' expression ']' )+ ( '[' ']' )*
                {
                // jkit/java/Java.g:855:7: ( '[' expression ']' )+
                int cnt205=0;
                loop205:
                do {
                    int alt205=2;
                    alt205 = dfa205.predict(input);
                    switch (alt205) {
                	case 1 :
                	    // jkit/java/Java.g:855:8: '[' expression ']'
                	    {
                	    match(input,131,FOLLOW_131_in_synpred241_Java6245); if (state.failed) return ;
                	    pushFollow(FOLLOW_expression_in_synpred241_Java6247);
                	    expression();

                	    state._fsp--;
                	    if (state.failed) return ;
                	    match(input,132,FOLLOW_132_in_synpred241_Java6249); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt205 >= 1 ) break loop205;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(205, input);
                            throw eee;
                    }
                    cnt205++;
                } while (true);

                // jkit/java/Java.g:855:29: ( '[' ']' )*
                loop206:
                do {
                    int alt206=2;
                    int LA206_0 = input.LA(1);

                    if ( (LA206_0==131) ) {
                        alt206=1;
                    }


                    switch (alt206) {
                	case 1 :
                	    // jkit/java/Java.g:855:30: '[' ']'
                	    {
                	    match(input,131,FOLLOW_131_in_synpred241_Java6254); if (state.failed) return ;
                	    match(input,132,FOLLOW_132_in_synpred241_Java6256); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop206;
                    }
                } while (true);


                }
                break;
            case 2 :
                // jkit/java/Java.g:856:9: ( '[' ']' )+ arrayInitializer
                {
                // jkit/java/Java.g:856:9: ( '[' ']' )+
                int cnt207=0;
                loop207:
                do {
                    int alt207=2;
                    int LA207_0 = input.LA(1);

                    if ( (LA207_0==131) ) {
                        alt207=1;
                    }


                    switch (alt207) {
                	case 1 :
                	    // jkit/java/Java.g:856:10: '[' ']'
                	    {
                	    match(input,131,FOLLOW_131_in_synpred241_Java6287); if (state.failed) return ;
                	    match(input,132,FOLLOW_132_in_synpred241_Java6289); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt207 >= 1 ) break loop207;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(207, input);
                            throw eee;
                    }
                    cnt207++;
                } while (true);

                pushFollow(FOLLOW_arrayInitializer_in_synpred241_Java6293);
                arrayInitializer();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred241_Java

    // $ANTLR start synpred244_Java
    public final void synpred244_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:860:8: ( '[' expression ']' )
        // jkit/java/Java.g:860:8: '[' expression ']'
        {
        match(input,131,FOLLOW_131_in_synpred244_Java6359); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred244_Java6361);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,132,FOLLOW_132_in_synpred244_Java6363); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred244_Java

    // $ANTLR start synpred249_Java
    public final void synpred249_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:858:9: ( 'new' ( nonWildcardTypeArguments )? ( refComponent ( '.' refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest ) )
        // jkit/java/Java.g:858:9: 'new' ( nonWildcardTypeArguments )? ( refComponent ( '.' refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest )
        {
        match(input,196,FOLLOW_196_in_synpred249_Java6325); if (state.failed) return ;
        // jkit/java/Java.g:858:15: ( nonWildcardTypeArguments )?
        int alt212=2;
        int LA212_0 = input.LA(1);

        if ( (LA212_0==122) ) {
            alt212=1;
        }
        switch (alt212) {
            case 1 :
                // jkit/java/Java.g:0:0: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred249_Java6327);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // jkit/java/Java.g:858:41: ( refComponent ( '.' refComponent )* )
        // jkit/java/Java.g:858:42: refComponent ( '.' refComponent )*
        {
        pushFollow(FOLLOW_refComponent_in_synpred249_Java6333);
        refComponent();

        state._fsp--;
        if (state.failed) return ;
        // jkit/java/Java.g:858:58: ( '.' refComponent )*
        loop213:
        do {
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==117) ) {
                alt213=1;
            }


            switch (alt213) {
        	case 1 :
        	    // jkit/java/Java.g:858:59: '.' refComponent
        	    {
        	    match(input,117,FOLLOW_117_in_synpred249_Java6336); if (state.failed) return ;
        	    pushFollow(FOLLOW_refComponent_in_synpred249_Java6340);
        	    refComponent();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop213;
            }
        } while (true);


        }

        // jkit/java/Java.g:859:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest )
        int alt217=3;
        alt217 = dfa217.predict(input);
        switch (alt217) {
            case 1 :
                // jkit/java/Java.g:860:7: ( '[' expression ']' )+ ( '[' ']' )*
                {
                // jkit/java/Java.g:860:7: ( '[' expression ']' )+
                int cnt214=0;
                loop214:
                do {
                    int alt214=2;
                    alt214 = dfa214.predict(input);
                    switch (alt214) {
                	case 1 :
                	    // jkit/java/Java.g:860:8: '[' expression ']'
                	    {
                	    match(input,131,FOLLOW_131_in_synpred249_Java6359); if (state.failed) return ;
                	    pushFollow(FOLLOW_expression_in_synpred249_Java6361);
                	    expression();

                	    state._fsp--;
                	    if (state.failed) return ;
                	    match(input,132,FOLLOW_132_in_synpred249_Java6363); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt214 >= 1 ) break loop214;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(214, input);
                            throw eee;
                    }
                    cnt214++;
                } while (true);

                // jkit/java/Java.g:860:29: ( '[' ']' )*
                loop215:
                do {
                    int alt215=2;
                    int LA215_0 = input.LA(1);

                    if ( (LA215_0==131) ) {
                        alt215=1;
                    }


                    switch (alt215) {
                	case 1 :
                	    // jkit/java/Java.g:860:30: '[' ']'
                	    {
                	    match(input,131,FOLLOW_131_in_synpred249_Java6368); if (state.failed) return ;
                	    match(input,132,FOLLOW_132_in_synpred249_Java6370); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop215;
                    }
                } while (true);


                }
                break;
            case 2 :
                // jkit/java/Java.g:861:9: ( '[' ']' )+ arrayInitializer
                {
                // jkit/java/Java.g:861:9: ( '[' ']' )+
                int cnt216=0;
                loop216:
                do {
                    int alt216=2;
                    int LA216_0 = input.LA(1);

                    if ( (LA216_0==131) ) {
                        alt216=1;
                    }


                    switch (alt216) {
                	case 1 :
                	    // jkit/java/Java.g:861:10: '[' ']'
                	    {
                	    match(input,131,FOLLOW_131_in_synpred249_Java6403); if (state.failed) return ;
                	    match(input,132,FOLLOW_132_in_synpred249_Java6405); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt216 >= 1 ) break loop216;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(216, input);
                            throw eee;
                    }
                    cnt216++;
                } while (true);

                pushFollow(FOLLOW_arrayInitializer_in_synpred249_Java6409);
                arrayInitializer();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // jkit/java/Java.g:862:9: classCreatorRest
                {
                pushFollow(FOLLOW_classCreatorRest_in_synpred249_Java6438);
                classCreatorRest();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred249_Java

    // $ANTLR start synpred250_Java
    public final void synpred250_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:864:9: ( type '.' 'class' )
        // jkit/java/Java.g:864:9: type '.' 'class'
        {
        pushFollow(FOLLOW_type_in_synpred250_Java6470);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,117,FOLLOW_117_in_synpred250_Java6472); if (state.failed) return ;
        match(input,119,FOLLOW_119_in_synpred250_Java6474); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_Java

    // Delegated rules

    public final boolean synpred244_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred134_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA55 dfa55 = new DFA55(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA62 dfa62 = new DFA62(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA115 dfa115 = new DFA115(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA162 dfa162 = new DFA162(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA150 dfa150 = new DFA150(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA163 dfa163 = new DFA163(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA170 dfa170 = new DFA170(this);
    protected DFA208 dfa208 = new DFA208(this);
    protected DFA205 dfa205 = new DFA205(this);
    protected DFA217 dfa217 = new DFA217(this);
    protected DFA214 dfa214 = new DFA214(this);
    static final String DFA1_eotS =
        "\26\uffff";
    static final String DFA1_eofS =
        "\26\uffff";
    static final String DFA1_minS =
        "\1\11\1\136\22\uffff\1\0\1\uffff";
    static final String DFA1_maxS =
        "\1\u00a0\1\u0080\22\uffff\1\0\1\uffff";
    static final String DFA1_acceptS =
        "\2\uffff\1\2\22\uffff\1\1";
    static final String DFA1_specialS =
        "\24\uffff\1\0\1\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\2\147\uffff\4\2\2\uffff\1\2\10\uffff\1\2\5\uffff\12\2\20"+
            "\uffff\1\1",
            "\1\24\41\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "201:4: ( annotations )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA1_20 = input.LA(1);

                         
                        int index1_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Java()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index1_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 1, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA2_eotS =
        "\23\uffff";
    static final String DFA2_eofS =
        "\23\uffff";
    static final String DFA2_minS =
        "\1\11\22\uffff";
    static final String DFA2_maxS =
        "\1\u00a0\22\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\1\1\2\20\uffff";
    static final String DFA2_specialS =
        "\23\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\2\147\uffff\1\1\3\2\2\uffff\1\2\10\uffff\1\2\5\uffff\12\2"+
            "\20\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "201:17: ( packageDeclaration )?";
        }
    }
    static final String DFA3_eotS =
        "\22\uffff";
    static final String DFA3_eofS =
        "\22\uffff";
    static final String DFA3_minS =
        "\1\11\21\uffff";
    static final String DFA3_maxS =
        "\1\u00a0\21\uffff";
    static final String DFA3_acceptS =
        "\1\uffff\1\2\17\uffff\1\1";
    static final String DFA3_specialS =
        "\22\uffff}>";
    static final String[] DFA3_transitionS = {
            "\1\1\150\uffff\1\1\1\21\1\1\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\1\20\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "()* loopback of 201:37: ( importDeclaration )*";
        }
    }
    static final String DFA4_eotS =
        "\22\uffff";
    static final String DFA4_eofS =
        "\1\1\21\uffff";
    static final String DFA4_minS =
        "\1\11\21\uffff";
    static final String DFA4_maxS =
        "\1\u00a0\21\uffff";
    static final String DFA4_acceptS =
        "\1\uffff\1\2\1\1\17\uffff";
    static final String DFA4_specialS =
        "\22\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\2\150\uffff\1\2\1\uffff\1\2\2\uffff\1\2\10\uffff\1\2\5\uffff"+
            "\12\2\20\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 201:56: ( typeDeclaration )+";
        }
    }
    static final String DFA8_eotS =
        "\21\uffff";
    static final String DFA8_eofS =
        "\21\uffff";
    static final String DFA8_minS =
        "\1\11\20\uffff";
    static final String DFA8_maxS =
        "\1\u00a0\20\uffff";
    static final String DFA8_acceptS =
        "\1\uffff\1\1\16\uffff\1\2";
    static final String DFA8_specialS =
        "\21\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\1\150\uffff\1\20\1\uffff\1\1\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\1\20\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "213:1: typeDeclaration : ( classOrInterfaceDeclaration | ';' );";
        }
    }
    static final String DFA9_eotS =
        "\22\uffff";
    static final String DFA9_eofS =
        "\22\uffff";
    static final String DFA9_minS =
        "\1\11\3\uffff\1\136\15\uffff";
    static final String DFA9_maxS =
        "\1\u00a0\3\uffff\1\u0080\15\uffff";
    static final String DFA9_acceptS =
        "\1\uffff\1\2\3\uffff\1\1\14\uffff";
    static final String DFA9_specialS =
        "\22\uffff}>";
    static final String[] DFA9_transitionS = {
            "\1\1\152\uffff\1\5\2\uffff\1\1\10\uffff\1\1\5\uffff\12\5\20"+
            "\uffff\1\4",
            "",
            "",
            "",
            "\1\5\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
    static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
    static final char[] DFA9_min = DFA.unpackEncodedStringToUnsignedChars(DFA9_minS);
    static final char[] DFA9_max = DFA.unpackEncodedStringToUnsignedChars(DFA9_maxS);
    static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
    static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
    static final short[][] DFA9_transition;

    static {
        int numStates = DFA9_transitionS.length;
        DFA9_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
        }
    }

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = DFA9_eot;
            this.eof = DFA9_eof;
            this.min = DFA9_min;
            this.max = DFA9_max;
            this.accept = DFA9_accept;
            this.special = DFA9_special;
            this.transition = DFA9_transition;
        }
        public String getDescription() {
            return "()* loopback of 219:4: ( modifier )*";
        }
    }
    static final String DFA25_eotS =
        "\27\uffff";
    static final String DFA25_eofS =
        "\1\1\26\uffff";
    static final String DFA25_minS =
        "\1\136\26\uffff";
    static final String DFA25_maxS =
        "\1\u00a0\26\uffff";
    static final String DFA25_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\23\uffff";
    static final String DFA25_specialS =
        "\27\uffff}>";
    static final String[] DFA25_transitionS = {
            "\1\3\23\uffff\1\3\1\uffff\1\3\2\uffff\1\3\2\uffff\1\3\3\uffff"+
            "\1\3\1\1\2\3\4\uffff\22\3\10\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA25_eot = DFA.unpackEncodedString(DFA25_eotS);
    static final short[] DFA25_eof = DFA.unpackEncodedString(DFA25_eofS);
    static final char[] DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_minS);
    static final char[] DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_maxS);
    static final short[] DFA25_accept = DFA.unpackEncodedString(DFA25_acceptS);
    static final short[] DFA25_special = DFA.unpackEncodedString(DFA25_specialS);
    static final short[][] DFA25_transition;

    static {
        int numStates = DFA25_transitionS.length;
        DFA25_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA25_transition[i] = DFA.unpackEncodedString(DFA25_transitionS[i]);
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;
        }
        public String getDescription() {
            return "()* loopback of 262:8: ( classBodyDeclaration )*";
        }
    }
    static final String DFA30_eotS =
        "\26\uffff";
    static final String DFA30_eofS =
        "\26\uffff";
    static final String DFA30_minS =
        "\1\136\25\uffff";
    static final String DFA30_maxS =
        "\1\u00a0\25\uffff";
    static final String DFA30_acceptS =
        "\1\uffff\1\2\1\1\23\uffff";
    static final String DFA30_specialS =
        "\26\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\2\23\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff"+
            "\1\2\1\1\2\2\4\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "()* loopback of 279:9: ( classBodyDeclaration )*";
        }
    }
    static final String DFA31_eotS =
        "\25\uffff";
    static final String DFA31_eofS =
        "\25\uffff";
    static final String DFA31_minS =
        "\1\136\24\uffff";
    static final String DFA31_maxS =
        "\1\u00a0\24\uffff";
    static final String DFA31_acceptS =
        "\1\uffff\1\2\1\1\22\uffff";
    static final String DFA31_specialS =
        "\25\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\2\23\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\4\uffff"+
            "\1\1\2\2\4\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "()* loopback of 283:9: ( interfaceBodyDeclaration )*";
        }
    }
    static final String DFA35_eotS =
        "\50\uffff";
    static final String DFA35_eofS =
        "\50\uffff";
    static final String DFA35_minS =
        "\1\136\1\uffff\1\136\45\uffff";
    static final String DFA35_maxS =
        "\1\u00a0\1\uffff\1\u00a0\45\uffff";
    static final String DFA35_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\3\43\uffff";
    static final String DFA35_specialS =
        "\50\uffff}>";
    static final String[] DFA35_transitionS = {
            "\1\4\23\uffff\1\1\1\uffff\1\2\2\uffff\1\4\2\uffff\1\4\3\uffff"+
            "\1\3\1\uffff\2\4\4\uffff\22\4\10\uffff\1\4",
            "",
            "\1\4\25\uffff\1\4\2\uffff\1\4\2\uffff\1\4\3\uffff\1\3\1\uffff"+
            "\2\4\4\uffff\22\4\10\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "286:1: classBodyDeclaration : ( ';' | ( 'static' )? block | ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) ) );";
        }
    }
    static final String DFA33_eotS =
        "\25\uffff";
    static final String DFA33_eofS =
        "\25\uffff";
    static final String DFA33_minS =
        "\1\136\5\uffff\1\136\16\uffff";
    static final String DFA33_maxS =
        "\1\u00a0\5\uffff\1\u0080\16\uffff";
    static final String DFA33_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\14\uffff";
    static final String DFA33_specialS =
        "\25\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\1\25\uffff\1\10\2\uffff\1\1\2\uffff\1\1\5\uffff\2\1\4\uffff"+
            "\12\10\10\1\10\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "\1\10\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "()* loopback of 289:4: ( modifier )*";
        }
    }
    static final String DFA34_eotS =
        "\21\uffff";
    static final String DFA34_eofS =
        "\21\uffff";
    static final String DFA34_minS =
        "\1\136\1\uffff\2\136\5\uffff\6\0\2\uffff";
    static final String DFA34_maxS =
        "\1\u00a0\1\uffff\1\u009a\1\u0083\5\uffff\6\0\2\uffff";
    static final String DFA34_acceptS =
        "\1\uffff\1\1\2\uffff\1\4\1\6\1\uffff\1\7\1\5\6\uffff\1\2\1\3";
    static final String DFA34_specialS =
        "\11\uffff\1\0\1\1\1\2\1\3\1\4\1\5\2\uffff}>";
    static final String[] DFA34_transitionS = {
            "\1\2\30\uffff\1\7\2\uffff\1\1\5\uffff\1\5\1\4\16\uffff\10\3"+
            "\10\uffff\1\5",
            "",
            "\1\14\26\uffff\1\12\4\uffff\1\11\10\uffff\1\13\26\uffff\1\10",
            "\1\16\44\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA34_eot = DFA.unpackEncodedString(DFA34_eotS);
    static final short[] DFA34_eof = DFA.unpackEncodedString(DFA34_eofS);
    static final char[] DFA34_min = DFA.unpackEncodedStringToUnsignedChars(DFA34_minS);
    static final char[] DFA34_max = DFA.unpackEncodedStringToUnsignedChars(DFA34_maxS);
    static final short[] DFA34_accept = DFA.unpackEncodedString(DFA34_acceptS);
    static final short[] DFA34_special = DFA.unpackEncodedString(DFA34_specialS);
    static final short[][] DFA34_transition;

    static {
        int numStates = DFA34_transitionS.length;
        DFA34_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA34_transition[i] = DFA.unpackEncodedString(DFA34_transitionS[i]);
        }
    }

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = DFA34_eot;
            this.eof = DFA34_eof;
            this.min = DFA34_min;
            this.max = DFA34_max;
            this.accept = DFA34_accept;
            this.special = DFA34_special;
            this.transition = DFA34_transition;
        }
        public String getDescription() {
            return "289:14: ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA34_9 = input.LA(1);

                         
                        int index34_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 15;}

                        else if ( (synpred39_Java()) ) {s = 16;}

                         
                        input.seek(index34_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA34_10 = input.LA(1);

                         
                        int index34_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 15;}

                        else if ( (synpred39_Java()) ) {s = 16;}

                         
                        input.seek(index34_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA34_11 = input.LA(1);

                         
                        int index34_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 15;}

                        else if ( (synpred39_Java()) ) {s = 16;}

                         
                        input.seek(index34_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA34_12 = input.LA(1);

                         
                        int index34_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 15;}

                        else if ( (synpred39_Java()) ) {s = 16;}

                         
                        input.seek(index34_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA34_13 = input.LA(1);

                         
                        int index34_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 15;}

                        else if ( (synpred39_Java()) ) {s = 16;}

                         
                        input.seek(index34_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA34_14 = input.LA(1);

                         
                        int index34_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 15;}

                        else if ( (synpred39_Java()) ) {s = 16;}

                         
                        input.seek(index34_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 34, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA39_eotS =
        "\24\uffff";
    static final String DFA39_eofS =
        "\24\uffff";
    static final String DFA39_minS =
        "\1\136\23\uffff";
    static final String DFA39_maxS =
        "\1\u00a0\23\uffff";
    static final String DFA39_acceptS =
        "\1\uffff\1\1\21\uffff\1\2";
    static final String DFA39_specialS =
        "\24\uffff}>";
    static final String[] DFA39_transitionS = {
            "\1\1\23\uffff\1\23\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\5\uffff"+
            "\2\1\4\uffff\22\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "318:1: interfaceBodyDeclaration : ( ( modifier )* ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) ) | ';' );";
        }
    }
    static final String DFA37_eotS =
        "\25\uffff";
    static final String DFA37_eofS =
        "\25\uffff";
    static final String DFA37_minS =
        "\1\136\5\uffff\1\136\16\uffff";
    static final String DFA37_maxS =
        "\1\u00a0\5\uffff\1\u0080\16\uffff";
    static final String DFA37_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\14\uffff";
    static final String DFA37_specialS =
        "\25\uffff}>";
    static final String[] DFA37_transitionS = {
            "\1\1\25\uffff\1\10\2\uffff\1\1\2\uffff\1\1\5\uffff\2\1\4\uffff"+
            "\12\10\10\1\10\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "\1\10\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "()* loopback of 319:4: ( modifier )*";
        }
    }
    static final String DFA38_eotS =
        "\20\uffff";
    static final String DFA38_eofS =
        "\20\uffff";
    static final String DFA38_minS =
        "\3\136\5\uffff\6\0\2\uffff";
    static final String DFA38_maxS =
        "\1\u00a0\2\u0083\5\uffff\6\0\2\uffff";
    static final String DFA38_acceptS =
        "\3\uffff\1\3\1\4\1\5\1\uffff\1\6\6\uffff\1\1\1\2";
    static final String DFA38_specialS =
        "\10\uffff\1\0\1\1\1\2\1\3\1\4\1\5\2\uffff}>";
    static final String[] DFA38_transitionS = {
            "\1\1\30\uffff\1\7\2\uffff\1\3\5\uffff\1\5\1\4\16\uffff\10\2"+
            "\10\uffff\1\5",
            "\1\13\26\uffff\1\11\4\uffff\1\10\10\uffff\1\12",
            "\1\15\44\uffff\1\14",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "319:14: ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA38_8 = input.LA(1);

                         
                        int index38_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_Java()) ) {s = 14;}

                        else if ( (synpred47_Java()) ) {s = 15;}

                         
                        input.seek(index38_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA38_9 = input.LA(1);

                         
                        int index38_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_Java()) ) {s = 14;}

                        else if ( (synpred47_Java()) ) {s = 15;}

                         
                        input.seek(index38_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA38_10 = input.LA(1);

                         
                        int index38_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_Java()) ) {s = 14;}

                        else if ( (synpred47_Java()) ) {s = 15;}

                         
                        input.seek(index38_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA38_11 = input.LA(1);

                         
                        int index38_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_Java()) ) {s = 14;}

                        else if ( (synpred47_Java()) ) {s = 15;}

                         
                        input.seek(index38_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA38_12 = input.LA(1);

                         
                        int index38_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_Java()) ) {s = 14;}

                        else if ( (synpred47_Java()) ) {s = 15;}

                         
                        input.seek(index38_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA38_13 = input.LA(1);

                         
                        int index38_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_Java()) ) {s = 14;}

                        else if ( (synpred47_Java()) ) {s = 15;}

                         
                        input.seek(index38_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 38, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA55_eotS =
        "\25\uffff";
    static final String DFA55_eofS =
        "\25\uffff";
    static final String DFA55_minS =
        "\1\136\24\uffff";
    static final String DFA55_maxS =
        "\1\u00c4\24\uffff";
    static final String DFA55_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA55_specialS =
        "\25\uffff}>";
    static final String[] DFA55_transitionS = {
            "\7\2\25\uffff\1\2\3\uffff\1\1\2\uffff\1\2\16\uffff\10\2\1\uffff"+
            "\2\2\2\uffff\3\2\22\uffff\2\2\14\uffff\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA55_eot = DFA.unpackEncodedString(DFA55_eotS);
    static final short[] DFA55_eof = DFA.unpackEncodedString(DFA55_eofS);
    static final char[] DFA55_min = DFA.unpackEncodedStringToUnsignedChars(DFA55_minS);
    static final char[] DFA55_max = DFA.unpackEncodedStringToUnsignedChars(DFA55_maxS);
    static final short[] DFA55_accept = DFA.unpackEncodedString(DFA55_acceptS);
    static final short[] DFA55_special = DFA.unpackEncodedString(DFA55_specialS);
    static final short[][] DFA55_transition;

    static {
        int numStates = DFA55_transitionS.length;
        DFA55_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA55_transition[i] = DFA.unpackEncodedString(DFA55_transitionS[i]);
        }
    }

    class DFA55 extends DFA {

        public DFA55(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = DFA55_eot;
            this.eof = DFA55_eof;
            this.min = DFA55_min;
            this.max = DFA55_max;
            this.accept = DFA55_accept;
            this.special = DFA55_special;
            this.transition = DFA55_transition;
        }
        public String getDescription() {
            return "399:1: variableInitializer : ( arrayInitializer | expression );";
        }
    }
    static final String DFA58_eotS =
        "\26\uffff";
    static final String DFA58_eofS =
        "\26\uffff";
    static final String DFA58_minS =
        "\1\136\25\uffff";
    static final String DFA58_maxS =
        "\1\u00c4\25\uffff";
    static final String DFA58_acceptS =
        "\1\uffff\1\1\23\uffff\1\2";
    static final String DFA58_specialS =
        "\26\uffff}>";
    static final String[] DFA58_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\1\1\25\1\uffff\1\1\16\uffff\10\1"+
            "\1\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "405:8: ( variableInitializer ( ',' variableInitializer )* ( ',' )? )?";
        }
    }
    static final String DFA56_eotS =
        "\30\uffff";
    static final String DFA56_eofS =
        "\30\uffff";
    static final String DFA56_minS =
        "\1\173\1\136\26\uffff";
    static final String DFA56_maxS =
        "\1\177\1\u00c4\26\uffff";
    static final String DFA56_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\23\uffff";
    static final String DFA56_specialS =
        "\30\uffff}>";
    static final String[] DFA56_transitionS = {
            "\1\1\3\uffff\1\2",
            "\7\4\25\uffff\1\4\3\uffff\1\4\1\2\1\uffff\1\4\16\uffff\10\4"+
            "\1\uffff\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "()* loopback of 405:29: ( ',' variableInitializer )*";
        }
    }
    static final String DFA59_eotS =
        "\15\uffff";
    static final String DFA59_eofS =
        "\15\uffff";
    static final String DFA59_minS =
        "\1\164\14\uffff";
    static final String DFA59_maxS =
        "\1\u00a0\14\uffff";
    static final String DFA59_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA59_specialS =
        "\15\uffff}>";
    static final String[] DFA59_transitionS = {
            "\1\5\21\uffff\1\2\1\3\1\4\1\6\1\7\1\10\1\11\1\12\1\13\1\14\20"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "408:1: modifier : ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' );";
        }
    }
    static final String DFA62_eotS =
        "\43\uffff";
    static final String DFA62_eofS =
        "\1\1\42\uffff";
    static final String DFA62_minS =
        "\1\136\37\uffff\1\136\2\uffff";
    static final String DFA62_maxS =
        "\1\u00be\37\uffff\1\167\2\uffff";
    static final String DFA62_acceptS =
        "\1\uffff\1\2\40\uffff\1\1";
    static final String DFA62_specialS =
        "\43\uffff}>";
    static final String[] DFA62_transitionS = {
            "\1\1\23\uffff\1\1\2\uffff\1\40\1\1\2\uffff\7\1\3\uffff\3\1\22"+
            "\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\42\30\uffff\1\1",
            "",
            ""
    };

    static final short[] DFA62_eot = DFA.unpackEncodedString(DFA62_eotS);
    static final short[] DFA62_eof = DFA.unpackEncodedString(DFA62_eofS);
    static final char[] DFA62_min = DFA.unpackEncodedStringToUnsignedChars(DFA62_minS);
    static final char[] DFA62_max = DFA.unpackEncodedStringToUnsignedChars(DFA62_maxS);
    static final short[] DFA62_accept = DFA.unpackEncodedString(DFA62_acceptS);
    static final short[] DFA62_special = DFA.unpackEncodedString(DFA62_specialS);
    static final short[][] DFA62_transition;

    static {
        int numStates = DFA62_transitionS.length;
        DFA62_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA62_transition[i] = DFA.unpackEncodedString(DFA62_transitionS[i]);
        }
    }

    class DFA62 extends DFA {

        public DFA62(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 62;
            this.eot = DFA62_eot;
            this.eof = DFA62_eof;
            this.min = DFA62_min;
            this.max = DFA62_max;
            this.accept = DFA62_accept;
            this.special = DFA62_special;
            this.transition = DFA62_transition;
        }
        public String getDescription() {
            return "()* loopback of 437:20: ( '.' i+= refComponent )*";
        }
    }
    static final String DFA63_eotS =
        "\41\uffff";
    static final String DFA63_eofS =
        "\1\1\40\uffff";
    static final String DFA63_minS =
        "\1\136\40\uffff";
    static final String DFA63_maxS =
        "\1\u00be\40\uffff";
    static final String DFA63_acceptS =
        "\1\uffff\1\2\36\uffff\1\1";
    static final String DFA63_specialS =
        "\41\uffff}>";
    static final String[] DFA63_transitionS = {
            "\1\1\23\uffff\1\1\2\uffff\2\1\2\uffff\7\1\3\uffff\1\40\2\1\22"+
            "\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "()* loopback of 437:43: ( '[' ']' )*";
        }
    }
    static final String DFA64_eotS =
        "\41\uffff";
    static final String DFA64_eofS =
        "\1\1\40\uffff";
    static final String DFA64_minS =
        "\1\136\40\uffff";
    static final String DFA64_maxS =
        "\1\u00be\40\uffff";
    static final String DFA64_acceptS =
        "\1\uffff\1\2\36\uffff\1\1";
    static final String DFA64_specialS =
        "\41\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\1\23\uffff\1\1\2\uffff\2\1\2\uffff\7\1\3\uffff\1\40\2\1\22"+
            "\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "()* loopback of 438:18: ( '[' ']' )*";
        }
    }
    static final String DFA66_eotS =
        "\46\uffff";
    static final String DFA66_eofS =
        "\1\2\45\uffff";
    static final String DFA66_minS =
        "\2\136\44\uffff";
    static final String DFA66_maxS =
        "\1\u00be\1\u0098\44\uffff";
    static final String DFA66_acceptS =
        "\2\uffff\1\2\40\uffff\1\1\2\uffff";
    static final String DFA66_specialS =
        "\46\uffff}>";
    static final String[] DFA66_transitionS = {
            "\1\2\23\uffff\1\2\2\uffff\2\2\2\uffff\1\2\1\1\5\2\3\uffff\3"+
            "\2\22\uffff\1\2\1\uffff\3\2\6\uffff\1\2\16\uffff\15\2",
            "\1\43\33\uffff\1\2\25\uffff\11\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
    static final short[][] DFA66_transition;

    static {
        int numStates = DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
        }
    }

    class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }
        public String getDescription() {
            return "442:18: ( typeArguments )?";
        }
    }
    static final String DFA71_eotS =
        "\52\uffff";
    static final String DFA71_eofS =
        "\1\4\51\uffff";
    static final String DFA71_minS =
        "\1\170\1\uffff\3\0\45\uffff";
    static final String DFA71_maxS =
        "\1\u0099\1\uffff\3\0\45\uffff";
    static final String DFA71_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\44\uffff";
    static final String DFA71_specialS =
        "\2\uffff\1\0\1\1\1\2\45\uffff}>";
    static final String[] DFA71_transitionS = {
            "\1\1\2\uffff\1\2\1\3\34\uffff\1\5",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "467:8: ( ( 'extends' type )? -> ^( TYPE '?' ( ^( EXTENDS type ) )? ) | ( 'super' type )? -> ^( TYPE '?' ( ^( SUPER type ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA71_2 = input.LA(1);

                         
                        int index71_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index71_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA71_3 = input.LA(1);

                         
                        int index71_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index71_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA71_4 = input.LA(1);

                         
                        int index71_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index71_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA80_eotS =
        "\30\uffff";
    static final String DFA80_eofS =
        "\1\1\27\uffff";
    static final String DFA80_minS =
        "\1\11\2\uffff\1\136\22\uffff\1\0\1\uffff";
    static final String DFA80_maxS =
        "\1\u00a0\2\uffff\1\u0080\22\uffff\1\0\1\uffff";
    static final String DFA80_acceptS =
        "\1\uffff\1\2\25\uffff\1\1";
    static final String DFA80_specialS =
        "\26\uffff\1\0\1\uffff}>";
    static final String[] DFA80_transitionS = {
            "\1\1\124\uffff\1\1\22\uffff\4\1\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\1\20\uffff\1\3",
            "",
            "",
            "\1\26\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "()+ loopback of 520:4: ( annotation )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA80_22 = input.LA(1);

                         
                        int index80_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_Java()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index80_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 80, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA82_eotS =
        "\34\uffff";
    static final String DFA82_eofS =
        "\1\2\33\uffff";
    static final String DFA82_minS =
        "\1\11\33\uffff";
    static final String DFA82_maxS =
        "\1\u00a0\33\uffff";
    static final String DFA82_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA82_specialS =
        "\34\uffff}>";
    static final String[] DFA82_transitionS = {
            "\1\2\124\uffff\1\2\22\uffff\4\2\2\uffff\1\2\2\uffff\2\2\3\uffff"+
            "\3\2\4\uffff\22\2\2\uffff\1\1\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "524:23: ( '(' ( elementValuePairs )? ')' )?";
        }
    }
    static final String DFA81_eotS =
        "\27\uffff";
    static final String DFA81_eofS =
        "\27\uffff";
    static final String DFA81_minS =
        "\1\136\26\uffff";
    static final String DFA81_maxS =
        "\1\u00c4\26\uffff";
    static final String DFA81_acceptS =
        "\1\uffff\1\1\24\uffff\1\2";
    static final String DFA81_specialS =
        "\27\uffff}>";
    static final String[] DFA81_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\1\2\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\1\26\1\uffff\4\1\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "524:28: ( elementValuePairs )?";
        }
    }
    static final String DFA83_eotS =
        "\35\uffff";
    static final String DFA83_eofS =
        "\1\1\34\uffff";
    static final String DFA83_minS =
        "\1\11\34\uffff";
    static final String DFA83_maxS =
        "\1\u00a0\34\uffff";
    static final String DFA83_acceptS =
        "\1\uffff\1\2\32\uffff\1\1";
    static final String DFA83_specialS =
        "\35\uffff}>";
    static final String[] DFA83_transitionS = {
            "\1\1\124\uffff\1\1\22\uffff\4\1\1\34\1\uffff\1\1\2\uffff\2\1"+
            "\3\uffff\3\1\4\uffff\22\1\2\uffff\2\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "()* loopback of 528:15: ( '.' Identifier )*";
        }
    }
    static final String DFA85_eotS =
        "\57\uffff";
    static final String DFA85_eofS =
        "\1\uffff\1\2\55\uffff";
    static final String DFA85_minS =
        "\1\136\1\165\55\uffff";
    static final String DFA85_maxS =
        "\1\u00c4\1\u00c1\55\uffff";
    static final String DFA85_acceptS =
        "\2\uffff\1\2\23\uffff\1\1\30\uffff";
    static final String DFA85_specialS =
        "\57\uffff}>";
    static final String[] DFA85_transitionS = {
            "\1\1\6\2\25\uffff\1\2\3\uffff\1\2\2\uffff\1\2\16\uffff\10\2"+
            "\1\uffff\2\2\2\uffff\4\2\21\uffff\2\2\14\uffff\5\2",
            "\2\2\3\uffff\4\2\5\uffff\1\2\1\uffff\1\26\22\uffff\1\2\1\uffff"+
            "\2\2\26\uffff\3\2\3\uffff\12\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "536:4: ( Identifier '=' )?";
        }
    }
    static final String DFA86_eotS =
        "\26\uffff";
    static final String DFA86_eofS =
        "\26\uffff";
    static final String DFA86_minS =
        "\1\136\25\uffff";
    static final String DFA86_maxS =
        "\1\u00c4\25\uffff";
    static final String DFA86_acceptS =
        "\1\uffff\1\1\22\uffff\1\2\1\3";
    static final String DFA86_specialS =
        "\26\uffff}>";
    static final String[] DFA86_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\25\2\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\2\uffff\3\1\1\24\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "539:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );";
        }
    }
    static final String DFA88_eotS =
        "\27\uffff";
    static final String DFA88_eofS =
        "\27\uffff";
    static final String DFA88_minS =
        "\1\136\26\uffff";
    static final String DFA88_maxS =
        "\1\u00c4\26\uffff";
    static final String DFA88_acceptS =
        "\1\uffff\1\1\24\uffff\1\2";
    static final String DFA88_specialS =
        "\27\uffff}>";
    static final String[] DFA88_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\1\1\26\1\uffff\1\1\16\uffff\10\1"+
            "\1\uffff\2\1\2\uffff\4\1\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "546:8: ( elementValue ( ',' elementValue )* )?";
        }
    }
    static final String DFA89_eotS =
        "\23\uffff";
    static final String DFA89_eofS =
        "\23\uffff";
    static final String DFA89_minS =
        "\1\11\22\uffff";
    static final String DFA89_maxS =
        "\1\u00a0\22\uffff";
    static final String DFA89_acceptS =
        "\1\uffff\1\1\20\uffff\1\2";
    static final String DFA89_specialS =
        "\23\uffff}>";
    static final String[] DFA89_transitionS = {
            "\1\1\124\uffff\1\1\25\uffff\1\1\2\uffff\1\1\7\uffff\1\22\1\1"+
            "\5\uffff\22\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
    static final short[][] DFA89_transition;

    static {
        int numStates = DFA89_transitionS.length;
        DFA89_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;
        }
        public String getDescription() {
            return "554:8: ( annotationTypeElementDeclarations )?";
        }
    }
    static final String DFA90_eotS =
        "\24\uffff";
    static final String DFA90_eofS =
        "\1\1\23\uffff";
    static final String DFA90_minS =
        "\1\11\23\uffff";
    static final String DFA90_maxS =
        "\1\u00a0\23\uffff";
    static final String DFA90_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\20\uffff";
    static final String DFA90_specialS =
        "\24\uffff}>";
    static final String[] DFA90_transitionS = {
            "\1\3\124\uffff\1\3\25\uffff\1\3\2\uffff\1\3\7\uffff\1\1\1\3"+
            "\5\uffff\22\3\10\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA90_eot = DFA.unpackEncodedString(DFA90_eotS);
    static final short[] DFA90_eof = DFA.unpackEncodedString(DFA90_eofS);
    static final char[] DFA90_min = DFA.unpackEncodedStringToUnsignedChars(DFA90_minS);
    static final char[] DFA90_max = DFA.unpackEncodedStringToUnsignedChars(DFA90_maxS);
    static final short[] DFA90_accept = DFA.unpackEncodedString(DFA90_acceptS);
    static final short[] DFA90_special = DFA.unpackEncodedString(DFA90_specialS);
    static final short[][] DFA90_transition;

    static {
        int numStates = DFA90_transitionS.length;
        DFA90_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA90_transition[i] = DFA.unpackEncodedString(DFA90_transitionS[i]);
        }
    }

    class DFA90 extends DFA {

        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = DFA90_eot;
            this.eof = DFA90_eof;
            this.min = DFA90_min;
            this.max = DFA90_max;
            this.accept = DFA90_accept;
            this.special = DFA90_special;
            this.transition = DFA90_transition;
        }
        public String getDescription() {
            return "()* loopback of 558:39: ( annotationTypeElementDeclaration )*";
        }
    }
    static final String DFA91_eotS =
        "\24\uffff";
    static final String DFA91_eofS =
        "\24\uffff";
    static final String DFA91_minS =
        "\1\11\4\uffff\1\136\16\uffff";
    static final String DFA91_maxS =
        "\1\u00a0\4\uffff\1\u0080\16\uffff";
    static final String DFA91_acceptS =
        "\1\uffff\1\2\5\uffff\1\1\14\uffff";
    static final String DFA91_specialS =
        "\24\uffff}>";
    static final String[] DFA91_transitionS = {
            "\1\1\124\uffff\1\1\25\uffff\1\7\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\7\10\1\10\uffff\1\5",
            "",
            "",
            "",
            "",
            "\1\7\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA91_eot = DFA.unpackEncodedString(DFA91_eotS);
    static final short[] DFA91_eof = DFA.unpackEncodedString(DFA91_eofS);
    static final char[] DFA91_min = DFA.unpackEncodedStringToUnsignedChars(DFA91_minS);
    static final char[] DFA91_max = DFA.unpackEncodedStringToUnsignedChars(DFA91_maxS);
    static final short[] DFA91_accept = DFA.unpackEncodedString(DFA91_acceptS);
    static final short[] DFA91_special = DFA.unpackEncodedString(DFA91_specialS);
    static final short[][] DFA91_transition;

    static {
        int numStates = DFA91_transitionS.length;
        DFA91_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA91_transition[i] = DFA.unpackEncodedString(DFA91_transitionS[i]);
        }
    }

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = DFA91_eot;
            this.eof = DFA91_eof;
            this.min = DFA91_min;
            this.max = DFA91_max;
            this.accept = DFA91_accept;
            this.special = DFA91_special;
            this.transition = DFA91_transition;
        }
        public String getDescription() {
            return "()* loopback of 562:4: ( modifier )*";
        }
    }
    static final String DFA92_eotS =
        "\25\uffff";
    static final String DFA92_eofS =
        "\1\2\24\uffff";
    static final String DFA92_minS =
        "\1\11\24\uffff";
    static final String DFA92_maxS =
        "\1\u00a0\24\uffff";
    static final String DFA92_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA92_specialS =
        "\25\uffff}>";
    static final String[] DFA92_transitionS = {
            "\1\2\124\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "567:23: ( ';' )?";
        }
    }
    static final String DFA93_eotS =
        "\25\uffff";
    static final String DFA93_eofS =
        "\1\2\24\uffff";
    static final String DFA93_minS =
        "\1\11\24\uffff";
    static final String DFA93_maxS =
        "\1\u00a0\24\uffff";
    static final String DFA93_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA93_specialS =
        "\25\uffff}>";
    static final String[] DFA93_transitionS = {
            "\1\2\124\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "568:27: ( ';' )?";
        }
    }
    static final String DFA94_eotS =
        "\25\uffff";
    static final String DFA94_eofS =
        "\1\2\24\uffff";
    static final String DFA94_minS =
        "\1\11\24\uffff";
    static final String DFA94_maxS =
        "\1\u00a0\24\uffff";
    static final String DFA94_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA94_specialS =
        "\25\uffff}>";
    static final String[] DFA94_transitionS = {
            "\1\2\124\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "569:22: ( ';' )?";
        }
    }
    static final String DFA95_eotS =
        "\25\uffff";
    static final String DFA95_eofS =
        "\1\2\24\uffff";
    static final String DFA95_minS =
        "\1\11\24\uffff";
    static final String DFA95_maxS =
        "\1\u00a0\24\uffff";
    static final String DFA95_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA95_specialS =
        "\25\uffff}>";
    static final String[] DFA95_transitionS = {
            "\1\2\124\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA95_eot = DFA.unpackEncodedString(DFA95_eotS);
    static final short[] DFA95_eof = DFA.unpackEncodedString(DFA95_eofS);
    static final char[] DFA95_min = DFA.unpackEncodedStringToUnsignedChars(DFA95_minS);
    static final char[] DFA95_max = DFA.unpackEncodedStringToUnsignedChars(DFA95_maxS);
    static final short[] DFA95_accept = DFA.unpackEncodedString(DFA95_acceptS);
    static final short[] DFA95_special = DFA.unpackEncodedString(DFA95_specialS);
    static final short[][] DFA95_transition;

    static {
        int numStates = DFA95_transitionS.length;
        DFA95_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA95_transition[i] = DFA.unpackEncodedString(DFA95_transitionS[i]);
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = DFA95_eot;
            this.eof = DFA95_eof;
            this.min = DFA95_min;
            this.max = DFA95_max;
            this.accept = DFA95_accept;
            this.special = DFA95_special;
            this.transition = DFA95_transition;
        }
        public String getDescription() {
            return "570:32: ( ';' )?";
        }
    }
    static final String DFA99_eotS =
        "\61\uffff";
    static final String DFA99_eofS =
        "\61\uffff";
    static final String DFA99_minS =
        "\1\11\60\uffff";
    static final String DFA99_maxS =
        "\1\u00c4\60\uffff";
    static final String DFA99_acceptS =
        "\1\uffff\1\2\1\1\56\uffff";
    static final String DFA99_specialS =
        "\61\uffff}>";
    static final String[] DFA99_transitionS = {
            "\1\2\124\uffff\7\2\15\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\1\2\2\4\uffff\22\2\1\uffff\2\2\2\uffff\4"+
            "\2\1\uffff\1\2\1\uffff\1\2\1\uffff\4\2\1\uffff\5\2\2\uffff\2"+
            "\2\14\uffff\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "()* loopback of 593:8: ( blockStatement )*";
        }
    }
    static final String DFA100_eotS =
        "\162\uffff";
    static final String DFA100_eofS =
        "\162\uffff";
    static final String DFA100_minS =
        "\2\11\3\136\6\uffff\1\11\46\uffff\2\0\16\uffff\1\0\2\uffff\2\0\7"+
        "\uffff\1\0\20\uffff\1\0\22\uffff";
    static final String DFA100_maxS =
        "\1\u00c4\1\u00a0\1\u0080\1\u00c1\1\u0083\6\uffff\1\u00a0\46\uffff"+
        "\2\0\16\uffff\1\0\2\uffff\2\0\7\uffff\1\0\20\uffff\1\0\22\uffff";
    static final String DFA100_acceptS =
        "\5\uffff\1\2\14\uffff\1\3\35\uffff\1\1\101\uffff";
    static final String DFA100_specialS =
        "\62\uffff\1\0\1\1\16\uffff\1\2\2\uffff\1\3\1\4\7\uffff\1\5\20\uffff"+
        "\1\6\22\uffff}>";
    static final String[] DFA100_transitionS = {
            "\1\5\124\uffff\1\3\6\22\15\uffff\1\22\1\uffff\1\5\2\uffff\1"+
            "\5\2\uffff\1\22\3\uffff\1\22\1\uffff\1\5\1\22\4\uffff\4\5\1"+
            "\1\1\5\1\13\3\5\10\4\1\uffff\2\22\2\uffff\3\22\1\2\1\uffff\1"+
            "\22\1\uffff\1\22\1\uffff\4\22\1\uffff\5\22\2\uffff\2\22\14\uffff"+
            "\5\22",
            "\1\5\124\uffff\1\60\25\uffff\1\5\2\uffff\1\5\10\uffff\1\5\5"+
            "\uffff\4\5\1\62\5\5\10\60\10\uffff\1\63",
            "\1\102\41\uffff\1\5",
            "\1\60\23\uffff\1\22\2\uffff\1\105\1\22\3\uffff\1\116\1\uffff"+
            "\2\22\5\uffff\1\106\1\uffff\1\22\22\uffff\1\22\1\uffff\1\22"+
            "\10\uffff\1\22\16\uffff\20\22",
            "\1\60\26\uffff\1\22\15\uffff\1\137",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\5\152\uffff\1\5\2\uffff\1\5\10\uffff\1\5\5\uffff\12\5\12"+
            "\uffff\1\22\5\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA100_eot = DFA.unpackEncodedString(DFA100_eotS);
    static final short[] DFA100_eof = DFA.unpackEncodedString(DFA100_eofS);
    static final char[] DFA100_min = DFA.unpackEncodedStringToUnsignedChars(DFA100_minS);
    static final char[] DFA100_max = DFA.unpackEncodedStringToUnsignedChars(DFA100_maxS);
    static final short[] DFA100_accept = DFA.unpackEncodedString(DFA100_acceptS);
    static final short[] DFA100_special = DFA.unpackEncodedString(DFA100_specialS);
    static final short[][] DFA100_transition;

    static {
        int numStates = DFA100_transitionS.length;
        DFA100_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA100_transition[i] = DFA.unpackEncodedString(DFA100_transitionS[i]);
        }
    }

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = DFA100_eot;
            this.eof = DFA100_eof;
            this.min = DFA100_min;
            this.max = DFA100_max;
            this.accept = DFA100_accept;
            this.special = DFA100_special;
            this.transition = DFA100_transition;
        }
        public String getDescription() {
            return "596:1: blockStatement : ( localVariableDeclaration | classOrInterfaceDeclaration | statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA100_50 = input.LA(1);

                         
                        int index100_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_Java()) ) {s = 48;}

                        else if ( (synpred142_Java()) ) {s = 5;}

                         
                        input.seek(index100_50);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA100_51 = input.LA(1);

                         
                        int index100_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_Java()) ) {s = 48;}

                        else if ( (synpred142_Java()) ) {s = 5;}

                         
                        input.seek(index100_51);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA100_66 = input.LA(1);

                         
                        int index100_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_Java()) ) {s = 48;}

                        else if ( (synpred142_Java()) ) {s = 5;}

                         
                        input.seek(index100_66);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA100_69 = input.LA(1);

                         
                        int index100_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index100_69);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA100_70 = input.LA(1);

                         
                        int index100_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index100_70);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA100_78 = input.LA(1);

                         
                        int index100_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index100_78);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA100_95 = input.LA(1);

                         
                        int index100_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index100_95);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 100, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA108_eotS =
        "\75\uffff";
    static final String DFA108_eofS =
        "\75\uffff";
    static final String DFA108_minS =
        "\1\136\35\uffff\1\162\36\uffff";
    static final String DFA108_maxS =
        "\1\u00c4\35\uffff\1\u00c1\36\uffff";
    static final String DFA108_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\22\uffff\1\20\32\uffff";
    static final String DFA108_specialS =
        "\75\uffff}>";
    static final String[] DFA108_transitionS = {
            "\1\36\6\17\15\uffff\1\16\7\uffff\1\17\3\uffff\1\1\2\uffff\1"+
            "\17\12\uffff\1\11\3\uffff\10\17\1\uffff\2\17\2\uffff\3\17\2"+
            "\uffff\1\2\1\uffff\1\3\1\uffff\1\4\1\5\1\6\1\7\1\uffff\1\10"+
            "\1\12\1\13\1\14\1\15\2\uffff\2\17\14\uffff\5\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\17\2\uffff\2\17\3\uffff\1\17\1\uffff\2\17\5\uffff\1\17\1"+
            "\uffff\1\17\22\uffff\1\17\1\uffff\1\17\10\uffff\1\42\16\uffff"+
            "\20\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA108_eot = DFA.unpackEncodedString(DFA108_eotS);
    static final short[] DFA108_eof = DFA.unpackEncodedString(DFA108_eofS);
    static final char[] DFA108_min = DFA.unpackEncodedStringToUnsignedChars(DFA108_minS);
    static final char[] DFA108_max = DFA.unpackEncodedStringToUnsignedChars(DFA108_maxS);
    static final short[] DFA108_accept = DFA.unpackEncodedString(DFA108_acceptS);
    static final short[] DFA108_special = DFA.unpackEncodedString(DFA108_specialS);
    static final short[][] DFA108_transition;

    static {
        int numStates = DFA108_transitionS.length;
        DFA108_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA108_transition[i] = DFA.unpackEncodedString(DFA108_transitionS[i]);
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;
        }
        public String getDescription() {
            return "606:1: statement : ( block | lc= 'assert' expression ( ':' expression )? ';' -> ^( ASSERT[$lc] expression ( expression )? ) | lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> ^( IF[$lc] parExpression statement ( statement )? ) | lc= 'for' '(' forControl ')' statement -> ^( FOR[$lc] forControl statement ) | lc= 'while' parExpression statement -> ^( WHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'do' statement 'while' parExpression ';' -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) ) | lc= 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups ) | lc= 'synchronized' parExpression block -> ^( SYNCHRONIZED[$lc] parExpression block ) | lc= 'return' ( expression )? ';' -> ^( RETURN[$lc] ( expression )? ) | lc= 'throw' expression ';' -> ^( THROW[$lc] expression ) | lc= 'break' ( Identifier )? ';' -> ^( BREAK[$lc] ( Identifier )? ) | lc= 'continue' ( Identifier )? ';' -> ^( CONTINUE[$lc] ( Identifier )? ) | ';' -> ^( BLOCK ) | statementExpression ';' -> statementExpression | lc= Identifier ':' statement -> ^( LABEL[$lc] Identifier statement ) );";
        }
    }
    static final String DFA105_eotS =
        "\25\uffff";
    static final String DFA105_eofS =
        "\25\uffff";
    static final String DFA105_minS =
        "\1\136\24\uffff";
    static final String DFA105_maxS =
        "\1\u00c4\24\uffff";
    static final String DFA105_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA105_specialS =
        "\25\uffff}>";
    static final String[] DFA105_transitionS = {
            "\7\1\15\uffff\1\24\7\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_specialS);
    static final short[][] DFA105_transition;

    static {
        int numStates = DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_transitionS[i]);
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }
        public String getDescription() {
            return "620:19: ( expression )?";
        }
    }
    static final String DFA109_eotS =
        "\67\uffff";
    static final String DFA109_eofS =
        "\1\1\66\uffff";
    static final String DFA109_minS =
        "\1\11\66\uffff";
    static final String DFA109_maxS =
        "\1\u00c4\66\uffff";
    static final String DFA109_acceptS =
        "\1\uffff\1\2\64\uffff\1\1";
    static final String DFA109_specialS =
        "\67\uffff}>";
    static final String[] DFA109_transitionS = {
            "\1\1\124\uffff\7\1\15\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff"+
            "\1\1\3\uffff\4\1\4\uffff\22\1\1\uffff\2\1\2\uffff\6\1\1\uffff"+
            "\14\1\1\66\3\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA109_eot = DFA.unpackEncodedString(DFA109_eotS);
    static final short[] DFA109_eof = DFA.unpackEncodedString(DFA109_eofS);
    static final char[] DFA109_min = DFA.unpackEncodedStringToUnsignedChars(DFA109_minS);
    static final char[] DFA109_max = DFA.unpackEncodedStringToUnsignedChars(DFA109_maxS);
    static final short[] DFA109_accept = DFA.unpackEncodedString(DFA109_acceptS);
    static final short[] DFA109_special = DFA.unpackEncodedString(DFA109_specialS);
    static final short[][] DFA109_transition;

    static {
        int numStates = DFA109_transitionS.length;
        DFA109_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA109_transition[i] = DFA.unpackEncodedString(DFA109_transitionS[i]);
        }
    }

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = DFA109_eot;
            this.eof = DFA109_eof;
            this.min = DFA109_min;
            this.max = DFA109_max;
            this.accept = DFA109_accept;
            this.special = DFA109_special;
            this.transition = DFA109_transition;
        }
        public String getDescription() {
            return "()* loopback of 630:16: ( catchClause )*";
        }
    }
    static final String DFA112_eotS =
        "\64\uffff";
    static final String DFA112_eofS =
        "\1\1\63\uffff";
    static final String DFA112_minS =
        "\1\11\63\uffff";
    static final String DFA112_maxS =
        "\1\u00c4\63\uffff";
    static final String DFA112_acceptS =
        "\1\uffff\1\2\3\uffff\1\1\56\uffff";
    static final String DFA112_specialS =
        "\64\uffff}>";
    static final String[] DFA112_transitionS = {
            "\1\5\124\uffff\7\5\15\uffff\1\5\1\uffff\1\5\2\uffff\1\5\2\uffff"+
            "\1\5\3\uffff\1\5\1\1\2\5\4\uffff\22\5\1\uffff\2\5\2\uffff\4"+
            "\5\1\1\1\5\1\uffff\1\5\1\uffff\4\5\1\uffff\5\5\1\uffff\1\1\2"+
            "\5\14\uffff\5\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "()* loopback of 646:16: ( blockStatement )*";
        }
    }
    static final String DFA113_eotS =
        "\27\uffff";
    static final String DFA113_eofS =
        "\27\uffff";
    static final String DFA113_minS =
        "\1\u00a1\1\136\1\uffff\1\0\23\uffff";
    static final String DFA113_maxS =
        "\1\u00b1\1\u00c4\1\uffff\1\0\23\uffff";
    static final String DFA113_acceptS =
        "\2\uffff\1\3\1\uffff\1\1\21\uffff\1\2";
    static final String DFA113_specialS =
        "\3\uffff\1\0\23\uffff}>";
    static final String[] DFA113_transitionS = {
            "\1\2\17\uffff\1\1",
            "\1\3\6\4\25\uffff\1\4\6\uffff\1\4\16\uffff\10\4\1\uffff\2\4"+
            "\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "649:1: switchLabel : (lc= 'case' constantExpression ':' -> ^( CASE[$lc] constantExpression ) | lc= 'case' enumConstantName ':' -> ^( CASE[$lc] enumConstantName ) | lc= 'default' ':' -> ^( DEFAULT ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA113_3 = input.LA(1);

                         
                        int index113_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170_Java()) ) {s = 4;}

                        else if ( (synpred171_Java()) ) {s = 22;}

                         
                        input.seek(index113_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA118_eotS =
        "\u0085\uffff";
    static final String DFA118_eofS =
        "\u0085\uffff";
    static final String DFA118_minS =
        "\5\136\22\uffff\10\136\1\162\30\uffff\1\u0084\1\162\1\uffff\21\0"+
        "\20\uffff\2\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\30\uffff\1\0\5"+
        "\uffff";
    static final String DFA118_maxS =
        "\1\u00c4\1\u00a0\1\136\1\u00c1\1\u0083\22\uffff\2\u0083\1\u00a0"+
        "\1\136\1\u00a0\3\u00c4\1\u00a3\30\uffff\1\u0084\1\u00a3\1\uffff"+
        "\21\0\20\uffff\2\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\30\uffff"+
        "\1\0\5\uffff";
    static final String DFA118_acceptS =
        "\5\uffff\1\2\164\uffff\1\1\12\uffff";
    static final String DFA118_specialS =
        "\73\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\20\uffff\1\21\1\22\2\uffff\1\23\2\uffff"+
        "\1\24\2\uffff\1\25\30\uffff\1\26\5\uffff}>";
    static final String[] DFA118_transitionS = {
            "\1\3\6\5\15\uffff\1\5\7\uffff\1\5\6\uffff\1\5\10\uffff\1\1\5"+
            "\uffff\10\4\1\uffff\2\5\2\uffff\3\5\1\2\21\uffff\2\5\14\uffff"+
            "\5\5",
            "\1\27\53\uffff\1\31\5\uffff\10\30\10\uffff\1\32",
            "\1\33",
            "\1\37\23\uffff\1\5\2\uffff\1\35\1\5\3\uffff\1\34\3\5\5\uffff"+
            "\1\36\1\uffff\1\5\22\uffff\1\5\1\uffff\1\5\27\uffff\20\5",
            "\1\71\26\uffff\1\5\15\uffff\1\70",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\76\26\uffff\1\74\4\uffff\1\73\10\uffff\1\75",
            "\1\100\44\uffff\1\77",
            "\1\101\53\uffff\1\103\5\uffff\10\102\10\uffff\1\104",
            "\1\105",
            "\1\110\26\uffff\1\106\24\uffff\1\112\5\uffff\10\111\2\uffff"+
            "\1\107\5\uffff\1\113",
            "\1\134\6\5\25\uffff\1\5\6\uffff\1\5\3\uffff\1\5\12\uffff\10"+
            "\135\1\140\2\5\2\uffff\3\5\22\uffff\2\5\14\uffff\5\5",
            "\1\143\30\uffff\1\5\2\uffff\1\5\36\uffff\1\5\52\uffff\1\5",
            "\7\5\25\uffff\1\5\6\uffff\1\5\2\uffff\1\146\13\uffff\10\5\1"+
            "\uffff\2\5\2\uffff\3\5\22\uffff\2\5\14\uffff\5\5",
            "\1\5\10\uffff\1\5\7\uffff\1\5\1\uffff\1\5\35\uffff\1\172",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\177",
            "\1\5\10\uffff\1\5\7\uffff\1\5\1\uffff\1\5\35\uffff\1\172",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "659:1: forControl options {k=3; } : ( forVarControl -> ^( FOREACH forVarControl ) | ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )? -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA118_59 = input.LA(1);

                         
                        int index118_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_59);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA118_60 = input.LA(1);

                         
                        int index118_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_60);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA118_61 = input.LA(1);

                         
                        int index118_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_61);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA118_62 = input.LA(1);

                         
                        int index118_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_62);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA118_63 = input.LA(1);

                         
                        int index118_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_63);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA118_64 = input.LA(1);

                         
                        int index118_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_64);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA118_65 = input.LA(1);

                         
                        int index118_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_65);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA118_66 = input.LA(1);

                         
                        int index118_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_66);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA118_67 = input.LA(1);

                         
                        int index118_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_67);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA118_68 = input.LA(1);

                         
                        int index118_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_68);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA118_69 = input.LA(1);

                         
                        int index118_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_69);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA118_70 = input.LA(1);

                         
                        int index118_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_70);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA118_71 = input.LA(1);

                         
                        int index118_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_71);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA118_72 = input.LA(1);

                         
                        int index118_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_72);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA118_73 = input.LA(1);

                         
                        int index118_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_73);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA118_74 = input.LA(1);

                         
                        int index118_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_74);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA118_75 = input.LA(1);

                         
                        int index118_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_75);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA118_92 = input.LA(1);

                         
                        int index118_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_92);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA118_93 = input.LA(1);

                         
                        int index118_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_93);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA118_96 = input.LA(1);

                         
                        int index118_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_96);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA118_99 = input.LA(1);

                         
                        int index118_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_99);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA118_102 = input.LA(1);

                         
                        int index118_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_102);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA118_127 = input.LA(1);

                         
                        int index118_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_127);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 118, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA115_eotS =
        "\27\uffff";
    static final String DFA115_eofS =
        "\27\uffff";
    static final String DFA115_minS =
        "\1\136\26\uffff";
    static final String DFA115_maxS =
        "\1\u00c4\26\uffff";
    static final String DFA115_acceptS =
        "\1\uffff\1\1\24\uffff\1\2";
    static final String DFA115_specialS =
        "\27\uffff}>";
    static final String[] DFA115_transitionS = {
            "\7\1\15\uffff\1\26\7\uffff\1\1\6\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\10\1\1\uffff\2\1\2\uffff\4\1\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_eotS);
    static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_eofS);
    static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_minS);
    static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_maxS);
    static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_acceptS);
    static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_specialS);
    static final short[][] DFA115_transition;

    static {
        int numStates = DFA115_transitionS.length;
        DFA115_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA115_transition[i] = DFA.unpackEncodedString(DFA115_transitionS[i]);
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;
        }
        public String getDescription() {
            return "662:4: ( forInit )?";
        }
    }
    static final String DFA116_eotS =
        "\25\uffff";
    static final String DFA116_eofS =
        "\25\uffff";
    static final String DFA116_minS =
        "\1\136\24\uffff";
    static final String DFA116_maxS =
        "\1\u00c4\24\uffff";
    static final String DFA116_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA116_specialS =
        "\25\uffff}>";
    static final String[] DFA116_transitionS = {
            "\7\1\15\uffff\1\24\7\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "662:19: (fc= expression )?";
        }
    }
    static final String DFA117_eotS =
        "\25\uffff";
    static final String DFA117_eofS =
        "\25\uffff";
    static final String DFA117_minS =
        "\1\136\24\uffff";
    static final String DFA117_maxS =
        "\1\u00c4\24\uffff";
    static final String DFA117_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA117_specialS =
        "\25\uffff}>";
    static final String[] DFA117_transitionS = {
            "\7\1\25\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff\2\1\1\24"+
            "\1\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "662:38: (fu= forUpdate )?";
        }
    }
    static final String DFA120_eotS =
        "\66\uffff";
    static final String DFA120_eofS =
        "\3\uffff\1\5\62\uffff";
    static final String DFA120_minS =
        "\1\136\2\uffff\2\136\21\uffff\3\0\32\uffff\1\0\2\uffff";
    static final String DFA120_maxS =
        "\1\u00c4\2\uffff\1\u00c1\1\u0083\21\uffff\3\0\32\uffff\1\0\2\uffff";
    static final String DFA120_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\60\uffff";
    static final String DFA120_specialS =
        "\26\uffff\1\0\1\1\1\2\32\uffff\1\3\2\uffff}>";
    static final String[] DFA120_transitionS = {
            "\1\3\6\5\25\uffff\1\5\6\uffff\1\5\10\uffff\1\1\5\uffff\10\4"+
            "\1\uffff\2\5\2\uffff\3\5\1\1\21\uffff\2\5\14\uffff\5\5",
            "",
            "",
            "\1\1\23\uffff\1\5\2\uffff\1\27\1\5\3\uffff\1\26\3\5\5\uffff"+
            "\1\30\1\uffff\1\5\22\uffff\1\5\1\uffff\1\5\27\uffff\20\5",
            "\1\1\26\uffff\1\5\15\uffff\1\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA120_eot = DFA.unpackEncodedString(DFA120_eotS);
    static final short[] DFA120_eof = DFA.unpackEncodedString(DFA120_eofS);
    static final char[] DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_minS);
    static final char[] DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_maxS);
    static final short[] DFA120_accept = DFA.unpackEncodedString(DFA120_acceptS);
    static final short[] DFA120_special = DFA.unpackEncodedString(DFA120_specialS);
    static final short[][] DFA120_transition;

    static {
        int numStates = DFA120_transitionS.length;
        DFA120_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA120_transition[i] = DFA.unpackEncodedString(DFA120_transitionS[i]);
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;
        }
        public String getDescription() {
            return "665:1: forInit : ( ( variableModifier )* type variableDeclarators -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) | expressionList );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA120_22 = input.LA(1);

                         
                        int index120_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_22);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA120_23 = input.LA(1);

                         
                        int index120_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_23);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA120_24 = input.LA(1);

                         
                        int index120_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_24);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA120_51 = input.LA(1);

                         
                        int index120_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 120, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA123_eotS =
        "\162\uffff";
    static final String DFA123_eofS =
        "\1\14\161\uffff";
    static final String DFA123_minS =
        "\1\162\13\0\146\uffff";
    static final String DFA123_maxS =
        "\1\u00b8\13\0\146\uffff";
    static final String DFA123_acceptS =
        "\14\uffff\1\15\31\uffff\1\1\1\uffff\1\2\1\uffff\1\3\1\uffff\1\4"+
        "\1\uffff\1\5\23\uffff\1\6\23\uffff\1\7\23\uffff\1\10\1\uffff\1\11"+
        "\1\uffff\1\12\1\uffff\1\13\1\14";
    static final String DFA123_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\146\uffff}>";
    static final String[] DFA123_transitionS = {
            "\1\14\3\uffff\1\4\3\uffff\1\12\1\14\1\13\2\uffff\1\14\4\uffff"+
            "\1\14\1\1\25\uffff\1\14\7\uffff\1\14\16\uffff\1\2\1\3\1\5\1"+
            "\6\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "698:3: ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA123_1 = input.LA(1);

                         
                        int index123_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 38;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index123_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA123_2 = input.LA(1);

                         
                        int index123_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 40;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index123_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA123_3 = input.LA(1);

                         
                        int index123_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_Java()) ) {s = 42;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index123_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA123_4 = input.LA(1);

                         
                        int index123_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_Java()) ) {s = 44;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index123_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA123_5 = input.LA(1);

                         
                        int index123_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_Java()) ) {s = 46;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index123_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA123_6 = input.LA(1);

                         
                        int index123_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index123_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA123_7 = input.LA(1);

                         
                        int index123_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_Java()) ) {s = 86;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index123_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA123_8 = input.LA(1);

                         
                        int index123_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Java()) ) {s = 106;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index123_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA123_9 = input.LA(1);

                         
                        int index123_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_Java()) ) {s = 108;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index123_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA123_10 = input.LA(1);

                         
                        int index123_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred190_Java()) ) {s = 110;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index123_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA123_11 = input.LA(1);

                         
                        int index123_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_Java()) ) {s = 112;}

                        else if ( (synpred192_Java()) ) {s = 113;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index123_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA124_eotS =
        "\24\uffff";
    static final String DFA124_eofS =
        "\1\2\23\uffff";
    static final String DFA124_minS =
        "\1\162\23\uffff";
    static final String DFA124_maxS =
        "\1\u00b8\23\uffff";
    static final String DFA124_acceptS =
        "\1\uffff\1\1\1\2\21\uffff";
    static final String DFA124_specialS =
        "\24\uffff}>";
    static final String[] DFA124_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\1\2\uffff\1\2\7\uffff\1\2\16\uffff\7\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "717:6: ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression )";
        }
    }
    static final String DFA125_eotS =
        "\25\uffff";
    static final String DFA125_eofS =
        "\1\2\24\uffff";
    static final String DFA125_minS =
        "\1\162\24\uffff";
    static final String DFA125_maxS =
        "\1\u00b9\24\uffff";
    static final String DFA125_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA125_specialS =
        "\25\uffff}>";
    static final String[] DFA125_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\7\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "725:6: ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression )";
        }
    }
    static final String DFA126_eotS =
        "\26\uffff";
    static final String DFA126_eofS =
        "\1\2\25\uffff";
    static final String DFA126_minS =
        "\1\162\25\uffff";
    static final String DFA126_maxS =
        "\1\u00ba\25\uffff";
    static final String DFA126_acceptS =
        "\1\uffff\1\1\1\2\23\uffff";
    static final String DFA126_specialS =
        "\26\uffff}>";
    static final String[] DFA126_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\10\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "733:6: ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression )";
        }
    }
    static final String DFA127_eotS =
        "\27\uffff";
    static final String DFA127_eofS =
        "\1\2\26\uffff";
    static final String DFA127_minS =
        "\1\162\26\uffff";
    static final String DFA127_maxS =
        "\1\u00bb\26\uffff";
    static final String DFA127_acceptS =
        "\1\uffff\1\1\1\2\24\uffff";
    static final String DFA127_specialS =
        "\27\uffff}>";
    static final String[] DFA127_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\11\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "741:9: ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression )";
        }
    }
    static final String DFA128_eotS =
        "\30\uffff";
    static final String DFA128_eofS =
        "\1\2\27\uffff";
    static final String DFA128_minS =
        "\1\162\27\uffff";
    static final String DFA128_maxS =
        "\1\u00bc\27\uffff";
    static final String DFA128_acceptS =
        "\1\uffff\1\1\1\2\25\uffff";
    static final String DFA128_specialS =
        "\30\uffff}>";
    static final String[] DFA128_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\12\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "749:5: ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression )";
        }
    }
    static final String DFA129_eotS =
        "\31\uffff";
    static final String DFA129_eofS =
        "\1\2\30\uffff";
    static final String DFA129_minS =
        "\1\162\30\uffff";
    static final String DFA129_maxS =
        "\1\u00bc\30\uffff";
    static final String DFA129_acceptS =
        "\1\uffff\1\1\1\2\26\uffff";
    static final String DFA129_specialS =
        "\31\uffff}>";
    static final String[] DFA129_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\1\1\1\uffff\1\2\4\uffff\2\2\22"+
            "\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\13\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "757:5: ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression )";
        }
    }
    static final String DFA130_eotS =
        "\33\uffff";
    static final String DFA130_eofS =
        "\1\3\32\uffff";
    static final String DFA130_minS =
        "\1\162\32\uffff";
    static final String DFA130_maxS =
        "\1\u00be\32\uffff";
    static final String DFA130_acceptS =
        "\1\uffff\1\1\1\2\1\3\27\uffff";
    static final String DFA130_specialS =
        "\33\uffff}>";
    static final String[] DFA130_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\4\3\1\uffff\1\3\4\uffff\2\3\22\uffff"+
            "\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\13\3\1\1\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "765:5: ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression )";
        }
    }
    static final String DFA131_eotS =
        "\34\uffff";
    static final String DFA131_eofS =
        "\1\2\33\uffff";
    static final String DFA131_minS =
        "\1\162\33\uffff";
    static final String DFA131_maxS =
        "\1\u00bf\33\uffff";
    static final String DFA131_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA131_specialS =
        "\34\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\4\2\1\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\15\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "774:5: ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression )";
        }
    }
    static final String DFA132_eotS =
        "\105\uffff";
    static final String DFA132_eofS =
        "\1\3\104\uffff";
    static final String DFA132_minS =
        "\1\162\2\136\32\uffff\1\0\47\uffff";
    static final String DFA132_maxS =
        "\1\u00bf\2\u00c4\32\uffff\1\0\47\uffff";
    static final String DFA132_acceptS =
        "\3\uffff\1\5\30\uffff\1\1\1\uffff\1\2\21\uffff\1\3\1\uffff\1\4\22"+
        "\uffff";
    static final String DFA132_specialS =
        "\35\uffff\1\0\47\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\4\uffff"+
            "\2\3\22\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3",
            "\7\36\25\uffff\1\35\6\uffff\1\36\3\uffff\1\34\12\uffff\10\36"+
            "\1\uffff\2\36\2\uffff\3\36\22\uffff\2\36\14\uffff\5\36",
            "\7\62\25\uffff\1\62\1\uffff\1\3\4\uffff\1\62\3\uffff\1\60\12"+
            "\uffff\10\62\1\uffff\2\62\2\uffff\3\62\22\uffff\2\62\14\uffff"+
            "\5\62",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "782:5: ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA132_29 = input.LA(1);

                         
                        int index132_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_Java()) ) {s = 30;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index132_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA136_eotS =
        "\107\uffff";
    static final String DFA136_eofS =
        "\1\3\106\uffff";
    static final String DFA136_minS =
        "\1\162\2\136\31\uffff\1\0\23\uffff\1\0\26\uffff";
    static final String DFA136_maxS =
        "\1\u00bf\2\u00c4\31\uffff\1\0\23\uffff\1\0\26\uffff";
    static final String DFA136_acceptS =
        "\3\uffff\1\3\101\uffff\1\1\1\2";
    static final String DFA136_specialS =
        "\34\uffff\1\0\23\uffff\1\1\26\uffff}>";
    static final String[] DFA136_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\4\uffff"+
            "\2\3\22\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3",
            "\7\3\25\uffff\1\34\6\uffff\1\3\3\uffff\1\3\12\uffff\10\3\1"+
            "\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "\7\3\25\uffff\1\3\1\uffff\1\60\4\uffff\1\3\3\uffff\1\3\12\uffff"+
            "\10\3\1\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "793:5: ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA136_28 = input.LA(1);

                         
                        int index136_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_Java()) ) {s = 69;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index136_28);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA136_48 = input.LA(1);

                         
                        int index136_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_Java()) ) {s = 69;}

                        else if ( (synpred210_Java()) ) {s = 70;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index136_48);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA134_eotS =
        "\106\uffff";
    static final String DFA134_eofS =
        "\1\3\105\uffff";
    static final String DFA134_minS =
        "\1\162\2\136\32\uffff\1\0\23\uffff\1\0\24\uffff";
    static final String DFA134_maxS =
        "\1\u00bf\2\u00c4\32\uffff\1\0\23\uffff\1\0\24\uffff";
    static final String DFA134_acceptS =
        "\3\uffff\1\2\101\uffff\1\1";
    static final String DFA134_specialS =
        "\35\uffff\1\0\23\uffff\1\1\24\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\4\uffff"+
            "\2\3\22\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3",
            "\7\3\25\uffff\1\35\6\uffff\1\3\3\uffff\1\3\12\uffff\10\3\1"+
            "\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "\7\3\25\uffff\1\3\1\uffff\1\61\4\uffff\1\3\3\uffff\1\3\12\uffff"+
            "\10\3\1\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "()+ loopback of 794:6: ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA134_29 = input.LA(1);

                         
                        int index134_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred207_Java()) ) {s = 69;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index134_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA134_49 = input.LA(1);

                         
                        int index134_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred207_Java()) ) {s = 69;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index134_49);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA135_eotS =
        "\62\uffff";
    static final String DFA135_eofS =
        "\1\1\61\uffff";
    static final String DFA135_minS =
        "\1\162\1\uffff\1\136\32\uffff\1\0\24\uffff";
    static final String DFA135_maxS =
        "\1\u00bf\1\uffff\1\u00c4\32\uffff\1\0\24\uffff";
    static final String DFA135_acceptS =
        "\1\uffff\1\2\57\uffff\1\1";
    static final String DFA135_specialS =
        "\35\uffff\1\0\24\uffff}>";
    static final String[] DFA135_transitionS = {
            "\1\1\3\uffff\1\1\3\uffff\2\1\1\2\1\1\1\uffff\1\1\4\uffff\2\1"+
            "\22\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\16\1",
            "",
            "\7\1\25\uffff\1\1\1\uffff\1\35\4\uffff\1\1\3\uffff\1\1\12\uffff"+
            "\10\1\1\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "()+ loopback of 796:8: ( '>' '>' '>' additiveExpression )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA135_29 = input.LA(1);

                         
                        int index135_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_Java()) ) {s = 49;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index135_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA139_eotS =
        "\104\uffff";
    static final String DFA139_eofS =
        "\1\3\103\uffff";
    static final String DFA139_minS =
        "\1\162\2\136\101\uffff";
    static final String DFA139_maxS =
        "\1\u00bf\2\u00c4\101\uffff";
    static final String DFA139_acceptS =
        "\3\uffff\1\2\31\uffff\1\1\46\uffff";
    static final String DFA139_specialS =
        "\104\uffff}>";
    static final String[] DFA139_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\4\3\1\uffff\1\3\4\uffff\2\3\22\uffff"+
            "\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\1\1\1\2\14\3",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\3\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\3\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA139_eot = DFA.unpackEncodedString(DFA139_eotS);
    static final short[] DFA139_eof = DFA.unpackEncodedString(DFA139_eofS);
    static final char[] DFA139_min = DFA.unpackEncodedStringToUnsignedChars(DFA139_minS);
    static final char[] DFA139_max = DFA.unpackEncodedStringToUnsignedChars(DFA139_maxS);
    static final short[] DFA139_accept = DFA.unpackEncodedString(DFA139_acceptS);
    static final short[] DFA139_special = DFA.unpackEncodedString(DFA139_specialS);
    static final short[][] DFA139_transition;

    static {
        int numStates = DFA139_transitionS.length;
        DFA139_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA139_transition[i] = DFA.unpackEncodedString(DFA139_transitionS[i]);
        }
    }

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;
        }
        public String getDescription() {
            return "803:5: ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression )";
        }
    }
    static final String DFA138_eotS =
        "\104\uffff";
    static final String DFA138_eofS =
        "\1\1\103\uffff";
    static final String DFA138_minS =
        "\1\162\21\uffff\2\136\60\uffff";
    static final String DFA138_maxS =
        "\1\u00bf\21\uffff\2\u00c4\60\uffff";
    static final String DFA138_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\46\uffff";
    static final String DFA138_specialS =
        "\104\uffff}>";
    static final String[] DFA138_transitionS = {
            "\1\1\3\uffff\1\1\3\uffff\4\1\1\uffff\1\1\4\uffff\2\1\22\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\1\22\1\23\14\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "()+ loopback of 804:6: ( (i+= '+' | i+= '-' ) multiplicativeExpression )+";
        }
    }
    static final String DFA142_eotS =
        "\130\uffff";
    static final String DFA142_eofS =
        "\1\4\127\uffff";
    static final String DFA142_minS =
        "\1\162\3\136\124\uffff";
    static final String DFA142_maxS =
        "\1\u00bf\3\u00c4\124\uffff";
    static final String DFA142_acceptS =
        "\4\uffff\1\2\30\uffff\1\1\72\uffff";
    static final String DFA142_specialS =
        "\130\uffff}>";
    static final String[] DFA142_transitionS = {
            "\1\4\3\uffff\1\1\3\uffff\4\4\1\uffff\1\4\4\uffff\2\4\22\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\16\uffff\2\4\1\2\3\4\1\3\7\4",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\4\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\4\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\4\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "811:5: ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression )";
        }
    }
    static final String DFA141_eotS =
        "\130\uffff";
    static final String DFA141_eofS =
        "\1\1\127\uffff";
    static final String DFA141_minS =
        "\1\162\23\uffff\2\136\3\uffff\1\136\76\uffff";
    static final String DFA141_maxS =
        "\1\u00bf\23\uffff\2\u00c4\3\uffff\1\u00c4\76\uffff";
    static final String DFA141_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\72\uffff";
    static final String DFA141_specialS =
        "\130\uffff}>";
    static final String[] DFA141_transitionS = {
            "\1\1\3\uffff\1\24\3\uffff\4\1\1\uffff\1\1\4\uffff\2\1\22\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\2\1\1\25\3\1\1\31\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "()+ loopback of 812:6: ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+";
        }
    }
    static final String DFA143_eotS =
        "\24\uffff";
    static final String DFA143_eofS =
        "\24\uffff";
    static final String DFA143_minS =
        "\1\136\23\uffff";
    static final String DFA143_maxS =
        "\1\u00c4\23\uffff";
    static final String DFA143_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\16\uffff";
    static final String DFA143_specialS =
        "\24\uffff}>";
    static final String[] DFA143_transitionS = {
            "\7\5\25\uffff\1\5\6\uffff\1\5\16\uffff\10\5\1\uffff\2\5\2\uffff"+
            "\3\5\22\uffff\1\1\1\2\14\uffff\1\3\1\4\3\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "817:1: unaryExpression : ( '+' unaryExpression -> unaryExpression | '-' unaryExpression -> ^( NEG unaryExpression ) | '++' unaryExpression -> ^( PREINC unaryExpression ) | '--' unaryExpression -> ^( PREDEC unaryExpression ) | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus );";
        }
    }
    static final String DFA147_eotS =
        "\44\uffff";
    static final String DFA147_eofS =
        "\44\uffff";
    static final String DFA147_minS =
        "\1\136\2\uffff\1\136\14\uffff\23\0\1\uffff";
    static final String DFA147_maxS =
        "\1\u00c4\2\uffff\1\u00c4\14\uffff\23\0\1\uffff";
    static final String DFA147_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\36\uffff\1\3";
    static final String DFA147_specialS =
        "\20\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff}>";
    static final String[] DFA147_transitionS = {
            "\7\4\25\uffff\1\4\6\uffff\1\4\16\uffff\10\4\1\uffff\1\4\1\3"+
            "\2\uffff\3\4\42\uffff\1\1\1\2\1\4",
            "",
            "",
            "\1\21\1\33\1\34\1\35\3\32\25\uffff\1\31\6\uffff\1\41\16\uffff"+
            "\10\20\1\uffff\1\42\1\30\2\uffff\1\37\2\36\22\uffff\1\22\1\23"+
            "\14\uffff\1\24\1\25\1\26\1\27\1\40",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_eotS);
    static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_eofS);
    static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_minS);
    static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_maxS);
    static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_acceptS);
    static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_specialS);
    static final short[][] DFA147_transition;

    static {
        int numStates = DFA147_transitionS.length;
        DFA147_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA147_transition[i] = DFA.unpackEncodedString(DFA147_transitionS[i]);
        }
    }

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;
        }
        public String getDescription() {
            return "825:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression -> ^( INV unaryExpression ) | '!' unaryExpression -> ^( NOT unaryExpression ) | castExpression | primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA147_16 = input.LA(1);

                         
                        int index147_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA147_17 = input.LA(1);

                         
                        int index147_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA147_18 = input.LA(1);

                         
                        int index147_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA147_19 = input.LA(1);

                         
                        int index147_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA147_20 = input.LA(1);

                         
                        int index147_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA147_21 = input.LA(1);

                         
                        int index147_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_21);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA147_22 = input.LA(1);

                         
                        int index147_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_22);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA147_23 = input.LA(1);

                         
                        int index147_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_23);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA147_24 = input.LA(1);

                         
                        int index147_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_24);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA147_25 = input.LA(1);

                         
                        int index147_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_25);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA147_26 = input.LA(1);

                         
                        int index147_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_26);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA147_27 = input.LA(1);

                         
                        int index147_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_27);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA147_28 = input.LA(1);

                         
                        int index147_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_28);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA147_29 = input.LA(1);

                         
                        int index147_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_29);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA147_30 = input.LA(1);

                         
                        int index147_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_30);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA147_31 = input.LA(1);

                         
                        int index147_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_31);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA147_32 = input.LA(1);

                         
                        int index147_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_32);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA147_33 = input.LA(1);

                         
                        int index147_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_33);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA147_34 = input.LA(1);

                         
                        int index147_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 147, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA146_eotS =
        "\40\uffff";
    static final String DFA146_eofS =
        "\1\5\37\uffff";
    static final String DFA146_minS =
        "\1\162\37\uffff";
    static final String DFA146_maxS =
        "\1\u00c1\37\uffff";
    static final String DFA146_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\32\uffff";
    static final String DFA146_specialS =
        "\40\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\5\2\uffff\1\1\1\5\3\uffff\4\5\1\uffff\1\5\3\uffff\1\1\2\5"+
            "\22\uffff\1\5\2\uffff\1\5\7\uffff\1\5\16\uffff\16\5\1\3\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "830:3: ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary )";
        }
    }
    static final String DFA144_eotS =
        "\40\uffff";
    static final String DFA144_eofS =
        "\1\1\37\uffff";
    static final String DFA144_minS =
        "\1\162\37\uffff";
    static final String DFA144_maxS =
        "\1\u00c1\37\uffff";
    static final String DFA144_acceptS =
        "\1\uffff\1\2\34\uffff\1\1\1\uffff";
    static final String DFA144_specialS =
        "\40\uffff}>";
    static final String[] DFA144_transitionS = {
            "\1\1\2\uffff\1\36\1\1\3\uffff\4\1\1\uffff\1\1\3\uffff\1\36\2"+
            "\1\22\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\20\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "()+ loopback of 831:4: ( selector )+";
        }
    }
    static final String DFA145_eotS =
        "\36\uffff";
    static final String DFA145_eofS =
        "\1\3\35\uffff";
    static final String DFA145_minS =
        "\1\162\35\uffff";
    static final String DFA145_maxS =
        "\1\u00c1\35\uffff";
    static final String DFA145_acceptS =
        "\1\uffff\1\1\1\2\1\3\32\uffff";
    static final String DFA145_specialS =
        "\36\uffff}>";
    static final String[] DFA145_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\4\3\1\uffff\1\3\4\uffff\2\3\22\uffff"+
            "\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3\1\1\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "832:4: ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) )";
        }
    }
    static final String DFA148_eotS =
        "\27\uffff";
    static final String DFA148_eofS =
        "\27\uffff";
    static final String DFA148_minS =
        "\1\u009a\1\136\17\uffff\2\0\4\uffff";
    static final String DFA148_maxS =
        "\1\u009a\1\u00c4\17\uffff\2\0\4\uffff";
    static final String DFA148_acceptS =
        "\2\uffff\1\3\22\uffff\1\2\1\1";
    static final String DFA148_specialS =
        "\21\uffff\1\0\1\1\4\uffff}>";
    static final String[] DFA148_transitionS = {
            "\1\1",
            "\1\21\6\2\25\uffff\1\2\6\uffff\1\2\16\uffff\10\22\1\uffff\2"+
            "\2\2\uffff\3\2\22\uffff\2\2\14\uffff\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "843:1: castExpression : ( '(' primitiveType ')' unaryExpression -> ^( CAST ^( TYPE primitiveType ) unaryExpression ) | '(' type ')' unaryExpressionNotPlusMinus -> ^( CAST type unaryExpressionNotPlusMinus ) | '(' expression ')' unaryExpressionNotPlusMinus ->);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA148_17 = input.LA(1);

                         
                        int index148_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_Java()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index148_17);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA148_18 = input.LA(1);

                         
                        int index148_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 22;}

                        else if ( (synpred232_Java()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index148_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 148, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA162_eotS =
        "\61\uffff";
    static final String DFA162_eofS =
        "\12\uffff\1\24\46\uffff";
    static final String DFA162_minS =
        "\1\136\10\uffff\1\136\1\162\3\uffff\1\0\2\uffff\3\0\35\uffff";
    static final String DFA162_maxS =
        "\1\u00c4\10\uffff\1\u0097\1\u00c1\3\uffff\1\0\2\uffff\3\0\35\uffff";
    static final String DFA162_acceptS =
        "\1\uffff\1\1\1\2\1\3\7\uffff\1\6\1\7\1\10\1\uffff\1\4\1\5\3\uffff"+
        "\1\11\34\uffff";
    static final String DFA162_specialS =
        "\16\uffff\1\0\2\uffff\1\1\1\2\1\3\35\uffff}>";
    static final String[] DFA162_transitionS = {
            "\1\12\6\3\25\uffff\1\2\6\uffff\1\14\16\uffff\10\13\1\uffff\1"+
            "\15\1\1\2\uffff\3\3\44\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\20\33\uffff\1\16\25\uffff\10\17",
            "\1\24\2\uffff\1\22\1\24\3\uffff\1\21\3\24\1\uffff\1\24\3\uffff"+
            "\1\23\2\24\22\uffff\1\24\1\uffff\2\24\7\uffff\1\24\16\uffff"+
            "\20\24",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA162_eot = DFA.unpackEncodedString(DFA162_eotS);
    static final short[] DFA162_eof = DFA.unpackEncodedString(DFA162_eofS);
    static final char[] DFA162_min = DFA.unpackEncodedStringToUnsignedChars(DFA162_minS);
    static final char[] DFA162_max = DFA.unpackEncodedStringToUnsignedChars(DFA162_maxS);
    static final short[] DFA162_accept = DFA.unpackEncodedString(DFA162_acceptS);
    static final short[] DFA162_special = DFA.unpackEncodedString(DFA162_specialS);
    static final short[][] DFA162_transition;

    static {
        int numStates = DFA162_transitionS.length;
        DFA162_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA162_transition[i] = DFA.unpackEncodedString(DFA162_transitionS[i]);
        }
    }

    class DFA162 extends DFA {

        public DFA162(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = DFA162_eot;
            this.eof = DFA162_eof;
            this.min = DFA162_min;
            this.max = DFA162_max;
            this.accept = DFA162_accept;
            this.special = DFA162_special;
            this.transition = DFA162_transition;
        }
        public String getDescription() {
            return "849:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | literal | 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) ) | 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) ) | type '.' 'class' -> ^( GETCLASS type ) | 'void' '.' 'class' -> ^( GETCLASS ^( TYPE VOID ) ) | 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) ) | Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA162_14 = input.LA(1);

                         
                        int index162_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 15;}

                        else if ( (synpred249_Java()) ) {s = 16;}

                         
                        input.seek(index162_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA162_17 = input.LA(1);

                         
                        int index162_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_Java()) ) {s = 11;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index162_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA162_18 = input.LA(1);

                         
                        int index162_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_Java()) ) {s = 11;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index162_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA162_19 = input.LA(1);

                         
                        int index162_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_Java()) ) {s = 11;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index162_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 162, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA153_eotS =
        "\26\uffff";
    static final String DFA153_eofS =
        "\26\uffff";
    static final String DFA153_minS =
        "\1\u0083\1\136\24\uffff";
    static final String DFA153_maxS =
        "\1\u0083\1\u00c4\24\uffff";
    static final String DFA153_acceptS =
        "\2\uffff\1\2\1\1\22\uffff";
    static final String DFA153_specialS =
        "\26\uffff}>";
    static final String[] DFA153_transitionS = {
            "\1\1",
            "\7\3\25\uffff\1\3\6\uffff\1\3\2\uffff\1\2\13\uffff\10\3\1\uffff"+
            "\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "854:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) )";
        }
    }
    static final String DFA150_eotS =
        "\65\uffff";
    static final String DFA150_eofS =
        "\1\2\64\uffff";
    static final String DFA150_minS =
        "\1\162\1\136\37\uffff\23\0\1\uffff";
    static final String DFA150_maxS =
        "\1\u00c1\1\u00c4\37\uffff\23\0\1\uffff";
    static final String DFA150_acceptS =
        "\2\uffff\1\2\61\uffff\1\1";
    static final String DFA150_specialS =
        "\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff}>";
    static final String[] DFA150_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\1\1\2\2\22"+
            "\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\20\2",
            "\1\60\1\52\1\53\1\54\3\51\25\uffff\1\50\6\uffff\1\62\2\uffff"+
            "\1\2\13\uffff\10\61\1\uffff\1\63\1\47\2\uffff\1\56\2\55\22\uffff"+
            "\1\41\1\42\14\uffff\1\43\1\44\1\45\1\46\1\57",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_eotS);
    static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_eofS);
    static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_minS);
    static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_maxS);
    static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_acceptS);
    static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_specialS);
    static final short[][] DFA150_transition;

    static {
        int numStates = DFA150_transitionS.length;
        DFA150_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA150_transition[i] = DFA.unpackEncodedString(DFA150_transitionS[i]);
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;
        }
        public String getDescription() {
            return "()+ loopback of 855:7: ( '[' expression ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA150_33 = input.LA(1);

                         
                        int index150_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_33);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA150_34 = input.LA(1);

                         
                        int index150_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_34);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA150_35 = input.LA(1);

                         
                        int index150_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_35);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA150_36 = input.LA(1);

                         
                        int index150_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_36);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA150_37 = input.LA(1);

                         
                        int index150_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_37);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA150_38 = input.LA(1);

                         
                        int index150_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_38);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA150_39 = input.LA(1);

                         
                        int index150_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_39);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA150_40 = input.LA(1);

                         
                        int index150_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_40);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA150_41 = input.LA(1);

                         
                        int index150_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_41);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA150_42 = input.LA(1);

                         
                        int index150_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_42);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA150_43 = input.LA(1);

                         
                        int index150_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_43);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA150_44 = input.LA(1);

                         
                        int index150_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_44);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA150_45 = input.LA(1);

                         
                        int index150_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_45);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA150_46 = input.LA(1);

                         
                        int index150_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_46);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA150_47 = input.LA(1);

                         
                        int index150_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_47);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA150_48 = input.LA(1);

                         
                        int index150_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_48);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA150_49 = input.LA(1);

                         
                        int index150_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_49);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA150_50 = input.LA(1);

                         
                        int index150_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_50);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA150_51 = input.LA(1);

                         
                        int index150_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 150, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA151_eotS =
        "\64\uffff";
    static final String DFA151_eofS =
        "\1\1\63\uffff";
    static final String DFA151_minS =
        "\1\162\1\uffff\1\136\61\uffff";
    static final String DFA151_maxS =
        "\1\u00c1\1\uffff\1\u00c4\61\uffff";
    static final String DFA151_acceptS =
        "\1\uffff\1\2\36\uffff\1\1\23\uffff";
    static final String DFA151_specialS =
        "\64\uffff}>";
    static final String[] DFA151_transitionS = {
            "\1\1\2\uffff\2\1\3\uffff\4\1\1\uffff\1\1\3\uffff\1\2\2\1\22"+
            "\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\20\1",
            "",
            "\7\1\25\uffff\1\1\6\uffff\1\1\2\uffff\1\40\13\uffff\10\1\1"+
            "\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA151_eot = DFA.unpackEncodedString(DFA151_eotS);
    static final short[] DFA151_eof = DFA.unpackEncodedString(DFA151_eofS);
    static final char[] DFA151_min = DFA.unpackEncodedStringToUnsignedChars(DFA151_minS);
    static final char[] DFA151_max = DFA.unpackEncodedStringToUnsignedChars(DFA151_maxS);
    static final short[] DFA151_accept = DFA.unpackEncodedString(DFA151_acceptS);
    static final short[] DFA151_special = DFA.unpackEncodedString(DFA151_specialS);
    static final short[][] DFA151_transition;

    static {
        int numStates = DFA151_transitionS.length;
        DFA151_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA151_transition[i] = DFA.unpackEncodedString(DFA151_transitionS[i]);
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;
        }
        public String getDescription() {
            return "()* loopback of 855:29: ( '[' ']' )*";
        }
    }
    static final String DFA159_eotS =
        "\27\uffff";
    static final String DFA159_eofS =
        "\27\uffff";
    static final String DFA159_minS =
        "\1\u0083\1\136\25\uffff";
    static final String DFA159_maxS =
        "\1\u009a\1\u00c4\25\uffff";
    static final String DFA159_acceptS =
        "\2\uffff\1\3\1\2\1\1\22\uffff";
    static final String DFA159_specialS =
        "\27\uffff}>";
    static final String[] DFA159_transitionS = {
            "\1\1\26\uffff\1\2",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\3\13\uffff\10\4\1\uffff"+
            "\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "859:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) )";
        }
    }
    static final String DFA156_eotS =
        "\65\uffff";
    static final String DFA156_eofS =
        "\1\2\64\uffff";
    static final String DFA156_minS =
        "\1\162\1\136\37\uffff\23\0\1\uffff";
    static final String DFA156_maxS =
        "\1\u00c1\1\u00c4\37\uffff\23\0\1\uffff";
    static final String DFA156_acceptS =
        "\2\uffff\1\2\61\uffff\1\1";
    static final String DFA156_specialS =
        "\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff}>";
    static final String[] DFA156_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\1\1\2\2\22"+
            "\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\20\2",
            "\1\60\1\52\1\53\1\54\3\51\25\uffff\1\50\6\uffff\1\62\2\uffff"+
            "\1\2\13\uffff\10\61\1\uffff\1\63\1\47\2\uffff\1\56\2\55\22\uffff"+
            "\1\41\1\42\14\uffff\1\43\1\44\1\45\1\46\1\57",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "()+ loopback of 860:7: ( '[' expression ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_33 = input.LA(1);

                         
                        int index156_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_33);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA156_34 = input.LA(1);

                         
                        int index156_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_34);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA156_35 = input.LA(1);

                         
                        int index156_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_35);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA156_36 = input.LA(1);

                         
                        int index156_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_36);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA156_37 = input.LA(1);

                         
                        int index156_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_37);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA156_38 = input.LA(1);

                         
                        int index156_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_38);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA156_39 = input.LA(1);

                         
                        int index156_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_39);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA156_40 = input.LA(1);

                         
                        int index156_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_40);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA156_41 = input.LA(1);

                         
                        int index156_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_41);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA156_42 = input.LA(1);

                         
                        int index156_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_42);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA156_43 = input.LA(1);

                         
                        int index156_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_43);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA156_44 = input.LA(1);

                         
                        int index156_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_44);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA156_45 = input.LA(1);

                         
                        int index156_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_45);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA156_46 = input.LA(1);

                         
                        int index156_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_46);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA156_47 = input.LA(1);

                         
                        int index156_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_47);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA156_48 = input.LA(1);

                         
                        int index156_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_48);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA156_49 = input.LA(1);

                         
                        int index156_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_49);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA156_50 = input.LA(1);

                         
                        int index156_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_50);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA156_51 = input.LA(1);

                         
                        int index156_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index156_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA157_eotS =
        "\64\uffff";
    static final String DFA157_eofS =
        "\1\1\63\uffff";
    static final String DFA157_minS =
        "\1\162\1\uffff\1\136\61\uffff";
    static final String DFA157_maxS =
        "\1\u00c1\1\uffff\1\u00c4\61\uffff";
    static final String DFA157_acceptS =
        "\1\uffff\1\2\36\uffff\1\1\23\uffff";
    static final String DFA157_specialS =
        "\64\uffff}>";
    static final String[] DFA157_transitionS = {
            "\1\1\2\uffff\2\1\3\uffff\4\1\1\uffff\1\1\3\uffff\1\2\2\1\22"+
            "\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\20\1",
            "",
            "\7\1\25\uffff\1\1\6\uffff\1\1\2\uffff\1\40\13\uffff\10\1\1"+
            "\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "()* loopback of 860:29: ( '[' ']' )*";
        }
    }
    static final String DFA160_eotS =
        "\41\uffff";
    static final String DFA160_eofS =
        "\1\2\40\uffff";
    static final String DFA160_minS =
        "\1\162\40\uffff";
    static final String DFA160_maxS =
        "\1\u00c1\40\uffff";
    static final String DFA160_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA160_specialS =
        "\41\uffff}>";
    static final String[] DFA160_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_eotS);
    static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_eofS);
    static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_minS);
    static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_maxS);
    static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_acceptS);
    static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_specialS);
    static final short[][] DFA160_transition;

    static {
        int numStates = DFA160_transitionS.length;
        DFA160_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA160_transition[i] = DFA.unpackEncodedString(DFA160_transitionS[i]);
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = DFA160_eot;
            this.eof = DFA160_eof;
            this.min = DFA160_min;
            this.max = DFA160_max;
            this.accept = DFA160_accept;
            this.special = DFA160_special;
            this.transition = DFA160_transition;
        }
        public String getDescription() {
            return "867:3: ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) )";
        }
    }
    static final String DFA161_eotS =
        "\41\uffff";
    static final String DFA161_eofS =
        "\1\2\40\uffff";
    static final String DFA161_minS =
        "\1\162\40\uffff";
    static final String DFA161_maxS =
        "\1\u00c1\40\uffff";
    static final String DFA161_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA161_specialS =
        "\41\uffff}>";
    static final String[] DFA161_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "872:6: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) )";
        }
    }
    static final String DFA163_eotS =
        "\41\uffff";
    static final String DFA163_eofS =
        "\1\2\40\uffff";
    static final String DFA163_minS =
        "\1\162\40\uffff";
    static final String DFA163_maxS =
        "\1\u00c1\40\uffff";
    static final String DFA163_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA163_specialS =
        "\41\uffff}>";
    static final String[] DFA163_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\1\1\2\3\uffff\3\2\22\uffff\1"+
            "\2\2\uffff\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA163_eot = DFA.unpackEncodedString(DFA163_eotS);
    static final short[] DFA163_eof = DFA.unpackEncodedString(DFA163_eofS);
    static final char[] DFA163_min = DFA.unpackEncodedStringToUnsignedChars(DFA163_minS);
    static final char[] DFA163_max = DFA.unpackEncodedStringToUnsignedChars(DFA163_maxS);
    static final short[] DFA163_accept = DFA.unpackEncodedString(DFA163_acceptS);
    static final short[] DFA163_special = DFA.unpackEncodedString(DFA163_specialS);
    static final short[][] DFA163_transition;

    static {
        int numStates = DFA163_transitionS.length;
        DFA163_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA163_transition[i] = DFA.unpackEncodedString(DFA163_transitionS[i]);
        }
    }

    class DFA163 extends DFA {

        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = DFA163_eot;
            this.eof = DFA163_eof;
            this.min = DFA163_min;
            this.max = DFA163_max;
            this.accept = DFA163_accept;
            this.special = DFA163_special;
            this.transition = DFA163_transition;
        }
        public String getDescription() {
            return "883:14: ( classBody )?";
        }
    }
    static final String DFA165_eotS =
        "\41\uffff";
    static final String DFA165_eofS =
        "\1\2\40\uffff";
    static final String DFA165_minS =
        "\1\162\40\uffff";
    static final String DFA165_maxS =
        "\1\u00c1\40\uffff";
    static final String DFA165_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA165_specialS =
        "\41\uffff}>";
    static final String[] DFA165_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "901:21: ( arguments )?";
        }
    }
    static final String DFA168_eotS =
        "\41\uffff";
    static final String DFA168_eofS =
        "\1\2\40\uffff";
    static final String DFA168_minS =
        "\1\162\40\uffff";
    static final String DFA168_maxS =
        "\1\u00c1\40\uffff";
    static final String DFA168_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA168_specialS =
        "\41\uffff}>";
    static final String[] DFA168_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "909:3: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) )";
        }
    }
    static final String DFA170_eotS =
        "\25\uffff";
    static final String DFA170_eofS =
        "\25\uffff";
    static final String DFA170_minS =
        "\1\136\24\uffff";
    static final String DFA170_maxS =
        "\1\u00c4\24\uffff";
    static final String DFA170_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA170_specialS =
        "\25\uffff}>";
    static final String[] DFA170_transitionS = {
            "\7\1\25\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff\2\1\1\24"+
            "\1\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_eotS);
    static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_eofS);
    static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_minS);
    static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_maxS);
    static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_acceptS);
    static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_specialS);
    static final short[][] DFA170_transition;

    static {
        int numStates = DFA170_transitionS.length;
        DFA170_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA170_transition[i] = DFA.unpackEncodedString(DFA170_transitionS[i]);
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = DFA170_eot;
            this.eof = DFA170_eof;
            this.min = DFA170_min;
            this.max = DFA170_max;
            this.accept = DFA170_accept;
            this.special = DFA170_special;
            this.transition = DFA170_transition;
        }
        public String getDescription() {
            return "917:9: ( expressionList )?";
        }
    }
    static final String DFA208_eotS =
        "\26\uffff";
    static final String DFA208_eofS =
        "\26\uffff";
    static final String DFA208_minS =
        "\1\u0083\1\136\24\uffff";
    static final String DFA208_maxS =
        "\1\u0083\1\u00c4\24\uffff";
    static final String DFA208_acceptS =
        "\2\uffff\1\2\1\1\22\uffff";
    static final String DFA208_specialS =
        "\26\uffff}>";
    static final String[] DFA208_transitionS = {
            "\1\1",
            "\7\3\25\uffff\1\3\6\uffff\1\3\2\uffff\1\2\13\uffff\10\3\1\uffff"+
            "\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA208_eot = DFA.unpackEncodedString(DFA208_eotS);
    static final short[] DFA208_eof = DFA.unpackEncodedString(DFA208_eofS);
    static final char[] DFA208_min = DFA.unpackEncodedStringToUnsignedChars(DFA208_minS);
    static final char[] DFA208_max = DFA.unpackEncodedStringToUnsignedChars(DFA208_maxS);
    static final short[] DFA208_accept = DFA.unpackEncodedString(DFA208_acceptS);
    static final short[] DFA208_special = DFA.unpackEncodedString(DFA208_specialS);
    static final short[][] DFA208_transition;

    static {
        int numStates = DFA208_transitionS.length;
        DFA208_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA208_transition[i] = DFA.unpackEncodedString(DFA208_transitionS[i]);
        }
    }

    class DFA208 extends DFA {

        public DFA208(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 208;
            this.eot = DFA208_eot;
            this.eof = DFA208_eof;
            this.min = DFA208_min;
            this.max = DFA208_max;
            this.accept = DFA208_accept;
            this.special = DFA208_special;
            this.transition = DFA208_transition;
        }
        public String getDescription() {
            return "854:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer )";
        }
    }
    static final String DFA205_eotS =
        "\27\uffff";
    static final String DFA205_eofS =
        "\1\2\26\uffff";
    static final String DFA205_minS =
        "\1\u0083\1\136\25\uffff";
    static final String DFA205_maxS =
        "\1\u0083\1\u00c4\25\uffff";
    static final String DFA205_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\22\uffff";
    static final String DFA205_specialS =
        "\27\uffff}>";
    static final String[] DFA205_transitionS = {
            "\1\1",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\2\13\uffff\10\4\1\uffff"+
            "\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA205_eot = DFA.unpackEncodedString(DFA205_eotS);
    static final short[] DFA205_eof = DFA.unpackEncodedString(DFA205_eofS);
    static final char[] DFA205_min = DFA.unpackEncodedStringToUnsignedChars(DFA205_minS);
    static final char[] DFA205_max = DFA.unpackEncodedStringToUnsignedChars(DFA205_maxS);
    static final short[] DFA205_accept = DFA.unpackEncodedString(DFA205_acceptS);
    static final short[] DFA205_special = DFA.unpackEncodedString(DFA205_specialS);
    static final short[][] DFA205_transition;

    static {
        int numStates = DFA205_transitionS.length;
        DFA205_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA205_transition[i] = DFA.unpackEncodedString(DFA205_transitionS[i]);
        }
    }

    class DFA205 extends DFA {

        public DFA205(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 205;
            this.eot = DFA205_eot;
            this.eof = DFA205_eof;
            this.min = DFA205_min;
            this.max = DFA205_max;
            this.accept = DFA205_accept;
            this.special = DFA205_special;
            this.transition = DFA205_transition;
        }
        public String getDescription() {
            return "()+ loopback of 855:7: ( '[' expression ']' )+";
        }
    }
    static final String DFA217_eotS =
        "\27\uffff";
    static final String DFA217_eofS =
        "\27\uffff";
    static final String DFA217_minS =
        "\1\u0083\1\136\25\uffff";
    static final String DFA217_maxS =
        "\1\u009a\1\u00c4\25\uffff";
    static final String DFA217_acceptS =
        "\2\uffff\1\3\1\2\1\1\22\uffff";
    static final String DFA217_specialS =
        "\27\uffff}>";
    static final String[] DFA217_transitionS = {
            "\1\1\26\uffff\1\2",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\3\13\uffff\10\4\1\uffff"+
            "\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA217_eot = DFA.unpackEncodedString(DFA217_eotS);
    static final short[] DFA217_eof = DFA.unpackEncodedString(DFA217_eofS);
    static final char[] DFA217_min = DFA.unpackEncodedStringToUnsignedChars(DFA217_minS);
    static final char[] DFA217_max = DFA.unpackEncodedStringToUnsignedChars(DFA217_maxS);
    static final short[] DFA217_accept = DFA.unpackEncodedString(DFA217_acceptS);
    static final short[] DFA217_special = DFA.unpackEncodedString(DFA217_specialS);
    static final short[][] DFA217_transition;

    static {
        int numStates = DFA217_transitionS.length;
        DFA217_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA217_transition[i] = DFA.unpackEncodedString(DFA217_transitionS[i]);
        }
    }

    class DFA217 extends DFA {

        public DFA217(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 217;
            this.eot = DFA217_eot;
            this.eof = DFA217_eof;
            this.min = DFA217_min;
            this.max = DFA217_max;
            this.accept = DFA217_accept;
            this.special = DFA217_special;
            this.transition = DFA217_transition;
        }
        public String getDescription() {
            return "859:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest )";
        }
    }
    static final String DFA214_eotS =
        "\27\uffff";
    static final String DFA214_eofS =
        "\1\2\26\uffff";
    static final String DFA214_minS =
        "\1\u0083\1\136\25\uffff";
    static final String DFA214_maxS =
        "\1\u0083\1\u00c4\25\uffff";
    static final String DFA214_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\22\uffff";
    static final String DFA214_specialS =
        "\27\uffff}>";
    static final String[] DFA214_transitionS = {
            "\1\1",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\2\13\uffff\10\4\1\uffff"+
            "\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA214_eot = DFA.unpackEncodedString(DFA214_eotS);
    static final short[] DFA214_eof = DFA.unpackEncodedString(DFA214_eofS);
    static final char[] DFA214_min = DFA.unpackEncodedStringToUnsignedChars(DFA214_minS);
    static final char[] DFA214_max = DFA.unpackEncodedStringToUnsignedChars(DFA214_maxS);
    static final short[] DFA214_accept = DFA.unpackEncodedString(DFA214_acceptS);
    static final short[] DFA214_special = DFA.unpackEncodedString(DFA214_specialS);
    static final short[][] DFA214_transition;

    static {
        int numStates = DFA214_transitionS.length;
        DFA214_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA214_transition[i] = DFA.unpackEncodedString(DFA214_transitionS[i]);
        }
    }

    class DFA214 extends DFA {

        public DFA214(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 214;
            this.eot = DFA214_eot;
            this.eof = DFA214_eof;
            this.min = DFA214_min;
            this.max = DFA214_max;
            this.accept = DFA214_accept;
            this.special = DFA214_special;
            this.transition = DFA214_transition;
        }
        public String getDescription() {
            return "()+ loopback of 860:7: ( '[' expression ']' )+";
        }
    }
 

    public static final BitSet FOLLOW_annotations_in_compilationUnit440 = new BitSet(new long[]{0x0000000000000200L,0x009E000000000000L,0x000000010000FFC1L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit443 = new BitSet(new long[]{0x0000000000000200L,0x009E000000000000L,0x000000010000FFC1L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit446 = new BitSet(new long[]{0x0000000000000200L,0x009E000000000000L,0x000000010000FFC1L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit449 = new BitSet(new long[]{0x0000000000000202L,0x009E000000000000L,0x000000010000FFC1L});
    public static final BitSet FOLLOW_113_in_packageDeclaration483 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_qualifiedName_in_packageDeclaration485 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_packageDeclaration487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_importDeclaration507 = new BitSet(new long[]{0x0000000000000000L,0x0010000040000000L});
    public static final BitSet FOLLOW_116_in_importDeclaration509 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration514 = new BitSet(new long[]{0x0000000000000000L,0x0024000000000000L});
    public static final BitSet FOLLOW_117_in_importDeclaration517 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration521 = new BitSet(new long[]{0x0000000000000000L,0x0024000000000000L});
    public static final BitSet FOLLOW_117_in_importDeclaration526 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_importDeclaration530 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_importDeclaration534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_typeDeclaration566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_classOrInterfaceDeclaration578 = new BitSet(new long[]{0x0000000000000200L,0x0090000000000000L,0x000000010000FFC1L});
    public static final BitSet FOLLOW_classDeclaration_in_classOrInterfaceDeclaration585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classOrInterfaceDeclaration607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_classDeclaration662 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_classDeclaration664 = new BitSet(new long[]{0x0000000000000000L,0x4700000000000000L});
    public static final BitSet FOLLOW_typeParameters_in_classDeclaration667 = new BitSet(new long[]{0x0000000000000000L,0x4700000000000000L});
    public static final BitSet FOLLOW_120_in_classDeclaration680 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_type_in_classDeclaration682 = new BitSet(new long[]{0x0000000000000000L,0x4700000000000000L});
    public static final BitSet FOLLOW_121_in_classDeclaration696 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_typeList_in_classDeclaration698 = new BitSet(new long[]{0x0000000000000000L,0x4700000000000000L});
    public static final BitSet FOLLOW_classBody_in_classDeclaration710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_typeParameters747 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters751 = new BitSet(new long[]{0x0000000000000000L,0x1800000000000000L});
    public static final BitSet FOLLOW_123_in_typeParameters754 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters758 = new BitSet(new long[]{0x0000000000000000L,0x1800000000000000L});
    public static final BitSet FOLLOW_124_in_typeParameters762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeParameter779 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_typeParameter782 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_bound_in_typeParameter784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_bound816 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_bound819 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_type_in_bound823 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_ENUM_in_enumDeclaration842 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_enumDeclaration844 = new BitSet(new long[]{0x0000000000000000L,0x4200000000000000L});
    public static final BitSet FOLLOW_121_in_enumDeclaration847 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_typeList_in_enumDeclaration849 = new BitSet(new long[]{0x0000000000000000L,0x4200000000000000L});
    public static final BitSet FOLLOW_enumBody_in_enumDeclaration853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_enumBody865 = new BitSet(new long[]{0x0000000000000000L,0x8804000040000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_enumConstants_in_enumBody867 = new BitSet(new long[]{0x0000000000000000L,0x8804000000000000L});
    public static final BitSet FOLLOW_123_in_enumBody870 = new BitSet(new long[]{0x0000000000000000L,0x8004000000000000L});
    public static final BitSet FOLLOW_enumBodyDeclarations_in_enumBody873 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_enumBody876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants887 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_enumConstants890 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants892 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_annotations_in_enumConstant906 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_enumConstant909 = new BitSet(new long[]{0x0000000000000002L,0x4700000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_arguments_in_enumConstant912 = new BitSet(new long[]{0x0000000000000002L,0x4700000000000000L});
    public static final BitSet FOLLOW_classBody_in_enumConstant917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_enumBodyDeclarations949 = new BitSet(new long[]{0x0000000000000202L,0x4494000040000000L,0x0000000100FFFFC3L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_enumBodyDeclarations952 = new BitSet(new long[]{0x0000000000000202L,0x4494000040000000L,0x0000000100FFFFC3L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_normalInterfaceDeclaration983 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_normalInterfaceDeclaration985 = new BitSet(new long[]{0x0000000000000000L,0x4500000000000000L});
    public static final BitSet FOLLOW_typeParameters_in_normalInterfaceDeclaration987 = new BitSet(new long[]{0x0000000000000000L,0x4500000000000000L});
    public static final BitSet FOLLOW_120_in_normalInterfaceDeclaration991 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_typeList_in_normalInterfaceDeclaration993 = new BitSet(new long[]{0x0000000000000000L,0x4500000000000000L});
    public static final BitSet FOLLOW_interfaceBody_in_normalInterfaceDeclaration997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList1028 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_typeList1031 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_type_in_typeList1034 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_126_in_classBody1048 = new BitSet(new long[]{0x0000000000000200L,0xC494000040000000L,0x0000000100FFFFC3L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_classBody1051 = new BitSet(new long[]{0x0000000000000200L,0xC494000040000000L,0x0000000100FFFFC3L});
    public static final BitSet FOLLOW_127_in_classBody1054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_interfaceBody1067 = new BitSet(new long[]{0x0000000000000200L,0xC494000040000000L,0x0000000100FFFFC3L});
    public static final BitSet FOLLOW_interfaceBodyDeclaration_in_interfaceBody1070 = new BitSet(new long[]{0x0000000000000200L,0xC494000040000000L,0x0000000100FFFFC3L});
    public static final BitSet FOLLOW_127_in_interfaceBody1073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_classBodyDeclaration1085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_classBodyDeclaration1091 = new BitSet(new long[]{0x0000000000000000L,0x4010000000000000L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration1094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_classBodyDeclaration1099 = new BitSet(new long[]{0x0000000000000200L,0x4494000040000000L,0x0000000100FFFFC3L});
    public static final BitSet FOLLOW_genericMethodOrConstructorDecl_in_classBodyDeclaration1109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_classBodyDeclaration1135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_classBodyDeclaration1161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_classBodyDeclaration1186 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_classBodyDeclaration1188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_classBodyDeclaration1190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_classBodyDeclaration1224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_classBodyDeclaration1226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classBodyDeclaration1259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_classBodyDeclaration1284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_genericMethodOrConstructorDecl1318 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000FF0002L});
    public static final BitSet FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl1320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericMethodOrConstructorRest1332 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_genericMethodOrConstructorRest1350 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest1374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_methodDeclaration1397 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_methodDeclaration1399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_methodDeclaration1401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_fieldDeclaration1421 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_fieldDeclaration1423 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_fieldDeclaration1425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_interfaceBodyDeclaration1444 = new BitSet(new long[]{0x0000000000000200L,0x4494000040000000L,0x0000000100FFFFC3L});
    public static final BitSet FOLLOW_constantDeclaration_in_interfaceBodyDeclaration1451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceBodyDeclaration1473 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceBodyDeclaration1475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceGenericMethodDecl_in_interfaceBodyDeclaration1504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_interfaceBodyDeclaration1526 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceBodyDeclaration1528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_interfaceBodyDeclaration1561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_interfaceBodyDeclaration1584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_interfaceBodyDeclaration1609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaratorRest1623 = new BitSet(new long[]{0x0000000000000000L,0x4014000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_methodDeclaratorRest1635 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_typeList_in_methodDeclaratorRest1637 = new BitSet(new long[]{0x0000000000000000L,0x4014000000000000L});
    public static final BitSet FOLLOW_methodBody_in_methodDeclaratorRest1653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_methodDeclaratorRest1681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidMethodDeclaratorRest1715 = new BitSet(new long[]{0x0000000000000000L,0x4014000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_voidMethodDeclaratorRest1718 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_typeList_in_voidMethodDeclaratorRest1720 = new BitSet(new long[]{0x0000000000000000L,0x4014000000000000L});
    public static final BitSet FOLLOW_methodBody_in_voidMethodDeclaratorRest1736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_voidMethodDeclaratorRest1764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest1798 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_interfaceMethodDeclaratorRest1801 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_typeList_in_interfaceMethodDeclaratorRest1803 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_interfaceMethodDeclaratorRest1807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceGenericMethodDecl1831 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000FF0002L});
    public static final BitSet FOLLOW_type_in_interfaceGenericMethodDecl1837 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceGenericMethodDecl1839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl1841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_interfaceGenericMethodDecl1857 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceGenericMethodDecl1859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl1861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest1891 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_voidInterfaceMethodDeclaratorRest1894 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_typeList_in_voidInterfaceMethodDeclaratorRest1896 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_voidInterfaceMethodDeclaratorRest1900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_constructorDeclaratorRest1924 = new BitSet(new long[]{0x0000000000000000L,0x4010000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_constructorDeclaratorRest1927 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_typeList_in_constructorDeclaratorRest1929 = new BitSet(new long[]{0x0000000000000000L,0x4010000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_methodBody_in_constructorDeclaratorRest1933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators1962 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_variableDeclarators1965 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators1969 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclarator1988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_variableDeclaratorRest_in_variableDeclarator1990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_variableDeclaratorRest2012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_variableDeclaratorRest2014 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_133_in_variableDeclaratorRest2019 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0000E6FF0002L,0x000000000000001FL});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest2021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_variableDeclaratorRest2036 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0000E6FF0002L,0x000000000000001FL});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest2038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_constantDeclaration2056 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_constantDeclarators_in_constantDeclaration2058 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_constantDeclaration2060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_constantDeclarator2077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclarator2079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclarator_in_constantDeclarators2102 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_constantDeclarators2105 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_constantDeclarator_in_constantDeclarators2109 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_131_in_constantDeclaratorRest2130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_constantDeclaratorRest2132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_133_in_constantDeclaratorRest2136 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0000E6FF0002L,0x000000000000001FL});
    public static final BitSet FOLLOW_variableInitializer_in_constantDeclaratorRest2138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaratorId2157 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_variableDeclaratorId2160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_variableDeclaratorId2162 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer2175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer2185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_arrayInitializer2197 = new BitSet(new long[]{0x0000000000000000L,0xC400001FC0000000L,0x000C0000E6FF0002L,0x000000000000001FL});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer2200 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_123_in_arrayInitializer2203 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0000E6FF0002L,0x000000000000001FL});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer2205 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_123_in_arrayInitializer2210 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_arrayInitializer2217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_modifier2242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_modifier2252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_modifier2262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_modifier2272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_modifier2282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_modifier2292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_modifier2302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_modifier2312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_modifier2322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_modifier2332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_modifier2342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_modifier2352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_packageOrTypeName2366 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_packageOrTypeName2369 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_packageOrTypeName2371 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_Identifier_in_enumConstantName2389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeName2405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_packageOrTypeName_in_typeName2415 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_typeName2417 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_typeName2419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_refComponent_in_type2432 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_117_in_type2435 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_refComponent_in_type2439 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_type2444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_type2446 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_primitiveType_in_type2468 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_type2471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_type2473 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_Identifier_in_refComponent2502 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_typeArguments_in_refComponent2505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_primitiveType0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_variableModifier2605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_variableModifier2615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_typeArguments2626 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000001FF0000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments2630 = new BitSet(new long[]{0x0000000000000000L,0x1800000000000000L});
    public static final BitSet FOLLOW_123_in_typeArguments2633 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000001FF0000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments2637 = new BitSet(new long[]{0x0000000000000000L,0x1800000000000000L});
    public static final BitSet FOLLOW_124_in_typeArguments2641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument2659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_typeArgument2664 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_120_in_typeArgument2673 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_type_in_typeArgument2675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_typeArgument2706 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_type_in_typeArgument2708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList2748 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_qualifiedNameList2751 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList2754 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_154_in_formalParameters2768 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000108FF0400L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameters2770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_formalParameters2773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameterDecls2790 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls2793 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDecls2805 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_formalParameterDecls2808 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameterDecls2810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_formalParameterDecls2837 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDecls2839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_methodBody2875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName2893 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_qualifiedName2896 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName2900 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_integerLiteral_in_literal2923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FloatingPointLiteral_in_literal2941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CharacterLiteral_in_literal2959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal2977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal2995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_literal3013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_integerLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_booleanLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotations3101 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_160_in_annotation3113 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_annotationName_in_annotation3115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_154_in_annotation3118 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001EEFF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_elementValuePairs_in_annotation3120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_annotation3123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationName3145 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_annotationName3148 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_annotationName3150 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs3164 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_elementValuePairs3167 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs3169 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_Identifier_in_elementValuePair3184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_elementValuePair3186 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair3190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue3202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue3209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue3216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_elementValueArrayInitializer3228 = new BitSet(new long[]{0x0000000000000000L,0xC400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer3231 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_123_in_elementValueArrayInitializer3234 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer3236 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_127_in_elementValueArrayInitializer3243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_annotationTypeDeclaration3255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_annotationTypeDeclaration3257 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_annotationTypeDeclaration3259 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_annotationTypeBody_in_annotationTypeDeclaration3261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_annotationTypeBody3273 = new BitSet(new long[]{0x0000000000000200L,0xC494000040000000L,0x0000000100FFFFC3L});
    public static final BitSet FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody3276 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_annotationTypeBody3280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3293 = new BitSet(new long[]{0x0000000000000202L,0x4494000040000000L,0x0000000100FFFFC3L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3297 = new BitSet(new long[]{0x0000000000000202L,0x4494000040000000L,0x0000000100FFFFC3L});
    public static final BitSet FOLLOW_modifier_in_annotationTypeElementDeclaration3312 = new BitSet(new long[]{0x0000000000000200L,0x4494000040000000L,0x0000000100FFFFC3L});
    public static final BitSet FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration3316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_annotationTypeElementRest3328 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest3330 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_annotationTypeElementRest3332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_annotationTypeElementRest3339 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_annotationTypeElementRest3341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_annotationTypeElementRest3349 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_annotationTypeElementRest3351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_annotationTypeElementRest3359 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_annotationTypeElementRest3361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest3369 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_annotationTypeElementRest3371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest3384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest3391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationMethodRest3404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_154_in_annotationMethodRest3406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_annotationMethodRest3408 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_defaultValue_in_annotationMethodRest3411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarators_in_annotationConstantRest3428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_defaultValue3443 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_elementValue_in_defaultValue3445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_block3459 = new BitSet(new long[]{0x0000000000000200L,0xC494001FC0000000L,0x000CFBD5E6FFFFC7L,0x000000000000001FL});
    public static final BitSet FOLLOW_blockStatement_in_block3461 = new BitSet(new long[]{0x0000000000000200L,0xC494001FC0000000L,0x000CFBD5E6FFFFC7L,0x000000000000001FL});
    public static final BitSet FOLLOW_127_in_block3464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_blockStatement3485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_blockStatement3490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement3498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_localVariableDeclaration3510 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration3513 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_localVariableDeclaration3515 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_localVariableDeclaration3517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement3546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_statement3556 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0000E6FF0002L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_statement3558 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_163_in_statement3561 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0000E6FF0002L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_statement3563 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_statement3567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_statement3589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_parExpression_in_statement3591 = new BitSet(new long[]{0x0000000000000200L,0xC494001FC0000000L,0x000CFBD5E6FFFFC7L,0x000000000000001FL});
    public static final BitSet FOLLOW_statement_in_statement3593 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_165_in_statement3603 = new BitSet(new long[]{0x0000000000000200L,0xC494001FC0000000L,0x000CFBD5E6FFFFC7L,0x000000000000001FL});
    public static final BitSet FOLLOW_statement_in_statement3605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_statement3631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_154_in_statement3633 = new BitSet(new long[]{0x0000000000000000L,0x4404001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_forControl_in_statement3635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_statement3637 = new BitSet(new long[]{0x0000000000000200L,0xC494001FC0000000L,0x000CFBD5E6FFFFC7L,0x000000000000001FL});
    public static final BitSet FOLLOW_statement_in_statement3639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_statement3660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_parExpression_in_statement3662 = new BitSet(new long[]{0x0000000000000200L,0xC494001FC0000000L,0x000CFBD5E6FFFFC7L,0x000000000000001FL});
    public static final BitSet FOLLOW_statement_in_statement3664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_statement3689 = new BitSet(new long[]{0x0000000000000200L,0xC494001FC0000000L,0x000CFBD5E6FFFFC7L,0x000000000000001FL});
    public static final BitSet FOLLOW_statement_in_statement3691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_statement3693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_parExpression_in_statement3695 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_statement3697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_statement3722 = new BitSet(new long[]{0x0000000000000000L,0x4010000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_statement3724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001040000000000L});
    public static final BitSet FOLLOW_catches_in_statement3734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_170_in_statement3738 = new BitSet(new long[]{0x0000000000000000L,0x4010000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_statement3740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_statement3768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_statement3791 = new BitSet(new long[]{0x0000000000000000L,0x4010000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_statement3793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_statement3827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_parExpression_in_statement3829 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_statement3831 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0002000200000000L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_statement3833 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_statement3835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_statement3856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_parExpression_in_statement3858 = new BitSet(new long[]{0x0000000000000000L,0x4010000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_statement3860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_statement3881 = new BitSet(new long[]{0x0000000000000000L,0x4404001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_statement3883 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_statement3886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_statement3906 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_statement3908 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_statement3910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_statement3929 = new BitSet(new long[]{0x0000000000000000L,0x0004000040000000L});
    public static final BitSet FOLLOW_Identifier_in_statement3931 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_statement3934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_statement3954 = new BitSet(new long[]{0x0000000000000000L,0x0004000040000000L});
    public static final BitSet FOLLOW_Identifier_in_statement3956 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_statement3959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_statement3977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementExpression_in_statement3992 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_statement3994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_statement4008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_163_in_statement4010 = new BitSet(new long[]{0x0000000000000200L,0xC494001FC0000000L,0x000CFBD5E6FFFFC7L,0x000000000000001FL});
    public static final BitSet FOLLOW_statement_in_statement4012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches4034 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_catchClause_in_catches4037 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_176_in_catchClause4053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_154_in_catchClause4055 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_formalParameter_in_catchClause4057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_catchClause4059 = new BitSet(new long[]{0x0000000000000000L,0x4010000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_catchClause4061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameter4087 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_type_in_formalParameter4090 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameter4092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups4106 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000200000000L});
    public static final BitSet FOLLOW_switchLabel_in_switchBlockStatementGroup4120 = new BitSet(new long[]{0x0000000000000202L,0xC494001FC0000000L,0x000CFBD5E6FFFFC7L,0x000000000000001FL});
    public static final BitSet FOLLOW_blockStatement_in_switchBlockStatementGroup4122 = new BitSet(new long[]{0x0000000000000202L,0xC494001FC0000000L,0x000CFBD5E6FFFFC7L,0x000000000000001FL});
    public static final BitSet FOLLOW_177_in_switchLabel4150 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_constantExpression_in_switchLabel4152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_163_in_switchLabel4154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_switchLabel4170 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_enumConstantName_in_switchLabel4172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_163_in_switchLabel4174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_switchLabel4190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_163_in_switchLabel4192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_moreStatementExpressions4211 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_statementExpression_in_moreStatementExpressions4213 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_forVarControl_in_forControl4234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_forControl4247 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_forControl4250 = new BitSet(new long[]{0x0000000000000000L,0x4404001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_forControl4254 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_forControl4257 = new BitSet(new long[]{0x0000000000000002L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_forUpdate_in_forControl4261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forInit4296 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_type_in_forInit4299 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_forInit4301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit4323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forVarControl4335 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_type_in_forVarControl4338 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_forVarControl4340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_163_in_forVarControl4342 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_forVarControl4344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdate4374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_parExpression4387 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_parExpression4390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_parExpression4392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList4410 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_expressionList4413 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_expressionList4416 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_expression_in_statementExpression4432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constantExpression4444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression4456 = new BitSet(new long[]{0x0000000000000002L,0x1440000000000000L,0x01FC000000000020L});
    public static final BitSet FOLLOW_133_in_expression4466 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_expression4468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_expression4487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_expression4489 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_expression4491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_expression4519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_expression4521 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_expression4523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_expression4551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_expression4553 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_expression4555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_expression4583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_expression4585 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_expression4587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_expression4616 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_expression4618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_expression4641 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_expression4643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_expression4666 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_expression4668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_expression4696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_expression4698 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_expression4700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_expression4728 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_expression4730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_expression4732 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_expression4734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_expression4762 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_expression4764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_expression4766 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_expression4768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_expression4794 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_expression4796 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_expression4798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_expression4800 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_expression4802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression4849 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_152_in_conditionalExpression4866 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_conditionalExpression4868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_163_in_conditionalExpression4870 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_conditionalExpression4872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression4919 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_185_in_conditionalOrExpression4937 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalOrExpression4939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression4985 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_186_in_conditionalAndExpression5003 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalAndExpression5005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5057 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_187_in_inclusiveOrExpression5079 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_inclusiveOrExpression5081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression5128 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_188_in_exclusiveOrExpression5144 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_exclusiveOrExpression5146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression5190 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_andExpression5206 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_andExpression_in_andExpression5208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5252 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_189_in_equalityExpression5268 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_equalityExpression5291 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression5337 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_191_in_instanceOfExpression5352 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression5354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5398 = new BitSet(new long[]{0x0000000000000002L,0x1400000000000000L});
    public static final BitSet FOLLOW_122_in_relationalExpression5414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_relationalExpression5416 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_relationalExpression5439 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_relationalExpression5462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_relationalExpression5464 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_relationalExpression5487 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5534 = new BitSet(new long[]{0x0000000000000002L,0x1400000000000000L});
    public static final BitSet FOLLOW_122_in_shiftExpression5553 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_shiftExpression5555 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_124_in_shiftExpression5559 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_shiftExpression5561 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5564 = new BitSet(new long[]{0x0000000000000002L,0x1400000000000000L});
    public static final BitSet FOLLOW_124_in_shiftExpression5598 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_shiftExpression5600 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_shiftExpression5602 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5604 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5647 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000C000000000000L});
    public static final BitSet FOLLOW_178_in_additiveExpression5666 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_179_in_additiveExpression5670 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5673 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000C000000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5724 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L,0x0110000000000000L});
    public static final BitSet FOLLOW_118_in_multiplicativeExpression5744 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_180_in_multiplicativeExpression5748 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_184_in_multiplicativeExpression5752 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5755 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L,0x0110000000000000L});
    public static final BitSet FOLLOW_178_in_unaryExpression5807 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_unaryExpression5821 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_unaryExpression5841 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_unaryExpression5861 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression5881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_unaryExpressionNotPlusMinus5912 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_unaryExpressionNotPlusMinus5931 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus5951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus5958 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L,0x0000000000000008L,0x0000000000000003L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus5968 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L,0x0000000000000008L,0x0000000000000003L});
    public static final BitSet FOLLOW_192_in_unaryExpressionNotPlusMinus5981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_unaryExpressionNotPlusMinus6003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_unaryExpressionNotPlusMinus6047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_unaryExpressionNotPlusMinus6062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_castExpression6101 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression6103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_castExpression6105 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression6107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_castExpression6130 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_type_in_castExpression6132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_castExpression6134 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_castExpression6155 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_castExpression6157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_castExpression6159 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary6181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6188 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_primary6190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary6214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_primary6224 = new BitSet(new long[]{0x0000000000000000L,0x0400000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6226 = new BitSet(new long[]{0x0000000000000000L,0x0400000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_primitiveType_in_primary6229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_primary6245 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_primary6247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_primary6249 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_primary6254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_primary6256 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_primary6287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_primary6289 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_arrayInitializer_in_primary6293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_primary6325 = new BitSet(new long[]{0x0000000000000000L,0x0400000040000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6327 = new BitSet(new long[]{0x0000000000000000L,0x0400000040000000L});
    public static final BitSet FOLLOW_refComponent_in_primary6333 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000004000008L});
    public static final BitSet FOLLOW_117_in_primary6336 = new BitSet(new long[]{0x0000000000000000L,0x0400000040000000L});
    public static final BitSet FOLLOW_refComponent_in_primary6340 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000004000008L});
    public static final BitSet FOLLOW_131_in_primary6359 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_primary6361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_primary6363 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_primary6368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_primary6370 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_primary6403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_primary6405 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_arrayInitializer_in_primary6409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_primary6438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_primary6470 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_primary6472 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_primary6474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_primary6496 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_primary6498 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_primary6500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_primary6521 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L,0x0000000004000008L});
    public static final BitSet FOLLOW_arguments_in_primary6531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_primary6569 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L,0x0000000004000008L});
    public static final BitSet FOLLOW_arguments_in_primary6585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_innerCreator6630 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000004000008L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator6632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest6650 = new BitSet(new long[]{0x0000000000000002L,0x4700000000000000L});
    public static final BitSet FOLLOW_classBody_in_classCreatorRest6652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation6673 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_explicitGenericInvocation6675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_nonWildcardTypeArguments6687 = new BitSet(new long[]{0x0000000000000000L,0x0400000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments6689 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_nonWildcardTypeArguments6691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_explicitGenericInvocationSuffix6707 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000004000008L});
    public static final BitSet FOLLOW_superSuffix_in_explicitGenericInvocationSuffix6709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_explicitGenericInvocationSuffix6723 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000004000008L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocationSuffix6725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix6744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_superSuffix6756 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_superSuffix6758 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L,0x0000000004000008L});
    public static final BitSet FOLLOW_arguments_in_superSuffix6761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_selector6775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_153_in_selector6777 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000004000008L});
    public static final BitSet FOLLOW_arguments_in_selector6779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_selector6797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_selector6799 = new BitSet(new long[]{0x0000000000000000L,0x0400000040000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector6802 = new BitSet(new long[]{0x0000000000000000L,0x0400000040000000L});
    public static final BitSet FOLLOW_innerCreator_in_selector6806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_selector6820 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector6822 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_selector6824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_selector6843 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_selector6845 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L,0x0000000004000008L});
    public static final BitSet FOLLOW_arguments_in_selector6855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_selector6890 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_selector6892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_selector6894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_arguments6913 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001EEFF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expressionList_in_arguments6916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_arguments6919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_synpred1_Java440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_synpred38_Java1135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_synpred39_Java1161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaration_in_synpred46_Java1451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred47_Java1473 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_synpred47_Java1475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_synpred47_Java1477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_synpred83_Java2369 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Identifier_in_synpred83_Java2371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_synpred101_Java2673 = new BitSet(new long[]{0x0000000000000000L,0x0400000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_type_in_synpred101_Java2675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred117_Java3101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_synpred134_Java3349 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_synpred134_Java3351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred141_Java3485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred142_Java3490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_synpred147_Java3603 = new BitSet(new long[]{0x0000000000000200L,0xC494001FC0000000L,0x000CFBD5E6FFFFC7L,0x000000000000001FL});
    public static final BitSet FOLLOW_statement_in_synpred147_Java3605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred152_Java3734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_170_in_synpred152_Java3738 = new BitSet(new long[]{0x0000000000000000L,0x4010000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_synpred152_Java3740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred153_Java3768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_synpred170_Java4150 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_constantExpression_in_synpred170_Java4152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_163_in_synpred170_Java4154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_synpred171_Java4170 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_enumConstantName_in_synpred171_Java4172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_163_in_synpred171_Java4174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forVarControl_in_synpred173_Java4234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_synpred178_Java4296 = new BitSet(new long[]{0x0000000000000000L,0x0400000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_type_in_synpred178_Java4299 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_synpred178_Java4301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_synpred181_Java4466 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_synpred181_Java4468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_synpred182_Java4487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_synpred182_Java4489 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_synpred182_Java4491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_synpred183_Java4519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_synpred183_Java4521 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_synpred183_Java4523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_synpred184_Java4551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_synpred184_Java4553 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_synpred184_Java4555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_synpred185_Java4583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_synpred185_Java4585 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_synpred185_Java4587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_synpred186_Java4616 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_synpred186_Java4618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_synpred187_Java4641 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_synpred187_Java4643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_synpred188_Java4666 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_synpred188_Java4668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_synpred189_Java4696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_synpred189_Java4698 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_synpred189_Java4700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_synpred190_Java4728 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_synpred190_Java4730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_synpred190_Java4732 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_synpred190_Java4734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_synpred191_Java4762 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_synpred191_Java4764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_synpred191_Java4766 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_synpred191_Java4768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_synpred192_Java4794 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_synpred192_Java4796 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_synpred192_Java4798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_synpred192_Java4800 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_synpred192_Java4802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_synpred203_Java5439 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_shiftExpression_in_synpred203_Java5441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_synpred207_Java5553 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_synpred207_Java5555 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_124_in_synpred207_Java5559 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_synpred207_Java5561 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_additiveExpression_in_synpred207_Java5564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_synpred208_Java5553 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_synpred208_Java5555 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_124_in_synpred208_Java5559 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_synpred208_Java5561 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_additiveExpression_in_synpred208_Java5564 = new BitSet(new long[]{0x0000000000000002L,0x1400000000000000L});
    public static final BitSet FOLLOW_124_in_synpred209_Java5598 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_synpred209_Java5600 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_synpred209_Java5602 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_additiveExpression_in_synpred209_Java5604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_synpred210_Java5598 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_synpred210_Java5600 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_synpred210_Java5602 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_additiveExpression_in_synpred210_Java5604 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_castExpression_in_synpred224_Java5951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_synpred231_Java6101 = new BitSet(new long[]{0x0000000000000000L,0x0400000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_primitiveType_in_synpred231_Java6103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_synpred231_Java6105 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_unaryExpression_in_synpred231_Java6107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_synpred232_Java6130 = new BitSet(new long[]{0x0000000000000000L,0x0400000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_type_in_synpred232_Java6132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_synpred232_Java6134 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_synpred232_Java6136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_synpred237_Java6245 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_synpred237_Java6247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_synpred237_Java6249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_synpred241_Java6224 = new BitSet(new long[]{0x0000000000000000L,0x0400000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred241_Java6226 = new BitSet(new long[]{0x0000000000000000L,0x0400000040000000L,0x0000000100FF0400L});
    public static final BitSet FOLLOW_primitiveType_in_synpred241_Java6229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_synpred241_Java6245 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_synpred241_Java6247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_synpred241_Java6249 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_synpred241_Java6254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_synpred241_Java6256 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_synpred241_Java6287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_synpred241_Java6289 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_arrayInitializer_in_synpred241_Java6293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_synpred244_Java6359 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_synpred244_Java6361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_synpred244_Java6363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_synpred249_Java6325 = new BitSet(new long[]{0x0000000000000000L,0x0400000040000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred249_Java6327 = new BitSet(new long[]{0x0000000000000000L,0x0400000040000000L});
    public static final BitSet FOLLOW_refComponent_in_synpred249_Java6333 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000004000008L});
    public static final BitSet FOLLOW_117_in_synpred249_Java6336 = new BitSet(new long[]{0x0000000000000000L,0x0400000040000000L});
    public static final BitSet FOLLOW_refComponent_in_synpred249_Java6340 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000004000008L});
    public static final BitSet FOLLOW_131_in_synpred249_Java6359 = new BitSet(new long[]{0x0000000000000000L,0x4400001FC0000000L,0x000C0001E6FF0402L,0x000000000000001FL});
    public static final BitSet FOLLOW_expression_in_synpred249_Java6361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_synpred249_Java6363 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_synpred249_Java6368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_synpred249_Java6370 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_synpred249_Java6403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_synpred249_Java6405 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_arrayInitializer_in_synpred249_Java6409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_synpred249_Java6438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred250_Java6470 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_synpred250_Java6472 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_synpred250_Java6474 = new BitSet(new long[]{0x0000000000000002L});

}