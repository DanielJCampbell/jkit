// $ANTLR 3.1 jkit/java/Java.g 2008-12-02 10:52:57

package jkit.java;
import jkit.compiler.SyntaxError;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g 
 *  and got two errors that are ok (for now):
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created 
 *          elementValuePair and elementValuePairs rules, then used them in the 
 *          annotation rule.  Allows it to recognize annotation references with 
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the Identifier portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which 
 *          has the Identifier portion in it, the parser would fail on constants in 
 *          annotation definitions because it expected two identifiers.  
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to 
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing 
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *          Again, JLS doesn't seem to allow this, but java.lang.Class has an example of
 *          of this construct.
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 * 		
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *	Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *	and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *	--a[i].foo didn't work. Fixed unaryExpression
 */
public class JavaParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "UNIT", "PACKAGE", "IMPORT", "CLASS", "INTERFACE", "ENUM", "MODIFIERS", "EXTENDS", "IMPLEMENTS", "FIELD", "METHOD", "PARAMETER", "VARARGS", "TYPE", "VOID", "TYPE_PARAMETER", "THROWS", "ANNOTATION", "SUPER", "INTVAL", "FLOATVAL", "DOUBLEVAL", "CHARVAL", "STRINGVAL", "BOOLVAL", "NULLVAL", "BLOCK", "VARDEF", "ASSERT", "IF", "FOR", "WHILE", "DOWHILE", "RETURN", "THROW", "BREAK", "CONTINUE", "ASSIGN", "VAR", "LOR", "OR", "LAND", "AND", "XOR", "EQ", "NEQ", "INSTANCEOF", "LTEQ", "GTEQ", "LT", "GT", "SHL", "SHR", "USHR", "ADD", "SUB", "DIV", "MUL", "MOD", "DEREF", "NEG", "POSTINC", "PREINC", "PREDEC", "POSTDEC", "NOT", "INV", "CAST", "SELECTOR", "INVOKE", "ARRAYINDEX", "NEW", "GETCLASS", "SYNCHRONIZED", "INIT", "TEST", "STEP", "LABEL", "FOREACH", "TRY", "CATCH", "FINALLY", "CONDEXPR", "ARRAYVAL", "SWITCH", "CASE", "DEFAULT", "ARRAYINIT", "ARGS", "LABINOP", "NONE", "STATIC", "ENUM_CONSTANT", "Identifier", "FloatingPointLiteral", "CharacterLiteral", "StringLiteral", "HexLiteral", "OctalLiteral", "DecimalLiteral", "HexDigit", "IntegerTypeSuffix", "Exponent", "FloatTypeSuffix", "EscapeSequence", "UnicodeEscape", "OctalEscape", "Letter", "JavaIDDigit", "WS", "COMMENT", "LINE_COMMENT", "'package'", "';'", "'import'", "'static'", "'.'", "'*'", "'class'", "'extends'", "'implements'", "'<'", "','", "'>'", "'&'", "'{'", "'}'", "'interface'", "'void'", "'throws'", "'['", "']'", "'='", "'public'", "'protected'", "'private'", "'abstract'", "'final'", "'native'", "'synchronized'", "'transient'", "'volatile'", "'strictfp'", "'boolean'", "'char'", "'byte'", "'short'", "'int'", "'long'", "'float'", "'double'", "'?'", "'super'", "'('", "')'", "'...'", "'null'", "'true'", "'false'", "'@'", "'default'", "'assert'", "':'", "'if'", "'else'", "'for'", "'while'", "'do'", "'try'", "'finally'", "'switch'", "'return'", "'throw'", "'break'", "'continue'", "'catch'", "'case'", "'+'", "'-'", "'/'", "'&='", "'|='", "'^='", "'%'", "'||'", "'&&'", "'|'", "'^'", "'=='", "'!='", "'instanceof'", "'++'", "'--'", "'~'", "'!'", "'new'"
    };
    public static final int T__197=197;
    public static final int T__139=139;
    public static final int SYNCHRONIZED=77;
    public static final int T__174=174;
    public static final int HexDigit=104;
    public static final int T__196=196;
    public static final int T__144=144;
    public static final int T__122=122;
    public static final int METHOD=14;
    public static final int T__137=137;
    public static final int T__140=140;
    public static final int IMPORT=6;
    public static final int PACKAGE=5;
    public static final int CONTINUE=40;
    public static final int Letter=111;
    public static final int T__138=138;
    public static final int T__173=173;
    public static final int T__119=119;
    public static final int ASSERT=32;
    public static final int T__198=198;
    public static final int T__142=142;
    public static final int T__176=176;
    public static final int FloatTypeSuffix=107;
    public static final int T__118=118;
    public static final int T__135=135;
    public static final int EXTENDS=11;
    public static final int POSTDEC=68;
    public static final int ARRAYVAL=87;
    public static final int SUPER=22;
    public static final int IntegerTypeSuffix=105;
    public static final int T__156=156;
    public static final int WS=113;
    public static final int NONE=94;
    public static final int T__159=159;
    public static final int T__177=177;
    public static final int T__158=158;
    public static final int FIELD=13;
    public static final int POSTINC=65;
    public static final int LAND=45;
    public static final int CATCH=84;
    public static final int STATIC=95;
    public static final int MUL=61;
    public static final int UnicodeEscape=109;
    public static final int T__157=157;
    public static final int MODIFIERS=10;
    public static final int CONDEXPR=86;
    public static final int T__143=143;
    public static final int T__193=193;
    public static final int XOR=47;
    public static final int T__141=141;
    public static final int ADD=58;
    public static final int FOREACH=82;
    public static final int TYPE=17;
    public static final int SHL=55;
    public static final int LOR=43;
    public static final int OctalLiteral=102;
    public static final int T__167=167;
    public static final int SELECTOR=72;
    public static final int T__194=194;
    public static final int CAST=71;
    public static final int THROWS=20;
    public static final int LABEL=81;
    public static final int MOD=62;
    public static final int T__191=191;
    public static final int DOWHILE=36;
    public static final int OR=44;
    public static final int BLOCK=30;
    public static final int T__192=192;
    public static final int EscapeSequence=108;
    public static final int INSTANCEOF=50;
    public static final int FloatingPointLiteral=98;
    public static final int NEQ=49;
    public static final int T__175=175;
    public static final int T__117=117;
    public static final int WHILE=35;
    public static final int COMMENT=114;
    public static final int INVOKE=73;
    public static final int T__199=199;
    public static final int T__172=172;
    public static final int GTEQ=52;
    public static final int LABINOP=93;
    public static final int UNIT=4;
    public static final int JavaIDDigit=112;
    public static final int T__170=170;
    public static final int T__136=136;
    public static final int RETURN=37;
    public static final int IF=33;
    public static final int T__116=116;
    public static final int T__171=171;
    public static final int GETCLASS=76;
    public static final int FOR=34;
    public static final int T__189=189;
    public static final int DEFAULT=90;
    public static final int OctalEscape=110;
    public static final int STRINGVAL=27;
    public static final int T__134=134;
    public static final int T__195=195;
    public static final int NEG=64;
    public static final int DEREF=63;
    public static final int SUB=59;
    public static final int NOT=69;
    public static final int TRY=83;
    public static final int ARGS=92;
    public static final int T__162=162;
    public static final int T__160=160;
    public static final int T__123=123;
    public static final int STEP=80;
    public static final int T__145=145;
    public static final int T__187=187;
    public static final int INTVAL=23;
    public static final int SHR=56;
    public static final int PREDEC=67;
    public static final int ARRAYINIT=91;
    public static final int T__186=186;
    public static final int AND=46;
    public static final int T__181=181;
    public static final int T__128=128;
    public static final int NULLVAL=29;
    public static final int PREINC=66;
    public static final int T__161=161;
    public static final int FINALLY=85;
    public static final int T__168=168;
    public static final int T__150=150;
    public static final int Identifier=97;
    public static final int ENUM_CONSTANT=96;
    public static final int T__182=182;
    public static final int EQ=48;
    public static final int NEW=75;
    public static final int BOOLVAL=28;
    public static final int LT=53;
    public static final int T__165=165;
    public static final int T__130=130;
    public static final int T__151=151;
    public static final int LINE_COMMENT=115;
    public static final int CASE=89;
    public static final int INTERFACE=8;
    public static final int CHARVAL=26;
    public static final int HexLiteral=101;
    public static final int INV=70;
    public static final int T__125=125;
    public static final int T__149=149;
    public static final int LTEQ=51;
    public static final int T__166=166;
    public static final int BREAK=39;
    public static final int DecimalLiteral=103;
    public static final int T__132=132;
    public static final int ANNOTATION=21;
    public static final int DIV=60;
    public static final int T__190=190;
    public static final int T__131=131;
    public static final int T__124=124;
    public static final int T__169=169;
    public static final int THROW=38;
    public static final int T__126=126;
    public static final int T__148=148;
    public static final int INIT=78;
    public static final int T__188=188;
    public static final int VARDEF=31;
    public static final int DOUBLEVAL=25;
    public static final int TYPE_PARAMETER=19;
    public static final int ARRAYINDEX=74;
    public static final int ASSIGN=41;
    public static final int T__127=127;
    public static final int VOID=18;
    public static final int T__183=183;
    public static final int T__133=133;
    public static final int FLOATVAL=24;
    public static final int VARARGS=16;
    public static final int T__164=164;
    public static final int T__120=120;
    public static final int USHR=57;
    public static final int ENUM=9;
    public static final int T__163=163;
    public static final int Exponent=106;
    public static final int T__153=153;
    public static final int IMPLEMENTS=12;
    public static final int SWITCH=88;
    public static final int T__185=185;
    public static final int CharacterLiteral=99;
    public static final int T__178=178;
    public static final int GT=54;
    public static final int StringLiteral=100;
    public static final int T__129=129;
    public static final int T__180=180;
    public static final int T__152=152;
    public static final int T__121=121;
    public static final int VAR=42;
    public static final int CLASS=7;
    public static final int T__147=147;
    public static final int T__179=179;
    public static final int EOF=-1;
    public static final int T__154=154;
    public static final int T__184=184;
    public static final int PARAMETER=15;
    public static final int T__155=155;
    public static final int TEST=79;
    public static final int T__146=146;

    // delegates
    // delegators


        public JavaParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public JavaParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[385+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return JavaParser.tokenNames; }
    public String getGrammarFileName() { return "jkit/java/Java.g"; }


    public static class compilationUnit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // jkit/java/Java.g:203:1: compilationUnit : ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ -> ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ ) ;
    public final JavaParser.compilationUnit_return compilationUnit() throws RecognitionException {
        JavaParser.compilationUnit_return retval = new JavaParser.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotations_return annotations1 = null;

        JavaParser.packageDeclaration_return packageDeclaration2 = null;

        JavaParser.importDeclaration_return importDeclaration3 = null;

        JavaParser.typeDeclaration_return typeDeclaration4 = null;


        RewriteRuleSubtreeStream stream_importDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule importDeclaration");
        RewriteRuleSubtreeStream stream_packageDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule packageDeclaration");
        RewriteRuleSubtreeStream stream_annotations=new RewriteRuleSubtreeStream(adaptor,"rule annotations");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // jkit/java/Java.g:204:2: ( ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ -> ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ ) )
            // jkit/java/Java.g:204:4: ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+
            {
            // jkit/java/Java.g:204:4: ( annotations )?
            int alt1=2;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // jkit/java/Java.g:0:0: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_compilationUnit453);
                    annotations1=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotations.add(annotations1.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:204:17: ( packageDeclaration )?
            int alt2=2;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    // jkit/java/Java.g:0:0: packageDeclaration
                    {
                    pushFollow(FOLLOW_packageDeclaration_in_compilationUnit456);
                    packageDeclaration2=packageDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_packageDeclaration.add(packageDeclaration2.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:204:37: ( importDeclaration )*
            loop3:
            do {
                int alt3=2;
                alt3 = dfa3.predict(input);
                switch (alt3) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit459);
            	    importDeclaration3=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_importDeclaration.add(importDeclaration3.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);

            // jkit/java/Java.g:204:56: ( typeDeclaration )+
            int cnt4=0;
            loop4:
            do {
                int alt4=2;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: typeDeclaration
            	    {
            	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit462);
            	    typeDeclaration4=typeDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration4.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);



            // AST REWRITE
            // elements: packageDeclaration, importDeclaration, typeDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 205:3: -> ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ )
            {
                // jkit/java/Java.g:205:6: ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNIT, "UNIT"), root_1);

                // jkit/java/Java.g:205:13: ( packageDeclaration )?
                if ( stream_packageDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_packageDeclaration.nextTree());

                }
                stream_packageDeclaration.reset();
                // jkit/java/Java.g:205:33: ( importDeclaration )*
                while ( stream_importDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_importDeclaration.nextTree());

                }
                stream_importDeclaration.reset();
                if ( !(stream_typeDeclaration.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeDeclaration.nextTree());

                }
                stream_typeDeclaration.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // jkit/java/Java.g:208:1: packageDeclaration : 'package' qualifiedName ';' -> ^( PACKAGE qualifiedName ) ;
    public final JavaParser.packageDeclaration_return packageDeclaration() throws RecognitionException {
        JavaParser.packageDeclaration_return retval = new JavaParser.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal5=null;
        Token char_literal7=null;
        JavaParser.qualifiedName_return qualifiedName6 = null;


        Object string_literal5_tree=null;
        Object char_literal7_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleSubtreeStream stream_qualifiedName=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // jkit/java/Java.g:209:2: ( 'package' qualifiedName ';' -> ^( PACKAGE qualifiedName ) )
            // jkit/java/Java.g:209:4: 'package' qualifiedName ';'
            {
            string_literal5=(Token)match(input,116,FOLLOW_116_in_packageDeclaration496); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(string_literal5);

            pushFollow(FOLLOW_qualifiedName_in_packageDeclaration498);
            qualifiedName6=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedName.add(qualifiedName6.getTree());
            char_literal7=(Token)match(input,117,FOLLOW_117_in_packageDeclaration500); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal7);



            // AST REWRITE
            // elements: qualifiedName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 209:32: -> ^( PACKAGE qualifiedName )
            {
                // jkit/java/Java.g:209:35: ^( PACKAGE qualifiedName )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PACKAGE, "PACKAGE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // jkit/java/Java.g:212:1: importDeclaration : 'import' ( 'static' )? i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( IMPORT ( $i)+ ) ;
    public final JavaParser.importDeclaration_return importDeclaration() throws RecognitionException {
        JavaParser.importDeclaration_return retval = new JavaParser.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal8=null;
        Token string_literal9=null;
        Token char_literal10=null;
        Token char_literal11=null;
        Token char_literal12=null;
        Token i=null;
        List list_i=null;

        Object string_literal8_tree=null;
        Object string_literal9_tree=null;
        Object char_literal10_tree=null;
        Object char_literal11_tree=null;
        Object char_literal12_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // jkit/java/Java.g:213:2: ( 'import' ( 'static' )? i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( IMPORT ( $i)+ ) )
            // jkit/java/Java.g:213:4: 'import' ( 'static' )? i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';'
            {
            string_literal8=(Token)match(input,118,FOLLOW_118_in_importDeclaration520); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(string_literal8);

            // jkit/java/Java.g:213:13: ( 'static' )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==119) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // jkit/java/Java.g:0:0: 'static'
                    {
                    string_literal9=(Token)match(input,119,FOLLOW_119_in_importDeclaration522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_119.add(string_literal9);


                    }
                    break;

            }

            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration527); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(i);

            if (list_i==null) list_i=new ArrayList();
            list_i.add(i);

            // jkit/java/Java.g:213:37: ( '.' i+= Identifier )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==120) ) {
                    int LA6_1 = input.LA(2);

                    if ( (LA6_1==Identifier) ) {
                        alt6=1;
                    }


                }


                switch (alt6) {
            	case 1 :
            	    // jkit/java/Java.g:213:38: '.' i+= Identifier
            	    {
            	    char_literal10=(Token)match(input,120,FOLLOW_120_in_importDeclaration530); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_120.add(char_literal10);

            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration534); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Identifier.add(i);

            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i);


            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            // jkit/java/Java.g:213:58: ( '.' i+= '*' )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==120) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // jkit/java/Java.g:213:59: '.' i+= '*'
                    {
                    char_literal11=(Token)match(input,120,FOLLOW_120_in_importDeclaration539); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(char_literal11);

                    i=(Token)match(input,121,FOLLOW_121_in_importDeclaration543); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);


                    }
                    break;

            }

            char_literal12=(Token)match(input,117,FOLLOW_117_in_importDeclaration547); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal12);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: i
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 213:76: -> ^( IMPORT ( $i)+ )
            {
                // jkit/java/Java.g:213:79: ^( IMPORT ( $i)+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPORT, "IMPORT"), root_1);

                if ( !(stream_i.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDeclaration"
    // jkit/java/Java.g:216:1: typeDeclaration : ( classOrInterfaceDeclaration | ';' );
    public final JavaParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
        JavaParser.typeDeclaration_return retval = new JavaParser.typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal14=null;
        JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration13 = null;


        Object char_literal14_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // jkit/java/Java.g:217:2: ( classOrInterfaceDeclaration | ';' )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // jkit/java/Java.g:217:4: classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration569);
                    classOrInterfaceDeclaration13=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceDeclaration13.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:218:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal14=(Token)match(input,117,FOLLOW_117_in_typeDeclaration579); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal14_tree = (Object)adaptor.create(char_literal14);
                    adaptor.addChild(root_0, char_literal14_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"

    public static class classOrInterfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceDeclaration"
    // jkit/java/Java.g:221:1: classOrInterfaceDeclaration : ( modifier )* ( classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) ) ;
    public final JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration() throws RecognitionException {
        JavaParser.classOrInterfaceDeclaration_return retval = new JavaParser.classOrInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int classOrInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.modifier_return modifier15 = null;

        JavaParser.classDeclaration_return classDeclaration16 = null;

        JavaParser.enumDeclaration_return enumDeclaration17 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration18 = null;


        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_enumDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule enumDeclaration");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        RewriteRuleSubtreeStream stream_interfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // jkit/java/Java.g:222:2: ( ( modifier )* ( classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) ) )
            // jkit/java/Java.g:222:4: ( modifier )* ( classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) )
            {
            // jkit/java/Java.g:222:4: ( modifier )*
            loop9:
            do {
                int alt9=2;
                alt9 = dfa9.predict(input);
                switch (alt9) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_classOrInterfaceDeclaration591);
            	    modifier15=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_modifier.add(modifier15.getTree());

            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);

            // jkit/java/Java.g:222:14: ( classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) )
            int alt10=3;
            switch ( input.LA(1) ) {
            case 122:
                {
                alt10=1;
                }
                break;
            case ENUM:
                {
                alt10=2;
                }
                break;
            case 131:
            case 163:
                {
                alt10=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // jkit/java/Java.g:223:3: classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_classOrInterfaceDeclaration598);
                    classDeclaration16=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classDeclaration.add(classDeclaration16.getTree());


                    // AST REWRITE
                    // elements: modifier, classDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 223:20: -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                    {
                        // jkit/java/Java.g:223:23: ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CLASS, "CLASS"), root_1);

                        // jkit/java/Java.g:223:31: ( ^( MODIFIERS ( modifier )* ) )?
                        if ( stream_modifier.hasNext() ) {
                            // jkit/java/Java.g:223:31: ^( MODIFIERS ( modifier )* )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                            // jkit/java/Java.g:223:43: ( modifier )*
                            while ( stream_modifier.hasNext() ) {
                                adaptor.addChild(root_2, stream_modifier.nextTree());

                            }
                            stream_modifier.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_modifier.reset();
                        adaptor.addChild(root_1, stream_classDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:224:5: enumDeclaration
                    {
                    pushFollow(FOLLOW_enumDeclaration_in_classOrInterfaceDeclaration620);
                    enumDeclaration17=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumDeclaration.add(enumDeclaration17.getTree());


                    // AST REWRITE
                    // elements: enumDeclaration, modifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 224:21: -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                    {
                        // jkit/java/Java.g:224:24: ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ENUM, "ENUM"), root_1);

                        // jkit/java/Java.g:224:31: ( ^( MODIFIERS ( modifier )* ) )?
                        if ( stream_modifier.hasNext() ) {
                            // jkit/java/Java.g:224:31: ^( MODIFIERS ( modifier )* )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                            // jkit/java/Java.g:224:43: ( modifier )*
                            while ( stream_modifier.hasNext() ) {
                                adaptor.addChild(root_2, stream_modifier.nextTree());

                            }
                            stream_modifier.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_modifier.reset();
                        adaptor.addChild(root_1, stream_enumDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:225:5: interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration642);
                    interfaceDeclaration18=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceDeclaration.add(interfaceDeclaration18.getTree());


                    // AST REWRITE
                    // elements: interfaceDeclaration, modifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 225:26: -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                    {
                        // jkit/java/Java.g:225:29: ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                        // jkit/java/Java.g:225:41: ( ^( MODIFIERS ( modifier )* ) )?
                        if ( stream_modifier.hasNext() ) {
                            // jkit/java/Java.g:225:41: ^( MODIFIERS ( modifier )* )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                            // jkit/java/Java.g:225:53: ( modifier )*
                            while ( stream_modifier.hasNext() ) {
                                adaptor.addChild(root_2, stream_modifier.nextTree());

                            }
                            stream_modifier.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_modifier.reset();
                        adaptor.addChild(root_1, stream_interfaceDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, classOrInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceDeclaration"

    public static class classDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classDeclaration"
    // jkit/java/Java.g:229:1: classDeclaration : 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody -> ^( Identifier ( typeParameters )? ) ( ^( EXTENDS type ) )? ( ^( IMPLEMENTS typeList ) )? ( classBody )? ;
    public final JavaParser.classDeclaration_return classDeclaration() throws RecognitionException {
        JavaParser.classDeclaration_return retval = new JavaParser.classDeclaration_return();
        retval.start = input.LT(1);
        int classDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal19=null;
        Token Identifier20=null;
        Token string_literal22=null;
        Token string_literal24=null;
        JavaParser.typeParameters_return typeParameters21 = null;

        JavaParser.type_return type23 = null;

        JavaParser.typeList_return typeList25 = null;

        JavaParser.classBody_return classBody26 = null;


        Object string_literal19_tree=null;
        Object Identifier20_tree=null;
        Object string_literal22_tree=null;
        Object string_literal24_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // jkit/java/Java.g:230:2: ( 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody -> ^( Identifier ( typeParameters )? ) ( ^( EXTENDS type ) )? ( ^( IMPLEMENTS typeList ) )? ( classBody )? )
            // jkit/java/Java.g:230:4: 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody
            {
            string_literal19=(Token)match(input,122,FOLLOW_122_in_classDeclaration675); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(string_literal19);

            Identifier20=(Token)match(input,Identifier,FOLLOW_Identifier_in_classDeclaration677); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier20);

            // jkit/java/Java.g:230:23: ( typeParameters )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==125) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // jkit/java/Java.g:230:24: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_classDeclaration680);
                    typeParameters21=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters21.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:231:9: ( 'extends' type )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==123) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // jkit/java/Java.g:231:10: 'extends' type
                    {
                    string_literal22=(Token)match(input,123,FOLLOW_123_in_classDeclaration693); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_123.add(string_literal22);

                    pushFollow(FOLLOW_type_in_classDeclaration695);
                    type23=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type23.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:232:9: ( 'implements' typeList )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==124) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // jkit/java/Java.g:232:10: 'implements' typeList
                    {
                    string_literal24=(Token)match(input,124,FOLLOW_124_in_classDeclaration709); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(string_literal24);

                    pushFollow(FOLLOW_typeList_in_classDeclaration711);
                    typeList25=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList25.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_classDeclaration723);
            classBody26=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classBody.add(classBody26.getTree());


            // AST REWRITE
            // elements: typeList, Identifier, typeParameters, classBody, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 233:19: -> ^( Identifier ( typeParameters )? ) ( ^( EXTENDS type ) )? ( ^( IMPLEMENTS typeList ) )? ( classBody )?
            {
                // jkit/java/Java.g:233:22: ^( Identifier ( typeParameters )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/Java.g:233:35: ( typeParameters )?
                if ( stream_typeParameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeParameters.nextTree());

                }
                stream_typeParameters.reset();

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/Java.g:233:52: ( ^( EXTENDS type ) )?
                if ( stream_type.hasNext() ) {
                    // jkit/java/Java.g:233:52: ^( EXTENDS type )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXTENDS, "EXTENDS"), root_1);

                    adaptor.addChild(root_1, stream_type.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_type.reset();
                // jkit/java/Java.g:233:69: ( ^( IMPLEMENTS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:233:69: ^( IMPLEMENTS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPLEMENTS, "IMPLEMENTS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();
                // jkit/java/Java.g:233:93: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_classBody.nextTree());

                }
                stream_classBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, classDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classDeclaration"

    public static class typeParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameters"
    // jkit/java/Java.g:236:1: typeParameters : '<' t+= typeParameter ( ',' t+= typeParameter )* '>' -> ( $t)* ;
    public final JavaParser.typeParameters_return typeParameters() throws RecognitionException {
        JavaParser.typeParameters_return retval = new JavaParser.typeParameters_return();
        retval.start = input.LT(1);
        int typeParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal27=null;
        Token char_literal28=null;
        Token char_literal29=null;
        List list_t=null;
        JavaParser.typeParameter_return t = null;
        Object char_literal27_tree=null;
        Object char_literal28_tree=null;
        Object char_literal29_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_typeParameter=new RewriteRuleSubtreeStream(adaptor,"rule typeParameter");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // jkit/java/Java.g:237:2: ( '<' t+= typeParameter ( ',' t+= typeParameter )* '>' -> ( $t)* )
            // jkit/java/Java.g:237:4: '<' t+= typeParameter ( ',' t+= typeParameter )* '>'
            {
            char_literal27=(Token)match(input,125,FOLLOW_125_in_typeParameters760); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(char_literal27);

            pushFollow(FOLLOW_typeParameter_in_typeParameters764);
            t=typeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeParameter.add(t.getTree());
            if (list_t==null) list_t=new ArrayList();
            list_t.add(t.getTree());

            // jkit/java/Java.g:237:25: ( ',' t+= typeParameter )*
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==126) ) {
                    alt14=1;
                }


                switch (alt14) {
            	case 1 :
            	    // jkit/java/Java.g:237:26: ',' t+= typeParameter
            	    {
            	    char_literal28=(Token)match(input,126,FOLLOW_126_in_typeParameters767); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_126.add(char_literal28);

            	    pushFollow(FOLLOW_typeParameter_in_typeParameters771);
            	    t=typeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeParameter.add(t.getTree());
            	    if (list_t==null) list_t=new ArrayList();
            	    list_t.add(t.getTree());


            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);

            char_literal29=(Token)match(input,127,FOLLOW_127_in_typeParameters775); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal29);



            // AST REWRITE
            // elements: t
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: t
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
            root_0 = (Object)adaptor.nil();
            // 237:53: -> ( $t)*
            {
                // jkit/java/Java.g:237:56: ( $t)*
                while ( stream_t.hasNext() ) {
                    adaptor.addChild(root_0, stream_t.nextTree());

                }
                stream_t.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, typeParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameters"

    public static class typeParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameter"
    // jkit/java/Java.g:240:1: typeParameter : Identifier ( 'extends' bound )? -> ^( TYPE_PARAMETER ^( Identifier ( ^( EXTENDS bound ) )? ) ) ;
    public final JavaParser.typeParameter_return typeParameter() throws RecognitionException {
        JavaParser.typeParameter_return retval = new JavaParser.typeParameter_return();
        retval.start = input.LT(1);
        int typeParameter_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier30=null;
        Token string_literal31=null;
        JavaParser.bound_return bound32 = null;


        Object Identifier30_tree=null;
        Object string_literal31_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_bound=new RewriteRuleSubtreeStream(adaptor,"rule bound");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // jkit/java/Java.g:241:2: ( Identifier ( 'extends' bound )? -> ^( TYPE_PARAMETER ^( Identifier ( ^( EXTENDS bound ) )? ) ) )
            // jkit/java/Java.g:241:4: Identifier ( 'extends' bound )?
            {
            Identifier30=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeParameter792); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier30);

            // jkit/java/Java.g:241:15: ( 'extends' bound )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==123) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // jkit/java/Java.g:241:16: 'extends' bound
                    {
                    string_literal31=(Token)match(input,123,FOLLOW_123_in_typeParameter795); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_123.add(string_literal31);

                    pushFollow(FOLLOW_bound_in_typeParameter797);
                    bound32=bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound.add(bound32.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: Identifier, bound
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 241:34: -> ^( TYPE_PARAMETER ^( Identifier ( ^( EXTENDS bound ) )? ) )
            {
                // jkit/java/Java.g:241:37: ^( TYPE_PARAMETER ^( Identifier ( ^( EXTENDS bound ) )? ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETER, "TYPE_PARAMETER"), root_1);

                // jkit/java/Java.g:241:54: ^( Identifier ( ^( EXTENDS bound ) )? )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_2);

                // jkit/java/Java.g:241:67: ( ^( EXTENDS bound ) )?
                if ( stream_bound.hasNext() ) {
                    // jkit/java/Java.g:241:67: ^( EXTENDS bound )
                    {
                    Object root_3 = (Object)adaptor.nil();
                    root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXTENDS, "EXTENDS"), root_3);

                    adaptor.addChild(root_3, stream_bound.nextTree());

                    adaptor.addChild(root_2, root_3);
                    }

                }
                stream_bound.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, typeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameter"

    public static class bound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bound"
    // jkit/java/Java.g:244:1: bound : t+= type ( '&' t+= type )* -> ( $t)* ;
    public final JavaParser.bound_return bound() throws RecognitionException {
        JavaParser.bound_return retval = new JavaParser.bound_return();
        retval.start = input.LT(1);
        int bound_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal33=null;
        List list_t=null;
        JavaParser.type_return t = null;
        Object char_literal33_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // jkit/java/Java.g:245:2: (t+= type ( '&' t+= type )* -> ( $t)* )
            // jkit/java/Java.g:245:4: t+= type ( '&' t+= type )*
            {
            pushFollow(FOLLOW_type_in_bound831);
            t=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(t.getTree());
            if (list_t==null) list_t=new ArrayList();
            list_t.add(t.getTree());

            // jkit/java/Java.g:245:12: ( '&' t+= type )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==128) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // jkit/java/Java.g:245:13: '&' t+= type
            	    {
            	    char_literal33=(Token)match(input,128,FOLLOW_128_in_bound834); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_128.add(char_literal33);

            	    pushFollow(FOLLOW_type_in_bound838);
            	    t=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type.add(t.getTree());
            	    if (list_t==null) list_t=new ArrayList();
            	    list_t.add(t.getTree());


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);



            // AST REWRITE
            // elements: t
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: t
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
            root_0 = (Object)adaptor.nil();
            // 245:27: -> ( $t)*
            {
                // jkit/java/Java.g:245:30: ( $t)*
                while ( stream_t.hasNext() ) {
                    adaptor.addChild(root_0, stream_t.nextTree());

                }
                stream_t.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, bound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bound"

    public static class enumDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumDeclaration"
    // jkit/java/Java.g:248:1: enumDeclaration : ENUM Identifier ( 'implements' typeList )? enumBody -> Identifier ( ^( IMPLEMENTS typeList ) )? ( enumBody )? ;
    public final JavaParser.enumDeclaration_return enumDeclaration() throws RecognitionException {
        JavaParser.enumDeclaration_return retval = new JavaParser.enumDeclaration_return();
        retval.start = input.LT(1);
        int enumDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token ENUM34=null;
        Token Identifier35=null;
        Token string_literal36=null;
        JavaParser.typeList_return typeList37 = null;

        JavaParser.enumBody_return enumBody38 = null;


        Object ENUM34_tree=null;
        Object Identifier35_tree=null;
        Object string_literal36_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_ENUM=new RewriteRuleTokenStream(adaptor,"token ENUM");
        RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // jkit/java/Java.g:249:2: ( ENUM Identifier ( 'implements' typeList )? enumBody -> Identifier ( ^( IMPLEMENTS typeList ) )? ( enumBody )? )
            // jkit/java/Java.g:249:4: ENUM Identifier ( 'implements' typeList )? enumBody
            {
            ENUM34=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumDeclaration857); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ENUM.add(ENUM34);

            Identifier35=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumDeclaration859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier35);

            // jkit/java/Java.g:249:20: ( 'implements' typeList )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==124) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // jkit/java/Java.g:249:21: 'implements' typeList
                    {
                    string_literal36=(Token)match(input,124,FOLLOW_124_in_enumDeclaration862); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(string_literal36);

                    pushFollow(FOLLOW_typeList_in_enumDeclaration864);
                    typeList37=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList37.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumDeclaration868);
            enumBody38=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumBody.add(enumBody38.getTree());


            // AST REWRITE
            // elements: typeList, enumBody, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 249:54: -> Identifier ( ^( IMPLEMENTS typeList ) )? ( enumBody )?
            {
                adaptor.addChild(root_0, stream_Identifier.nextNode());
                // jkit/java/Java.g:249:68: ( ^( IMPLEMENTS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:249:68: ^( IMPLEMENTS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPLEMENTS, "IMPLEMENTS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();
                // jkit/java/Java.g:249:92: ( enumBody )?
                if ( stream_enumBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumBody.nextTree());

                }
                stream_enumBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, enumDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBody"
    // jkit/java/Java.g:252:1: enumBody : '{' ( enumConstants )? ( enumBodyDeclarations )? '}' -> ( enumConstants )? ( enumBodyDeclarations )? ;
    public final JavaParser.enumBody_return enumBody() throws RecognitionException {
        JavaParser.enumBody_return retval = new JavaParser.enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal39=null;
        Token char_literal42=null;
        JavaParser.enumConstants_return enumConstants40 = null;

        JavaParser.enumBodyDeclarations_return enumBodyDeclarations41 = null;


        Object char_literal39_tree=null;
        Object char_literal42_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_enumConstants=new RewriteRuleSubtreeStream(adaptor,"rule enumConstants");
        RewriteRuleSubtreeStream stream_enumBodyDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule enumBodyDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // jkit/java/Java.g:253:2: ( '{' ( enumConstants )? ( enumBodyDeclarations )? '}' -> ( enumConstants )? ( enumBodyDeclarations )? )
            // jkit/java/Java.g:253:4: '{' ( enumConstants )? ( enumBodyDeclarations )? '}'
            {
            char_literal39=(Token)match(input,129,FOLLOW_129_in_enumBody894); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(char_literal39);

            // jkit/java/Java.g:253:8: ( enumConstants )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==Identifier||LA18_0==163) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // jkit/java/Java.g:0:0: enumConstants
                    {
                    pushFollow(FOLLOW_enumConstants_in_enumBody896);
                    enumConstants40=enumConstants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumConstants.add(enumConstants40.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:253:23: ( enumBodyDeclarations )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==117) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // jkit/java/Java.g:0:0: enumBodyDeclarations
                    {
                    pushFollow(FOLLOW_enumBodyDeclarations_in_enumBody899);
                    enumBodyDeclarations41=enumBodyDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumBodyDeclarations.add(enumBodyDeclarations41.getTree());

                    }
                    break;

            }

            char_literal42=(Token)match(input,130,FOLLOW_130_in_enumBody902); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal42);



            // AST REWRITE
            // elements: enumBodyDeclarations, enumConstants
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 253:49: -> ( enumConstants )? ( enumBodyDeclarations )?
            {
                // jkit/java/Java.g:253:52: ( enumConstants )?
                if ( stream_enumConstants.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumConstants.nextTree());

                }
                stream_enumConstants.reset();
                // jkit/java/Java.g:253:67: ( enumBodyDeclarations )?
                if ( stream_enumBodyDeclarations.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumBodyDeclarations.nextTree());

                }
                stream_enumBodyDeclarations.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumConstants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstants"
    // jkit/java/Java.g:256:1: enumConstants : enumConstant ( ',' enumConstant )* -> ( enumConstant )+ ;
    public final JavaParser.enumConstants_return enumConstants() throws RecognitionException {
        JavaParser.enumConstants_return retval = new JavaParser.enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal44=null;
        JavaParser.enumConstant_return enumConstant43 = null;

        JavaParser.enumConstant_return enumConstant45 = null;


        Object char_literal44_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_enumConstant=new RewriteRuleSubtreeStream(adaptor,"rule enumConstant");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // jkit/java/Java.g:257:2: ( enumConstant ( ',' enumConstant )* -> ( enumConstant )+ )
            // jkit/java/Java.g:257:4: enumConstant ( ',' enumConstant )*
            {
            pushFollow(FOLLOW_enumConstant_in_enumConstants921);
            enumConstant43=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumConstant.add(enumConstant43.getTree());
            // jkit/java/Java.g:257:17: ( ',' enumConstant )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==126) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // jkit/java/Java.g:257:18: ',' enumConstant
            	    {
            	    char_literal44=(Token)match(input,126,FOLLOW_126_in_enumConstants924); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_126.add(char_literal44);

            	    pushFollow(FOLLOW_enumConstant_in_enumConstants926);
            	    enumConstant45=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_enumConstant.add(enumConstant45.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);



            // AST REWRITE
            // elements: enumConstant
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 257:37: -> ( enumConstant )+
            {
                if ( !(stream_enumConstant.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_enumConstant.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumConstant.nextTree());

                }
                stream_enumConstant.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstant"
    // jkit/java/Java.g:260:1: enumConstant : ( annotations )? Identifier ( arguments )? ( classBody )? -> ^( ENUM_CONSTANT ( annotations )? Identifier ( ( arguments )? )? ( ( classBody )? )? ) ;
    public final JavaParser.enumConstant_return enumConstant() throws RecognitionException {
        JavaParser.enumConstant_return retval = new JavaParser.enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier47=null;
        JavaParser.annotations_return annotations46 = null;

        JavaParser.arguments_return arguments48 = null;

        JavaParser.classBody_return classBody49 = null;


        Object Identifier47_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_annotations=new RewriteRuleSubtreeStream(adaptor,"rule annotations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // jkit/java/Java.g:261:2: ( ( annotations )? Identifier ( arguments )? ( classBody )? -> ^( ENUM_CONSTANT ( annotations )? Identifier ( ( arguments )? )? ( ( classBody )? )? ) )
            // jkit/java/Java.g:261:4: ( annotations )? Identifier ( arguments )? ( classBody )?
            {
            // jkit/java/Java.g:261:4: ( annotations )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==163) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // jkit/java/Java.g:0:0: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_enumConstant945);
                    annotations46=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotations.add(annotations46.getTree());

                    }
                    break;

            }

            Identifier47=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumConstant948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier47);

            // jkit/java/Java.g:261:28: ( arguments )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==157) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // jkit/java/Java.g:261:29: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant951);
                    arguments48=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments48.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:261:41: ( classBody )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==129) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // jkit/java/Java.g:261:42: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant956);
                    classBody49=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody49.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: Identifier, arguments, annotations, classBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 261:54: -> ^( ENUM_CONSTANT ( annotations )? Identifier ( ( arguments )? )? ( ( classBody )? )? )
            {
                // jkit/java/Java.g:261:57: ^( ENUM_CONSTANT ( annotations )? Identifier ( ( arguments )? )? ( ( classBody )? )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ENUM_CONSTANT, "ENUM_CONSTANT"), root_1);

                // jkit/java/Java.g:261:73: ( annotations )?
                if ( stream_annotations.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotations.nextTree());

                }
                stream_annotations.reset();
                adaptor.addChild(root_1, stream_Identifier.nextNode());
                // jkit/java/Java.g:261:97: ( ( arguments )? )?
                if ( stream_arguments.hasNext() ) {
                    // jkit/java/Java.g:261:98: ( arguments )?
                    if ( stream_arguments.hasNext() ) {
                        adaptor.addChild(root_1, stream_arguments.nextTree());

                    }
                    stream_arguments.reset();

                }
                stream_arguments.reset();
                // jkit/java/Java.g:261:111: ( ( classBody )? )?
                if ( stream_classBody.hasNext() ) {
                    // jkit/java/Java.g:261:112: ( classBody )?
                    if ( stream_classBody.hasNext() ) {
                        adaptor.addChild(root_1, stream_classBody.nextTree());

                    }
                    stream_classBody.reset();

                }
                stream_classBody.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class enumBodyDeclarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBodyDeclarations"
    // jkit/java/Java.g:264:1: enumBodyDeclarations : ';' ( classBodyDeclaration )* -> ( classBodyDeclaration )* ;
    public final JavaParser.enumBodyDeclarations_return enumBodyDeclarations() throws RecognitionException {
        JavaParser.enumBodyDeclarations_return retval = new JavaParser.enumBodyDeclarations_return();
        retval.start = input.LT(1);
        int enumBodyDeclarations_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal50=null;
        JavaParser.classBodyDeclaration_return classBodyDeclaration51 = null;


        Object char_literal50_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleSubtreeStream stream_classBodyDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classBodyDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // jkit/java/Java.g:265:2: ( ';' ( classBodyDeclaration )* -> ( classBodyDeclaration )* )
            // jkit/java/Java.g:265:4: ';' ( classBodyDeclaration )*
            {
            char_literal50=(Token)match(input,117,FOLLOW_117_in_enumBodyDeclarations993); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal50);

            // jkit/java/Java.g:265:8: ( classBodyDeclaration )*
            loop24:
            do {
                int alt24=2;
                alt24 = dfa24.predict(input);
                switch (alt24) {
            	case 1 :
            	    // jkit/java/Java.g:265:9: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations996);
            	    classBodyDeclaration51=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classBodyDeclaration.add(classBodyDeclaration51.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);



            // AST REWRITE
            // elements: classBodyDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 265:32: -> ( classBodyDeclaration )*
            {
                // jkit/java/Java.g:265:35: ( classBodyDeclaration )*
                while ( stream_classBodyDeclaration.hasNext() ) {
                    adaptor.addChild(root_0, stream_classBodyDeclaration.nextTree());

                }
                stream_classBodyDeclaration.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, enumBodyDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBodyDeclarations"

    public static class interfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceDeclaration"
    // jkit/java/Java.g:268:1: interfaceDeclaration : ( normalInterfaceDeclaration | annotationTypeDeclaration );
    public final JavaParser.interfaceDeclaration_return interfaceDeclaration() throws RecognitionException {
        JavaParser.interfaceDeclaration_return retval = new JavaParser.interfaceDeclaration_return();
        retval.start = input.LT(1);
        int interfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.normalInterfaceDeclaration_return normalInterfaceDeclaration52 = null;

        JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration53 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // jkit/java/Java.g:269:2: ( normalInterfaceDeclaration | annotationTypeDeclaration )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==131) ) {
                alt25=1;
            }
            else if ( (LA25_0==163) ) {
                alt25=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;
            }
            switch (alt25) {
                case 1 :
                    // jkit/java/Java.g:269:4: normalInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration1015);
                    normalInterfaceDeclaration52=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalInterfaceDeclaration52.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:270:4: annotationTypeDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration1020);
                    annotationTypeDeclaration53=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration53.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, interfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceDeclaration"

    public static class normalInterfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalInterfaceDeclaration"
    // jkit/java/Java.g:273:1: normalInterfaceDeclaration : 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody -> ^( Identifier ( typeParameters )? ) ( ^( IMPLEMENTS typeList ) )? ( interfaceBody )? ;
    public final JavaParser.normalInterfaceDeclaration_return normalInterfaceDeclaration() throws RecognitionException {
        JavaParser.normalInterfaceDeclaration_return retval = new JavaParser.normalInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int normalInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal54=null;
        Token Identifier55=null;
        Token string_literal57=null;
        JavaParser.typeParameters_return typeParameters56 = null;

        JavaParser.typeList_return typeList58 = null;

        JavaParser.interfaceBody_return interfaceBody59 = null;


        Object string_literal54_tree=null;
        Object Identifier55_tree=null;
        Object string_literal57_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // jkit/java/Java.g:274:2: ( 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody -> ^( Identifier ( typeParameters )? ) ( ^( IMPLEMENTS typeList ) )? ( interfaceBody )? )
            // jkit/java/Java.g:274:4: 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody
            {
            string_literal54=(Token)match(input,131,FOLLOW_131_in_normalInterfaceDeclaration1032); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(string_literal54);

            Identifier55=(Token)match(input,Identifier,FOLLOW_Identifier_in_normalInterfaceDeclaration1034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier55);

            // jkit/java/Java.g:274:27: ( typeParameters )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==125) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // jkit/java/Java.g:0:0: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration1036);
                    typeParameters56=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters56.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:274:43: ( 'extends' typeList )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==123) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // jkit/java/Java.g:274:44: 'extends' typeList
                    {
                    string_literal57=(Token)match(input,123,FOLLOW_123_in_normalInterfaceDeclaration1040); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_123.add(string_literal57);

                    pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration1042);
                    typeList58=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList58.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_normalInterfaceDeclaration1046);
            interfaceBody59=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceBody.add(interfaceBody59.getTree());


            // AST REWRITE
            // elements: interfaceBody, typeList, typeParameters, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 274:79: -> ^( Identifier ( typeParameters )? ) ( ^( IMPLEMENTS typeList ) )? ( interfaceBody )?
            {
                // jkit/java/Java.g:274:82: ^( Identifier ( typeParameters )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/Java.g:274:95: ( typeParameters )?
                if ( stream_typeParameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeParameters.nextTree());

                }
                stream_typeParameters.reset();

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/Java.g:274:112: ( ^( IMPLEMENTS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:274:112: ^( IMPLEMENTS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPLEMENTS, "IMPLEMENTS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();
                // jkit/java/Java.g:274:136: ( interfaceBody )?
                if ( stream_interfaceBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_interfaceBody.nextTree());

                }
                stream_interfaceBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, normalInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalInterfaceDeclaration"

    public static class typeList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // jkit/java/Java.g:277:1: typeList : type ( ',' type )* ;
    public final JavaParser.typeList_return typeList() throws RecognitionException {
        JavaParser.typeList_return retval = new JavaParser.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal61=null;
        JavaParser.type_return type60 = null;

        JavaParser.type_return type62 = null;


        Object char_literal61_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // jkit/java/Java.g:278:2: ( type ( ',' type )* )
            // jkit/java/Java.g:278:4: type ( ',' type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList1077);
            type60=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type60.getTree());
            // jkit/java/Java.g:278:9: ( ',' type )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==126) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // jkit/java/Java.g:278:10: ',' type
            	    {
            	    char_literal61=(Token)match(input,126,FOLLOW_126_in_typeList1080); if (state.failed) return retval;
            	    pushFollow(FOLLOW_type_in_typeList1083);
            	    type62=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type62.getTree());

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class classBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // jkit/java/Java.g:281:1: classBody : '{' ( classBodyDeclaration )* '}' ;
    public final JavaParser.classBody_return classBody() throws RecognitionException {
        JavaParser.classBody_return retval = new JavaParser.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal63=null;
        Token char_literal65=null;
        JavaParser.classBodyDeclaration_return classBodyDeclaration64 = null;


        Object char_literal63_tree=null;
        Object char_literal65_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // jkit/java/Java.g:282:2: ( '{' ( classBodyDeclaration )* '}' )
            // jkit/java/Java.g:282:4: '{' ( classBodyDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal63=(Token)match(input,129,FOLLOW_129_in_classBody1097); if (state.failed) return retval;
            // jkit/java/Java.g:282:9: ( classBodyDeclaration )*
            loop29:
            do {
                int alt29=2;
                alt29 = dfa29.predict(input);
                switch (alt29) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_classBody1100);
            	    classBodyDeclaration64=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBodyDeclaration64.getTree());

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);

            char_literal65=(Token)match(input,130,FOLLOW_130_in_classBody1103); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // jkit/java/Java.g:285:1: interfaceBody : '{' ( interfaceBodyDeclaration )* '}' ;
    public final JavaParser.interfaceBody_return interfaceBody() throws RecognitionException {
        JavaParser.interfaceBody_return retval = new JavaParser.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal66=null;
        Token char_literal68=null;
        JavaParser.interfaceBodyDeclaration_return interfaceBodyDeclaration67 = null;


        Object char_literal66_tree=null;
        Object char_literal68_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // jkit/java/Java.g:286:2: ( '{' ( interfaceBodyDeclaration )* '}' )
            // jkit/java/Java.g:286:4: '{' ( interfaceBodyDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal66=(Token)match(input,129,FOLLOW_129_in_interfaceBody1116); if (state.failed) return retval;
            // jkit/java/Java.g:286:9: ( interfaceBodyDeclaration )*
            loop30:
            do {
                int alt30=2;
                alt30 = dfa30.predict(input);
                switch (alt30) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: interfaceBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody1119);
            	    interfaceBodyDeclaration67=interfaceBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceBodyDeclaration67.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);

            char_literal68=(Token)match(input,130,FOLLOW_130_in_interfaceBody1122); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class classBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBodyDeclaration"
    // jkit/java/Java.g:289:1: classBodyDeclaration : ( ';' | 'static' block -> ^( STATIC block ) | ( 'static' )? block -> block | ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) ) );
    public final JavaParser.classBodyDeclaration_return classBodyDeclaration() throws RecognitionException {
        JavaParser.classBodyDeclaration_return retval = new JavaParser.classBodyDeclaration_return();
        retval.start = input.LT(1);
        int classBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal69=null;
        Token string_literal70=null;
        Token string_literal72=null;
        Token string_literal78=null;
        Token Identifier79=null;
        Token Identifier81=null;
        JavaParser.block_return block71 = null;

        JavaParser.block_return block73 = null;

        JavaParser.modifier_return modifier74 = null;

        JavaParser.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl75 = null;

        JavaParser.methodDeclaration_return methodDeclaration76 = null;

        JavaParser.fieldDeclaration_return fieldDeclaration77 = null;

        JavaParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest80 = null;

        JavaParser.constructorDeclaratorRest_return constructorDeclaratorRest82 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration83 = null;

        JavaParser.classDeclaration_return classDeclaration84 = null;

        JavaParser.enumDeclaration_return enumDeclaration85 = null;


        Object char_literal69_tree=null;
        Object string_literal70_tree=null;
        Object string_literal72_tree=null;
        Object string_literal78_tree=null;
        Object Identifier79_tree=null;
        Object Identifier81_tree=null;
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleSubtreeStream stream_constructorDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constructorDeclaratorRest");
        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_fieldDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule fieldDeclaration");
        RewriteRuleSubtreeStream stream_enumDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule enumDeclaration");
        RewriteRuleSubtreeStream stream_genericMethodOrConstructorDecl=new RewriteRuleSubtreeStream(adaptor,"rule genericMethodOrConstructorDecl");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        RewriteRuleSubtreeStream stream_voidMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule voidMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_methodDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaration");
        RewriteRuleSubtreeStream stream_interfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDeclaration");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // jkit/java/Java.g:290:2: ( ';' | 'static' block -> ^( STATIC block ) | ( 'static' )? block -> block | ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) ) )
            int alt34=4;
            alt34 = dfa34.predict(input);
            switch (alt34) {
                case 1 :
                    // jkit/java/Java.g:290:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal69=(Token)match(input,117,FOLLOW_117_in_classBodyDeclaration1134); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:291:4: 'static' block
                    {
                    string_literal70=(Token)match(input,119,FOLLOW_119_in_classBodyDeclaration1140); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_119.add(string_literal70);

                    pushFollow(FOLLOW_block_in_classBodyDeclaration1142);
                    block71=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block71.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 291:19: -> ^( STATIC block )
                    {
                        // jkit/java/Java.g:291:22: ^( STATIC block )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STATIC, "STATIC"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:292:4: ( 'static' )? block
                    {
                    // jkit/java/Java.g:292:4: ( 'static' )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==119) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // jkit/java/Java.g:0:0: 'static'
                            {
                            string_literal72=(Token)match(input,119,FOLLOW_119_in_classBodyDeclaration1155); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_119.add(string_literal72);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_classBodyDeclaration1158);
                    block73=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block73.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 292:20: -> block
                    {
                        adaptor.addChild(root_0, stream_block.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:293:4: ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) )
                    {
                    // jkit/java/Java.g:293:4: ( modifier )*
                    loop32:
                    do {
                        int alt32=2;
                        alt32 = dfa32.predict(input);
                        switch (alt32) {
                    	case 1 :
                    	    // jkit/java/Java.g:0:0: modifier
                    	    {
                    	    pushFollow(FOLLOW_modifier_in_classBodyDeclaration1167);
                    	    modifier74=modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_modifier.add(modifier74.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop32;
                        }
                    } while (true);

                    // jkit/java/Java.g:293:14: ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) )
                    int alt33=8;
                    alt33 = dfa33.predict(input);
                    switch (alt33) {
                        case 1 :
                            // jkit/java/Java.g:294:6: genericMethodOrConstructorDecl
                            {
                            pushFollow(FOLLOW_genericMethodOrConstructorDecl_in_classBodyDeclaration1177);
                            genericMethodOrConstructorDecl75=genericMethodOrConstructorDecl();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericMethodOrConstructorDecl.add(genericMethodOrConstructorDecl75.getTree());


                            // AST REWRITE
                            // elements: modifier, genericMethodOrConstructorDecl
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 294:37: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl )
                            {
                                // jkit/java/Java.g:294:40: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:294:49: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:294:49: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:294:61: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_genericMethodOrConstructorDecl.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:295:9: methodDeclaration
                            {
                            pushFollow(FOLLOW_methodDeclaration_in_classBodyDeclaration1203);
                            methodDeclaration76=methodDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_methodDeclaration.add(methodDeclaration76.getTree());


                            // AST REWRITE
                            // elements: methodDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 295:27: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration )
                            {
                                // jkit/java/Java.g:295:30: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:295:39: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:295:39: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:295:51: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_methodDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:296:9: fieldDeclaration
                            {
                            pushFollow(FOLLOW_fieldDeclaration_in_classBodyDeclaration1229);
                            fieldDeclaration77=fieldDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldDeclaration.add(fieldDeclaration77.getTree());


                            // AST REWRITE
                            // elements: fieldDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 296:26: -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration )
                            {
                                // jkit/java/Java.g:296:29: ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FIELD, "FIELD"), root_1);

                                // jkit/java/Java.g:296:37: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:296:37: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:296:49: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_fieldDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // jkit/java/Java.g:297:8: 'void' Identifier voidMethodDeclaratorRest
                            {
                            string_literal78=(Token)match(input,132,FOLLOW_132_in_classBodyDeclaration1254); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_132.add(string_literal78);

                            Identifier79=(Token)match(input,Identifier,FOLLOW_Identifier_in_classBodyDeclaration1256); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier79);

                            pushFollow(FOLLOW_voidMethodDeclaratorRest_in_classBodyDeclaration1258);
                            voidMethodDeclaratorRest80=voidMethodDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_voidMethodDeclaratorRest.add(voidMethodDeclaratorRest80.getTree());


                            // AST REWRITE
                            // elements: modifier, Identifier, voidMethodDeclaratorRest
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 297:51: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? )
                            {
                                // jkit/java/Java.g:297:54: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:297:63: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:297:63: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:297:75: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:297:98: ^( TYPE VOID )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, (Object)adaptor.create(VOID, "VOID"));

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:297:111: ( voidMethodDeclaratorRest )?
                                if ( stream_voidMethodDeclaratorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_voidMethodDeclaratorRest.nextTree());

                                }
                                stream_voidMethodDeclaratorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // jkit/java/Java.g:298:8: Identifier constructorDeclaratorRest
                            {
                            Identifier81=(Token)match(input,Identifier,FOLLOW_Identifier_in_classBodyDeclaration1292); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier81);

                            pushFollow(FOLLOW_constructorDeclaratorRest_in_classBodyDeclaration1294);
                            constructorDeclaratorRest82=constructorDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constructorDeclaratorRest.add(constructorDeclaratorRest82.getTree());


                            // AST REWRITE
                            // elements: modifier, constructorDeclaratorRest, Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 298:45: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest )
                            {
                                // jkit/java/Java.g:298:48: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:298:57: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:298:57: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:298:69: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:298:92: ^( NONE )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(NONE, "NONE"), root_2);

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_constructorDeclaratorRest.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 6 :
                            // jkit/java/Java.g:299:8: interfaceDeclaration
                            {
                            pushFollow(FOLLOW_interfaceDeclaration_in_classBodyDeclaration1325);
                            interfaceDeclaration83=interfaceDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceDeclaration.add(interfaceDeclaration83.getTree());


                            // AST REWRITE
                            // elements: interfaceDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 299:29: -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                            {
                                // jkit/java/Java.g:299:32: ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                                // jkit/java/Java.g:299:44: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:299:44: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:299:56: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_interfaceDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 7 :
                            // jkit/java/Java.g:300:8: classDeclaration
                            {
                            pushFollow(FOLLOW_classDeclaration_in_classBodyDeclaration1350);
                            classDeclaration84=classDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classDeclaration.add(classDeclaration84.getTree());


                            // AST REWRITE
                            // elements: classDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 300:25: -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                            {
                                // jkit/java/Java.g:300:28: ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CLASS, "CLASS"), root_1);

                                // jkit/java/Java.g:300:36: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:300:36: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:300:48: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_classDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 8 :
                            // jkit/java/Java.g:301:10: enumDeclaration
                            {
                            pushFollow(FOLLOW_enumDeclaration_in_classBodyDeclaration1377);
                            enumDeclaration85=enumDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_enumDeclaration.add(enumDeclaration85.getTree());


                            // AST REWRITE
                            // elements: enumDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 301:26: -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                            {
                                // jkit/java/Java.g:301:29: ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ENUM, "ENUM"), root_1);

                                // jkit/java/Java.g:301:36: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:301:36: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:301:48: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_enumDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, classBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBodyDeclaration"

    public static class genericMethodOrConstructorDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorDecl"
    // jkit/java/Java.g:305:1: genericMethodOrConstructorDecl : typeParameters genericMethodOrConstructorRest ;
    public final JavaParser.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl() throws RecognitionException {
        JavaParser.genericMethodOrConstructorDecl_return retval = new JavaParser.genericMethodOrConstructorDecl_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorDecl_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.typeParameters_return typeParameters86 = null;

        JavaParser.genericMethodOrConstructorRest_return genericMethodOrConstructorRest87 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // jkit/java/Java.g:306:2: ( typeParameters genericMethodOrConstructorRest )
            // jkit/java/Java.g:306:4: typeParameters genericMethodOrConstructorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeParameters_in_genericMethodOrConstructorDecl1411);
            typeParameters86=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameters86.getTree());
            pushFollow(FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl1413);
            genericMethodOrConstructorRest87=genericMethodOrConstructorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, genericMethodOrConstructorRest87.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, genericMethodOrConstructorDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorDecl"

    public static class genericMethodOrConstructorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorRest"
    // jkit/java/Java.g:309:1: genericMethodOrConstructorRest : ( type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? | 'void' Identifier methodDeclaratorRest -> Identifier ^( TYPE VOID ) ( methodDeclaratorRest )? | Identifier constructorDeclaratorRest -> Identifier ^( NONE ) constructorDeclaratorRest );
    public final JavaParser.genericMethodOrConstructorRest_return genericMethodOrConstructorRest() throws RecognitionException {
        JavaParser.genericMethodOrConstructorRest_return retval = new JavaParser.genericMethodOrConstructorRest_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorRest_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier89=null;
        Token string_literal91=null;
        Token Identifier92=null;
        Token Identifier94=null;
        JavaParser.type_return type88 = null;

        JavaParser.methodDeclaratorRest_return methodDeclaratorRest90 = null;

        JavaParser.methodDeclaratorRest_return methodDeclaratorRest93 = null;

        JavaParser.constructorDeclaratorRest_return constructorDeclaratorRest95 = null;


        Object Identifier89_tree=null;
        Object string_literal91_tree=null;
        Object Identifier92_tree=null;
        Object Identifier94_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleSubtreeStream stream_constructorDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constructorDeclaratorRest");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_methodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // jkit/java/Java.g:310:2: ( type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? | 'void' Identifier methodDeclaratorRest -> Identifier ^( TYPE VOID ) ( methodDeclaratorRest )? | Identifier constructorDeclaratorRest -> Identifier ^( NONE ) constructorDeclaratorRest )
            int alt35=3;
            switch ( input.LA(1) ) {
            case Identifier:
                {
                int LA35_1 = input.LA(2);

                if ( (LA35_1==157) ) {
                    alt35=3;
                }
                else if ( (LA35_1==Identifier||LA35_1==120||LA35_1==125||LA35_1==134) ) {
                    alt35=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 1, input);

                    throw nvae;
                }
                }
                break;
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
                {
                alt35=1;
                }
                break;
            case 132:
                {
                alt35=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;
            }

            switch (alt35) {
                case 1 :
                    // jkit/java/Java.g:310:4: type Identifier methodDeclaratorRest
                    {
                    pushFollow(FOLLOW_type_in_genericMethodOrConstructorRest1425);
                    type88=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type88.getTree());
                    Identifier89=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier89);

                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1429);
                    methodDeclaratorRest90=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest90.getTree());


                    // AST REWRITE
                    // elements: Identifier, type, methodDeclaratorRest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 310:41: -> Identifier type ( methodDeclaratorRest )?
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        adaptor.addChild(root_0, stream_type.nextTree());
                        // jkit/java/Java.g:310:60: ( methodDeclaratorRest )?
                        if ( stream_methodDeclaratorRest.hasNext() ) {
                            adaptor.addChild(root_0, stream_methodDeclaratorRest.nextTree());

                        }
                        stream_methodDeclaratorRest.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:311:4: 'void' Identifier methodDeclaratorRest
                    {
                    string_literal91=(Token)match(input,132,FOLLOW_132_in_genericMethodOrConstructorRest1443); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_132.add(string_literal91);

                    Identifier92=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1445); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier92);

                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1447);
                    methodDeclaratorRest93=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest93.getTree());


                    // AST REWRITE
                    // elements: methodDeclaratorRest, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 311:43: -> Identifier ^( TYPE VOID ) ( methodDeclaratorRest )?
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/Java.g:311:57: ^( TYPE VOID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(VOID, "VOID"));

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/Java.g:311:70: ( methodDeclaratorRest )?
                        if ( stream_methodDeclaratorRest.hasNext() ) {
                            adaptor.addChild(root_0, stream_methodDeclaratorRest.nextTree());

                        }
                        stream_methodDeclaratorRest.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:312:4: Identifier constructorDeclaratorRest
                    {
                    Identifier94=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1465); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier94);

                    pushFollow(FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest1467);
                    constructorDeclaratorRest95=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constructorDeclaratorRest.add(constructorDeclaratorRest95.getTree());


                    // AST REWRITE
                    // elements: Identifier, constructorDeclaratorRest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 312:41: -> Identifier ^( NONE ) constructorDeclaratorRest
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/Java.g:312:55: ^( NONE )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NONE, "NONE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_constructorDeclaratorRest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, genericMethodOrConstructorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorRest"

    public static class methodDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaration"
    // jkit/java/Java.g:315:1: methodDeclaration : type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? ;
    public final JavaParser.methodDeclaration_return methodDeclaration() throws RecognitionException {
        JavaParser.methodDeclaration_return retval = new JavaParser.methodDeclaration_return();
        retval.start = input.LT(1);
        int methodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier97=null;
        JavaParser.type_return type96 = null;

        JavaParser.methodDeclaratorRest_return methodDeclaratorRest98 = null;


        Object Identifier97_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_methodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // jkit/java/Java.g:316:2: ( type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? )
            // jkit/java/Java.g:316:4: type Identifier methodDeclaratorRest
            {
            pushFollow(FOLLOW_type_in_methodDeclaration1488);
            type96=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type96.getTree());
            Identifier97=(Token)match(input,Identifier,FOLLOW_Identifier_in_methodDeclaration1490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier97);

            pushFollow(FOLLOW_methodDeclaratorRest_in_methodDeclaration1492);
            methodDeclaratorRest98=methodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest98.getTree());


            // AST REWRITE
            // elements: type, methodDeclaratorRest, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 316:41: -> Identifier type ( methodDeclaratorRest )?
            {
                adaptor.addChild(root_0, stream_Identifier.nextNode());
                adaptor.addChild(root_0, stream_type.nextTree());
                // jkit/java/Java.g:316:60: ( methodDeclaratorRest )?
                if ( stream_methodDeclaratorRest.hasNext() ) {
                    adaptor.addChild(root_0, stream_methodDeclaratorRest.nextTree());

                }
                stream_methodDeclaratorRest.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, methodDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodDeclaration"

    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fieldDeclaration"
    // jkit/java/Java.g:319:1: fieldDeclaration : type variableDeclarators ';' -> type variableDeclarators ;
    public final JavaParser.fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        JavaParser.fieldDeclaration_return retval = new JavaParser.fieldDeclaration_return();
        retval.start = input.LT(1);
        int fieldDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal101=null;
        JavaParser.type_return type99 = null;

        JavaParser.variableDeclarators_return variableDeclarators100 = null;


        Object char_literal101_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // jkit/java/Java.g:320:2: ( type variableDeclarators ';' -> type variableDeclarators )
            // jkit/java/Java.g:320:4: type variableDeclarators ';'
            {
            pushFollow(FOLLOW_type_in_fieldDeclaration1512);
            type99=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type99.getTree());
            pushFollow(FOLLOW_variableDeclarators_in_fieldDeclaration1514);
            variableDeclarators100=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarators.add(variableDeclarators100.getTree());
            char_literal101=(Token)match(input,117,FOLLOW_117_in_fieldDeclaration1516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal101);



            // AST REWRITE
            // elements: type, variableDeclarators
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 320:33: -> type variableDeclarators
            {
                adaptor.addChild(root_0, stream_type.nextTree());
                adaptor.addChild(root_0, stream_variableDeclarators.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, fieldDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fieldDeclaration"

    public static class interfaceBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBodyDeclaration"
    // jkit/java/Java.g:323:1: interfaceBodyDeclaration : ( ( modifier )* ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) ) | ';' );
    public final JavaParser.interfaceBodyDeclaration_return interfaceBodyDeclaration() throws RecognitionException {
        JavaParser.interfaceBodyDeclaration_return retval = new JavaParser.interfaceBodyDeclaration_return();
        retval.start = input.LT(1);
        int interfaceBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier105=null;
        Token string_literal108=null;
        Token Identifier109=null;
        Token char_literal113=null;
        JavaParser.modifier_return modifier102 = null;

        JavaParser.constantDeclaration_return constantDeclaration103 = null;

        JavaParser.type_return type104 = null;

        JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest106 = null;

        JavaParser.interfaceGenericMethodDecl_return interfaceGenericMethodDecl107 = null;

        JavaParser.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest110 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration111 = null;

        JavaParser.classDeclaration_return classDeclaration112 = null;


        Object Identifier105_tree=null;
        Object string_literal108_tree=null;
        Object Identifier109_tree=null;
        Object char_literal113_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleSubtreeStream stream_interfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule interfaceMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_voidInterfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule voidInterfaceMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_constantDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclaration");
        RewriteRuleSubtreeStream stream_interfaceGenericMethodDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceGenericMethodDecl");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        RewriteRuleSubtreeStream stream_interfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // jkit/java/Java.g:324:2: ( ( modifier )* ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) ) | ';' )
            int alt38=2;
            alt38 = dfa38.predict(input);
            switch (alt38) {
                case 1 :
                    // jkit/java/Java.g:324:4: ( modifier )* ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) )
                    {
                    // jkit/java/Java.g:324:4: ( modifier )*
                    loop36:
                    do {
                        int alt36=2;
                        alt36 = dfa36.predict(input);
                        switch (alt36) {
                    	case 1 :
                    	    // jkit/java/Java.g:0:0: modifier
                    	    {
                    	    pushFollow(FOLLOW_modifier_in_interfaceBodyDeclaration1535);
                    	    modifier102=modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_modifier.add(modifier102.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop36;
                        }
                    } while (true);

                    // jkit/java/Java.g:324:14: ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) )
                    int alt37=6;
                    alt37 = dfa37.predict(input);
                    switch (alt37) {
                        case 1 :
                            // jkit/java/Java.g:325:3: constantDeclaration
                            {
                            pushFollow(FOLLOW_constantDeclaration_in_interfaceBodyDeclaration1542);
                            constantDeclaration103=constantDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constantDeclaration.add(constantDeclaration103.getTree());


                            // AST REWRITE
                            // elements: modifier, constantDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 325:23: -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration )
                            {
                                // jkit/java/Java.g:325:26: ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FIELD, "FIELD"), root_1);

                                // jkit/java/Java.g:325:34: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:325:34: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:325:46: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_constantDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:326:5: type Identifier interfaceMethodDeclaratorRest
                            {
                            pushFollow(FOLLOW_type_in_interfaceBodyDeclaration1564);
                            type104=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type104.getTree());
                            Identifier105=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceBodyDeclaration1566); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier105);

                            pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1568);
                            interfaceMethodDeclaratorRest106=interfaceMethodDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest106.getTree());


                            // AST REWRITE
                            // elements: interfaceMethodDeclaratorRest, type, Identifier, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 326:51: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? )
                            {
                                // jkit/java/Java.g:326:54: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:326:63: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:326:63: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:326:75: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                // jkit/java/Java.g:326:103: ( interfaceMethodDeclaratorRest )?
                                if ( stream_interfaceMethodDeclaratorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_interfaceMethodDeclaratorRest.nextTree());

                                }
                                stream_interfaceMethodDeclaratorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:327:5: interfaceGenericMethodDecl
                            {
                            pushFollow(FOLLOW_interfaceGenericMethodDecl_in_interfaceBodyDeclaration1595);
                            interfaceGenericMethodDecl107=interfaceGenericMethodDecl();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceGenericMethodDecl.add(interfaceGenericMethodDecl107.getTree());


                            // AST REWRITE
                            // elements: interfaceGenericMethodDecl, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 327:32: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl )
                            {
                                // jkit/java/Java.g:327:35: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:327:44: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:327:44: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:327:56: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_interfaceGenericMethodDecl.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // jkit/java/Java.g:328:5: 'void' Identifier voidInterfaceMethodDeclaratorRest
                            {
                            string_literal108=(Token)match(input,132,FOLLOW_132_in_interfaceBodyDeclaration1617); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_132.add(string_literal108);

                            Identifier109=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceBodyDeclaration1619); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier109);

                            pushFollow(FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1621);
                            voidInterfaceMethodDeclaratorRest110=voidInterfaceMethodDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_voidInterfaceMethodDeclaratorRest.add(voidInterfaceMethodDeclaratorRest110.getTree());


                            // AST REWRITE
                            // elements: Identifier, voidInterfaceMethodDeclaratorRest, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 328:57: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? )
                            {
                                // jkit/java/Java.g:328:60: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:328:69: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:328:69: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:328:81: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:328:104: ^( TYPE VOID )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, (Object)adaptor.create(VOID, "VOID"));

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:328:117: ( voidInterfaceMethodDeclaratorRest )?
                                if ( stream_voidInterfaceMethodDeclaratorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_voidInterfaceMethodDeclaratorRest.nextTree());

                                }
                                stream_voidInterfaceMethodDeclaratorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // jkit/java/Java.g:329:5: interfaceDeclaration
                            {
                            pushFollow(FOLLOW_interfaceDeclaration_in_interfaceBodyDeclaration1652);
                            interfaceDeclaration111=interfaceDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceDeclaration.add(interfaceDeclaration111.getTree());


                            // AST REWRITE
                            // elements: modifier, interfaceDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 329:26: -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                            {
                                // jkit/java/Java.g:329:29: ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                                // jkit/java/Java.g:329:41: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:329:41: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:329:53: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_interfaceDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 6 :
                            // jkit/java/Java.g:330:5: classDeclaration
                            {
                            pushFollow(FOLLOW_classDeclaration_in_interfaceBodyDeclaration1675);
                            classDeclaration112=classDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classDeclaration.add(classDeclaration112.getTree());


                            // AST REWRITE
                            // elements: modifier, classDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 330:22: -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                            {
                                // jkit/java/Java.g:330:25: ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CLASS, "CLASS"), root_1);

                                // jkit/java/Java.g:330:33: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:330:33: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:330:45: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_classDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:332:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal113=(Token)match(input,117,FOLLOW_117_in_interfaceBodyDeclaration1700); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, interfaceBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBodyDeclaration"

    public static class methodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaratorRest"
    // jkit/java/Java.g:335:1: methodDeclaratorRest : formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ) ;
    public final JavaParser.methodDeclaratorRest_return methodDeclaratorRest() throws RecognitionException {
        JavaParser.methodDeclaratorRest_return retval = new JavaParser.methodDeclaratorRest_return();
        retval.start = input.LT(1);
        int methodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal115=null;
        Token char_literal118=null;
        JavaParser.formalParameters_return formalParameters114 = null;

        JavaParser.typeList_return typeList116 = null;

        JavaParser.methodBody_return methodBody117 = null;


        Object string_literal115_tree=null;
        Object char_literal118_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // jkit/java/Java.g:336:2: ( formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ) )
            // jkit/java/Java.g:336:4: formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            {
            pushFollow(FOLLOW_formalParameters_in_methodDeclaratorRest1714);
            formalParameters114=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters114.getTree());
            // jkit/java/Java.g:337:9: ( 'throws' typeList )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==133) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // jkit/java/Java.g:337:10: 'throws' typeList
                    {
                    string_literal115=(Token)match(input,133,FOLLOW_133_in_methodDeclaratorRest1726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(string_literal115);

                    pushFollow(FOLLOW_typeList_in_methodDeclaratorRest1728);
                    typeList116=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList116.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:338:9: ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==129) ) {
                alt40=1;
            }
            else if ( (LA40_0==117) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // jkit/java/Java.g:338:13: methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_methodDeclaratorRest1744);
                    methodBody117=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodBody.add(methodBody117.getTree());


                    // AST REWRITE
                    // elements: typeList, methodBody, formalParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 338:24: -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody
                    {
                        // jkit/java/Java.g:338:27: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();
                        // jkit/java/Java.g:338:45: ( ^( THROWS typeList ) )?
                        if ( stream_typeList.hasNext() ) {
                            // jkit/java/Java.g:338:45: ^( THROWS typeList )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                            adaptor.addChild(root_1, stream_typeList.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_typeList.reset();
                        adaptor.addChild(root_0, stream_methodBody.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:339:13: ';'
                    {
                    char_literal118=(Token)match(input,117,FOLLOW_117_in_methodDeclaratorRest1772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal118);



                    // AST REWRITE
                    // elements: typeList, formalParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 339:17: -> ( formalParameters )? ( ^( THROWS typeList ) )?
                    {
                        // jkit/java/Java.g:339:20: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();
                        // jkit/java/Java.g:339:38: ( ^( THROWS typeList ) )?
                        if ( stream_typeList.hasNext() ) {
                            // jkit/java/Java.g:339:38: ^( THROWS typeList )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                            adaptor.addChild(root_1, stream_typeList.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_typeList.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, methodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodDeclaratorRest"

    public static class voidMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidMethodDeclaratorRest"
    // jkit/java/Java.g:343:1: voidMethodDeclaratorRest : formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ) ;
    public final JavaParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest() throws RecognitionException {
        JavaParser.voidMethodDeclaratorRest_return retval = new JavaParser.voidMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal120=null;
        Token char_literal123=null;
        JavaParser.formalParameters_return formalParameters119 = null;

        JavaParser.typeList_return typeList121 = null;

        JavaParser.methodBody_return methodBody122 = null;


        Object string_literal120_tree=null;
        Object char_literal123_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // jkit/java/Java.g:344:2: ( formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ) )
            // jkit/java/Java.g:344:4: formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            {
            pushFollow(FOLLOW_formalParameters_in_voidMethodDeclaratorRest1806);
            formalParameters119=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters119.getTree());
            // jkit/java/Java.g:344:21: ( 'throws' typeList )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==133) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // jkit/java/Java.g:344:22: 'throws' typeList
                    {
                    string_literal120=(Token)match(input,133,FOLLOW_133_in_voidMethodDeclaratorRest1809); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(string_literal120);

                    pushFollow(FOLLOW_typeList_in_voidMethodDeclaratorRest1811);
                    typeList121=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList121.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:345:9: ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==129) ) {
                alt42=1;
            }
            else if ( (LA42_0==117) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    // jkit/java/Java.g:345:13: methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_voidMethodDeclaratorRest1827);
                    methodBody122=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodBody.add(methodBody122.getTree());


                    // AST REWRITE
                    // elements: typeList, formalParameters, methodBody
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 345:24: -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody
                    {
                        // jkit/java/Java.g:345:27: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();
                        // jkit/java/Java.g:345:45: ( ^( THROWS typeList ) )?
                        if ( stream_typeList.hasNext() ) {
                            // jkit/java/Java.g:345:45: ^( THROWS typeList )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                            adaptor.addChild(root_1, stream_typeList.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_typeList.reset();
                        adaptor.addChild(root_0, stream_methodBody.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:346:13: ';'
                    {
                    char_literal123=(Token)match(input,117,FOLLOW_117_in_voidMethodDeclaratorRest1855); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal123);



                    // AST REWRITE
                    // elements: typeList, formalParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 346:17: -> ( formalParameters )? ( ^( THROWS typeList ) )?
                    {
                        // jkit/java/Java.g:346:20: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();
                        // jkit/java/Java.g:346:38: ( ^( THROWS typeList ) )?
                        if ( stream_typeList.hasNext() ) {
                            // jkit/java/Java.g:346:38: ^( THROWS typeList )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                            adaptor.addChild(root_1, stream_typeList.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_typeList.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, voidMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidMethodDeclaratorRest"

    public static class interfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodDeclaratorRest"
    // jkit/java/Java.g:350:1: interfaceMethodDeclaratorRest : formalParameters ( 'throws' typeList )? ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ;
    public final JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest() throws RecognitionException {
        JavaParser.interfaceMethodDeclaratorRest_return retval = new JavaParser.interfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int interfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal125=null;
        Token char_literal127=null;
        JavaParser.formalParameters_return formalParameters124 = null;

        JavaParser.typeList_return typeList126 = null;


        Object string_literal125_tree=null;
        Object char_literal127_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // jkit/java/Java.g:351:2: ( formalParameters ( 'throws' typeList )? ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            // jkit/java/Java.g:351:4: formalParameters ( 'throws' typeList )? ';'
            {
            pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest1889);
            formalParameters124=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters124.getTree());
            // jkit/java/Java.g:351:21: ( 'throws' typeList )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==133) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // jkit/java/Java.g:351:22: 'throws' typeList
                    {
                    string_literal125=(Token)match(input,133,FOLLOW_133_in_interfaceMethodDeclaratorRest1892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(string_literal125);

                    pushFollow(FOLLOW_typeList_in_interfaceMethodDeclaratorRest1894);
                    typeList126=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList126.getTree());

                    }
                    break;

            }

            char_literal127=(Token)match(input,117,FOLLOW_117_in_interfaceMethodDeclaratorRest1898); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal127);



            // AST REWRITE
            // elements: typeList, formalParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 351:46: -> ( formalParameters )? ( ^( THROWS typeList ) )?
            {
                // jkit/java/Java.g:351:49: ( formalParameters )?
                if ( stream_formalParameters.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameters.nextTree());

                }
                stream_formalParameters.reset();
                // jkit/java/Java.g:351:67: ( ^( THROWS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:351:67: ^( THROWS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, interfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodDeclaratorRest"

    public static class interfaceGenericMethodDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceGenericMethodDecl"
    // jkit/java/Java.g:354:1: interfaceGenericMethodDecl : typeParameters ( type Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier type interfaceMethodDeclaratorRest | 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest ) ;
    public final JavaParser.interfaceGenericMethodDecl_return interfaceGenericMethodDecl() throws RecognitionException {
        JavaParser.interfaceGenericMethodDecl_return retval = new JavaParser.interfaceGenericMethodDecl_return();
        retval.start = input.LT(1);
        int interfaceGenericMethodDecl_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier130=null;
        Token string_literal132=null;
        Token Identifier133=null;
        JavaParser.typeParameters_return typeParameters128 = null;

        JavaParser.type_return type129 = null;

        JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest131 = null;

        JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest134 = null;


        Object Identifier130_tree=null;
        Object string_literal132_tree=null;
        Object Identifier133_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleSubtreeStream stream_interfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule interfaceMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // jkit/java/Java.g:355:2: ( typeParameters ( type Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier type interfaceMethodDeclaratorRest | 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest ) )
            // jkit/java/Java.g:355:4: typeParameters ( type Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier type interfaceMethodDeclaratorRest | 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest )
            {
            pushFollow(FOLLOW_typeParameters_in_interfaceGenericMethodDecl1922);
            typeParameters128=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters128.getTree());
            // jkit/java/Java.g:356:3: ( type Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier type interfaceMethodDeclaratorRest | 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==Identifier||(LA44_0>=147 && LA44_0<=154)) ) {
                alt44=1;
            }
            else if ( (LA44_0==132) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // jkit/java/Java.g:356:4: type Identifier interfaceMethodDeclaratorRest
                    {
                    pushFollow(FOLLOW_type_in_interfaceGenericMethodDecl1928);
                    type129=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type129.getTree());
                    Identifier130=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceGenericMethodDecl1930); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier130);

                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl1932);
                    interfaceMethodDeclaratorRest131=interfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest131.getTree());


                    // AST REWRITE
                    // elements: type, interfaceMethodDeclaratorRest, Identifier, typeParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 356:50: -> typeParameters Identifier type interfaceMethodDeclaratorRest
                    {
                        adaptor.addChild(root_0, stream_typeParameters.nextTree());
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        adaptor.addChild(root_0, stream_type.nextTree());
                        adaptor.addChild(root_0, stream_interfaceMethodDeclaratorRest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:357:5: 'void' Identifier interfaceMethodDeclaratorRest
                    {
                    string_literal132=(Token)match(input,132,FOLLOW_132_in_interfaceGenericMethodDecl1948); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_132.add(string_literal132);

                    Identifier133=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceGenericMethodDecl1950); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier133);

                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl1952);
                    interfaceMethodDeclaratorRest134=interfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest134.getTree());


                    // AST REWRITE
                    // elements: interfaceMethodDeclaratorRest, Identifier, typeParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 357:53: -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest
                    {
                        adaptor.addChild(root_0, stream_typeParameters.nextTree());
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/Java.g:357:82: ^( TYPE VOID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(VOID, "VOID"));

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_interfaceMethodDeclaratorRest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, interfaceGenericMethodDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceGenericMethodDecl"

    public static class voidInterfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidInterfaceMethodDeclaratorRest"
    // jkit/java/Java.g:361:1: voidInterfaceMethodDeclaratorRest : formalParameters ( 'throws' typeList )? ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ;
    public final JavaParser.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest() throws RecognitionException {
        JavaParser.voidInterfaceMethodDeclaratorRest_return retval = new JavaParser.voidInterfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidInterfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal136=null;
        Token char_literal138=null;
        JavaParser.formalParameters_return formalParameters135 = null;

        JavaParser.typeList_return typeList137 = null;


        Object string_literal136_tree=null;
        Object char_literal138_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // jkit/java/Java.g:362:2: ( formalParameters ( 'throws' typeList )? ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            // jkit/java/Java.g:362:4: formalParameters ( 'throws' typeList )? ';'
            {
            pushFollow(FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest1982);
            formalParameters135=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters135.getTree());
            // jkit/java/Java.g:362:21: ( 'throws' typeList )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==133) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // jkit/java/Java.g:362:22: 'throws' typeList
                    {
                    string_literal136=(Token)match(input,133,FOLLOW_133_in_voidInterfaceMethodDeclaratorRest1985); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(string_literal136);

                    pushFollow(FOLLOW_typeList_in_voidInterfaceMethodDeclaratorRest1987);
                    typeList137=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList137.getTree());

                    }
                    break;

            }

            char_literal138=(Token)match(input,117,FOLLOW_117_in_voidInterfaceMethodDeclaratorRest1991); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal138);



            // AST REWRITE
            // elements: typeList, formalParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 362:46: -> ( formalParameters )? ( ^( THROWS typeList ) )?
            {
                // jkit/java/Java.g:362:49: ( formalParameters )?
                if ( stream_formalParameters.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameters.nextTree());

                }
                stream_formalParameters.reset();
                // jkit/java/Java.g:362:67: ( ^( THROWS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:362:67: ^( THROWS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, voidInterfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidInterfaceMethodDeclaratorRest"

    public static class constructorDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorDeclaratorRest"
    // jkit/java/Java.g:365:1: constructorDeclaratorRest : formalParameters ( 'throws' typeList )? methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody ;
    public final JavaParser.constructorDeclaratorRest_return constructorDeclaratorRest() throws RecognitionException {
        JavaParser.constructorDeclaratorRest_return retval = new JavaParser.constructorDeclaratorRest_return();
        retval.start = input.LT(1);
        int constructorDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal140=null;
        JavaParser.formalParameters_return formalParameters139 = null;

        JavaParser.typeList_return typeList141 = null;

        JavaParser.methodBody_return methodBody142 = null;


        Object string_literal140_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // jkit/java/Java.g:366:2: ( formalParameters ( 'throws' typeList )? methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody )
            // jkit/java/Java.g:366:4: formalParameters ( 'throws' typeList )? methodBody
            {
            pushFollow(FOLLOW_formalParameters_in_constructorDeclaratorRest2015);
            formalParameters139=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters139.getTree());
            // jkit/java/Java.g:366:21: ( 'throws' typeList )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==133) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // jkit/java/Java.g:366:22: 'throws' typeList
                    {
                    string_literal140=(Token)match(input,133,FOLLOW_133_in_constructorDeclaratorRest2018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(string_literal140);

                    pushFollow(FOLLOW_typeList_in_constructorDeclaratorRest2020);
                    typeList141=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList141.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_methodBody_in_constructorDeclaratorRest2024);
            methodBody142=methodBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_methodBody.add(methodBody142.getTree());


            // AST REWRITE
            // elements: typeList, methodBody, formalParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 366:53: -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody
            {
                // jkit/java/Java.g:366:56: ( formalParameters )?
                if ( stream_formalParameters.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameters.nextTree());

                }
                stream_formalParameters.reset();
                // jkit/java/Java.g:366:74: ( ^( THROWS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:366:74: ^( THROWS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();
                adaptor.addChild(root_0, stream_methodBody.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, constructorDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructorDeclaratorRest"

    public static class variableDeclarators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarators"
    // jkit/java/Java.g:370:1: variableDeclarators : i+= variableDeclarator ( ',' i+= variableDeclarator )* -> ( $i)+ ;
    public final JavaParser.variableDeclarators_return variableDeclarators() throws RecognitionException {
        JavaParser.variableDeclarators_return retval = new JavaParser.variableDeclarators_return();
        retval.start = input.LT(1);
        int variableDeclarators_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal143=null;
        List list_i=null;
        JavaParser.variableDeclarator_return i = null;
        Object char_literal143_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_variableDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // jkit/java/Java.g:371:2: (i+= variableDeclarator ( ',' i+= variableDeclarator )* -> ( $i)+ )
            // jkit/java/Java.g:371:4: i+= variableDeclarator ( ',' i+= variableDeclarator )*
            {
            pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators2053);
            i=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarator.add(i.getTree());
            if (list_i==null) list_i=new ArrayList();
            list_i.add(i.getTree());

            // jkit/java/Java.g:371:26: ( ',' i+= variableDeclarator )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==126) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // jkit/java/Java.g:371:27: ',' i+= variableDeclarator
            	    {
            	    char_literal143=(Token)match(input,126,FOLLOW_126_in_variableDeclarators2056); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_126.add(char_literal143);

            	    pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators2060);
            	    i=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableDeclarator.add(i.getTree());
            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i.getTree());


            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: i
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
            root_0 = (Object)adaptor.nil();
            // 371:55: -> ( $i)+
            {
                if ( !(stream_i.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_0, stream_i.nextTree());

                }
                stream_i.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, variableDeclarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarators"

    public static class variableDeclarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarator"
    // jkit/java/Java.g:374:1: variableDeclarator : Identifier variableDeclaratorRest -> ^( Identifier ( variableDeclaratorRest )? ) ;
    public final JavaParser.variableDeclarator_return variableDeclarator() throws RecognitionException {
        JavaParser.variableDeclarator_return retval = new JavaParser.variableDeclarator_return();
        retval.start = input.LT(1);
        int variableDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier144=null;
        JavaParser.variableDeclaratorRest_return variableDeclaratorRest145 = null;


        Object Identifier144_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_variableDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // jkit/java/Java.g:375:2: ( Identifier variableDeclaratorRest -> ^( Identifier ( variableDeclaratorRest )? ) )
            // jkit/java/Java.g:375:4: Identifier variableDeclaratorRest
            {
            Identifier144=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclarator2079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier144);

            pushFollow(FOLLOW_variableDeclaratorRest_in_variableDeclarator2081);
            variableDeclaratorRest145=variableDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorRest.add(variableDeclaratorRest145.getTree());


            // AST REWRITE
            // elements: variableDeclaratorRest, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:38: -> ^( Identifier ( variableDeclaratorRest )? )
            {
                // jkit/java/Java.g:375:41: ^( Identifier ( variableDeclaratorRest )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/Java.g:375:54: ( variableDeclaratorRest )?
                if ( stream_variableDeclaratorRest.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableDeclaratorRest.nextTree());

                }
                stream_variableDeclaratorRest.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, variableDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarator"

    public static class variableDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorRest"
    // jkit/java/Java.g:378:1: variableDeclaratorRest : ( ( '[' ']' )+ ( '=' variableInitializer )? -> ( '[' )+ ( variableInitializer )? | '=' variableInitializer -> variableInitializer | );
    public final JavaParser.variableDeclaratorRest_return variableDeclaratorRest() throws RecognitionException {
        JavaParser.variableDeclaratorRest_return retval = new JavaParser.variableDeclaratorRest_return();
        retval.start = input.LT(1);
        int variableDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal146=null;
        Token char_literal147=null;
        Token char_literal148=null;
        Token char_literal150=null;
        JavaParser.variableInitializer_return variableInitializer149 = null;

        JavaParser.variableInitializer_return variableInitializer151 = null;


        Object char_literal146_tree=null;
        Object char_literal147_tree=null;
        Object char_literal148_tree=null;
        Object char_literal150_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // jkit/java/Java.g:379:2: ( ( '[' ']' )+ ( '=' variableInitializer )? -> ( '[' )+ ( variableInitializer )? | '=' variableInitializer -> variableInitializer | )
            int alt50=3;
            switch ( input.LA(1) ) {
            case 134:
                {
                alt50=1;
                }
                break;
            case 136:
                {
                alt50=2;
                }
                break;
            case EOF:
            case 117:
            case 126:
                {
                alt50=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }

            switch (alt50) {
                case 1 :
                    // jkit/java/Java.g:379:4: ( '[' ']' )+ ( '=' variableInitializer )?
                    {
                    // jkit/java/Java.g:379:4: ( '[' ']' )+
                    int cnt48=0;
                    loop48:
                    do {
                        int alt48=2;
                        int LA48_0 = input.LA(1);

                        if ( (LA48_0==134) ) {
                            alt48=1;
                        }


                        switch (alt48) {
                    	case 1 :
                    	    // jkit/java/Java.g:379:5: '[' ']'
                    	    {
                    	    char_literal146=(Token)match(input,134,FOLLOW_134_in_variableDeclaratorRest2103); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_134.add(char_literal146);

                    	    char_literal147=(Token)match(input,135,FOLLOW_135_in_variableDeclaratorRest2105); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_135.add(char_literal147);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt48 >= 1 ) break loop48;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(48, input);
                                throw eee;
                        }
                        cnt48++;
                    } while (true);

                    // jkit/java/Java.g:379:15: ( '=' variableInitializer )?
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==136) ) {
                        alt49=1;
                    }
                    switch (alt49) {
                        case 1 :
                            // jkit/java/Java.g:379:16: '=' variableInitializer
                            {
                            char_literal148=(Token)match(input,136,FOLLOW_136_in_variableDeclaratorRest2110); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_136.add(char_literal148);

                            pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest2112);
                            variableInitializer149=variableInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer149.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: 134, variableInitializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 379:42: -> ( '[' )+ ( variableInitializer )?
                    {
                        if ( !(stream_134.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_134.hasNext() ) {
                            adaptor.addChild(root_0, stream_134.nextNode());

                        }
                        stream_134.reset();
                        // jkit/java/Java.g:379:50: ( variableInitializer )?
                        if ( stream_variableInitializer.hasNext() ) {
                            adaptor.addChild(root_0, stream_variableInitializer.nextTree());

                        }
                        stream_variableInitializer.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:380:4: '=' variableInitializer
                    {
                    char_literal150=(Token)match(input,136,FOLLOW_136_in_variableDeclaratorRest2127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal150);

                    pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest2129);
                    variableInitializer151=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer151.getTree());


                    // AST REWRITE
                    // elements: variableInitializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 380:28: -> variableInitializer
                    {
                        adaptor.addChild(root_0, stream_variableInitializer.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:382:2: 
                    {
                    root_0 = (Object)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, variableDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorRest"

    public static class constantDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclaration"
    // jkit/java/Java.g:384:1: constantDeclaration : type constantDeclarators ';' -> type constantDeclarators ;
    public final JavaParser.constantDeclaration_return constantDeclaration() throws RecognitionException {
        JavaParser.constantDeclaration_return retval = new JavaParser.constantDeclaration_return();
        retval.start = input.LT(1);
        int constantDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal154=null;
        JavaParser.type_return type152 = null;

        JavaParser.constantDeclarators_return constantDeclarators153 = null;


        Object char_literal154_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_constantDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // jkit/java/Java.g:385:2: ( type constantDeclarators ';' -> type constantDeclarators )
            // jkit/java/Java.g:385:4: type constantDeclarators ';'
            {
            pushFollow(FOLLOW_type_in_constantDeclaration2147);
            type152=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type152.getTree());
            pushFollow(FOLLOW_constantDeclarators_in_constantDeclaration2149);
            constantDeclarators153=constantDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constantDeclarators.add(constantDeclarators153.getTree());
            char_literal154=(Token)match(input,117,FOLLOW_117_in_constantDeclaration2151); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal154);



            // AST REWRITE
            // elements: constantDeclarators, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 385:33: -> type constantDeclarators
            {
                adaptor.addChild(root_0, stream_type.nextTree());
                adaptor.addChild(root_0, stream_constantDeclarators.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, constantDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclaration"

    public static class constantDeclarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarator"
    // jkit/java/Java.g:388:1: constantDeclarator : Identifier constantDeclaratorRest -> ^( Identifier constantDeclaratorRest ) ;
    public final JavaParser.constantDeclarator_return constantDeclarator() throws RecognitionException {
        JavaParser.constantDeclarator_return retval = new JavaParser.constantDeclarator_return();
        retval.start = input.LT(1);
        int constantDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier155=null;
        JavaParser.constantDeclaratorRest_return constantDeclaratorRest156 = null;


        Object Identifier155_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_constantDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // jkit/java/Java.g:389:2: ( Identifier constantDeclaratorRest -> ^( Identifier constantDeclaratorRest ) )
            // jkit/java/Java.g:389:4: Identifier constantDeclaratorRest
            {
            Identifier155=(Token)match(input,Identifier,FOLLOW_Identifier_in_constantDeclarator2168); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier155);

            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclarator2170);
            constantDeclaratorRest156=constantDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constantDeclaratorRest.add(constantDeclaratorRest156.getTree());


            // AST REWRITE
            // elements: constantDeclaratorRest, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 389:38: -> ^( Identifier constantDeclaratorRest )
            {
                // jkit/java/Java.g:389:41: ^( Identifier constantDeclaratorRest )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                adaptor.addChild(root_1, stream_constantDeclaratorRest.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, constantDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarator"

    public static class constantDeclarators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarators"
    // jkit/java/Java.g:392:1: constantDeclarators : i+= constantDeclarator ( ',' i+= constantDeclarator )* -> ( $i)+ ;
    public final JavaParser.constantDeclarators_return constantDeclarators() throws RecognitionException {
        JavaParser.constantDeclarators_return retval = new JavaParser.constantDeclarators_return();
        retval.start = input.LT(1);
        int constantDeclarators_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal157=null;
        List list_i=null;
        JavaParser.constantDeclarator_return i = null;
        Object char_literal157_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_constantDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // jkit/java/Java.g:393:2: (i+= constantDeclarator ( ',' i+= constantDeclarator )* -> ( $i)+ )
            // jkit/java/Java.g:393:4: i+= constantDeclarator ( ',' i+= constantDeclarator )*
            {
            pushFollow(FOLLOW_constantDeclarator_in_constantDeclarators2193);
            i=constantDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constantDeclarator.add(i.getTree());
            if (list_i==null) list_i=new ArrayList();
            list_i.add(i.getTree());

            // jkit/java/Java.g:393:26: ( ',' i+= constantDeclarator )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==126) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // jkit/java/Java.g:393:27: ',' i+= constantDeclarator
            	    {
            	    char_literal157=(Token)match(input,126,FOLLOW_126_in_constantDeclarators2196); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_126.add(char_literal157);

            	    pushFollow(FOLLOW_constantDeclarator_in_constantDeclarators2200);
            	    i=constantDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_constantDeclarator.add(i.getTree());
            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i.getTree());


            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: i
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
            root_0 = (Object)adaptor.nil();
            // 393:55: -> ( $i)+
            {
                if ( !(stream_i.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_0, stream_i.nextTree());

                }
                stream_i.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, constantDeclarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarators"

    public static class constantDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclaratorRest"
    // jkit/java/Java.g:396:1: constantDeclaratorRest : ( '[' ']' )* '=' variableInitializer -> ( '[' )* variableInitializer ;
    public final JavaParser.constantDeclaratorRest_return constantDeclaratorRest() throws RecognitionException {
        JavaParser.constantDeclaratorRest_return retval = new JavaParser.constantDeclaratorRest_return();
        retval.start = input.LT(1);
        int constantDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal158=null;
        Token char_literal159=null;
        Token char_literal160=null;
        JavaParser.variableInitializer_return variableInitializer161 = null;


        Object char_literal158_tree=null;
        Object char_literal159_tree=null;
        Object char_literal160_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // jkit/java/Java.g:397:2: ( ( '[' ']' )* '=' variableInitializer -> ( '[' )* variableInitializer )
            // jkit/java/Java.g:397:4: ( '[' ']' )* '=' variableInitializer
            {
            // jkit/java/Java.g:397:4: ( '[' ']' )*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==134) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // jkit/java/Java.g:397:5: '[' ']'
            	    {
            	    char_literal158=(Token)match(input,134,FOLLOW_134_in_constantDeclaratorRest2221); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_134.add(char_literal158);

            	    char_literal159=(Token)match(input,135,FOLLOW_135_in_constantDeclaratorRest2223); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_135.add(char_literal159);


            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);

            char_literal160=(Token)match(input,136,FOLLOW_136_in_constantDeclaratorRest2227); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal160);

            pushFollow(FOLLOW_variableInitializer_in_constantDeclaratorRest2229);
            variableInitializer161=variableInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer161.getTree());


            // AST REWRITE
            // elements: 134, variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 397:39: -> ( '[' )* variableInitializer
            {
                // jkit/java/Java.g:397:42: ( '[' )*
                while ( stream_134.hasNext() ) {
                    adaptor.addChild(root_0, stream_134.nextNode());

                }
                stream_134.reset();
                adaptor.addChild(root_0, stream_variableInitializer.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, constantDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclaratorRest"

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorId"
    // jkit/java/Java.g:400:1: variableDeclaratorId : Identifier ( '[' ']' )* ;
    public final JavaParser.variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
        JavaParser.variableDeclaratorId_return retval = new JavaParser.variableDeclaratorId_return();
        retval.start = input.LT(1);
        int variableDeclaratorId_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier162=null;
        Token char_literal163=null;
        Token char_literal164=null;

        Object Identifier162_tree=null;
        Object char_literal163_tree=null;
        Object char_literal164_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // jkit/java/Java.g:401:2: ( Identifier ( '[' ']' )* )
            // jkit/java/Java.g:401:4: Identifier ( '[' ']' )*
            {
            root_0 = (Object)adaptor.nil();

            Identifier162=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaratorId2248); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier162_tree = (Object)adaptor.create(Identifier162);
            adaptor.addChild(root_0, Identifier162_tree);
            }
            // jkit/java/Java.g:401:15: ( '[' ']' )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==134) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // jkit/java/Java.g:401:16: '[' ']'
            	    {
            	    char_literal163=(Token)match(input,134,FOLLOW_134_in_variableDeclaratorId2251); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal163_tree = (Object)adaptor.create(char_literal163);
            	    adaptor.addChild(root_0, char_literal163_tree);
            	    }
            	    char_literal164=(Token)match(input,135,FOLLOW_135_in_variableDeclaratorId2253); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal164_tree = (Object)adaptor.create(char_literal164);
            	    adaptor.addChild(root_0, char_literal164_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, variableDeclaratorId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorId"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // jkit/java/Java.g:404:1: variableInitializer : ( arrayInitializer | expression );
    public final JavaParser.variableInitializer_return variableInitializer() throws RecognitionException {
        JavaParser.variableInitializer_return retval = new JavaParser.variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.arrayInitializer_return arrayInitializer165 = null;

        JavaParser.expression_return expression166 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // jkit/java/Java.g:405:2: ( arrayInitializer | expression )
            int alt54=2;
            alt54 = dfa54.predict(input);
            switch (alt54) {
                case 1 :
                    // jkit/java/Java.g:405:4: arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer2266);
                    arrayInitializer165=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer165.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:406:9: expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer2276);
                    expression166=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression166.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // jkit/java/Java.g:409:1: arrayInitializer : '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}' -> ^( ARRAYVAL ( variableInitializer )* ) ;
    public final JavaParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
        JavaParser.arrayInitializer_return retval = new JavaParser.arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal167=null;
        Token char_literal169=null;
        Token char_literal171=null;
        Token char_literal172=null;
        JavaParser.variableInitializer_return variableInitializer168 = null;

        JavaParser.variableInitializer_return variableInitializer170 = null;


        Object char_literal167_tree=null;
        Object char_literal169_tree=null;
        Object char_literal171_tree=null;
        Object char_literal172_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // jkit/java/Java.g:410:2: ( '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}' -> ^( ARRAYVAL ( variableInitializer )* ) )
            // jkit/java/Java.g:410:4: '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}'
            {
            char_literal167=(Token)match(input,129,FOLLOW_129_in_arrayInitializer2288); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(char_literal167);

            // jkit/java/Java.g:410:8: ( variableInitializer ( ',' variableInitializer )* ( ',' )? )?
            int alt57=2;
            alt57 = dfa57.predict(input);
            switch (alt57) {
                case 1 :
                    // jkit/java/Java.g:410:9: variableInitializer ( ',' variableInitializer )* ( ',' )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer2291);
                    variableInitializer168=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer168.getTree());
                    // jkit/java/Java.g:410:29: ( ',' variableInitializer )*
                    loop55:
                    do {
                        int alt55=2;
                        alt55 = dfa55.predict(input);
                        switch (alt55) {
                    	case 1 :
                    	    // jkit/java/Java.g:410:30: ',' variableInitializer
                    	    {
                    	    char_literal169=(Token)match(input,126,FOLLOW_126_in_arrayInitializer2294); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_126.add(char_literal169);

                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer2296);
                    	    variableInitializer170=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer170.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop55;
                        }
                    } while (true);

                    // jkit/java/Java.g:410:56: ( ',' )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==126) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // jkit/java/Java.g:410:57: ','
                            {
                            char_literal171=(Token)match(input,126,FOLLOW_126_in_arrayInitializer2301); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_126.add(char_literal171);


                            }
                            break;

                    }


                    }
                    break;

            }

            char_literal172=(Token)match(input,130,FOLLOW_130_in_arrayInitializer2308); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal172);



            // AST REWRITE
            // elements: variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 410:70: -> ^( ARRAYVAL ( variableInitializer )* )
            {
                // jkit/java/Java.g:410:73: ^( ARRAYVAL ( variableInitializer )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYVAL, "ARRAYVAL"), root_1);

                // jkit/java/Java.g:410:84: ( variableInitializer )*
                while ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifier"
    // jkit/java/Java.g:413:1: modifier : ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' );
    public final JavaParser.modifier_return modifier() throws RecognitionException {
        JavaParser.modifier_return retval = new JavaParser.modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal174=null;
        Token string_literal175=null;
        Token string_literal176=null;
        Token string_literal177=null;
        Token string_literal178=null;
        Token string_literal179=null;
        Token string_literal180=null;
        Token string_literal181=null;
        Token string_literal182=null;
        Token string_literal183=null;
        Token string_literal184=null;
        JavaParser.annotation_return annotation173 = null;


        Object string_literal174_tree=null;
        Object string_literal175_tree=null;
        Object string_literal176_tree=null;
        Object string_literal177_tree=null;
        Object string_literal178_tree=null;
        Object string_literal179_tree=null;
        Object string_literal180_tree=null;
        Object string_literal181_tree=null;
        Object string_literal182_tree=null;
        Object string_literal183_tree=null;
        Object string_literal184_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // jkit/java/Java.g:414:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )
            int alt58=12;
            alt58 = dfa58.predict(input);
            switch (alt58) {
                case 1 :
                    // jkit/java/Java.g:414:9: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_modifier2333);
                    annotation173=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation173.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:415:9: 'public'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal174=(Token)match(input,137,FOLLOW_137_in_modifier2343); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal174_tree = (Object)adaptor.create(string_literal174);
                    adaptor.addChild(root_0, string_literal174_tree);
                    }

                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:416:9: 'protected'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal175=(Token)match(input,138,FOLLOW_138_in_modifier2353); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal175_tree = (Object)adaptor.create(string_literal175);
                    adaptor.addChild(root_0, string_literal175_tree);
                    }

                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:417:9: 'private'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal176=(Token)match(input,139,FOLLOW_139_in_modifier2363); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal176_tree = (Object)adaptor.create(string_literal176);
                    adaptor.addChild(root_0, string_literal176_tree);
                    }

                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:418:9: 'static'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal177=(Token)match(input,119,FOLLOW_119_in_modifier2373); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal177_tree = (Object)adaptor.create(string_literal177);
                    adaptor.addChild(root_0, string_literal177_tree);
                    }

                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:419:9: 'abstract'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal178=(Token)match(input,140,FOLLOW_140_in_modifier2383); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal178_tree = (Object)adaptor.create(string_literal178);
                    adaptor.addChild(root_0, string_literal178_tree);
                    }

                    }
                    break;
                case 7 :
                    // jkit/java/Java.g:420:9: 'final'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal179=(Token)match(input,141,FOLLOW_141_in_modifier2393); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal179_tree = (Object)adaptor.create(string_literal179);
                    adaptor.addChild(root_0, string_literal179_tree);
                    }

                    }
                    break;
                case 8 :
                    // jkit/java/Java.g:421:9: 'native'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal180=(Token)match(input,142,FOLLOW_142_in_modifier2403); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal180_tree = (Object)adaptor.create(string_literal180);
                    adaptor.addChild(root_0, string_literal180_tree);
                    }

                    }
                    break;
                case 9 :
                    // jkit/java/Java.g:422:9: 'synchronized'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal181=(Token)match(input,143,FOLLOW_143_in_modifier2413); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal181_tree = (Object)adaptor.create(string_literal181);
                    adaptor.addChild(root_0, string_literal181_tree);
                    }

                    }
                    break;
                case 10 :
                    // jkit/java/Java.g:423:9: 'transient'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal182=(Token)match(input,144,FOLLOW_144_in_modifier2423); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal182_tree = (Object)adaptor.create(string_literal182);
                    adaptor.addChild(root_0, string_literal182_tree);
                    }

                    }
                    break;
                case 11 :
                    // jkit/java/Java.g:424:9: 'volatile'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal183=(Token)match(input,145,FOLLOW_145_in_modifier2433); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal183_tree = (Object)adaptor.create(string_literal183);
                    adaptor.addChild(root_0, string_literal183_tree);
                    }

                    }
                    break;
                case 12 :
                    // jkit/java/Java.g:425:9: 'strictfp'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal184=(Token)match(input,146,FOLLOW_146_in_modifier2443); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal184_tree = (Object)adaptor.create(string_literal184);
                    adaptor.addChild(root_0, string_literal184_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public static class packageOrTypeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageOrTypeName"
    // jkit/java/Java.g:428:1: packageOrTypeName : Identifier ( '.' Identifier )* ;
    public final JavaParser.packageOrTypeName_return packageOrTypeName() throws RecognitionException {
        JavaParser.packageOrTypeName_return retval = new JavaParser.packageOrTypeName_return();
        retval.start = input.LT(1);
        int packageOrTypeName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier185=null;
        Token char_literal186=null;
        Token Identifier187=null;

        Object Identifier185_tree=null;
        Object char_literal186_tree=null;
        Object Identifier187_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // jkit/java/Java.g:429:2: ( Identifier ( '.' Identifier )* )
            // jkit/java/Java.g:429:4: Identifier ( '.' Identifier )*
            {
            root_0 = (Object)adaptor.nil();

            Identifier185=(Token)match(input,Identifier,FOLLOW_Identifier_in_packageOrTypeName2457); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier185_tree = (Object)adaptor.create(Identifier185);
            adaptor.addChild(root_0, Identifier185_tree);
            }
            // jkit/java/Java.g:429:15: ( '.' Identifier )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==120) ) {
                    int LA59_1 = input.LA(2);

                    if ( (LA59_1==Identifier) ) {
                        int LA59_2 = input.LA(3);

                        if ( (synpred84_Java()) ) {
                            alt59=1;
                        }


                    }


                }


                switch (alt59) {
            	case 1 :
            	    // jkit/java/Java.g:429:16: '.' Identifier
            	    {
            	    char_literal186=(Token)match(input,120,FOLLOW_120_in_packageOrTypeName2460); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal186_tree = (Object)adaptor.create(char_literal186);
            	    adaptor.addChild(root_0, char_literal186_tree);
            	    }
            	    Identifier187=(Token)match(input,Identifier,FOLLOW_Identifier_in_packageOrTypeName2462); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    Identifier187_tree = (Object)adaptor.create(Identifier187);
            	    adaptor.addChild(root_0, Identifier187_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, packageOrTypeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageOrTypeName"

    public static class enumConstantName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstantName"
    // jkit/java/Java.g:432:1: enumConstantName : Identifier ;
    public final JavaParser.enumConstantName_return enumConstantName() throws RecognitionException {
        JavaParser.enumConstantName_return retval = new JavaParser.enumConstantName_return();
        retval.start = input.LT(1);
        int enumConstantName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier188=null;

        Object Identifier188_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // jkit/java/Java.g:433:5: ( Identifier )
            // jkit/java/Java.g:433:9: Identifier
            {
            root_0 = (Object)adaptor.nil();

            Identifier188=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumConstantName2480); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier188_tree = (Object)adaptor.create(Identifier188);
            adaptor.addChild(root_0, Identifier188_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, enumConstantName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstantName"

    public static class typeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // jkit/java/Java.g:436:1: typeName : ( Identifier | packageOrTypeName '.' Identifier );
    public final JavaParser.typeName_return typeName() throws RecognitionException {
        JavaParser.typeName_return retval = new JavaParser.typeName_return();
        retval.start = input.LT(1);
        int typeName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier189=null;
        Token char_literal191=null;
        Token Identifier192=null;
        JavaParser.packageOrTypeName_return packageOrTypeName190 = null;


        Object Identifier189_tree=null;
        Object char_literal191_tree=null;
        Object Identifier192_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // jkit/java/Java.g:437:2: ( Identifier | packageOrTypeName '.' Identifier )
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==Identifier) ) {
                int LA60_1 = input.LA(2);

                if ( (LA60_1==EOF) ) {
                    alt60=1;
                }
                else if ( (LA60_1==120) ) {
                    alt60=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 60, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;
            }
            switch (alt60) {
                case 1 :
                    // jkit/java/Java.g:437:6: Identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    Identifier189=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeName2496); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier189_tree = (Object)adaptor.create(Identifier189);
                    adaptor.addChild(root_0, Identifier189_tree);
                    }

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:438:9: packageOrTypeName '.' Identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_packageOrTypeName_in_typeName2506);
                    packageOrTypeName190=packageOrTypeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, packageOrTypeName190.getTree());
                    char_literal191=(Token)match(input,120,FOLLOW_120_in_typeName2508); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal191_tree = (Object)adaptor.create(char_literal191);
                    adaptor.addChild(root_0, char_literal191_tree);
                    }
                    Identifier192=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeName2510); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier192_tree = (Object)adaptor.create(Identifier192);
                    adaptor.addChild(root_0, Identifier192_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, typeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // jkit/java/Java.g:441:1: type : (i+= refComponent ( '.' i+= refComponent )* ( '[' ']' )* -> ^( TYPE ( $i)+ ( '[' )* ) | primitiveType ( '[' ']' )* -> ^( TYPE primitiveType ( '[' )* ) );
    public final JavaParser.type_return type() throws RecognitionException {
        JavaParser.type_return retval = new JavaParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal193=null;
        Token char_literal194=null;
        Token char_literal195=null;
        Token char_literal197=null;
        Token char_literal198=null;
        List list_i=null;
        JavaParser.primitiveType_return primitiveType196 = null;

        JavaParser.refComponent_return i = null;
        Object char_literal193_tree=null;
        Object char_literal194_tree=null;
        Object char_literal195_tree=null;
        Object char_literal197_tree=null;
        Object char_literal198_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_refComponent=new RewriteRuleSubtreeStream(adaptor,"rule refComponent");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // jkit/java/Java.g:442:2: (i+= refComponent ( '.' i+= refComponent )* ( '[' ']' )* -> ^( TYPE ( $i)+ ( '[' )* ) | primitiveType ( '[' ']' )* -> ^( TYPE primitiveType ( '[' )* ) )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==Identifier) ) {
                alt64=1;
            }
            else if ( ((LA64_0>=147 && LA64_0<=154)) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    // jkit/java/Java.g:442:4: i+= refComponent ( '.' i+= refComponent )* ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_refComponent_in_type2523);
                    i=refComponent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i.getTree());

                    // jkit/java/Java.g:442:20: ( '.' i+= refComponent )*
                    loop61:
                    do {
                        int alt61=2;
                        alt61 = dfa61.predict(input);
                        switch (alt61) {
                    	case 1 :
                    	    // jkit/java/Java.g:442:21: '.' i+= refComponent
                    	    {
                    	    char_literal193=(Token)match(input,120,FOLLOW_120_in_type2526); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_120.add(char_literal193);

                    	    pushFollow(FOLLOW_refComponent_in_type2530);
                    	    i=refComponent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop61;
                        }
                    } while (true);

                    // jkit/java/Java.g:442:43: ( '[' ']' )*
                    loop62:
                    do {
                        int alt62=2;
                        alt62 = dfa62.predict(input);
                        switch (alt62) {
                    	case 1 :
                    	    // jkit/java/Java.g:442:44: '[' ']'
                    	    {
                    	    char_literal194=(Token)match(input,134,FOLLOW_134_in_type2535); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_134.add(char_literal194);

                    	    char_literal195=(Token)match(input,135,FOLLOW_135_in_type2537); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_135.add(char_literal195);


                    	    }
                    	    break;

                    	default :
                    	    break loop62;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: i, 134
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: i
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                    root_0 = (Object)adaptor.nil();
                    // 442:54: -> ^( TYPE ( $i)+ ( '[' )* )
                    {
                        // jkit/java/Java.g:442:57: ^( TYPE ( $i)+ ( '[' )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        if ( !(stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextTree());

                        }
                        stream_i.reset();
                        // jkit/java/Java.g:442:68: ( '[' )*
                        while ( stream_134.hasNext() ) {
                            adaptor.addChild(root_1, stream_134.nextNode());

                        }
                        stream_134.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:443:4: primitiveType ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_primitiveType_in_type2559);
                    primitiveType196=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType196.getTree());
                    // jkit/java/Java.g:443:18: ( '[' ']' )*
                    loop63:
                    do {
                        int alt63=2;
                        alt63 = dfa63.predict(input);
                        switch (alt63) {
                    	case 1 :
                    	    // jkit/java/Java.g:443:19: '[' ']'
                    	    {
                    	    char_literal197=(Token)match(input,134,FOLLOW_134_in_type2562); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_134.add(char_literal197);

                    	    char_literal198=(Token)match(input,135,FOLLOW_135_in_type2564); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_135.add(char_literal198);


                    	    }
                    	    break;

                    	default :
                    	    break loop63;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: 134, primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 443:29: -> ^( TYPE primitiveType ( '[' )* )
                    {
                        // jkit/java/Java.g:443:32: ^( TYPE primitiveType ( '[' )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, stream_primitiveType.nextTree());
                        // jkit/java/Java.g:443:53: ( '[' )*
                        while ( stream_134.hasNext() ) {
                            adaptor.addChild(root_1, stream_134.nextNode());

                        }
                        stream_134.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class refComponent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "refComponent"
    // jkit/java/Java.g:446:1: refComponent : Identifier ( typeArguments )? -> ^( Identifier ( typeArguments )? ) ;
    public final JavaParser.refComponent_return refComponent() throws RecognitionException {
        JavaParser.refComponent_return retval = new JavaParser.refComponent_return();
        retval.start = input.LT(1);
        int refComponent_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier199=null;
        JavaParser.typeArguments_return typeArguments200 = null;


        Object Identifier199_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_typeArguments=new RewriteRuleSubtreeStream(adaptor,"rule typeArguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // jkit/java/Java.g:447:5: ( Identifier ( typeArguments )? -> ^( Identifier ( typeArguments )? ) )
            // jkit/java/Java.g:447:7: Identifier ( typeArguments )?
            {
            Identifier199=(Token)match(input,Identifier,FOLLOW_Identifier_in_refComponent2593); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier199);

            // jkit/java/Java.g:447:18: ( typeArguments )?
            int alt65=2;
            alt65 = dfa65.predict(input);
            switch (alt65) {
                case 1 :
                    // jkit/java/Java.g:447:19: typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_refComponent2596);
                    typeArguments200=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeArguments.add(typeArguments200.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: typeArguments, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 447:35: -> ^( Identifier ( typeArguments )? )
            {
                // jkit/java/Java.g:447:38: ^( Identifier ( typeArguments )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/Java.g:447:51: ( typeArguments )?
                if ( stream_typeArguments.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeArguments.nextTree());

                }
                stream_typeArguments.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, refComponent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "refComponent"

    public static class primitiveType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // jkit/java/Java.g:450:1: primitiveType : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
    public final JavaParser.primitiveType_return primitiveType() throws RecognitionException {
        JavaParser.primitiveType_return retval = new JavaParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        Object root_0 = null;

        Token set201=null;

        Object set201_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // jkit/java/Java.g:451:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
            // jkit/java/Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set201=(Token)input.LT(1);
            if ( (input.LA(1)>=147 && input.LA(1)<=154) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set201));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class variableModifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableModifier"
    // jkit/java/Java.g:461:1: variableModifier : ( 'final' | annotation );
    public final JavaParser.variableModifier_return variableModifier() throws RecognitionException {
        JavaParser.variableModifier_return retval = new JavaParser.variableModifier_return();
        retval.start = input.LT(1);
        int variableModifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal202=null;
        JavaParser.annotation_return annotation203 = null;


        Object string_literal202_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // jkit/java/Java.g:462:2: ( 'final' | annotation )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==141) ) {
                alt66=1;
            }
            else if ( (LA66_0==163) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // jkit/java/Java.g:462:4: 'final'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal202=(Token)match(input,141,FOLLOW_141_in_variableModifier2696); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal202_tree = (Object)adaptor.create(string_literal202);
                    adaptor.addChild(root_0, string_literal202_tree);
                    }

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:463:9: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_variableModifier2706);
                    annotation203=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation203.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, variableModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableModifier"

    public static class typeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArguments"
    // jkit/java/Java.g:466:1: typeArguments : '<' t+= typeArgument ( ',' t+= typeArgument )* '>' -> ( $t)+ ;
    public final JavaParser.typeArguments_return typeArguments() throws RecognitionException {
        JavaParser.typeArguments_return retval = new JavaParser.typeArguments_return();
        retval.start = input.LT(1);
        int typeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal204=null;
        Token char_literal205=null;
        Token char_literal206=null;
        List list_t=null;
        JavaParser.typeArgument_return t = null;
        Object char_literal204_tree=null;
        Object char_literal205_tree=null;
        Object char_literal206_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_typeArgument=new RewriteRuleSubtreeStream(adaptor,"rule typeArgument");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // jkit/java/Java.g:467:2: ( '<' t+= typeArgument ( ',' t+= typeArgument )* '>' -> ( $t)+ )
            // jkit/java/Java.g:467:4: '<' t+= typeArgument ( ',' t+= typeArgument )* '>'
            {
            char_literal204=(Token)match(input,125,FOLLOW_125_in_typeArguments2717); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(char_literal204);

            pushFollow(FOLLOW_typeArgument_in_typeArguments2721);
            t=typeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeArgument.add(t.getTree());
            if (list_t==null) list_t=new ArrayList();
            list_t.add(t.getTree());

            // jkit/java/Java.g:467:24: ( ',' t+= typeArgument )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==126) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // jkit/java/Java.g:467:25: ',' t+= typeArgument
            	    {
            	    char_literal205=(Token)match(input,126,FOLLOW_126_in_typeArguments2724); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_126.add(char_literal205);

            	    pushFollow(FOLLOW_typeArgument_in_typeArguments2728);
            	    t=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeArgument.add(t.getTree());
            	    if (list_t==null) list_t=new ArrayList();
            	    list_t.add(t.getTree());


            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);

            char_literal206=(Token)match(input,127,FOLLOW_127_in_typeArguments2732); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal206);



            // AST REWRITE
            // elements: t
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: t
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
            root_0 = (Object)adaptor.nil();
            // 467:51: -> ( $t)+
            {
                if ( !(stream_t.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_t.hasNext() ) {
                    adaptor.addChild(root_0, stream_t.nextTree());

                }
                stream_t.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, typeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArguments"

    public static class typeArgument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArgument"
    // jkit/java/Java.g:470:1: typeArgument : ( type | '?' ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) ) );
    public final JavaParser.typeArgument_return typeArgument() throws RecognitionException {
        JavaParser.typeArgument_return retval = new JavaParser.typeArgument_return();
        retval.start = input.LT(1);
        int typeArgument_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal208=null;
        Token string_literal209=null;
        Token string_literal211=null;
        JavaParser.type_return type207 = null;

        JavaParser.type_return type210 = null;

        JavaParser.type_return type212 = null;


        Object char_literal208_tree=null;
        Object string_literal209_tree=null;
        Object string_literal211_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // jkit/java/Java.g:471:2: ( type | '?' ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) ) )
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==Identifier||(LA71_0>=147 && LA71_0<=154)) ) {
                alt71=1;
            }
            else if ( (LA71_0==155) ) {
                alt71=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;
            }
            switch (alt71) {
                case 1 :
                    // jkit/java/Java.g:471:4: type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_typeArgument2750);
                    type207=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type207.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:472:4: '?' ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) )
                    {
                    char_literal208=(Token)match(input,155,FOLLOW_155_in_typeArgument2755); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_155.add(char_literal208);

                    // jkit/java/Java.g:472:8: ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) )
                    int alt70=2;
                    alt70 = dfa70.predict(input);
                    switch (alt70) {
                        case 1 :
                            // jkit/java/Java.g:473:4: ( 'extends' type )?
                            {
                            // jkit/java/Java.g:473:4: ( 'extends' type )?
                            int alt68=2;
                            int LA68_0 = input.LA(1);

                            if ( (LA68_0==123) ) {
                                alt68=1;
                            }
                            switch (alt68) {
                                case 1 :
                                    // jkit/java/Java.g:473:5: 'extends' type
                                    {
                                    string_literal209=(Token)match(input,123,FOLLOW_123_in_typeArgument2764); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_123.add(string_literal209);

                                    pushFollow(FOLLOW_type_in_typeArgument2766);
                                    type210=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type210.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: type, 155
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 473:22: -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) )
                            {
                                // jkit/java/Java.g:473:25: ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                                // jkit/java/Java.g:473:32: ^( '?' ( ^( EXTENDS type ) )? )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(stream_155.nextNode(), root_2);

                                // jkit/java/Java.g:473:38: ( ^( EXTENDS type ) )?
                                if ( stream_type.hasNext() ) {
                                    // jkit/java/Java.g:473:38: ^( EXTENDS type )
                                    {
                                    Object root_3 = (Object)adaptor.nil();
                                    root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXTENDS, "EXTENDS"), root_3);

                                    adaptor.addChild(root_3, stream_type.nextTree());

                                    adaptor.addChild(root_2, root_3);
                                    }

                                }
                                stream_type.reset();

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:474:12: ( 'super' type )?
                            {
                            // jkit/java/Java.g:474:12: ( 'super' type )?
                            int alt69=2;
                            int LA69_0 = input.LA(1);

                            if ( (LA69_0==156) ) {
                                alt69=1;
                            }
                            switch (alt69) {
                                case 1 :
                                    // jkit/java/Java.g:474:13: 'super' type
                                    {
                                    string_literal211=(Token)match(input,156,FOLLOW_156_in_typeArgument2799); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_156.add(string_literal211);

                                    pushFollow(FOLLOW_type_in_typeArgument2801);
                                    type212=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type212.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: type, 155
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 474:28: -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) )
                            {
                                // jkit/java/Java.g:474:31: ^( TYPE ^( '?' ( ^( SUPER type ) )? ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                                // jkit/java/Java.g:474:38: ^( '?' ( ^( SUPER type ) )? )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(stream_155.nextNode(), root_2);

                                // jkit/java/Java.g:474:44: ( ^( SUPER type ) )?
                                if ( stream_type.hasNext() ) {
                                    // jkit/java/Java.g:474:44: ^( SUPER type )
                                    {
                                    Object root_3 = (Object)adaptor.nil();
                                    root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(SUPER, "SUPER"), root_3);

                                    adaptor.addChild(root_3, stream_type.nextTree());

                                    adaptor.addChild(root_2, root_3);
                                    }

                                }
                                stream_type.reset();

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, typeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArgument"

    public static class qualifiedNameList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedNameList"
    // jkit/java/Java.g:478:1: qualifiedNameList : qualifiedName ( ',' qualifiedName )* ;
    public final JavaParser.qualifiedNameList_return qualifiedNameList() throws RecognitionException {
        JavaParser.qualifiedNameList_return retval = new JavaParser.qualifiedNameList_return();
        retval.start = input.LT(1);
        int qualifiedNameList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal214=null;
        JavaParser.qualifiedName_return qualifiedName213 = null;

        JavaParser.qualifiedName_return qualifiedName215 = null;


        Object char_literal214_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // jkit/java/Java.g:479:2: ( qualifiedName ( ',' qualifiedName )* )
            // jkit/java/Java.g:479:4: qualifiedName ( ',' qualifiedName )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList2843);
            qualifiedName213=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName213.getTree());
            // jkit/java/Java.g:479:18: ( ',' qualifiedName )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==126) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // jkit/java/Java.g:479:19: ',' qualifiedName
            	    {
            	    char_literal214=(Token)match(input,126,FOLLOW_126_in_qualifiedNameList2846); if (state.failed) return retval;
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList2849);
            	    qualifiedName215=qualifiedName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName215.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, qualifiedNameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList"

    public static class formalParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameters"
    // jkit/java/Java.g:482:1: formalParameters : '(' ( formalParameterDecls )? ')' -> ( formalParameterDecls )? ;
    public final JavaParser.formalParameters_return formalParameters() throws RecognitionException {
        JavaParser.formalParameters_return retval = new JavaParser.formalParameters_return();
        retval.start = input.LT(1);
        int formalParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal216=null;
        Token char_literal218=null;
        JavaParser.formalParameterDecls_return formalParameterDecls217 = null;


        Object char_literal216_tree=null;
        Object char_literal218_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_formalParameterDecls=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterDecls");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // jkit/java/Java.g:483:2: ( '(' ( formalParameterDecls )? ')' -> ( formalParameterDecls )? )
            // jkit/java/Java.g:483:4: '(' ( formalParameterDecls )? ')'
            {
            char_literal216=(Token)match(input,157,FOLLOW_157_in_formalParameters2863); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(char_literal216);

            // jkit/java/Java.g:483:8: ( formalParameterDecls )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==Identifier||LA73_0==141||(LA73_0>=147 && LA73_0<=154)||LA73_0==163) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // jkit/java/Java.g:0:0: formalParameterDecls
                    {
                    pushFollow(FOLLOW_formalParameterDecls_in_formalParameters2865);
                    formalParameterDecls217=formalParameterDecls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterDecls.add(formalParameterDecls217.getTree());

                    }
                    break;

            }

            char_literal218=(Token)match(input,158,FOLLOW_158_in_formalParameters2868); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(char_literal218);



            // AST REWRITE
            // elements: formalParameterDecls
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 483:34: -> ( formalParameterDecls )?
            {
                // jkit/java/Java.g:483:37: ( formalParameterDecls )?
                if ( stream_formalParameterDecls.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameterDecls.nextTree());

                }
                stream_formalParameterDecls.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, formalParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameters"

    public static class formalParameterDecls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterDecls"
    // jkit/java/Java.g:486:1: formalParameterDecls : ( variableModifier )* type ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ) ;
    public final JavaParser.formalParameterDecls_return formalParameterDecls() throws RecognitionException {
        JavaParser.formalParameterDecls_return retval = new JavaParser.formalParameterDecls_return();
        retval.start = input.LT(1);
        int formalParameterDecls_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal222=null;
        Token string_literal224=null;
        JavaParser.variableModifier_return variableModifier219 = null;

        JavaParser.type_return type220 = null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId221 = null;

        JavaParser.formalParameterDecls_return formalParameterDecls223 = null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId225 = null;


        Object char_literal222_tree=null;
        Object string_literal224_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_formalParameterDecls=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterDecls");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // jkit/java/Java.g:487:2: ( ( variableModifier )* type ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ) )
            // jkit/java/Java.g:487:4: ( variableModifier )* type ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) )
            {
            // jkit/java/Java.g:487:4: ( variableModifier )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==141||LA74_0==163) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameterDecls2885);
            	    variableModifier219=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier219.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameterDecls2888);
            type220=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type220.getTree());
            // jkit/java/Java.g:487:27: ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==Identifier) ) {
                alt76=1;
            }
            else if ( (LA76_0==159) ) {
                alt76=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    // jkit/java/Java.g:488:9: variableDeclaratorId ( ',' formalParameterDecls )?
                    {
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDecls2900);
                    variableDeclaratorId221=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId221.getTree());
                    // jkit/java/Java.g:488:30: ( ',' formalParameterDecls )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==126) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // jkit/java/Java.g:488:31: ',' formalParameterDecls
                            {
                            char_literal222=(Token)match(input,126,FOLLOW_126_in_formalParameterDecls2903); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_126.add(char_literal222);

                            pushFollow(FOLLOW_formalParameterDecls_in_formalParameterDecls2905);
                            formalParameterDecls223=formalParameterDecls();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_formalParameterDecls.add(formalParameterDecls223.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: type, variableDeclaratorId, variableModifier, formalParameterDecls
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 488:58: -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )?
                    {
                        // jkit/java/Java.g:488:61: ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETER, "PARAMETER"), root_1);

                        // jkit/java/Java.g:488:73: ^( MODIFIERS ( variableModifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/Java.g:488:85: ( variableModifier )*
                        while ( stream_variableModifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_variableModifier.nextTree());

                        }
                        stream_variableModifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/Java.g:488:131: ( formalParameterDecls )?
                        if ( stream_formalParameterDecls.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameterDecls.nextTree());

                        }
                        stream_formalParameterDecls.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:489:11: '...' variableDeclaratorId
                    {
                    string_literal224=(Token)match(input,159,FOLLOW_159_in_formalParameterDecls2939); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_159.add(string_literal224);

                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDecls2941);
                    variableDeclaratorId225=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId225.getTree());


                    // AST REWRITE
                    // elements: type, variableDeclaratorId, variableModifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 489:38: -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId )
                    {
                        // jkit/java/Java.g:489:41: ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARARGS, "VARARGS"), root_1);

                        // jkit/java/Java.g:489:51: ^( MODIFIERS ( variableModifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/Java.g:489:63: ( variableModifier )*
                        while ( stream_variableModifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_variableModifier.nextTree());

                        }
                        stream_variableModifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, formalParameterDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterDecls"

    public static class methodBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodBody"
    // jkit/java/Java.g:494:1: methodBody : block -> block ;
    public final JavaParser.methodBody_return methodBody() throws RecognitionException {
        JavaParser.methodBody_return retval = new JavaParser.methodBody_return();
        retval.start = input.LT(1);
        int methodBody_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.block_return block226 = null;


        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // jkit/java/Java.g:495:2: ( block -> block )
            // jkit/java/Java.g:495:4: block
            {
            pushFollow(FOLLOW_block_in_methodBody2984);
            block226=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block226.getTree());


            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 495:10: -> block
            {
                adaptor.addChild(root_0, stream_block.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, methodBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodBody"

    public static class qualifiedName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName"
    // jkit/java/Java.g:498:1: qualifiedName : i+= Identifier ( '.' i+= Identifier )* -> ( $i)+ ;
    public final JavaParser.qualifiedName_return qualifiedName() throws RecognitionException {
        JavaParser.qualifiedName_return retval = new JavaParser.qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal227=null;
        Token i=null;
        List list_i=null;

        Object char_literal227_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // jkit/java/Java.g:499:2: (i+= Identifier ( '.' i+= Identifier )* -> ( $i)+ )
            // jkit/java/Java.g:499:4: i+= Identifier ( '.' i+= Identifier )*
            {
            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName3002); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(i);

            if (list_i==null) list_i=new ArrayList();
            list_i.add(i);

            // jkit/java/Java.g:499:18: ( '.' i+= Identifier )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==120) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // jkit/java/Java.g:499:19: '.' i+= Identifier
            	    {
            	    char_literal227=(Token)match(input,120,FOLLOW_120_in_qualifiedName3005); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_120.add(char_literal227);

            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName3009); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Identifier.add(i);

            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i);


            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: i
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 499:39: -> ( $i)+
            {
                if ( !(stream_i.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_0, stream_i.nextNode());

                }
                stream_i.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // jkit/java/Java.g:502:1: literal : ( integerLiteral -> ^( INTVAL integerLiteral ) | FloatingPointLiteral -> ^( FLOATVAL FloatingPointLiteral ) | CharacterLiteral -> ^( CHARVAL CharacterLiteral ) | StringLiteral -> ^( STRINGVAL StringLiteral ) | booleanLiteral -> ^( BOOLVAL booleanLiteral ) | 'null' -> ^( NULLVAL ) );
    public final JavaParser.literal_return literal() throws RecognitionException {
        JavaParser.literal_return retval = new JavaParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        Object root_0 = null;

        Token FloatingPointLiteral229=null;
        Token CharacterLiteral230=null;
        Token StringLiteral231=null;
        Token string_literal233=null;
        JavaParser.integerLiteral_return integerLiteral228 = null;

        JavaParser.booleanLiteral_return booleanLiteral232 = null;


        Object FloatingPointLiteral229_tree=null;
        Object CharacterLiteral230_tree=null;
        Object StringLiteral231_tree=null;
        Object string_literal233_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_FloatingPointLiteral=new RewriteRuleTokenStream(adaptor,"token FloatingPointLiteral");
        RewriteRuleTokenStream stream_CharacterLiteral=new RewriteRuleTokenStream(adaptor,"token CharacterLiteral");
        RewriteRuleSubtreeStream stream_booleanLiteral=new RewriteRuleSubtreeStream(adaptor,"rule booleanLiteral");
        RewriteRuleSubtreeStream stream_integerLiteral=new RewriteRuleSubtreeStream(adaptor,"rule integerLiteral");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // jkit/java/Java.g:503:2: ( integerLiteral -> ^( INTVAL integerLiteral ) | FloatingPointLiteral -> ^( FLOATVAL FloatingPointLiteral ) | CharacterLiteral -> ^( CHARVAL CharacterLiteral ) | StringLiteral -> ^( STRINGVAL StringLiteral ) | booleanLiteral -> ^( BOOLVAL booleanLiteral ) | 'null' -> ^( NULLVAL ) )
            int alt78=6;
            switch ( input.LA(1) ) {
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
                {
                alt78=1;
                }
                break;
            case FloatingPointLiteral:
                {
                alt78=2;
                }
                break;
            case CharacterLiteral:
                {
                alt78=3;
                }
                break;
            case StringLiteral:
                {
                alt78=4;
                }
                break;
            case 161:
            case 162:
                {
                alt78=5;
                }
                break;
            case 160:
                {
                alt78=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }

            switch (alt78) {
                case 1 :
                    // jkit/java/Java.g:503:6: integerLiteral
                    {
                    pushFollow(FOLLOW_integerLiteral_in_literal3032);
                    integerLiteral228=integerLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_integerLiteral.add(integerLiteral228.getTree());


                    // AST REWRITE
                    // elements: integerLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 503:21: -> ^( INTVAL integerLiteral )
                    {
                        // jkit/java/Java.g:503:24: ^( INTVAL integerLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTVAL, "INTVAL"), root_1);

                        adaptor.addChild(root_1, stream_integerLiteral.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:504:9: FloatingPointLiteral
                    {
                    FloatingPointLiteral229=(Token)match(input,FloatingPointLiteral,FOLLOW_FloatingPointLiteral_in_literal3050); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FloatingPointLiteral.add(FloatingPointLiteral229);



                    // AST REWRITE
                    // elements: FloatingPointLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 504:30: -> ^( FLOATVAL FloatingPointLiteral )
                    {
                        // jkit/java/Java.g:504:33: ^( FLOATVAL FloatingPointLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FLOATVAL, "FLOATVAL"), root_1);

                        adaptor.addChild(root_1, stream_FloatingPointLiteral.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:505:9: CharacterLiteral
                    {
                    CharacterLiteral230=(Token)match(input,CharacterLiteral,FOLLOW_CharacterLiteral_in_literal3068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CharacterLiteral.add(CharacterLiteral230);



                    // AST REWRITE
                    // elements: CharacterLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 505:26: -> ^( CHARVAL CharacterLiteral )
                    {
                        // jkit/java/Java.g:505:29: ^( CHARVAL CharacterLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CHARVAL, "CHARVAL"), root_1);

                        adaptor.addChild(root_1, stream_CharacterLiteral.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:506:9: StringLiteral
                    {
                    StringLiteral231=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_literal3086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral231);



                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 506:23: -> ^( STRINGVAL StringLiteral )
                    {
                        // jkit/java/Java.g:506:26: ^( STRINGVAL StringLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STRINGVAL, "STRINGVAL"), root_1);

                        adaptor.addChild(root_1, stream_StringLiteral.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:507:9: booleanLiteral
                    {
                    pushFollow(FOLLOW_booleanLiteral_in_literal3104);
                    booleanLiteral232=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_booleanLiteral.add(booleanLiteral232.getTree());


                    // AST REWRITE
                    // elements: booleanLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 507:24: -> ^( BOOLVAL booleanLiteral )
                    {
                        // jkit/java/Java.g:507:27: ^( BOOLVAL booleanLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BOOLVAL, "BOOLVAL"), root_1);

                        adaptor.addChild(root_1, stream_booleanLiteral.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:508:9: 'null'
                    {
                    string_literal233=(Token)match(input,160,FOLLOW_160_in_literal3122); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_160.add(string_literal233);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 508:16: -> ^( NULLVAL )
                    {
                        // jkit/java/Java.g:508:19: ^( NULLVAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NULLVAL, "NULLVAL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class integerLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integerLiteral"
    // jkit/java/Java.g:511:1: integerLiteral : ( HexLiteral | OctalLiteral | DecimalLiteral );
    public final JavaParser.integerLiteral_return integerLiteral() throws RecognitionException {
        JavaParser.integerLiteral_return retval = new JavaParser.integerLiteral_return();
        retval.start = input.LT(1);
        int integerLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token set234=null;

        Object set234_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // jkit/java/Java.g:512:5: ( HexLiteral | OctalLiteral | DecimalLiteral )
            // jkit/java/Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set234=(Token)input.LT(1);
            if ( (input.LA(1)>=HexLiteral && input.LA(1)<=DecimalLiteral) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set234));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, integerLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integerLiteral"

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "booleanLiteral"
    // jkit/java/Java.g:517:1: booleanLiteral : ( 'true' | 'false' );
    public final JavaParser.booleanLiteral_return booleanLiteral() throws RecognitionException {
        JavaParser.booleanLiteral_return retval = new JavaParser.booleanLiteral_return();
        retval.start = input.LT(1);
        int booleanLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token set235=null;

        Object set235_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // jkit/java/Java.g:518:5: ( 'true' | 'false' )
            // jkit/java/Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set235=(Token)input.LT(1);
            if ( (input.LA(1)>=161 && input.LA(1)<=162) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set235));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, booleanLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"

    public static class annotations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotations"
    // jkit/java/Java.g:524:1: annotations : ( annotation )+ ;
    public final JavaParser.annotations_return annotations() throws RecognitionException {
        JavaParser.annotations_return retval = new JavaParser.annotations_return();
        retval.start = input.LT(1);
        int annotations_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotation_return annotation236 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // jkit/java/Java.g:525:2: ( ( annotation )+ )
            // jkit/java/Java.g:525:4: ( annotation )+
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:525:4: ( annotation )+
            int cnt79=0;
            loop79:
            do {
                int alt79=2;
                alt79 = dfa79.predict(input);
                switch (alt79) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations3210);
            	    annotation236=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation236.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt79 >= 1 ) break loop79;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(79, input);
                        throw eee;
                }
                cnt79++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, annotations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotations"

    public static class annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // jkit/java/Java.g:528:1: annotation : '@' annotationName ( '(' ( elementValuePairs )? ')' )? -> ^( ANNOTATION annotationName ) ;
    public final JavaParser.annotation_return annotation() throws RecognitionException {
        JavaParser.annotation_return retval = new JavaParser.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal237=null;
        Token char_literal239=null;
        Token char_literal241=null;
        JavaParser.annotationName_return annotationName238 = null;

        JavaParser.elementValuePairs_return elementValuePairs240 = null;


        Object char_literal237_tree=null;
        Object char_literal239_tree=null;
        Object char_literal241_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_annotationName=new RewriteRuleSubtreeStream(adaptor,"rule annotationName");
        RewriteRuleSubtreeStream stream_elementValuePairs=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairs");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // jkit/java/Java.g:529:2: ( '@' annotationName ( '(' ( elementValuePairs )? ')' )? -> ^( ANNOTATION annotationName ) )
            // jkit/java/Java.g:529:4: '@' annotationName ( '(' ( elementValuePairs )? ')' )?
            {
            char_literal237=(Token)match(input,163,FOLLOW_163_in_annotation3222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(char_literal237);

            pushFollow(FOLLOW_annotationName_in_annotation3224);
            annotationName238=annotationName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationName.add(annotationName238.getTree());
            // jkit/java/Java.g:529:23: ( '(' ( elementValuePairs )? ')' )?
            int alt81=2;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    // jkit/java/Java.g:529:24: '(' ( elementValuePairs )? ')'
                    {
                    char_literal239=(Token)match(input,157,FOLLOW_157_in_annotation3227); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(char_literal239);

                    // jkit/java/Java.g:529:28: ( elementValuePairs )?
                    int alt80=2;
                    alt80 = dfa80.predict(input);
                    switch (alt80) {
                        case 1 :
                            // jkit/java/Java.g:0:0: elementValuePairs
                            {
                            pushFollow(FOLLOW_elementValuePairs_in_annotation3229);
                            elementValuePairs240=elementValuePairs();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairs.add(elementValuePairs240.getTree());

                            }
                            break;

                    }

                    char_literal241=(Token)match(input,158,FOLLOW_158_in_annotation3232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_158.add(char_literal241);


                    }
                    break;

            }



            // AST REWRITE
            // elements: annotationName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 529:53: -> ^( ANNOTATION annotationName )
            {
                // jkit/java/Java.g:529:56: ^( ANNOTATION annotationName )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_annotationName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationName"
    // jkit/java/Java.g:532:1: annotationName : Identifier ( '.' Identifier )* ;
    public final JavaParser.annotationName_return annotationName() throws RecognitionException {
        JavaParser.annotationName_return retval = new JavaParser.annotationName_return();
        retval.start = input.LT(1);
        int annotationName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier242=null;
        Token char_literal243=null;
        Token Identifier244=null;

        Object Identifier242_tree=null;
        Object char_literal243_tree=null;
        Object Identifier244_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // jkit/java/Java.g:533:2: ( Identifier ( '.' Identifier )* )
            // jkit/java/Java.g:533:4: Identifier ( '.' Identifier )*
            {
            root_0 = (Object)adaptor.nil();

            Identifier242=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationName3254); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier242_tree = (Object)adaptor.create(Identifier242);
            adaptor.addChild(root_0, Identifier242_tree);
            }
            // jkit/java/Java.g:533:15: ( '.' Identifier )*
            loop82:
            do {
                int alt82=2;
                alt82 = dfa82.predict(input);
                switch (alt82) {
            	case 1 :
            	    // jkit/java/Java.g:533:16: '.' Identifier
            	    {
            	    char_literal243=(Token)match(input,120,FOLLOW_120_in_annotationName3257); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal243_tree = (Object)adaptor.create(char_literal243);
            	    adaptor.addChild(root_0, char_literal243_tree);
            	    }
            	    Identifier244=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationName3259); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    Identifier244_tree = (Object)adaptor.create(Identifier244);
            	    adaptor.addChild(root_0, Identifier244_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, annotationName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationName"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairs"
    // jkit/java/Java.g:536:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
    public final JavaParser.elementValuePairs_return elementValuePairs() throws RecognitionException {
        JavaParser.elementValuePairs_return retval = new JavaParser.elementValuePairs_return();
        retval.start = input.LT(1);
        int elementValuePairs_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal246=null;
        JavaParser.elementValuePair_return elementValuePair245 = null;

        JavaParser.elementValuePair_return elementValuePair247 = null;


        Object char_literal246_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // jkit/java/Java.g:537:2: ( elementValuePair ( ',' elementValuePair )* )
            // jkit/java/Java.g:537:4: elementValuePair ( ',' elementValuePair )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs3273);
            elementValuePair245=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair245.getTree());
            // jkit/java/Java.g:537:21: ( ',' elementValuePair )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==126) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // jkit/java/Java.g:537:22: ',' elementValuePair
            	    {
            	    char_literal246=(Token)match(input,126,FOLLOW_126_in_elementValuePairs3276); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal246_tree = (Object)adaptor.create(char_literal246);
            	    adaptor.addChild(root_0, char_literal246_tree);
            	    }
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs3278);
            	    elementValuePair247=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair247.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, elementValuePairs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePair"
    // jkit/java/Java.g:540:1: elementValuePair : ( Identifier '=' )? elementValue ;
    public final JavaParser.elementValuePair_return elementValuePair() throws RecognitionException {
        JavaParser.elementValuePair_return retval = new JavaParser.elementValuePair_return();
        retval.start = input.LT(1);
        int elementValuePair_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier248=null;
        Token char_literal249=null;
        JavaParser.elementValue_return elementValue250 = null;


        Object Identifier248_tree=null;
        Object char_literal249_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // jkit/java/Java.g:541:2: ( ( Identifier '=' )? elementValue )
            // jkit/java/Java.g:541:4: ( Identifier '=' )? elementValue
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:541:4: ( Identifier '=' )?
            int alt84=2;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // jkit/java/Java.g:541:5: Identifier '='
                    {
                    Identifier248=(Token)match(input,Identifier,FOLLOW_Identifier_in_elementValuePair3293); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier248_tree = (Object)adaptor.create(Identifier248);
                    adaptor.addChild(root_0, Identifier248_tree);
                    }
                    char_literal249=(Token)match(input,136,FOLLOW_136_in_elementValuePair3295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal249_tree = (Object)adaptor.create(char_literal249);
                    adaptor.addChild(root_0, char_literal249_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_elementValue_in_elementValuePair3299);
            elementValue250=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue250.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, elementValuePair_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValue"
    // jkit/java/Java.g:544:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );
    public final JavaParser.elementValue_return elementValue() throws RecognitionException {
        JavaParser.elementValue_return retval = new JavaParser.elementValue_return();
        retval.start = input.LT(1);
        int elementValue_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.conditionalExpression_return conditionalExpression251 = null;

        JavaParser.annotation_return annotation252 = null;

        JavaParser.elementValueArrayInitializer_return elementValueArrayInitializer253 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // jkit/java/Java.g:545:2: ( conditionalExpression | annotation | elementValueArrayInitializer )
            int alt85=3;
            alt85 = dfa85.predict(input);
            switch (alt85) {
                case 1 :
                    // jkit/java/Java.g:545:4: conditionalExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_conditionalExpression_in_elementValue3311);
                    conditionalExpression251=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression251.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:546:6: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_elementValue3318);
                    annotation252=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation252.getTree());

                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:547:6: elementValueArrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue3325);
                    elementValueArrayInitializer253=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValueArrayInitializer253.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, elementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // jkit/java/Java.g:550:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? '}' ;
    public final JavaParser.elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        JavaParser.elementValueArrayInitializer_return retval = new JavaParser.elementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int elementValueArrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal254=null;
        Token char_literal256=null;
        Token char_literal258=null;
        JavaParser.elementValue_return elementValue255 = null;

        JavaParser.elementValue_return elementValue257 = null;


        Object char_literal254_tree=null;
        Object char_literal256_tree=null;
        Object char_literal258_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // jkit/java/Java.g:551:2: ( '{' ( elementValue ( ',' elementValue )* )? '}' )
            // jkit/java/Java.g:551:4: '{' ( elementValue ( ',' elementValue )* )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal254=(Token)match(input,129,FOLLOW_129_in_elementValueArrayInitializer3337); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal254_tree = (Object)adaptor.create(char_literal254);
            adaptor.addChild(root_0, char_literal254_tree);
            }
            // jkit/java/Java.g:551:8: ( elementValue ( ',' elementValue )* )?
            int alt87=2;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // jkit/java/Java.g:551:9: elementValue ( ',' elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer3340);
                    elementValue255=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue255.getTree());
                    // jkit/java/Java.g:551:22: ( ',' elementValue )*
                    loop86:
                    do {
                        int alt86=2;
                        int LA86_0 = input.LA(1);

                        if ( (LA86_0==126) ) {
                            alt86=1;
                        }


                        switch (alt86) {
                    	case 1 :
                    	    // jkit/java/Java.g:551:23: ',' elementValue
                    	    {
                    	    char_literal256=(Token)match(input,126,FOLLOW_126_in_elementValueArrayInitializer3343); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal256_tree = (Object)adaptor.create(char_literal256);
                    	    adaptor.addChild(root_0, char_literal256_tree);
                    	    }
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer3345);
                    	    elementValue257=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue257.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop86;
                        }
                    } while (true);


                    }
                    break;

            }

            char_literal258=(Token)match(input,130,FOLLOW_130_in_elementValueArrayInitializer3352); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal258_tree = (Object)adaptor.create(char_literal258);
            adaptor.addChild(root_0, char_literal258_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, elementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // jkit/java/Java.g:554:1: annotationTypeDeclaration : '@' 'interface' Identifier annotationTypeBody ;
    public final JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration() throws RecognitionException {
        JavaParser.annotationTypeDeclaration_return retval = new JavaParser.annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal259=null;
        Token string_literal260=null;
        Token Identifier261=null;
        JavaParser.annotationTypeBody_return annotationTypeBody262 = null;


        Object char_literal259_tree=null;
        Object string_literal260_tree=null;
        Object Identifier261_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // jkit/java/Java.g:555:2: ( '@' 'interface' Identifier annotationTypeBody )
            // jkit/java/Java.g:555:4: '@' 'interface' Identifier annotationTypeBody
            {
            root_0 = (Object)adaptor.nil();

            char_literal259=(Token)match(input,163,FOLLOW_163_in_annotationTypeDeclaration3364); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal259_tree = (Object)adaptor.create(char_literal259);
            adaptor.addChild(root_0, char_literal259_tree);
            }
            string_literal260=(Token)match(input,131,FOLLOW_131_in_annotationTypeDeclaration3366); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal260_tree = (Object)adaptor.create(string_literal260);
            adaptor.addChild(root_0, string_literal260_tree);
            }
            Identifier261=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationTypeDeclaration3368); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier261_tree = (Object)adaptor.create(Identifier261);
            adaptor.addChild(root_0, Identifier261_tree);
            }
            pushFollow(FOLLOW_annotationTypeBody_in_annotationTypeDeclaration3370);
            annotationTypeBody262=annotationTypeBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeBody262.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationTypeBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeBody"
    // jkit/java/Java.g:558:1: annotationTypeBody : '{' ( annotationTypeElementDeclarations )? '}' ;
    public final JavaParser.annotationTypeBody_return annotationTypeBody() throws RecognitionException {
        JavaParser.annotationTypeBody_return retval = new JavaParser.annotationTypeBody_return();
        retval.start = input.LT(1);
        int annotationTypeBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal263=null;
        Token char_literal265=null;
        JavaParser.annotationTypeElementDeclarations_return annotationTypeElementDeclarations264 = null;


        Object char_literal263_tree=null;
        Object char_literal265_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // jkit/java/Java.g:559:2: ( '{' ( annotationTypeElementDeclarations )? '}' )
            // jkit/java/Java.g:559:4: '{' ( annotationTypeElementDeclarations )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal263=(Token)match(input,129,FOLLOW_129_in_annotationTypeBody3382); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal263_tree = (Object)adaptor.create(char_literal263);
            adaptor.addChild(root_0, char_literal263_tree);
            }
            // jkit/java/Java.g:559:8: ( annotationTypeElementDeclarations )?
            int alt88=2;
            alt88 = dfa88.predict(input);
            switch (alt88) {
                case 1 :
                    // jkit/java/Java.g:559:9: annotationTypeElementDeclarations
                    {
                    pushFollow(FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody3385);
                    annotationTypeElementDeclarations264=annotationTypeElementDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclarations264.getTree());

                    }
                    break;

            }

            char_literal265=(Token)match(input,130,FOLLOW_130_in_annotationTypeBody3389); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal265_tree = (Object)adaptor.create(char_literal265);
            adaptor.addChild(root_0, char_literal265_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, annotationTypeBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeBody"

    public static class annotationTypeElementDeclarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclarations"
    // jkit/java/Java.g:562:1: annotationTypeElementDeclarations : ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )* ;
    public final JavaParser.annotationTypeElementDeclarations_return annotationTypeElementDeclarations() throws RecognitionException {
        JavaParser.annotationTypeElementDeclarations_return retval = new JavaParser.annotationTypeElementDeclarations_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclarations_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration266 = null;

        JavaParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration267 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // jkit/java/Java.g:563:2: ( ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )* )
            // jkit/java/Java.g:563:4: ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )*
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:563:4: ( annotationTypeElementDeclaration )
            // jkit/java/Java.g:563:5: annotationTypeElementDeclaration
            {
            pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3402);
            annotationTypeElementDeclaration266=annotationTypeElementDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclaration266.getTree());

            }

            // jkit/java/Java.g:563:39: ( annotationTypeElementDeclaration )*
            loop89:
            do {
                int alt89=2;
                alt89 = dfa89.predict(input);
                switch (alt89) {
            	case 1 :
            	    // jkit/java/Java.g:563:40: annotationTypeElementDeclaration
            	    {
            	    pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3406);
            	    annotationTypeElementDeclaration267=annotationTypeElementDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclaration267.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, annotationTypeElementDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclarations"

    public static class annotationTypeElementDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclaration"
    // jkit/java/Java.g:566:1: annotationTypeElementDeclaration : ( modifier )* annotationTypeElementRest ;
    public final JavaParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration() throws RecognitionException {
        JavaParser.annotationTypeElementDeclaration_return retval = new JavaParser.annotationTypeElementDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclaration_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.modifier_return modifier268 = null;

        JavaParser.annotationTypeElementRest_return annotationTypeElementRest269 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // jkit/java/Java.g:567:2: ( ( modifier )* annotationTypeElementRest )
            // jkit/java/Java.g:567:4: ( modifier )* annotationTypeElementRest
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:567:4: ( modifier )*
            loop90:
            do {
                int alt90=2;
                alt90 = dfa90.predict(input);
                switch (alt90) {
            	case 1 :
            	    // jkit/java/Java.g:567:5: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_annotationTypeElementDeclaration3421);
            	    modifier268=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier268.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);

            pushFollow(FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration3425);
            annotationTypeElementRest269=annotationTypeElementRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementRest269.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, annotationTypeElementDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclaration"

    public static class annotationTypeElementRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementRest"
    // jkit/java/Java.g:570:1: annotationTypeElementRest : ( type annotationMethodOrConstantRest ';' | classDeclaration ( ';' )? | interfaceDeclaration ( ';' )? | enumDeclaration ( ';' )? | annotationTypeDeclaration ( ';' )? );
    public final JavaParser.annotationTypeElementRest_return annotationTypeElementRest() throws RecognitionException {
        JavaParser.annotationTypeElementRest_return retval = new JavaParser.annotationTypeElementRest_return();
        retval.start = input.LT(1);
        int annotationTypeElementRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal272=null;
        Token char_literal274=null;
        Token char_literal276=null;
        Token char_literal278=null;
        Token char_literal280=null;
        JavaParser.type_return type270 = null;

        JavaParser.annotationMethodOrConstantRest_return annotationMethodOrConstantRest271 = null;

        JavaParser.classDeclaration_return classDeclaration273 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration275 = null;

        JavaParser.enumDeclaration_return enumDeclaration277 = null;

        JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration279 = null;


        Object char_literal272_tree=null;
        Object char_literal274_tree=null;
        Object char_literal276_tree=null;
        Object char_literal278_tree=null;
        Object char_literal280_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // jkit/java/Java.g:571:2: ( type annotationMethodOrConstantRest ';' | classDeclaration ( ';' )? | interfaceDeclaration ( ';' )? | enumDeclaration ( ';' )? | annotationTypeDeclaration ( ';' )? )
            int alt95=5;
            switch ( input.LA(1) ) {
            case Identifier:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
                {
                alt95=1;
                }
                break;
            case 122:
                {
                alt95=2;
                }
                break;
            case 131:
                {
                alt95=3;
                }
                break;
            case 163:
                {
                int LA95_5 = input.LA(2);

                if ( (LA95_5==131) ) {
                    int LA95_7 = input.LA(3);

                    if ( (synpred135_Java()) ) {
                        alt95=3;
                    }
                    else if ( (true) ) {
                        alt95=5;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 95, 7, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 5, input);

                    throw nvae;
                }
                }
                break;
            case ENUM:
                {
                alt95=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;
            }

            switch (alt95) {
                case 1 :
                    // jkit/java/Java.g:571:4: type annotationMethodOrConstantRest ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_annotationTypeElementRest3437);
                    type270=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type270.getTree());
                    pushFollow(FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest3439);
                    annotationMethodOrConstantRest271=annotationMethodOrConstantRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationMethodOrConstantRest271.getTree());
                    char_literal272=(Token)match(input,117,FOLLOW_117_in_annotationTypeElementRest3441); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal272_tree = (Object)adaptor.create(char_literal272);
                    adaptor.addChild(root_0, char_literal272_tree);
                    }

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:572:6: classDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_annotationTypeElementRest3448);
                    classDeclaration273=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration273.getTree());
                    // jkit/java/Java.g:572:23: ( ';' )?
                    int alt91=2;
                    alt91 = dfa91.predict(input);
                    switch (alt91) {
                        case 1 :
                            // jkit/java/Java.g:0:0: ';'
                            {
                            char_literal274=(Token)match(input,117,FOLLOW_117_in_annotationTypeElementRest3450); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal274_tree = (Object)adaptor.create(char_literal274);
                            adaptor.addChild(root_0, char_literal274_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:573:6: interfaceDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_annotationTypeElementRest3458);
                    interfaceDeclaration275=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration275.getTree());
                    // jkit/java/Java.g:573:27: ( ';' )?
                    int alt92=2;
                    alt92 = dfa92.predict(input);
                    switch (alt92) {
                        case 1 :
                            // jkit/java/Java.g:0:0: ';'
                            {
                            char_literal276=(Token)match(input,117,FOLLOW_117_in_annotationTypeElementRest3460); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal276_tree = (Object)adaptor.create(char_literal276);
                            adaptor.addChild(root_0, char_literal276_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:574:6: enumDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enumDeclaration_in_annotationTypeElementRest3468);
                    enumDeclaration277=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDeclaration277.getTree());
                    // jkit/java/Java.g:574:22: ( ';' )?
                    int alt93=2;
                    alt93 = dfa93.predict(input);
                    switch (alt93) {
                        case 1 :
                            // jkit/java/Java.g:0:0: ';'
                            {
                            char_literal278=(Token)match(input,117,FOLLOW_117_in_annotationTypeElementRest3470); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal278_tree = (Object)adaptor.create(char_literal278);
                            adaptor.addChild(root_0, char_literal278_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:575:6: annotationTypeDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest3478);
                    annotationTypeDeclaration279=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration279.getTree());
                    // jkit/java/Java.g:575:32: ( ';' )?
                    int alt94=2;
                    alt94 = dfa94.predict(input);
                    switch (alt94) {
                        case 1 :
                            // jkit/java/Java.g:0:0: ';'
                            {
                            char_literal280=(Token)match(input,117,FOLLOW_117_in_annotationTypeElementRest3480); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal280_tree = (Object)adaptor.create(char_literal280);
                            adaptor.addChild(root_0, char_literal280_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, annotationTypeElementRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementRest"

    public static class annotationMethodOrConstantRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodOrConstantRest"
    // jkit/java/Java.g:578:1: annotationMethodOrConstantRest : ( annotationMethodRest | annotationConstantRest );
    public final JavaParser.annotationMethodOrConstantRest_return annotationMethodOrConstantRest() throws RecognitionException {
        JavaParser.annotationMethodOrConstantRest_return retval = new JavaParser.annotationMethodOrConstantRest_return();
        retval.start = input.LT(1);
        int annotationMethodOrConstantRest_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotationMethodRest_return annotationMethodRest281 = null;

        JavaParser.annotationConstantRest_return annotationConstantRest282 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // jkit/java/Java.g:579:2: ( annotationMethodRest | annotationConstantRest )
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==Identifier) ) {
                int LA96_1 = input.LA(2);

                if ( (LA96_1==157) ) {
                    alt96=1;
                }
                else if ( (LA96_1==117||LA96_1==126||LA96_1==134||LA96_1==136) ) {
                    alt96=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;
            }
            switch (alt96) {
                case 1 :
                    // jkit/java/Java.g:579:4: annotationMethodRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest3493);
                    annotationMethodRest281=annotationMethodRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationMethodRest281.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:580:6: annotationConstantRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest3500);
                    annotationConstantRest282=annotationConstantRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationConstantRest282.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, annotationMethodOrConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodOrConstantRest"

    public static class annotationMethodRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodRest"
    // jkit/java/Java.g:583:1: annotationMethodRest : Identifier '(' ')' ( defaultValue )? ;
    public final JavaParser.annotationMethodRest_return annotationMethodRest() throws RecognitionException {
        JavaParser.annotationMethodRest_return retval = new JavaParser.annotationMethodRest_return();
        retval.start = input.LT(1);
        int annotationMethodRest_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier283=null;
        Token char_literal284=null;
        Token char_literal285=null;
        JavaParser.defaultValue_return defaultValue286 = null;


        Object Identifier283_tree=null;
        Object char_literal284_tree=null;
        Object char_literal285_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // jkit/java/Java.g:584:3: ( Identifier '(' ')' ( defaultValue )? )
            // jkit/java/Java.g:584:5: Identifier '(' ')' ( defaultValue )?
            {
            root_0 = (Object)adaptor.nil();

            Identifier283=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationMethodRest3513); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier283_tree = (Object)adaptor.create(Identifier283);
            adaptor.addChild(root_0, Identifier283_tree);
            }
            char_literal284=(Token)match(input,157,FOLLOW_157_in_annotationMethodRest3515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal284_tree = (Object)adaptor.create(char_literal284);
            adaptor.addChild(root_0, char_literal284_tree);
            }
            char_literal285=(Token)match(input,158,FOLLOW_158_in_annotationMethodRest3517); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal285_tree = (Object)adaptor.create(char_literal285);
            adaptor.addChild(root_0, char_literal285_tree);
            }
            // jkit/java/Java.g:584:24: ( defaultValue )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==164) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // jkit/java/Java.g:584:25: defaultValue
                    {
                    pushFollow(FOLLOW_defaultValue_in_annotationMethodRest3520);
                    defaultValue286=defaultValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defaultValue286.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, annotationMethodRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodRest"

    public static class annotationConstantRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationConstantRest"
    // jkit/java/Java.g:587:1: annotationConstantRest : variableDeclarators ;
    public final JavaParser.annotationConstantRest_return annotationConstantRest() throws RecognitionException {
        JavaParser.annotationConstantRest_return retval = new JavaParser.annotationConstantRest_return();
        retval.start = input.LT(1);
        int annotationConstantRest_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.variableDeclarators_return variableDeclarators287 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // jkit/java/Java.g:588:3: ( variableDeclarators )
            // jkit/java/Java.g:588:5: variableDeclarators
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclarators_in_annotationConstantRest3537);
            variableDeclarators287=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarators287.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, annotationConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationConstantRest"

    public static class defaultValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultValue"
    // jkit/java/Java.g:591:1: defaultValue : 'default' elementValue ;
    public final JavaParser.defaultValue_return defaultValue() throws RecognitionException {
        JavaParser.defaultValue_return retval = new JavaParser.defaultValue_return();
        retval.start = input.LT(1);
        int defaultValue_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal288=null;
        JavaParser.elementValue_return elementValue289 = null;


        Object string_literal288_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // jkit/java/Java.g:592:3: ( 'default' elementValue )
            // jkit/java/Java.g:592:5: 'default' elementValue
            {
            root_0 = (Object)adaptor.nil();

            string_literal288=(Token)match(input,164,FOLLOW_164_in_defaultValue3552); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal288_tree = (Object)adaptor.create(string_literal288);
            adaptor.addChild(root_0, string_literal288_tree);
            }
            pushFollow(FOLLOW_elementValue_in_defaultValue3554);
            elementValue289=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue289.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, defaultValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "defaultValue"

    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // jkit/java/Java.g:597:1: block : '{' ( blockStatement )* '}' -> ^( BLOCK ( blockStatement )* ) ;
    public final JavaParser.block_return block() throws RecognitionException {
        JavaParser.block_return retval = new JavaParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal290=null;
        Token char_literal292=null;
        JavaParser.blockStatement_return blockStatement291 = null;


        Object char_literal290_tree=null;
        Object char_literal292_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // jkit/java/Java.g:598:2: ( '{' ( blockStatement )* '}' -> ^( BLOCK ( blockStatement )* ) )
            // jkit/java/Java.g:598:4: '{' ( blockStatement )* '}'
            {
            char_literal290=(Token)match(input,129,FOLLOW_129_in_block3568); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(char_literal290);

            // jkit/java/Java.g:598:8: ( blockStatement )*
            loop98:
            do {
                int alt98=2;
                alt98 = dfa98.predict(input);
                switch (alt98) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block3570);
            	    blockStatement291=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement291.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);

            char_literal292=(Token)match(input,130,FOLLOW_130_in_block3573); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal292);



            // AST REWRITE
            // elements: blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 598:28: -> ^( BLOCK ( blockStatement )* )
            {
                // jkit/java/Java.g:598:31: ^( BLOCK ( blockStatement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, "BLOCK"), root_1);

                // jkit/java/Java.g:598:39: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // jkit/java/Java.g:601:1: blockStatement : ( localVariableDeclaration | classOrInterfaceDeclaration | statement );
    public final JavaParser.blockStatement_return blockStatement() throws RecognitionException {
        JavaParser.blockStatement_return retval = new JavaParser.blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.localVariableDeclaration_return localVariableDeclaration293 = null;

        JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration294 = null;

        JavaParser.statement_return statement295 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // jkit/java/Java.g:602:2: ( localVariableDeclaration | classOrInterfaceDeclaration | statement )
            int alt99=3;
            alt99 = dfa99.predict(input);
            switch (alt99) {
                case 1 :
                    // jkit/java/Java.g:602:4: localVariableDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_blockStatement3594);
                    localVariableDeclaration293=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration293.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:603:4: classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_blockStatement3599);
                    classOrInterfaceDeclaration294=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceDeclaration294.getTree());

                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:604:7: statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_blockStatement3607);
                    statement295=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement295.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclaration"
    // jkit/java/Java.g:607:1: localVariableDeclaration : ( variableModifier )* type variableDeclarators ';' -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) ;
    public final JavaParser.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        JavaParser.localVariableDeclaration_return retval = new JavaParser.localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal299=null;
        JavaParser.variableModifier_return variableModifier296 = null;

        JavaParser.type_return type297 = null;

        JavaParser.variableDeclarators_return variableDeclarators298 = null;


        Object char_literal299_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // jkit/java/Java.g:608:2: ( ( variableModifier )* type variableDeclarators ';' -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) )
            // jkit/java/Java.g:608:4: ( variableModifier )* type variableDeclarators ';'
            {
            // jkit/java/Java.g:608:4: ( variableModifier )*
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);

                if ( (LA100_0==141||LA100_0==163) ) {
                    alt100=1;
                }


                switch (alt100) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_localVariableDeclaration3619);
            	    variableModifier296=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier296.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_localVariableDeclaration3622);
            type297=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type297.getTree());
            pushFollow(FOLLOW_variableDeclarators_in_localVariableDeclaration3624);
            variableDeclarators298=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarators.add(variableDeclarators298.getTree());
            char_literal299=(Token)match(input,117,FOLLOW_117_in_localVariableDeclaration3626); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal299);



            // AST REWRITE
            // elements: variableModifier, variableDeclarators, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 608:51: -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
            {
                // jkit/java/Java.g:608:54: ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARDEF, "VARDEF"), root_1);

                // jkit/java/Java.g:608:63: ^( MODIFIERS ( variableModifier )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                // jkit/java/Java.g:608:75: ( variableModifier )*
                while ( stream_variableModifier.hasNext() ) {
                    adaptor.addChild(root_2, stream_variableModifier.nextTree());

                }
                stream_variableModifier.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_variableDeclarators.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // jkit/java/Java.g:611:1: statement : ( block | lc= 'assert' expression ( ':' expression )? ';' -> ^( ASSERT[$lc] expression ( expression )? ) | lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> ^( IF[$lc] parExpression statement ( statement )? ) | lc= 'for' '(' forControl ')' statement -> ^( FOR[$lc] forControl statement ) | lc= 'while' parExpression statement -> ^( WHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'do' statement 'while' parExpression ';' -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) ) | lc= 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups ) | lc= 'synchronized' parExpression block -> ^( SYNCHRONIZED[$lc] parExpression block ) | lc= 'return' ( expression )? ';' -> ^( RETURN[$lc] ( expression )? ) | lc= 'throw' expression ';' -> ^( THROW[$lc] expression ) | lc= 'break' ( Identifier )? ';' -> ^( BREAK[$lc] ( Identifier )? ) | lc= 'continue' ( Identifier )? ';' -> ^( CONTINUE[$lc] ( Identifier )? ) | ';' -> ^( BLOCK ) | statementExpression ';' -> statementExpression | lc= Identifier ':' statement -> ^( LABEL[$lc] Identifier statement ) );
    public final JavaParser.statement_return statement() throws RecognitionException {
        JavaParser.statement_return retval = new JavaParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token fc=null;
        Token char_literal302=null;
        Token char_literal304=null;
        Token string_literal307=null;
        Token char_literal309=null;
        Token char_literal311=null;
        Token string_literal316=null;
        Token char_literal318=null;
        Token char_literal325=null;
        Token char_literal327=null;
        Token char_literal331=null;
        Token char_literal333=null;
        Token Identifier334=null;
        Token char_literal335=null;
        Token Identifier336=null;
        Token char_literal337=null;
        Token char_literal338=null;
        Token char_literal340=null;
        Token char_literal341=null;
        JavaParser.block_return block300 = null;

        JavaParser.expression_return expression301 = null;

        JavaParser.expression_return expression303 = null;

        JavaParser.parExpression_return parExpression305 = null;

        JavaParser.statement_return statement306 = null;

        JavaParser.statement_return statement308 = null;

        JavaParser.forControl_return forControl310 = null;

        JavaParser.statement_return statement312 = null;

        JavaParser.parExpression_return parExpression313 = null;

        JavaParser.statement_return statement314 = null;

        JavaParser.statement_return statement315 = null;

        JavaParser.parExpression_return parExpression317 = null;

        JavaParser.block_return block319 = null;

        JavaParser.catches_return catches320 = null;

        JavaParser.block_return block321 = null;

        JavaParser.catches_return catches322 = null;

        JavaParser.block_return block323 = null;

        JavaParser.parExpression_return parExpression324 = null;

        JavaParser.switchBlockStatementGroups_return switchBlockStatementGroups326 = null;

        JavaParser.parExpression_return parExpression328 = null;

        JavaParser.block_return block329 = null;

        JavaParser.expression_return expression330 = null;

        JavaParser.expression_return expression332 = null;

        JavaParser.statementExpression_return statementExpression339 = null;

        JavaParser.statement_return statement342 = null;


        Object lc_tree=null;
        Object fc_tree=null;
        Object char_literal302_tree=null;
        Object char_literal304_tree=null;
        Object string_literal307_tree=null;
        Object char_literal309_tree=null;
        Object char_literal311_tree=null;
        Object string_literal316_tree=null;
        Object char_literal318_tree=null;
        Object char_literal325_tree=null;
        Object char_literal327_tree=null;
        Object char_literal331_tree=null;
        Object char_literal333_tree=null;
        Object Identifier334_tree=null;
        Object char_literal335_tree=null;
        Object Identifier336_tree=null;
        Object char_literal337_tree=null;
        Object char_literal338_tree=null;
        Object char_literal340_tree=null;
        Object char_literal341_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleSubtreeStream stream_parExpression=new RewriteRuleSubtreeStream(adaptor,"rule parExpression");
        RewriteRuleSubtreeStream stream_statementExpression=new RewriteRuleSubtreeStream(adaptor,"rule statementExpression");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
        RewriteRuleSubtreeStream stream_switchBlockStatementGroups=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockStatementGroups");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_forControl=new RewriteRuleSubtreeStream(adaptor,"rule forControl");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // jkit/java/Java.g:612:2: ( block | lc= 'assert' expression ( ':' expression )? ';' -> ^( ASSERT[$lc] expression ( expression )? ) | lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> ^( IF[$lc] parExpression statement ( statement )? ) | lc= 'for' '(' forControl ')' statement -> ^( FOR[$lc] forControl statement ) | lc= 'while' parExpression statement -> ^( WHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'do' statement 'while' parExpression ';' -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) ) | lc= 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups ) | lc= 'synchronized' parExpression block -> ^( SYNCHRONIZED[$lc] parExpression block ) | lc= 'return' ( expression )? ';' -> ^( RETURN[$lc] ( expression )? ) | lc= 'throw' expression ';' -> ^( THROW[$lc] expression ) | lc= 'break' ( Identifier )? ';' -> ^( BREAK[$lc] ( Identifier )? ) | lc= 'continue' ( Identifier )? ';' -> ^( CONTINUE[$lc] ( Identifier )? ) | ';' -> ^( BLOCK ) | statementExpression ';' -> statementExpression | lc= Identifier ':' statement -> ^( LABEL[$lc] Identifier statement ) )
            int alt107=16;
            alt107 = dfa107.predict(input);
            switch (alt107) {
                case 1 :
                    // jkit/java/Java.g:612:4: block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_block_in_statement3655);
                    block300=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block300.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:613:7: lc= 'assert' expression ( ':' expression )? ';'
                    {
                    lc=(Token)match(input,165,FOLLOW_165_in_statement3665); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_165.add(lc);

                    pushFollow(FOLLOW_expression_in_statement3667);
                    expression301=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression301.getTree());
                    // jkit/java/Java.g:613:30: ( ':' expression )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==166) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // jkit/java/Java.g:613:31: ':' expression
                            {
                            char_literal302=(Token)match(input,166,FOLLOW_166_in_statement3670); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_166.add(char_literal302);

                            pushFollow(FOLLOW_expression_in_statement3672);
                            expression303=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression303.getTree());

                            }
                            break;

                    }

                    char_literal304=(Token)match(input,117,FOLLOW_117_in_statement3676); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal304);



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 613:52: -> ^( ASSERT[$lc] expression ( expression )? )
                    {
                        // jkit/java/Java.g:613:55: ^( ASSERT[$lc] expression ( expression )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSERT, lc), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        // jkit/java/Java.g:613:80: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:614:7: lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )?
                    {
                    lc=(Token)match(input,167,FOLLOW_167_in_statement3698); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement3700);
                    parExpression305=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression305.getTree());
                    pushFollow(FOLLOW_statement_in_statement3702);
                    statement306=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement306.getTree());
                    // jkit/java/Java.g:614:39: ( options {k=1; } : 'else' statement )?
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==168) ) {
                        int LA102_1 = input.LA(2);

                        if ( (synpred148_Java()) ) {
                            alt102=1;
                        }
                    }
                    switch (alt102) {
                        case 1 :
                            // jkit/java/Java.g:614:55: 'else' statement
                            {
                            string_literal307=(Token)match(input,168,FOLLOW_168_in_statement3712); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_168.add(string_literal307);

                            pushFollow(FOLLOW_statement_in_statement3714);
                            statement308=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement308.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: statement, parExpression, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 614:74: -> ^( IF[$lc] parExpression statement ( statement )? )
                    {
                        // jkit/java/Java.g:614:77: ^( IF[$lc] parExpression statement ( statement )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IF, lc), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());
                        // jkit/java/Java.g:614:111: ( statement )?
                        if ( stream_statement.hasNext() ) {
                            adaptor.addChild(root_1, stream_statement.nextTree());

                        }
                        stream_statement.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:615:7: lc= 'for' '(' forControl ')' statement
                    {
                    lc=(Token)match(input,169,FOLLOW_169_in_statement3740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_169.add(lc);

                    char_literal309=(Token)match(input,157,FOLLOW_157_in_statement3742); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(char_literal309);

                    pushFollow(FOLLOW_forControl_in_statement3744);
                    forControl310=forControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_forControl.add(forControl310.getTree());
                    char_literal311=(Token)match(input,158,FOLLOW_158_in_statement3746); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_158.add(char_literal311);

                    pushFollow(FOLLOW_statement_in_statement3748);
                    statement312=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement312.getTree());


                    // AST REWRITE
                    // elements: statement, forControl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 615:45: -> ^( FOR[$lc] forControl statement )
                    {
                        // jkit/java/Java.g:615:48: ^( FOR[$lc] forControl statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FOR, lc), root_1);

                        adaptor.addChild(root_1, stream_forControl.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:616:7: lc= 'while' parExpression statement
                    {
                    lc=(Token)match(input,170,FOLLOW_170_in_statement3769); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement3771);
                    parExpression313=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression313.getTree());
                    pushFollow(FOLLOW_statement_in_statement3773);
                    statement314=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement314.getTree());


                    // AST REWRITE
                    // elements: parExpression, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 616:42: -> ^( WHILE[$lc] ^( TEST parExpression ) statement )
                    {
                        // jkit/java/Java.g:616:45: ^( WHILE[$lc] ^( TEST parExpression ) statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(WHILE, lc), root_1);

                        // jkit/java/Java.g:616:58: ^( TEST parExpression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TEST, "TEST"), root_2);

                        adaptor.addChild(root_2, stream_parExpression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:617:7: lc= 'do' statement 'while' parExpression ';'
                    {
                    lc=(Token)match(input,171,FOLLOW_171_in_statement3798); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(lc);

                    pushFollow(FOLLOW_statement_in_statement3800);
                    statement315=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement315.getTree());
                    string_literal316=(Token)match(input,170,FOLLOW_170_in_statement3802); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(string_literal316);

                    pushFollow(FOLLOW_parExpression_in_statement3804);
                    parExpression317=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression317.getTree());
                    char_literal318=(Token)match(input,117,FOLLOW_117_in_statement3806); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal318);



                    // AST REWRITE
                    // elements: parExpression, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 617:51: -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement )
                    {
                        // jkit/java/Java.g:617:54: ^( DOWHILE[$lc] ^( TEST parExpression ) statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DOWHILE, lc), root_1);

                        // jkit/java/Java.g:617:69: ^( TEST parExpression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TEST, "TEST"), root_2);

                        adaptor.addChild(root_2, stream_parExpression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // jkit/java/Java.g:618:7: lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) )
                    {
                    lc=(Token)match(input,172,FOLLOW_172_in_statement3831); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_172.add(lc);

                    pushFollow(FOLLOW_block_in_statement3833);
                    block319=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block319.getTree());
                    // jkit/java/Java.g:619:7: ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) )
                    int alt103=3;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==179) ) {
                        int LA103_1 = input.LA(2);

                        if ( (LA103_1==157) ) {
                            int LA103_3 = input.LA(3);

                            if ( (synpred153_Java()) ) {
                                alt103=1;
                            }
                            else if ( (synpred154_Java()) ) {
                                alt103=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 103, 3, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 103, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA103_0==173) ) {
                        alt103=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 103, 0, input);

                        throw nvae;
                    }
                    switch (alt103) {
                        case 1 :
                            // jkit/java/Java.g:619:9: catches fc= 'finally' block
                            {
                            pushFollow(FOLLOW_catches_in_statement3843);
                            catches320=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_catches.add(catches320.getTree());
                            fc=(Token)match(input,173,FOLLOW_173_in_statement3847); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_173.add(fc);

                            pushFollow(FOLLOW_block_in_statement3849);
                            block321=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_block.add(block321.getTree());


                            // AST REWRITE
                            // elements: block, catches, block
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 619:36: -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) )
                            {
                                // jkit/java/Java.g:619:39: ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TRY, lc), root_1);

                                adaptor.addChild(root_1, stream_block.nextTree());
                                adaptor.addChild(root_1, stream_catches.nextTree());
                                // jkit/java/Java.g:619:64: ^( FINALLY[$fc] block )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(FINALLY, fc), root_2);

                                adaptor.addChild(root_2, stream_block.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:620:9: catches
                            {
                            pushFollow(FOLLOW_catches_in_statement3877);
                            catches322=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_catches.add(catches322.getTree());


                            // AST REWRITE
                            // elements: block, catches
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 620:17: -> ^( TRY[$lc] block catches )
                            {
                                // jkit/java/Java.g:620:20: ^( TRY[$lc] block catches )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TRY, lc), root_1);

                                adaptor.addChild(root_1, stream_block.nextTree());
                                adaptor.addChild(root_1, stream_catches.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:621:9: fc= 'finally' block
                            {
                            fc=(Token)match(input,173,FOLLOW_173_in_statement3900); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_173.add(fc);

                            pushFollow(FOLLOW_block_in_statement3902);
                            block323=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_block.add(block323.getTree());


                            // AST REWRITE
                            // elements: block, block
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 621:28: -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) )
                            {
                                // jkit/java/Java.g:621:31: ^( TRY[$lc] block ^( FINALLY[$fc] block ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TRY, lc), root_1);

                                adaptor.addChild(root_1, stream_block.nextTree());
                                // jkit/java/Java.g:621:48: ^( FINALLY[$fc] block )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(FINALLY, fc), root_2);

                                adaptor.addChild(root_2, stream_block.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 8 :
                    // jkit/java/Java.g:623:7: lc= 'switch' parExpression '{' switchBlockStatementGroups '}'
                    {
                    lc=(Token)match(input,174,FOLLOW_174_in_statement3936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_174.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement3938);
                    parExpression324=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression324.getTree());
                    char_literal325=(Token)match(input,129,FOLLOW_129_in_statement3940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_129.add(char_literal325);

                    pushFollow(FOLLOW_switchBlockStatementGroups_in_statement3942);
                    switchBlockStatementGroups326=switchBlockStatementGroups();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchBlockStatementGroups.add(switchBlockStatementGroups326.getTree());
                    char_literal327=(Token)match(input,130,FOLLOW_130_in_statement3944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_130.add(char_literal327);



                    // AST REWRITE
                    // elements: switchBlockStatementGroups, parExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 623:68: -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups )
                    {
                        // jkit/java/Java.g:623:71: ^( SWITCH[$lc] parExpression switchBlockStatementGroups )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SWITCH, lc), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_switchBlockStatementGroups.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // jkit/java/Java.g:624:7: lc= 'synchronized' parExpression block
                    {
                    lc=(Token)match(input,143,FOLLOW_143_in_statement3965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_143.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement3967);
                    parExpression328=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression328.getTree());
                    pushFollow(FOLLOW_block_in_statement3969);
                    block329=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block329.getTree());


                    // AST REWRITE
                    // elements: parExpression, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 624:45: -> ^( SYNCHRONIZED[$lc] parExpression block )
                    {
                        // jkit/java/Java.g:624:48: ^( SYNCHRONIZED[$lc] parExpression block )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SYNCHRONIZED, lc), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // jkit/java/Java.g:625:7: lc= 'return' ( expression )? ';'
                    {
                    lc=(Token)match(input,175,FOLLOW_175_in_statement3990); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_175.add(lc);

                    // jkit/java/Java.g:625:19: ( expression )?
                    int alt104=2;
                    alt104 = dfa104.predict(input);
                    switch (alt104) {
                        case 1 :
                            // jkit/java/Java.g:0:0: expression
                            {
                            pushFollow(FOLLOW_expression_in_statement3992);
                            expression330=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression330.getTree());

                            }
                            break;

                    }

                    char_literal331=(Token)match(input,117,FOLLOW_117_in_statement3995); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal331);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 625:35: -> ^( RETURN[$lc] ( expression )? )
                    {
                        // jkit/java/Java.g:625:38: ^( RETURN[$lc] ( expression )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RETURN, lc), root_1);

                        // jkit/java/Java.g:625:52: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // jkit/java/Java.g:626:7: lc= 'throw' expression ';'
                    {
                    lc=(Token)match(input,176,FOLLOW_176_in_statement4015); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_176.add(lc);

                    pushFollow(FOLLOW_expression_in_statement4017);
                    expression332=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression332.getTree());
                    char_literal333=(Token)match(input,117,FOLLOW_117_in_statement4019); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal333);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 626:33: -> ^( THROW[$lc] expression )
                    {
                        // jkit/java/Java.g:626:36: ^( THROW[$lc] expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROW, lc), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // jkit/java/Java.g:627:7: lc= 'break' ( Identifier )? ';'
                    {
                    lc=(Token)match(input,177,FOLLOW_177_in_statement4038); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_177.add(lc);

                    // jkit/java/Java.g:627:18: ( Identifier )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==Identifier) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // jkit/java/Java.g:0:0: Identifier
                            {
                            Identifier334=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement4040); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier334);


                            }
                            break;

                    }

                    char_literal335=(Token)match(input,117,FOLLOW_117_in_statement4043); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal335);



                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 627:34: -> ^( BREAK[$lc] ( Identifier )? )
                    {
                        // jkit/java/Java.g:627:37: ^( BREAK[$lc] ( Identifier )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BREAK, lc), root_1);

                        // jkit/java/Java.g:627:50: ( Identifier )?
                        if ( stream_Identifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_Identifier.nextNode());

                        }
                        stream_Identifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // jkit/java/Java.g:628:7: lc= 'continue' ( Identifier )? ';'
                    {
                    lc=(Token)match(input,178,FOLLOW_178_in_statement4063); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(lc);

                    // jkit/java/Java.g:628:21: ( Identifier )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==Identifier) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // jkit/java/Java.g:0:0: Identifier
                            {
                            Identifier336=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement4065); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier336);


                            }
                            break;

                    }

                    char_literal337=(Token)match(input,117,FOLLOW_117_in_statement4068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal337);



                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 628:37: -> ^( CONTINUE[$lc] ( Identifier )? )
                    {
                        // jkit/java/Java.g:628:40: ^( CONTINUE[$lc] ( Identifier )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CONTINUE, lc), root_1);

                        // jkit/java/Java.g:628:56: ( Identifier )?
                        if ( stream_Identifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_Identifier.nextNode());

                        }
                        stream_Identifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // jkit/java/Java.g:629:7: ';'
                    {
                    char_literal338=(Token)match(input,117,FOLLOW_117_in_statement4086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal338);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 629:11: -> ^( BLOCK )
                    {
                        // jkit/java/Java.g:629:14: ^( BLOCK )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, "BLOCK"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    // jkit/java/Java.g:630:7: statementExpression ';'
                    {
                    pushFollow(FOLLOW_statementExpression_in_statement4101);
                    statementExpression339=statementExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statementExpression.add(statementExpression339.getTree());
                    char_literal340=(Token)match(input,117,FOLLOW_117_in_statement4103); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal340);



                    // AST REWRITE
                    // elements: statementExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 630:31: -> statementExpression
                    {
                        adaptor.addChild(root_0, stream_statementExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 16 :
                    // jkit/java/Java.g:631:7: lc= Identifier ':' statement
                    {
                    lc=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement4117); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(lc);

                    char_literal341=(Token)match(input,166,FOLLOW_166_in_statement4119); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_166.add(char_literal341);

                    pushFollow(FOLLOW_statement_in_statement4121);
                    statement342=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement342.getTree());


                    // AST REWRITE
                    // elements: statement, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 631:35: -> ^( LABEL[$lc] Identifier statement )
                    {
                        // jkit/java/Java.g:631:38: ^( LABEL[$lc] Identifier statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABEL, lc), root_1);

                        adaptor.addChild(root_1, stream_Identifier.nextNode());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class catches_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catches"
    // jkit/java/Java.g:634:1: catches : catchClause ( catchClause )* ;
    public final JavaParser.catches_return catches() throws RecognitionException {
        JavaParser.catches_return retval = new JavaParser.catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.catchClause_return catchClause343 = null;

        JavaParser.catchClause_return catchClause344 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // jkit/java/Java.g:635:2: ( catchClause ( catchClause )* )
            // jkit/java/Java.g:635:4: catchClause ( catchClause )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_catchClause_in_catches4143);
            catchClause343=catchClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause343.getTree());
            // jkit/java/Java.g:635:16: ( catchClause )*
            loop108:
            do {
                int alt108=2;
                alt108 = dfa108.predict(input);
                switch (alt108) {
            	case 1 :
            	    // jkit/java/Java.g:635:17: catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches4146);
            	    catchClause344=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause344.getTree());

            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // jkit/java/Java.g:638:1: catchClause : lc= 'catch' '(' formalParameter ')' block -> ^( CATCH[$lc] ^( PARAMETER formalParameter ) block ) ;
    public final JavaParser.catchClause_return catchClause() throws RecognitionException {
        JavaParser.catchClause_return retval = new JavaParser.catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token char_literal345=null;
        Token char_literal347=null;
        JavaParser.formalParameter_return formalParameter346 = null;

        JavaParser.block_return block348 = null;


        Object lc_tree=null;
        Object char_literal345_tree=null;
        Object char_literal347_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // jkit/java/Java.g:639:2: (lc= 'catch' '(' formalParameter ')' block -> ^( CATCH[$lc] ^( PARAMETER formalParameter ) block ) )
            // jkit/java/Java.g:639:4: lc= 'catch' '(' formalParameter ')' block
            {
            lc=(Token)match(input,179,FOLLOW_179_in_catchClause4162); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_179.add(lc);

            char_literal345=(Token)match(input,157,FOLLOW_157_in_catchClause4164); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(char_literal345);

            pushFollow(FOLLOW_formalParameter_in_catchClause4166);
            formalParameter346=formalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter346.getTree());
            char_literal347=(Token)match(input,158,FOLLOW_158_in_catchClause4168); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(char_literal347);

            pushFollow(FOLLOW_block_in_catchClause4170);
            block348=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block348.getTree());


            // AST REWRITE
            // elements: formalParameter, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 639:45: -> ^( CATCH[$lc] ^( PARAMETER formalParameter ) block )
            {
                // jkit/java/Java.g:639:48: ^( CATCH[$lc] ^( PARAMETER formalParameter ) block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CATCH, lc), root_1);

                // jkit/java/Java.g:639:61: ^( PARAMETER formalParameter )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETER, "PARAMETER"), root_2);

                adaptor.addChild(root_2, stream_formalParameter.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class formalParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameter"
    // jkit/java/Java.g:642:1: formalParameter : ( variableModifier )* type variableDeclaratorId ;
    public final JavaParser.formalParameter_return formalParameter() throws RecognitionException {
        JavaParser.formalParameter_return retval = new JavaParser.formalParameter_return();
        retval.start = input.LT(1);
        int formalParameter_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.variableModifier_return variableModifier349 = null;

        JavaParser.type_return type350 = null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId351 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // jkit/java/Java.g:643:2: ( ( variableModifier )* type variableDeclaratorId )
            // jkit/java/Java.g:643:4: ( variableModifier )* type variableDeclaratorId
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:643:4: ( variableModifier )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==141||LA109_0==163) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameter4196);
            	    variableModifier349=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifier349.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameter4199);
            type350=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type350.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameter4201);
            variableDeclaratorId351=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclaratorId351.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, formalParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameter"

    public static class switchBlockStatementGroups_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroups"
    // jkit/java/Java.g:646:1: switchBlockStatementGroups : ( switchBlockStatementGroup )* ;
    public final JavaParser.switchBlockStatementGroups_return switchBlockStatementGroups() throws RecognitionException {
        JavaParser.switchBlockStatementGroups_return retval = new JavaParser.switchBlockStatementGroups_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroups_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.switchBlockStatementGroup_return switchBlockStatementGroup352 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // jkit/java/Java.g:647:2: ( ( switchBlockStatementGroup )* )
            // jkit/java/Java.g:647:4: ( switchBlockStatementGroup )*
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:647:4: ( switchBlockStatementGroup )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( (LA110_0==164||LA110_0==180) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // jkit/java/Java.g:647:5: switchBlockStatementGroup
            	    {
            	    pushFollow(FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups4215);
            	    switchBlockStatementGroup352=switchBlockStatementGroup();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchBlockStatementGroup352.getTree());

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, switchBlockStatementGroups_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroups"

    public static class switchBlockStatementGroup_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroup"
    // jkit/java/Java.g:650:1: switchBlockStatementGroup : switchLabel ( blockStatement )* -> ^( switchLabel ^( BLOCK ( blockStatement )* ) ) ;
    public final JavaParser.switchBlockStatementGroup_return switchBlockStatementGroup() throws RecognitionException {
        JavaParser.switchBlockStatementGroup_return retval = new JavaParser.switchBlockStatementGroup_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroup_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.switchLabel_return switchLabel353 = null;

        JavaParser.blockStatement_return blockStatement354 = null;


        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        RewriteRuleSubtreeStream stream_switchLabel=new RewriteRuleSubtreeStream(adaptor,"rule switchLabel");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // jkit/java/Java.g:651:2: ( switchLabel ( blockStatement )* -> ^( switchLabel ^( BLOCK ( blockStatement )* ) ) )
            // jkit/java/Java.g:651:4: switchLabel ( blockStatement )*
            {
            pushFollow(FOLLOW_switchLabel_in_switchBlockStatementGroup4229);
            switchLabel353=switchLabel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_switchLabel.add(switchLabel353.getTree());
            // jkit/java/Java.g:651:16: ( blockStatement )*
            loop111:
            do {
                int alt111=2;
                alt111 = dfa111.predict(input);
                switch (alt111) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchBlockStatementGroup4231);
            	    blockStatement354=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement354.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);



            // AST REWRITE
            // elements: blockStatement, switchLabel
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 651:32: -> ^( switchLabel ^( BLOCK ( blockStatement )* ) )
            {
                // jkit/java/Java.g:651:35: ^( switchLabel ^( BLOCK ( blockStatement )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_switchLabel.nextNode(), root_1);

                // jkit/java/Java.g:651:49: ^( BLOCK ( blockStatement )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, "BLOCK"), root_2);

                // jkit/java/Java.g:651:57: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_2, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, switchBlockStatementGroup_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroup"

    public static class switchLabel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchLabel"
    // jkit/java/Java.g:654:1: switchLabel : (lc= 'case' constantExpression ':' -> ^( CASE[$lc] constantExpression ) | lc= 'case' enumConstantName ':' -> ^( CASE[$lc] enumConstantName ) | lc= 'default' ':' -> ^( DEFAULT ) );
    public final JavaParser.switchLabel_return switchLabel() throws RecognitionException {
        JavaParser.switchLabel_return retval = new JavaParser.switchLabel_return();
        retval.start = input.LT(1);
        int switchLabel_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token char_literal356=null;
        Token char_literal358=null;
        Token char_literal359=null;
        JavaParser.constantExpression_return constantExpression355 = null;

        JavaParser.enumConstantName_return enumConstantName357 = null;


        Object lc_tree=null;
        Object char_literal356_tree=null;
        Object char_literal358_tree=null;
        Object char_literal359_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleSubtreeStream stream_enumConstantName=new RewriteRuleSubtreeStream(adaptor,"rule enumConstantName");
        RewriteRuleSubtreeStream stream_constantExpression=new RewriteRuleSubtreeStream(adaptor,"rule constantExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // jkit/java/Java.g:655:2: (lc= 'case' constantExpression ':' -> ^( CASE[$lc] constantExpression ) | lc= 'case' enumConstantName ':' -> ^( CASE[$lc] enumConstantName ) | lc= 'default' ':' -> ^( DEFAULT ) )
            int alt112=3;
            alt112 = dfa112.predict(input);
            switch (alt112) {
                case 1 :
                    // jkit/java/Java.g:655:4: lc= 'case' constantExpression ':'
                    {
                    lc=(Token)match(input,180,FOLLOW_180_in_switchLabel4259); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_180.add(lc);

                    pushFollow(FOLLOW_constantExpression_in_switchLabel4261);
                    constantExpression355=constantExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constantExpression.add(constantExpression355.getTree());
                    char_literal356=(Token)match(input,166,FOLLOW_166_in_switchLabel4263); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_166.add(char_literal356);



                    // AST REWRITE
                    // elements: constantExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 655:37: -> ^( CASE[$lc] constantExpression )
                    {
                        // jkit/java/Java.g:655:40: ^( CASE[$lc] constantExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CASE, lc), root_1);

                        adaptor.addChild(root_1, stream_constantExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:656:4: lc= 'case' enumConstantName ':'
                    {
                    lc=(Token)match(input,180,FOLLOW_180_in_switchLabel4279); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_180.add(lc);

                    pushFollow(FOLLOW_enumConstantName_in_switchLabel4281);
                    enumConstantName357=enumConstantName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumConstantName.add(enumConstantName357.getTree());
                    char_literal358=(Token)match(input,166,FOLLOW_166_in_switchLabel4283); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_166.add(char_literal358);



                    // AST REWRITE
                    // elements: enumConstantName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 656:35: -> ^( CASE[$lc] enumConstantName )
                    {
                        // jkit/java/Java.g:656:38: ^( CASE[$lc] enumConstantName )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CASE, lc), root_1);

                        adaptor.addChild(root_1, stream_enumConstantName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:657:4: lc= 'default' ':'
                    {
                    lc=(Token)match(input,164,FOLLOW_164_in_switchLabel4299); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_164.add(lc);

                    char_literal359=(Token)match(input,166,FOLLOW_166_in_switchLabel4301); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_166.add(char_literal359);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 657:21: -> ^( DEFAULT )
                    {
                        // jkit/java/Java.g:657:24: ^( DEFAULT )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DEFAULT, "DEFAULT"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, switchLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchLabel"

    public static class moreStatementExpressions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moreStatementExpressions"
    // jkit/java/Java.g:660:1: moreStatementExpressions : ( ',' statementExpression )* ;
    public final JavaParser.moreStatementExpressions_return moreStatementExpressions() throws RecognitionException {
        JavaParser.moreStatementExpressions_return retval = new JavaParser.moreStatementExpressions_return();
        retval.start = input.LT(1);
        int moreStatementExpressions_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal360=null;
        JavaParser.statementExpression_return statementExpression361 = null;


        Object char_literal360_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // jkit/java/Java.g:661:2: ( ( ',' statementExpression )* )
            // jkit/java/Java.g:661:4: ( ',' statementExpression )*
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:661:4: ( ',' statementExpression )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==126) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // jkit/java/Java.g:661:5: ',' statementExpression
            	    {
            	    char_literal360=(Token)match(input,126,FOLLOW_126_in_moreStatementExpressions4320); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal360_tree = (Object)adaptor.create(char_literal360);
            	    adaptor.addChild(root_0, char_literal360_tree);
            	    }
            	    pushFollow(FOLLOW_statementExpression_in_moreStatementExpressions4322);
            	    statementExpression361=statementExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statementExpression361.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, moreStatementExpressions_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moreStatementExpressions"

    public static class forControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forControl"
    // jkit/java/Java.g:664:1: forControl options {k=3; } : ( forVarControl -> ^( FOREACH forVarControl ) | ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )? -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? ) );
    public final JavaParser.forControl_return forControl() throws RecognitionException {
        JavaParser.forControl_return retval = new JavaParser.forControl_return();
        retval.start = input.LT(1);
        int forControl_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal364=null;
        Token char_literal365=null;
        JavaParser.expression_return fc = null;

        JavaParser.forUpdate_return fu = null;

        JavaParser.forVarControl_return forVarControl362 = null;

        JavaParser.forInit_return forInit363 = null;


        Object char_literal364_tree=null;
        Object char_literal365_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleSubtreeStream stream_forUpdate=new RewriteRuleSubtreeStream(adaptor,"rule forUpdate");
        RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
        RewriteRuleSubtreeStream stream_forVarControl=new RewriteRuleSubtreeStream(adaptor,"rule forVarControl");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // jkit/java/Java.g:666:2: ( forVarControl -> ^( FOREACH forVarControl ) | ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )? -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? ) )
            int alt117=2;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    // jkit/java/Java.g:666:4: forVarControl
                    {
                    pushFollow(FOLLOW_forVarControl_in_forControl4343);
                    forVarControl362=forVarControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_forVarControl.add(forVarControl362.getTree());


                    // AST REWRITE
                    // elements: forVarControl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 666:18: -> ^( FOREACH forVarControl )
                    {
                        // jkit/java/Java.g:666:21: ^( FOREACH forVarControl )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FOREACH, "FOREACH"), root_1);

                        adaptor.addChild(root_1, stream_forVarControl.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:667:4: ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )?
                    {
                    // jkit/java/Java.g:667:4: ( forInit )?
                    int alt114=2;
                    alt114 = dfa114.predict(input);
                    switch (alt114) {
                        case 1 :
                            // jkit/java/Java.g:0:0: forInit
                            {
                            pushFollow(FOLLOW_forInit_in_forControl4356);
                            forInit363=forInit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forInit.add(forInit363.getTree());

                            }
                            break;

                    }

                    char_literal364=(Token)match(input,117,FOLLOW_117_in_forControl4359); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal364);

                    // jkit/java/Java.g:667:19: (fc= expression )?
                    int alt115=2;
                    alt115 = dfa115.predict(input);
                    switch (alt115) {
                        case 1 :
                            // jkit/java/Java.g:0:0: fc= expression
                            {
                            pushFollow(FOLLOW_expression_in_forControl4363);
                            fc=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(fc.getTree());

                            }
                            break;

                    }

                    char_literal365=(Token)match(input,117,FOLLOW_117_in_forControl4366); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal365);

                    // jkit/java/Java.g:667:38: (fu= forUpdate )?
                    int alt116=2;
                    alt116 = dfa116.predict(input);
                    switch (alt116) {
                        case 1 :
                            // jkit/java/Java.g:0:0: fu= forUpdate
                            {
                            pushFollow(FOLLOW_forUpdate_in_forControl4370);
                            fu=forUpdate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forUpdate.add(fu.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: forUpdate, expression, forInit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 667:50: -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? )
                    {
                        // jkit/java/Java.g:667:53: ^( INIT ( forInit )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INIT, "INIT"), root_1);

                        // jkit/java/Java.g:667:60: ( forInit )?
                        if ( stream_forInit.hasNext() ) {
                            adaptor.addChild(root_1, stream_forInit.nextTree());

                        }
                        stream_forInit.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/Java.g:667:70: ^( TEST ( expression )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TEST, "TEST"), root_1);

                        // jkit/java/Java.g:667:77: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/Java.g:667:90: ^( STEP ( forUpdate )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STEP, "STEP"), root_1);

                        // jkit/java/Java.g:667:97: ( forUpdate )?
                        if ( stream_forUpdate.hasNext() ) {
                            adaptor.addChild(root_1, stream_forUpdate.nextTree());

                        }
                        stream_forUpdate.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, forControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forControl"

    public static class forInit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // jkit/java/Java.g:670:1: forInit : ( ( variableModifier )* type variableDeclarators -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) | expressionList );
    public final JavaParser.forInit_return forInit() throws RecognitionException {
        JavaParser.forInit_return retval = new JavaParser.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.variableModifier_return variableModifier366 = null;

        JavaParser.type_return type367 = null;

        JavaParser.variableDeclarators_return variableDeclarators368 = null;

        JavaParser.expressionList_return expressionList369 = null;


        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // jkit/java/Java.g:671:2: ( ( variableModifier )* type variableDeclarators -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) | expressionList )
            int alt119=2;
            alt119 = dfa119.predict(input);
            switch (alt119) {
                case 1 :
                    // jkit/java/Java.g:671:4: ( variableModifier )* type variableDeclarators
                    {
                    // jkit/java/Java.g:671:4: ( variableModifier )*
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( (LA118_0==141||LA118_0==163) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    // jkit/java/Java.g:0:0: variableModifier
                    	    {
                    	    pushFollow(FOLLOW_variableModifier_in_forInit4405);
                    	    variableModifier366=variableModifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier366.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop118;
                        }
                    } while (true);

                    pushFollow(FOLLOW_type_in_forInit4408);
                    type367=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type367.getTree());
                    pushFollow(FOLLOW_variableDeclarators_in_forInit4410);
                    variableDeclarators368=variableDeclarators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableDeclarators.add(variableDeclarators368.getTree());


                    // AST REWRITE
                    // elements: type, variableDeclarators, variableModifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 671:47: -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
                    {
                        // jkit/java/Java.g:671:50: ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARDEF, "VARDEF"), root_1);

                        // jkit/java/Java.g:671:59: ^( MODIFIERS ( variableModifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/Java.g:671:71: ( variableModifier )*
                        while ( stream_variableModifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_variableModifier.nextTree());

                        }
                        stream_variableModifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_variableDeclarators.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:672:4: expressionList
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expressionList_in_forInit4432);
                    expressionList369=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList369.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class forVarControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forVarControl"
    // jkit/java/Java.g:675:1: forVarControl : ( variableModifier )* type Identifier ':' expression -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier ) expression ;
    public final JavaParser.forVarControl_return forVarControl() throws RecognitionException {
        JavaParser.forVarControl_return retval = new JavaParser.forVarControl_return();
        retval.start = input.LT(1);
        int forVarControl_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier372=null;
        Token char_literal373=null;
        JavaParser.variableModifier_return variableModifier370 = null;

        JavaParser.type_return type371 = null;

        JavaParser.expression_return expression374 = null;


        Object Identifier372_tree=null;
        Object char_literal373_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // jkit/java/Java.g:676:2: ( ( variableModifier )* type Identifier ':' expression -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier ) expression )
            // jkit/java/Java.g:676:4: ( variableModifier )* type Identifier ':' expression
            {
            // jkit/java/Java.g:676:4: ( variableModifier )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==141||LA120_0==163) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_forVarControl4444);
            	    variableModifier370=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier370.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_forVarControl4447);
            type371=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type371.getTree());
            Identifier372=(Token)match(input,Identifier,FOLLOW_Identifier_in_forVarControl4449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier372);

            char_literal373=(Token)match(input,166,FOLLOW_166_in_forVarControl4451); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(char_literal373);

            pushFollow(FOLLOW_expression_in_forVarControl4453);
            expression374=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression374.getTree());


            // AST REWRITE
            // elements: Identifier, type, expression, variableModifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 676:53: -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier ) expression
            {
                // jkit/java/Java.g:676:56: ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARDEF, "VARDEF"), root_1);

                // jkit/java/Java.g:676:65: ^( MODIFIERS ( variableModifier )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                // jkit/java/Java.g:676:77: ( variableModifier )*
                while ( stream_variableModifier.hasNext() ) {
                    adaptor.addChild(root_2, stream_variableModifier.nextTree());

                }
                stream_variableModifier.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_Identifier.nextNode());

                adaptor.addChild(root_0, root_1);
                }
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, forVarControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forVarControl"

    public static class forUpdate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forUpdate"
    // jkit/java/Java.g:679:1: forUpdate : expressionList ;
    public final JavaParser.forUpdate_return forUpdate() throws RecognitionException {
        JavaParser.forUpdate_return retval = new JavaParser.forUpdate_return();
        retval.start = input.LT(1);
        int forUpdate_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.expressionList_return expressionList375 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // jkit/java/Java.g:680:2: ( expressionList )
            // jkit/java/Java.g:680:4: expressionList
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expressionList_in_forUpdate4483);
            expressionList375=expressionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList375.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, forUpdate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forUpdate"

    public static class parExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // jkit/java/Java.g:685:1: parExpression : '(' expression ')' ;
    public final JavaParser.parExpression_return parExpression() throws RecognitionException {
        JavaParser.parExpression_return retval = new JavaParser.parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal376=null;
        Token char_literal378=null;
        JavaParser.expression_return expression377 = null;


        Object char_literal376_tree=null;
        Object char_literal378_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // jkit/java/Java.g:686:2: ( '(' expression ')' )
            // jkit/java/Java.g:686:4: '(' expression ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal376=(Token)match(input,157,FOLLOW_157_in_parExpression4496); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_parExpression4499);
            expression377=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression377.getTree());
            char_literal378=(Token)match(input,158,FOLLOW_158_in_parExpression4501); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class expressionList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // jkit/java/Java.g:689:1: expressionList : expression ( ',' expression )* ;
    public final JavaParser.expressionList_return expressionList() throws RecognitionException {
        JavaParser.expressionList_return retval = new JavaParser.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal380=null;
        JavaParser.expression_return expression379 = null;

        JavaParser.expression_return expression381 = null;


        Object char_literal380_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // jkit/java/Java.g:690:5: ( expression ( ',' expression )* )
            // jkit/java/Java.g:690:9: expression ( ',' expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList4519);
            expression379=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression379.getTree());
            // jkit/java/Java.g:690:20: ( ',' expression )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==126) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // jkit/java/Java.g:690:21: ',' expression
            	    {
            	    char_literal380=(Token)match(input,126,FOLLOW_126_in_expressionList4522); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList4525);
            	    expression381=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression381.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class statementExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statementExpression"
    // jkit/java/Java.g:693:1: statementExpression : expression ;
    public final JavaParser.statementExpression_return statementExpression() throws RecognitionException {
        JavaParser.statementExpression_return retval = new JavaParser.statementExpression_return();
        retval.start = input.LT(1);
        int statementExpression_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.expression_return expression382 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // jkit/java/Java.g:694:2: ( expression )
            // jkit/java/Java.g:694:4: expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_statementExpression4541);
            expression382=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression382.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, statementExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statementExpression"

    public static class constantExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantExpression"
    // jkit/java/Java.g:697:1: constantExpression : expression ;
    public final JavaParser.constantExpression_return constantExpression() throws RecognitionException {
        JavaParser.constantExpression_return retval = new JavaParser.constantExpression_return();
        retval.start = input.LT(1);
        int constantExpression_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.expression_return expression383 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // jkit/java/Java.g:698:2: ( expression )
            // jkit/java/Java.g:698:4: expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_constantExpression4553);
            expression383=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression383.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, constantExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantExpression"

    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // jkit/java/Java.g:701:1: expression : conditionalExpression ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression ) ;
    public final JavaParser.expression_return expression() throws RecognitionException {
        JavaParser.expression_return retval = new JavaParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal385=null;
        Token char_literal387=null;
        Token char_literal389=null;
        Token char_literal391=null;
        Token char_literal393=null;
        Token string_literal395=null;
        Token string_literal397=null;
        Token string_literal399=null;
        Token char_literal401=null;
        Token char_literal403=null;
        Token char_literal404=null;
        Token char_literal406=null;
        Token char_literal407=null;
        Token char_literal409=null;
        Token char_literal410=null;
        Token char_literal411=null;
        Token char_literal412=null;
        Token i=null;
        List list_i=null;
        JavaParser.conditionalExpression_return conditionalExpression384 = null;

        JavaParser.expression_return expression386 = null;

        JavaParser.expression_return expression388 = null;

        JavaParser.expression_return expression390 = null;

        JavaParser.expression_return expression392 = null;

        JavaParser.expression_return expression394 = null;

        JavaParser.expression_return expression396 = null;

        JavaParser.expression_return expression398 = null;

        JavaParser.expression_return expression400 = null;

        JavaParser.expression_return expression402 = null;

        JavaParser.expression_return expression405 = null;

        JavaParser.expression_return expression408 = null;

        JavaParser.expression_return expression413 = null;


        Object char_literal385_tree=null;
        Object char_literal387_tree=null;
        Object char_literal389_tree=null;
        Object char_literal391_tree=null;
        Object char_literal393_tree=null;
        Object string_literal395_tree=null;
        Object string_literal397_tree=null;
        Object string_literal399_tree=null;
        Object char_literal401_tree=null;
        Object char_literal403_tree=null;
        Object char_literal404_tree=null;
        Object char_literal406_tree=null;
        Object char_literal407_tree=null;
        Object char_literal409_tree=null;
        Object char_literal410_tree=null;
        Object char_literal411_tree=null;
        Object char_literal412_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // jkit/java/Java.g:702:2: ( conditionalExpression ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression ) )
            // jkit/java/Java.g:702:4: conditionalExpression ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression )
            {
            pushFollow(FOLLOW_conditionalExpression_in_expression4565);
            conditionalExpression384=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalExpression.add(conditionalExpression384.getTree());
            // jkit/java/Java.g:703:3: ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression )
            int alt122=13;
            alt122 = dfa122.predict(input);
            switch (alt122) {
                case 1 :
                    // jkit/java/Java.g:704:4: '=' expression
                    {
                    char_literal385=(Token)match(input,136,FOLLOW_136_in_expression4575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal385);

                    pushFollow(FOLLOW_expression_in_expression4577);
                    expression386=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression386.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 704:19: -> ^( ASSIGN conditionalExpression expression )
                    {
                        // jkit/java/Java.g:704:22: ^( ASSIGN conditionalExpression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:705:6: i+= '+' '=' expression
                    {
                    i=(Token)match(input,181,FOLLOW_181_in_expression4596); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_181.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal387=(Token)match(input,136,FOLLOW_136_in_expression4598); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal387);

                    pushFollow(FOLLOW_expression_in_expression4600);
                    expression388=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression388.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression, i, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 705:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:705:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:705:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:706:6: i+= '-' '=' expression
                    {
                    i=(Token)match(input,182,FOLLOW_182_in_expression4628); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_182.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal389=(Token)match(input,136,FOLLOW_136_in_expression4630); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal389);

                    pushFollow(FOLLOW_expression_in_expression4632);
                    expression390=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression390.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression, conditionalExpression, i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 706:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:706:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:706:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:707:6: i+= '*' '=' expression
                    {
                    i=(Token)match(input,121,FOLLOW_121_in_expression4660); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal391=(Token)match(input,136,FOLLOW_136_in_expression4662); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal391);

                    pushFollow(FOLLOW_expression_in_expression4664);
                    expression392=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression392.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, conditionalExpression, i, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 707:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:707:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:707:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:708:6: i+= '/' '=' expression
                    {
                    i=(Token)match(input,183,FOLLOW_183_in_expression4692); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_183.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal393=(Token)match(input,136,FOLLOW_136_in_expression4694); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal393);

                    pushFollow(FOLLOW_expression_in_expression4696);
                    expression394=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression394.getTree());


                    // AST REWRITE
                    // elements: i, expression, conditionalExpression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 708:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:708:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:708:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:709:6: '&=' expression
                    {
                    string_literal395=(Token)match(input,184,FOLLOW_184_in_expression4725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(string_literal395);

                    pushFollow(FOLLOW_expression_in_expression4727);
                    expression396=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression396.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 709:22: -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) )
                    {
                        // jkit/java/Java.g:709:25: ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:709:56: ^( AND conditionalExpression expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(AND, "AND"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // jkit/java/Java.g:710:6: '|=' expression
                    {
                    string_literal397=(Token)match(input,185,FOLLOW_185_in_expression4750); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_185.add(string_literal397);

                    pushFollow(FOLLOW_expression_in_expression4752);
                    expression398=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression398.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 710:22: -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) )
                    {
                        // jkit/java/Java.g:710:25: ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:710:56: ^( OR conditionalExpression expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(OR, "OR"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // jkit/java/Java.g:711:6: '^=' expression
                    {
                    string_literal399=(Token)match(input,186,FOLLOW_186_in_expression4775); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_186.add(string_literal399);

                    pushFollow(FOLLOW_expression_in_expression4777);
                    expression400=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression400.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 711:22: -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) )
                    {
                        // jkit/java/Java.g:711:25: ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:711:56: ^( XOR conditionalExpression expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(XOR, "XOR"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // jkit/java/Java.g:712:6: i+= '%' '=' expression
                    {
                    i=(Token)match(input,187,FOLLOW_187_in_expression4805); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_187.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal401=(Token)match(input,136,FOLLOW_136_in_expression4807); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal401);

                    pushFollow(FOLLOW_expression_in_expression4809);
                    expression402=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression402.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression, conditionalExpression, i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 712:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:712:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:712:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // jkit/java/Java.g:713:6: i+= '<' '<' '=' expression
                    {
                    i=(Token)match(input,125,FOLLOW_125_in_expression4837); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_125.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal403=(Token)match(input,125,FOLLOW_125_in_expression4839); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_125.add(char_literal403);

                    char_literal404=(Token)match(input,136,FOLLOW_136_in_expression4841); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal404);

                    pushFollow(FOLLOW_expression_in_expression4843);
                    expression405=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression405.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression, conditionalExpression, i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 713:32: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:713:35: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:713:66: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // jkit/java/Java.g:714:6: i+= '>' '>' '=' expression
                    {
                    i=(Token)match(input,127,FOLLOW_127_in_expression4871); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal406=(Token)match(input,127,FOLLOW_127_in_expression4873); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(char_literal406);

                    char_literal407=(Token)match(input,136,FOLLOW_136_in_expression4875); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal407);

                    pushFollow(FOLLOW_expression_in_expression4877);
                    expression408=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression408.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression, conditionalExpression, i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 714:32: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:714:35: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:714:66: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // jkit/java/Java.g:715:6: '>' '>' '>' '=' expression
                    {
                    char_literal409=(Token)match(input,127,FOLLOW_127_in_expression4903); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(char_literal409);

                    char_literal410=(Token)match(input,127,FOLLOW_127_in_expression4905); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(char_literal410);

                    char_literal411=(Token)match(input,127,FOLLOW_127_in_expression4907); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(char_literal411);

                    char_literal412=(Token)match(input,136,FOLLOW_136_in_expression4909); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal412);

                    pushFollow(FOLLOW_expression_in_expression4911);
                    expression413=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression413.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 715:33: -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) )
                    {
                        // jkit/java/Java.g:715:36: ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:715:67: ^( USHR conditionalExpression expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(USHR, "USHR"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // jkit/java/Java.g:716:6: 
                    {

                    // AST REWRITE
                    // elements: conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 716:6: -> conditionalExpression
                    {
                        adaptor.addChild(root_0, stream_conditionalExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // jkit/java/Java.g:720:1: conditionalExpression : conditionalOrExpression ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression ) ;
    public final JavaParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        JavaParser.conditionalExpression_return retval = new JavaParser.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal415=null;
        Token char_literal417=null;
        JavaParser.conditionalOrExpression_return conditionalOrExpression414 = null;

        JavaParser.expression_return expression416 = null;

        JavaParser.expression_return expression418 = null;


        Object char_literal415_tree=null;
        Object char_literal417_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // jkit/java/Java.g:721:5: ( conditionalOrExpression ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression ) )
            // jkit/java/Java.g:721:9: conditionalOrExpression ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression )
            {
            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression4958);
            conditionalOrExpression414=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalOrExpression.add(conditionalOrExpression414.getTree());
            // jkit/java/Java.g:722:6: ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression )
            int alt123=2;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // jkit/java/Java.g:723:7: '?' expression ':' expression
                    {
                    char_literal415=(Token)match(input,155,FOLLOW_155_in_conditionalExpression4975); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_155.add(char_literal415);

                    pushFollow(FOLLOW_expression_in_conditionalExpression4977);
                    expression416=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression416.getTree());
                    char_literal417=(Token)match(input,166,FOLLOW_166_in_conditionalExpression4979); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_166.add(char_literal417);

                    pushFollow(FOLLOW_expression_in_conditionalExpression4981);
                    expression418=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression418.getTree());


                    // AST REWRITE
                    // elements: conditionalOrExpression, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 723:37: -> ^( CONDEXPR conditionalOrExpression expression expression )
                    {
                        // jkit/java/Java.g:723:40: ^( CONDEXPR conditionalOrExpression expression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CONDEXPR, "CONDEXPR"), root_1);

                        adaptor.addChild(root_1, stream_conditionalOrExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:724:9: 
                    {

                    // AST REWRITE
                    // elements: conditionalOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 724:9: -> conditionalOrExpression
                    {
                        adaptor.addChild(root_0, stream_conditionalOrExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // jkit/java/Java.g:728:1: conditionalOrExpression : conditionalAndExpression ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression ) ;
    public final JavaParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        JavaParser.conditionalOrExpression_return retval = new JavaParser.conditionalOrExpression_return();
        retval.start = input.LT(1);
        int conditionalOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal420=null;
        JavaParser.conditionalAndExpression_return conditionalAndExpression419 = null;

        JavaParser.conditionalOrExpression_return conditionalOrExpression421 = null;


        Object string_literal420_tree=null;
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleSubtreeStream stream_conditionalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalAndExpression");
        RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // jkit/java/Java.g:729:5: ( conditionalAndExpression ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression ) )
            // jkit/java/Java.g:729:9: conditionalAndExpression ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression )
            {
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5028);
            conditionalAndExpression419=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalAndExpression.add(conditionalAndExpression419.getTree());
            // jkit/java/Java.g:730:6: ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression )
            int alt124=2;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    // jkit/java/Java.g:731:7: ( '||' conditionalOrExpression )
                    {
                    // jkit/java/Java.g:731:7: ( '||' conditionalOrExpression )
                    // jkit/java/Java.g:731:8: '||' conditionalOrExpression
                    {
                    string_literal420=(Token)match(input,188,FOLLOW_188_in_conditionalOrExpression5046); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_188.add(string_literal420);

                    pushFollow(FOLLOW_conditionalOrExpression_in_conditionalOrExpression5048);
                    conditionalOrExpression421=conditionalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditionalOrExpression.add(conditionalOrExpression421.getTree());

                    }



                    // AST REWRITE
                    // elements: conditionalOrExpression, conditionalAndExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 731:38: -> ^( LOR conditionalAndExpression conditionalOrExpression )
                    {
                        // jkit/java/Java.g:731:41: ^( LOR conditionalAndExpression conditionalOrExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOR, "LOR"), root_1);

                        adaptor.addChild(root_1, stream_conditionalAndExpression.nextTree());
                        adaptor.addChild(root_1, stream_conditionalOrExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:732:9: 
                    {

                    // AST REWRITE
                    // elements: conditionalAndExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 732:9: -> conditionalAndExpression
                    {
                        adaptor.addChild(root_0, stream_conditionalAndExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, conditionalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // jkit/java/Java.g:736:1: conditionalAndExpression : inclusiveOrExpression ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression ) ;
    public final JavaParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        JavaParser.conditionalAndExpression_return retval = new JavaParser.conditionalAndExpression_return();
        retval.start = input.LT(1);
        int conditionalAndExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal423=null;
        JavaParser.inclusiveOrExpression_return inclusiveOrExpression422 = null;

        JavaParser.conditionalAndExpression_return conditionalAndExpression424 = null;


        Object string_literal423_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_conditionalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalAndExpression");
        RewriteRuleSubtreeStream stream_inclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule inclusiveOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // jkit/java/Java.g:737:5: ( inclusiveOrExpression ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression ) )
            // jkit/java/Java.g:737:9: inclusiveOrExpression ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression )
            {
            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5094);
            inclusiveOrExpression422=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inclusiveOrExpression.add(inclusiveOrExpression422.getTree());
            // jkit/java/Java.g:738:6: ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression )
            int alt125=2;
            alt125 = dfa125.predict(input);
            switch (alt125) {
                case 1 :
                    // jkit/java/Java.g:739:7: ( '&&' conditionalAndExpression )
                    {
                    // jkit/java/Java.g:739:7: ( '&&' conditionalAndExpression )
                    // jkit/java/Java.g:739:8: '&&' conditionalAndExpression
                    {
                    string_literal423=(Token)match(input,189,FOLLOW_189_in_conditionalAndExpression5112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_189.add(string_literal423);

                    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalAndExpression5114);
                    conditionalAndExpression424=conditionalAndExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditionalAndExpression.add(conditionalAndExpression424.getTree());

                    }



                    // AST REWRITE
                    // elements: inclusiveOrExpression, conditionalAndExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 739:39: -> ^( LAND inclusiveOrExpression conditionalAndExpression )
                    {
                        // jkit/java/Java.g:739:42: ^( LAND inclusiveOrExpression conditionalAndExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LAND, "LAND"), root_1);

                        adaptor.addChild(root_1, stream_inclusiveOrExpression.nextTree());
                        adaptor.addChild(root_1, stream_conditionalAndExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:740:9: 
                    {

                    // AST REWRITE
                    // elements: inclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 740:9: -> inclusiveOrExpression
                    {
                        adaptor.addChild(root_0, stream_inclusiveOrExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, conditionalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // jkit/java/Java.g:744:1: inclusiveOrExpression : exclusiveOrExpression ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression ) ;
    public final JavaParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        JavaParser.inclusiveOrExpression_return retval = new JavaParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal426=null;
        JavaParser.exclusiveOrExpression_return exclusiveOrExpression425 = null;

        JavaParser.inclusiveOrExpression_return inclusiveOrExpression427 = null;


        Object char_literal426_tree=null;
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_inclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule inclusiveOrExpression");
        RewriteRuleSubtreeStream stream_exclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule exclusiveOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // jkit/java/Java.g:745:5: ( exclusiveOrExpression ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression ) )
            // jkit/java/Java.g:745:9: exclusiveOrExpression ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression )
            {
            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5166);
            exclusiveOrExpression425=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exclusiveOrExpression.add(exclusiveOrExpression425.getTree());
            // jkit/java/Java.g:746:9: ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression )
            int alt126=2;
            alt126 = dfa126.predict(input);
            switch (alt126) {
                case 1 :
                    // jkit/java/Java.g:747:10: ( '|' inclusiveOrExpression )
                    {
                    // jkit/java/Java.g:747:10: ( '|' inclusiveOrExpression )
                    // jkit/java/Java.g:747:11: '|' inclusiveOrExpression
                    {
                    char_literal426=(Token)match(input,190,FOLLOW_190_in_inclusiveOrExpression5188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(char_literal426);

                    pushFollow(FOLLOW_inclusiveOrExpression_in_inclusiveOrExpression5190);
                    inclusiveOrExpression427=inclusiveOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inclusiveOrExpression.add(inclusiveOrExpression427.getTree());

                    }



                    // AST REWRITE
                    // elements: inclusiveOrExpression, exclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 747:38: -> ^( OR exclusiveOrExpression inclusiveOrExpression )
                    {
                        // jkit/java/Java.g:747:41: ^( OR exclusiveOrExpression inclusiveOrExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OR, "OR"), root_1);

                        adaptor.addChild(root_1, stream_exclusiveOrExpression.nextTree());
                        adaptor.addChild(root_1, stream_inclusiveOrExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:748:6: 
                    {

                    // AST REWRITE
                    // elements: exclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 748:6: -> exclusiveOrExpression
                    {
                        adaptor.addChild(root_0, stream_exclusiveOrExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // jkit/java/Java.g:752:1: exclusiveOrExpression : andExpression ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression ) ;
    public final JavaParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        JavaParser.exclusiveOrExpression_return retval = new JavaParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal429=null;
        JavaParser.andExpression_return andExpression428 = null;

        JavaParser.exclusiveOrExpression_return exclusiveOrExpression430 = null;


        Object char_literal429_tree=null;
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        RewriteRuleSubtreeStream stream_exclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule exclusiveOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // jkit/java/Java.g:753:5: ( andExpression ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression ) )
            // jkit/java/Java.g:753:9: andExpression ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression )
            {
            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression5237);
            andExpression428=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression428.getTree());
            // jkit/java/Java.g:754:5: ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression )
            int alt127=2;
            alt127 = dfa127.predict(input);
            switch (alt127) {
                case 1 :
                    // jkit/java/Java.g:755:6: ( '^' exclusiveOrExpression )
                    {
                    // jkit/java/Java.g:755:6: ( '^' exclusiveOrExpression )
                    // jkit/java/Java.g:755:7: '^' exclusiveOrExpression
                    {
                    char_literal429=(Token)match(input,191,FOLLOW_191_in_exclusiveOrExpression5253); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_191.add(char_literal429);

                    pushFollow(FOLLOW_exclusiveOrExpression_in_exclusiveOrExpression5255);
                    exclusiveOrExpression430=exclusiveOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exclusiveOrExpression.add(exclusiveOrExpression430.getTree());

                    }



                    // AST REWRITE
                    // elements: andExpression, exclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 755:34: -> ^( XOR andExpression exclusiveOrExpression )
                    {
                        // jkit/java/Java.g:755:37: ^( XOR andExpression exclusiveOrExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XOR, "XOR"), root_1);

                        adaptor.addChild(root_1, stream_andExpression.nextTree());
                        adaptor.addChild(root_1, stream_exclusiveOrExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:756:8: 
                    {

                    // AST REWRITE
                    // elements: andExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 756:8: -> andExpression
                    {
                        adaptor.addChild(root_0, stream_andExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // jkit/java/Java.g:760:1: andExpression : equalityExpression ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression ) ;
    public final JavaParser.andExpression_return andExpression() throws RecognitionException {
        JavaParser.andExpression_return retval = new JavaParser.andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal432=null;
        JavaParser.equalityExpression_return equalityExpression431 = null;

        JavaParser.andExpression_return andExpression433 = null;


        Object char_literal432_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_equalityExpression=new RewriteRuleSubtreeStream(adaptor,"rule equalityExpression");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // jkit/java/Java.g:761:5: ( equalityExpression ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression ) )
            // jkit/java/Java.g:761:9: equalityExpression ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression )
            {
            pushFollow(FOLLOW_equalityExpression_in_andExpression5299);
            equalityExpression431=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_equalityExpression.add(equalityExpression431.getTree());
            // jkit/java/Java.g:762:5: ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression )
            int alt128=2;
            alt128 = dfa128.predict(input);
            switch (alt128) {
                case 1 :
                    // jkit/java/Java.g:763:6: ( '&' andExpression )
                    {
                    // jkit/java/Java.g:763:6: ( '&' andExpression )
                    // jkit/java/Java.g:763:7: '&' andExpression
                    {
                    char_literal432=(Token)match(input,128,FOLLOW_128_in_andExpression5315); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal432);

                    pushFollow(FOLLOW_andExpression_in_andExpression5317);
                    andExpression433=andExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_andExpression.add(andExpression433.getTree());

                    }



                    // AST REWRITE
                    // elements: equalityExpression, andExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 763:26: -> ^( AND equalityExpression andExpression )
                    {
                        // jkit/java/Java.g:763:29: ^( AND equalityExpression andExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AND, "AND"), root_1);

                        adaptor.addChild(root_1, stream_equalityExpression.nextTree());
                        adaptor.addChild(root_1, stream_andExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:764:8: 
                    {

                    // AST REWRITE
                    // elements: equalityExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 764:8: -> equalityExpression
                    {
                        adaptor.addChild(root_0, stream_equalityExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // jkit/java/Java.g:768:1: equalityExpression : instanceOfExpression ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression ) ;
    public final JavaParser.equalityExpression_return equalityExpression() throws RecognitionException {
        JavaParser.equalityExpression_return retval = new JavaParser.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal435=null;
        Token string_literal437=null;
        JavaParser.instanceOfExpression_return instanceOfExpression434 = null;

        JavaParser.instanceOfExpression_return instanceOfExpression436 = null;

        JavaParser.instanceOfExpression_return instanceOfExpression438 = null;


        Object string_literal435_tree=null;
        Object string_literal437_tree=null;
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_instanceOfExpression=new RewriteRuleSubtreeStream(adaptor,"rule instanceOfExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // jkit/java/Java.g:769:5: ( instanceOfExpression ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression ) )
            // jkit/java/Java.g:769:9: instanceOfExpression ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression )
            {
            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5361);
            instanceOfExpression434=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_instanceOfExpression.add(instanceOfExpression434.getTree());
            // jkit/java/Java.g:770:5: ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression )
            int alt129=3;
            alt129 = dfa129.predict(input);
            switch (alt129) {
                case 1 :
                    // jkit/java/Java.g:771:6: ( '==' instanceOfExpression )
                    {
                    // jkit/java/Java.g:771:6: ( '==' instanceOfExpression )
                    // jkit/java/Java.g:771:7: '==' instanceOfExpression
                    {
                    string_literal435=(Token)match(input,192,FOLLOW_192_in_equalityExpression5377); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_192.add(string_literal435);

                    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5379);
                    instanceOfExpression436=instanceOfExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_instanceOfExpression.add(instanceOfExpression436.getTree());

                    }



                    // AST REWRITE
                    // elements: instanceOfExpression, instanceOfExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 771:34: -> ^( EQ instanceOfExpression instanceOfExpression )
                    {
                        // jkit/java/Java.g:771:37: ^( EQ instanceOfExpression instanceOfExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EQ, "EQ"), root_1);

                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());
                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:772:8: ( '!=' instanceOfExpression )
                    {
                    // jkit/java/Java.g:772:8: ( '!=' instanceOfExpression )
                    // jkit/java/Java.g:772:9: '!=' instanceOfExpression
                    {
                    string_literal437=(Token)match(input,193,FOLLOW_193_in_equalityExpression5400); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(string_literal437);

                    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5402);
                    instanceOfExpression438=instanceOfExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_instanceOfExpression.add(instanceOfExpression438.getTree());

                    }



                    // AST REWRITE
                    // elements: instanceOfExpression, instanceOfExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 772:36: -> ^( NEQ instanceOfExpression instanceOfExpression )
                    {
                        // jkit/java/Java.g:772:39: ^( NEQ instanceOfExpression instanceOfExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEQ, "NEQ"), root_1);

                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());
                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:773:8: 
                    {

                    // AST REWRITE
                    // elements: instanceOfExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 773:8: -> instanceOfExpression
                    {
                        adaptor.addChild(root_0, stream_instanceOfExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // jkit/java/Java.g:777:1: instanceOfExpression : relationalExpression ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression ) ;
    public final JavaParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        JavaParser.instanceOfExpression_return retval = new JavaParser.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal440=null;
        JavaParser.relationalExpression_return relationalExpression439 = null;

        JavaParser.type_return type441 = null;


        Object string_literal440_tree=null;
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_relationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule relationalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // jkit/java/Java.g:778:5: ( relationalExpression ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression ) )
            // jkit/java/Java.g:778:9: relationalExpression ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression )
            {
            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression5446);
            relationalExpression439=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_relationalExpression.add(relationalExpression439.getTree());
            // jkit/java/Java.g:779:5: ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression )
            int alt130=2;
            alt130 = dfa130.predict(input);
            switch (alt130) {
                case 1 :
                    // jkit/java/Java.g:780:6: ( 'instanceof' type )
                    {
                    // jkit/java/Java.g:780:6: ( 'instanceof' type )
                    // jkit/java/Java.g:780:7: 'instanceof' type
                    {
                    string_literal440=(Token)match(input,194,FOLLOW_194_in_instanceOfExpression5461); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_194.add(string_literal440);

                    pushFollow(FOLLOW_type_in_instanceOfExpression5463);
                    type441=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type441.getTree());

                    }



                    // AST REWRITE
                    // elements: type, relationalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 780:26: -> ^( INSTANCEOF relationalExpression type )
                    {
                        // jkit/java/Java.g:780:29: ^( INSTANCEOF relationalExpression type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INSTANCEOF, "INSTANCEOF"), root_1);

                        adaptor.addChild(root_1, stream_relationalExpression.nextTree());
                        adaptor.addChild(root_1, stream_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:781:8: 
                    {

                    // AST REWRITE
                    // elements: relationalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 781:8: -> relationalExpression
                    {
                        adaptor.addChild(root_0, stream_relationalExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // jkit/java/Java.g:785:1: relationalExpression : shiftExpression ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression ) ;
    public final JavaParser.relationalExpression_return relationalExpression() throws RecognitionException {
        JavaParser.relationalExpression_return retval = new JavaParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal443=null;
        Token char_literal444=null;
        Token char_literal446=null;
        Token char_literal448=null;
        Token char_literal449=null;
        Token char_literal451=null;
        JavaParser.shiftExpression_return shiftExpression442 = null;

        JavaParser.shiftExpression_return shiftExpression445 = null;

        JavaParser.shiftExpression_return shiftExpression447 = null;

        JavaParser.shiftExpression_return shiftExpression450 = null;

        JavaParser.shiftExpression_return shiftExpression452 = null;


        Object char_literal443_tree=null;
        Object char_literal444_tree=null;
        Object char_literal446_tree=null;
        Object char_literal448_tree=null;
        Object char_literal449_tree=null;
        Object char_literal451_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_shiftExpression=new RewriteRuleSubtreeStream(adaptor,"rule shiftExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // jkit/java/Java.g:786:5: ( shiftExpression ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression ) )
            // jkit/java/Java.g:786:9: shiftExpression ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression )
            {
            pushFollow(FOLLOW_shiftExpression_in_relationalExpression5507);
            shiftExpression442=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression442.getTree());
            // jkit/java/Java.g:787:5: ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression )
            int alt131=5;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // jkit/java/Java.g:788:6: ( '<' '=' shiftExpression )
                    {
                    // jkit/java/Java.g:788:6: ( '<' '=' shiftExpression )
                    // jkit/java/Java.g:788:7: '<' '=' shiftExpression
                    {
                    char_literal443=(Token)match(input,125,FOLLOW_125_in_relationalExpression5523); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_125.add(char_literal443);

                    char_literal444=(Token)match(input,136,FOLLOW_136_in_relationalExpression5525); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal444);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5527);
                    shiftExpression445=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression445.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 788:32: -> ^( LTEQ shiftExpression shiftExpression )
                    {
                        // jkit/java/Java.g:788:35: ^( LTEQ shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LTEQ, "LTEQ"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:789:8: ( '<' shiftExpression )
                    {
                    // jkit/java/Java.g:789:8: ( '<' shiftExpression )
                    // jkit/java/Java.g:789:9: '<' shiftExpression
                    {
                    char_literal446=(Token)match(input,125,FOLLOW_125_in_relationalExpression5548); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_125.add(char_literal446);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5550);
                    shiftExpression447=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression447.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 789:30: -> ^( LT shiftExpression shiftExpression )
                    {
                        // jkit/java/Java.g:789:33: ^( LT shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LT, "LT"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:790:8: ( '>' '=' shiftExpression )
                    {
                    // jkit/java/Java.g:790:8: ( '>' '=' shiftExpression )
                    // jkit/java/Java.g:790:9: '>' '=' shiftExpression
                    {
                    char_literal448=(Token)match(input,127,FOLLOW_127_in_relationalExpression5571); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(char_literal448);

                    char_literal449=(Token)match(input,136,FOLLOW_136_in_relationalExpression5573); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal449);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5575);
                    shiftExpression450=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression450.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 790:34: -> ^( GTEQ shiftExpression shiftExpression )
                    {
                        // jkit/java/Java.g:790:37: ^( GTEQ shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GTEQ, "GTEQ"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:791:8: ( '>' shiftExpression )
                    {
                    // jkit/java/Java.g:791:8: ( '>' shiftExpression )
                    // jkit/java/Java.g:791:9: '>' shiftExpression
                    {
                    char_literal451=(Token)match(input,127,FOLLOW_127_in_relationalExpression5596); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(char_literal451);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5598);
                    shiftExpression452=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression452.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 791:30: -> ^( GT shiftExpression shiftExpression )
                    {
                        // jkit/java/Java.g:791:33: ^( GT shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GT, "GT"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:792:8: 
                    {

                    // AST REWRITE
                    // elements: shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 792:8: -> shiftExpression
                    {
                        adaptor.addChild(root_0, stream_shiftExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // jkit/java/Java.g:796:1: shiftExpression : additiveExpression ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression ) ;
    public final JavaParser.shiftExpression_return shiftExpression() throws RecognitionException {
        JavaParser.shiftExpression_return retval = new JavaParser.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal454=null;
        Token char_literal455=null;
        Token char_literal457=null;
        Token char_literal458=null;
        Token char_literal459=null;
        Token i=null;
        List list_i=null;
        JavaParser.additiveExpression_return additiveExpression453 = null;

        JavaParser.additiveExpression_return additiveExpression456 = null;

        JavaParser.additiveExpression_return additiveExpression460 = null;


        Object char_literal454_tree=null;
        Object char_literal455_tree=null;
        Object char_literal457_tree=null;
        Object char_literal458_tree=null;
        Object char_literal459_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // jkit/java/Java.g:797:5: ( additiveExpression ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression ) )
            // jkit/java/Java.g:797:9: additiveExpression ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression )
            {
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression5643);
            additiveExpression453=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression453.getTree());
            // jkit/java/Java.g:798:5: ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression )
            int alt135=3;
            alt135 = dfa135.predict(input);
            switch (alt135) {
                case 1 :
                    // jkit/java/Java.g:799:6: ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+
                    {
                    // jkit/java/Java.g:799:6: ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+
                    int cnt133=0;
                    loop133:
                    do {
                        int alt133=2;
                        alt133 = dfa133.predict(input);
                        switch (alt133) {
                    	case 1 :
                    	    // jkit/java/Java.g:799:7: (i+= '<' '<' | i+= '>' '>' ) additiveExpression
                    	    {
                    	    // jkit/java/Java.g:799:7: (i+= '<' '<' | i+= '>' '>' )
                    	    int alt132=2;
                    	    int LA132_0 = input.LA(1);

                    	    if ( (LA132_0==125) ) {
                    	        alt132=1;
                    	    }
                    	    else if ( (LA132_0==127) ) {
                    	        alt132=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 132, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt132) {
                    	        case 1 :
                    	            // jkit/java/Java.g:799:8: i+= '<' '<'
                    	            {
                    	            i=(Token)match(input,125,FOLLOW_125_in_shiftExpression5662); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_125.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);

                    	            char_literal454=(Token)match(input,125,FOLLOW_125_in_shiftExpression5664); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_125.add(char_literal454);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // jkit/java/Java.g:799:19: i+= '>' '>'
                    	            {
                    	            i=(Token)match(input,127,FOLLOW_127_in_shiftExpression5668); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_127.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);

                    	            char_literal455=(Token)match(input,127,FOLLOW_127_in_shiftExpression5670); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_127.add(char_literal455);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression5673);
                    	    additiveExpression456=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression456.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt133 >= 1 ) break loop133;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(133, input);
                                throw eee;
                        }
                        cnt133++;
                    } while (true);



                    // AST REWRITE
                    // elements: additiveExpression, i, additiveExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 799:52: -> ^( LABINOP additiveExpression ( $i additiveExpression )+ )
                    {
                        // jkit/java/Java.g:799:55: ^( LABINOP additiveExpression ( $i additiveExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_1);

                        adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                        if ( !(stream_i.hasNext()||stream_additiveExpression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext()||stream_additiveExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                            adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                        }
                        stream_i.reset();
                        stream_additiveExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:801:8: ( '>' '>' '>' additiveExpression )+
                    {
                    // jkit/java/Java.g:801:8: ( '>' '>' '>' additiveExpression )+
                    int cnt134=0;
                    loop134:
                    do {
                        int alt134=2;
                        alt134 = dfa134.predict(input);
                        switch (alt134) {
                    	case 1 :
                    	    // jkit/java/Java.g:801:9: '>' '>' '>' additiveExpression
                    	    {
                    	    char_literal457=(Token)match(input,127,FOLLOW_127_in_shiftExpression5707); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_127.add(char_literal457);

                    	    char_literal458=(Token)match(input,127,FOLLOW_127_in_shiftExpression5709); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_127.add(char_literal458);

                    	    char_literal459=(Token)match(input,127,FOLLOW_127_in_shiftExpression5711); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_127.add(char_literal459);

                    	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression5713);
                    	    additiveExpression460=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression460.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt134 >= 1 ) break loop134;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(134, input);
                                throw eee;
                        }
                        cnt134++;
                    } while (true);



                    // AST REWRITE
                    // elements: additiveExpression, additiveExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 801:42: -> ^( USHR additiveExpression ( additiveExpression )+ )
                    {
                        // jkit/java/Java.g:801:45: ^( USHR additiveExpression ( additiveExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(USHR, "USHR"), root_1);

                        adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                        if ( !(stream_additiveExpression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_additiveExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                        }
                        stream_additiveExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:802:8: 
                    {

                    // AST REWRITE
                    // elements: additiveExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 802:8: -> additiveExpression
                    {
                        adaptor.addChild(root_0, stream_additiveExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // jkit/java/Java.g:806:1: additiveExpression : multiplicativeExpression ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression ) ;
    public final JavaParser.additiveExpression_return additiveExpression() throws RecognitionException {
        JavaParser.additiveExpression_return retval = new JavaParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        Object root_0 = null;

        Token i=null;
        List list_i=null;
        JavaParser.multiplicativeExpression_return multiplicativeExpression461 = null;

        JavaParser.multiplicativeExpression_return multiplicativeExpression462 = null;


        Object i_tree=null;
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleSubtreeStream stream_multiplicativeExpression=new RewriteRuleSubtreeStream(adaptor,"rule multiplicativeExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // jkit/java/Java.g:807:5: ( multiplicativeExpression ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression ) )
            // jkit/java/Java.g:807:9: multiplicativeExpression ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression )
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5756);
            multiplicativeExpression461=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(multiplicativeExpression461.getTree());
            // jkit/java/Java.g:808:5: ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression )
            int alt138=2;
            alt138 = dfa138.predict(input);
            switch (alt138) {
                case 1 :
                    // jkit/java/Java.g:809:6: ( (i+= '+' | i+= '-' ) multiplicativeExpression )+
                    {
                    // jkit/java/Java.g:809:6: ( (i+= '+' | i+= '-' ) multiplicativeExpression )+
                    int cnt137=0;
                    loop137:
                    do {
                        int alt137=2;
                        alt137 = dfa137.predict(input);
                        switch (alt137) {
                    	case 1 :
                    	    // jkit/java/Java.g:809:7: (i+= '+' | i+= '-' ) multiplicativeExpression
                    	    {
                    	    // jkit/java/Java.g:809:7: (i+= '+' | i+= '-' )
                    	    int alt136=2;
                    	    int LA136_0 = input.LA(1);

                    	    if ( (LA136_0==181) ) {
                    	        alt136=1;
                    	    }
                    	    else if ( (LA136_0==182) ) {
                    	        alt136=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 136, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt136) {
                    	        case 1 :
                    	            // jkit/java/Java.g:809:8: i+= '+'
                    	            {
                    	            i=(Token)match(input,181,FOLLOW_181_in_additiveExpression5775); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_181.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // jkit/java/Java.g:809:15: i+= '-'
                    	            {
                    	            i=(Token)match(input,182,FOLLOW_182_in_additiveExpression5779); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_182.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5782);
                    	    multiplicativeExpression462=multiplicativeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_multiplicativeExpression.add(multiplicativeExpression462.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt137 >= 1 ) break loop137;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(137, input);
                                throw eee;
                        }
                        cnt137++;
                    } while (true);



                    // AST REWRITE
                    // elements: i, multiplicativeExpression, multiplicativeExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 809:50: -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ )
                    {
                        // jkit/java/Java.g:809:53: ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_1);

                        adaptor.addChild(root_1, stream_multiplicativeExpression.nextTree());
                        if ( !(stream_i.hasNext()||stream_multiplicativeExpression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext()||stream_multiplicativeExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                            adaptor.addChild(root_1, stream_multiplicativeExpression.nextTree());

                        }
                        stream_i.reset();
                        stream_multiplicativeExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:810:8: 
                    {

                    // AST REWRITE
                    // elements: multiplicativeExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 810:8: -> multiplicativeExpression
                    {
                        adaptor.addChild(root_0, stream_multiplicativeExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // jkit/java/Java.g:814:1: multiplicativeExpression : unaryExpression ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression ) ;
    public final JavaParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        JavaParser.multiplicativeExpression_return retval = new JavaParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        Object root_0 = null;

        Token i=null;
        List list_i=null;
        JavaParser.unaryExpression_return unaryExpression463 = null;

        JavaParser.unaryExpression_return unaryExpression464 = null;


        Object i_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // jkit/java/Java.g:815:5: ( unaryExpression ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression ) )
            // jkit/java/Java.g:815:9: unaryExpression ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression )
            {
            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5833);
            unaryExpression463=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression463.getTree());
            // jkit/java/Java.g:816:5: ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression )
            int alt141=2;
            alt141 = dfa141.predict(input);
            switch (alt141) {
                case 1 :
                    // jkit/java/Java.g:817:6: ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+
                    {
                    // jkit/java/Java.g:817:6: ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+
                    int cnt140=0;
                    loop140:
                    do {
                        int alt140=2;
                        alt140 = dfa140.predict(input);
                        switch (alt140) {
                    	case 1 :
                    	    // jkit/java/Java.g:817:8: (i+= '*' | i+= '/' | i+= '%' ) unaryExpression
                    	    {
                    	    // jkit/java/Java.g:817:8: (i+= '*' | i+= '/' | i+= '%' )
                    	    int alt139=3;
                    	    switch ( input.LA(1) ) {
                    	    case 121:
                    	        {
                    	        alt139=1;
                    	        }
                    	        break;
                    	    case 183:
                    	        {
                    	        alt139=2;
                    	        }
                    	        break;
                    	    case 187:
                    	        {
                    	        alt139=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 139, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt139) {
                    	        case 1 :
                    	            // jkit/java/Java.g:817:9: i+= '*'
                    	            {
                    	            i=(Token)match(input,121,FOLLOW_121_in_multiplicativeExpression5853); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_121.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // jkit/java/Java.g:817:16: i+= '/'
                    	            {
                    	            i=(Token)match(input,183,FOLLOW_183_in_multiplicativeExpression5857); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_183.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // jkit/java/Java.g:817:23: i+= '%'
                    	            {
                    	            i=(Token)match(input,187,FOLLOW_187_in_multiplicativeExpression5861); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_187.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5864);
                    	    unaryExpression464=unaryExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression464.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt140 >= 1 ) break loop140;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(140, input);
                                throw eee;
                        }
                        cnt140++;
                    } while (true);



                    // AST REWRITE
                    // elements: unaryExpression, i, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 817:49: -> ^( LABINOP unaryExpression ( $i unaryExpression )+ )
                    {
                        // jkit/java/Java.g:817:52: ^( LABINOP unaryExpression ( $i unaryExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());
                        if ( !(stream_unaryExpression.hasNext()||stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_unaryExpression.hasNext()||stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                            adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        }
                        stream_unaryExpression.reset();
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:818:8: 
                    {

                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 818:8: -> unaryExpression
                    {
                        adaptor.addChild(root_0, stream_unaryExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // jkit/java/Java.g:822:1: unaryExpression : ( '+' unaryExpression -> unaryExpression | '-' unaryExpression -> ^( NEG unaryExpression ) | '++' unaryExpression -> ^( PREINC unaryExpression ) | '--' unaryExpression -> ^( PREDEC unaryExpression ) | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus );
    public final JavaParser.unaryExpression_return unaryExpression() throws RecognitionException {
        JavaParser.unaryExpression_return retval = new JavaParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal465=null;
        Token char_literal467=null;
        Token string_literal469=null;
        Token string_literal471=null;
        JavaParser.unaryExpression_return unaryExpression466 = null;

        JavaParser.unaryExpression_return unaryExpression468 = null;

        JavaParser.unaryExpression_return unaryExpression470 = null;

        JavaParser.unaryExpression_return unaryExpression472 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus473 = null;


        Object char_literal465_tree=null;
        Object char_literal467_tree=null;
        Object string_literal469_tree=null;
        Object string_literal471_tree=null;
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_unaryExpressionNotPlusMinus=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionNotPlusMinus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // jkit/java/Java.g:823:5: ( '+' unaryExpression -> unaryExpression | '-' unaryExpression -> ^( NEG unaryExpression ) | '++' unaryExpression -> ^( PREINC unaryExpression ) | '--' unaryExpression -> ^( PREDEC unaryExpression ) | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus )
            int alt142=5;
            alt142 = dfa142.predict(input);
            switch (alt142) {
                case 1 :
                    // jkit/java/Java.g:823:9: '+' unaryExpression
                    {
                    char_literal465=(Token)match(input,181,FOLLOW_181_in_unaryExpression5916); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_181.add(char_literal465);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5918);
                    unaryExpression466=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression466.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 823:29: -> unaryExpression
                    {
                        adaptor.addChild(root_0, stream_unaryExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:824:7: '-' unaryExpression
                    {
                    char_literal467=(Token)match(input,182,FOLLOW_182_in_unaryExpression5930); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_182.add(char_literal467);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5932);
                    unaryExpression468=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression468.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 824:27: -> ^( NEG unaryExpression )
                    {
                        // jkit/java/Java.g:824:30: ^( NEG unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEG, "NEG"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:825:9: '++' unaryExpression
                    {
                    string_literal469=(Token)match(input,195,FOLLOW_195_in_unaryExpression5950); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_195.add(string_literal469);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5952);
                    unaryExpression470=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression470.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 825:30: -> ^( PREINC unaryExpression )
                    {
                        // jkit/java/Java.g:825:33: ^( PREINC unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PREINC, "PREINC"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:826:9: '--' unaryExpression
                    {
                    string_literal471=(Token)match(input,196,FOLLOW_196_in_unaryExpression5970); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_196.add(string_literal471);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5972);
                    unaryExpression472=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression472.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 826:30: -> ^( PREDEC unaryExpression )
                    {
                        // jkit/java/Java.g:826:33: ^( PREDEC unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PREDEC, "PREDEC"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:827:9: unaryExpressionNotPlusMinus
                    {
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression5990);
                    unaryExpressionNotPlusMinus473=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus473.getTree());


                    // AST REWRITE
                    // elements: unaryExpressionNotPlusMinus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 827:37: -> unaryExpressionNotPlusMinus
                    {
                        adaptor.addChild(root_0, stream_unaryExpressionNotPlusMinus.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // jkit/java/Java.g:830:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression -> ^( INV unaryExpression ) | '!' unaryExpression -> ^( NOT unaryExpression ) | castExpression | primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary ) );
    public final JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        JavaParser.unaryExpressionNotPlusMinus_return retval = new JavaParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal474=null;
        Token char_literal476=null;
        Token string_literal481=null;
        Token string_literal482=null;
        Token string_literal483=null;
        Token string_literal484=null;
        JavaParser.unaryExpression_return unaryExpression475 = null;

        JavaParser.unaryExpression_return unaryExpression477 = null;

        JavaParser.castExpression_return castExpression478 = null;

        JavaParser.primary_return primary479 = null;

        JavaParser.selector_return selector480 = null;


        Object char_literal474_tree=null;
        Object char_literal476_tree=null;
        Object string_literal481_tree=null;
        Object string_literal482_tree=null;
        Object string_literal483_tree=null;
        Object string_literal484_tree=null;
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_198=new RewriteRuleTokenStream(adaptor,"token 198");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_primary=new RewriteRuleSubtreeStream(adaptor,"rule primary");
        RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // jkit/java/Java.g:831:5: ( '~' unaryExpression -> ^( INV unaryExpression ) | '!' unaryExpression -> ^( NOT unaryExpression ) | castExpression | primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary ) )
            int alt146=4;
            alt146 = dfa146.predict(input);
            switch (alt146) {
                case 1 :
                    // jkit/java/Java.g:831:9: '~' unaryExpression
                    {
                    char_literal474=(Token)match(input,197,FOLLOW_197_in_unaryExpressionNotPlusMinus6021); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_197.add(char_literal474);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6023);
                    unaryExpression475=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression475.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 831:29: -> ^( INV unaryExpression )
                    {
                        // jkit/java/Java.g:831:32: ^( INV unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INV, "INV"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:832:8: '!' unaryExpression
                    {
                    char_literal476=(Token)match(input,198,FOLLOW_198_in_unaryExpressionNotPlusMinus6040); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_198.add(char_literal476);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6042);
                    unaryExpression477=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression477.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 832:28: -> ^( NOT unaryExpression )
                    {
                        // jkit/java/Java.g:832:31: ^( NOT unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NOT, "NOT"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:833:9: castExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus6060);
                    castExpression478=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, castExpression478.getTree());

                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:834:6: primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary )
                    {
                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus6067);
                    primary479=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primary.add(primary479.getTree());
                    // jkit/java/Java.g:835:3: ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary )
                    int alt145=4;
                    alt145 = dfa145.predict(input);
                    switch (alt145) {
                        case 1 :
                            // jkit/java/Java.g:836:4: ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) )
                            {
                            // jkit/java/Java.g:836:4: ( selector )+
                            int cnt143=0;
                            loop143:
                            do {
                                int alt143=2;
                                alt143 = dfa143.predict(input);
                                switch (alt143) {
                            	case 1 :
                            	    // jkit/java/Java.g:0:0: selector
                            	    {
                            	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus6077);
                            	    selector480=selector();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_selector.add(selector480.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt143 >= 1 ) break loop143;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(143, input);
                                        throw eee;
                                }
                                cnt143++;
                            } while (true);

                            // jkit/java/Java.g:837:4: ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) )
                            int alt144=3;
                            alt144 = dfa144.predict(input);
                            switch (alt144) {
                                case 1 :
                                    // jkit/java/Java.g:838:5: '++'
                                    {
                                    string_literal481=(Token)match(input,195,FOLLOW_195_in_unaryExpressionNotPlusMinus6090); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_195.add(string_literal481);



                                    // AST REWRITE
                                    // elements: selector, primary
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (Object)adaptor.nil();
                                    // 838:10: -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) )
                                    {
                                        // jkit/java/Java.g:838:13: ^( POSTINC ^( SELECTOR primary ( selector )+ ) )
                                        {
                                        Object root_1 = (Object)adaptor.nil();
                                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTINC, "POSTINC"), root_1);

                                        // jkit/java/Java.g:838:23: ^( SELECTOR primary ( selector )+ )
                                        {
                                        Object root_2 = (Object)adaptor.nil();
                                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTOR, "SELECTOR"), root_2);

                                        adaptor.addChild(root_2, stream_primary.nextTree());
                                        if ( !(stream_selector.hasNext()) ) {
                                            throw new RewriteEarlyExitException();
                                        }
                                        while ( stream_selector.hasNext() ) {
                                            adaptor.addChild(root_2, stream_selector.nextTree());

                                        }
                                        stream_selector.reset();

                                        adaptor.addChild(root_1, root_2);
                                        }

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // jkit/java/Java.g:839:6: '--'
                                    {
                                    string_literal482=(Token)match(input,196,FOLLOW_196_in_unaryExpressionNotPlusMinus6112); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_196.add(string_literal482);



                                    // AST REWRITE
                                    // elements: selector, primary
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (Object)adaptor.nil();
                                    // 839:11: -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) )
                                    {
                                        // jkit/java/Java.g:839:14: ^( POSTDEC ^( SELECTOR primary ( selector )+ ) )
                                        {
                                        Object root_1 = (Object)adaptor.nil();
                                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTDEC, "POSTDEC"), root_1);

                                        // jkit/java/Java.g:839:24: ^( SELECTOR primary ( selector )+ )
                                        {
                                        Object root_2 = (Object)adaptor.nil();
                                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTOR, "SELECTOR"), root_2);

                                        adaptor.addChild(root_2, stream_primary.nextTree());
                                        if ( !(stream_selector.hasNext()) ) {
                                            throw new RewriteEarlyExitException();
                                        }
                                        while ( stream_selector.hasNext() ) {
                                            adaptor.addChild(root_2, stream_selector.nextTree());

                                        }
                                        stream_selector.reset();

                                        adaptor.addChild(root_1, root_2);
                                        }

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 3 :
                                    // jkit/java/Java.g:840:7: 
                                    {

                                    // AST REWRITE
                                    // elements: primary, selector
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (Object)adaptor.nil();
                                    // 840:7: -> ^( SELECTOR primary ( selector )+ )
                                    {
                                        // jkit/java/Java.g:840:10: ^( SELECTOR primary ( selector )+ )
                                        {
                                        Object root_1 = (Object)adaptor.nil();
                                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTOR, "SELECTOR"), root_1);

                                        adaptor.addChild(root_1, stream_primary.nextTree());
                                        if ( !(stream_selector.hasNext()) ) {
                                            throw new RewriteEarlyExitException();
                                        }
                                        while ( stream_selector.hasNext() ) {
                                            adaptor.addChild(root_1, stream_selector.nextTree());

                                        }
                                        stream_selector.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:842:6: '++'
                            {
                            string_literal483=(Token)match(input,195,FOLLOW_195_in_unaryExpressionNotPlusMinus6156); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_195.add(string_literal483);



                            // AST REWRITE
                            // elements: primary
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 842:11: -> ^( POSTINC primary )
                            {
                                // jkit/java/Java.g:842:14: ^( POSTINC primary )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTINC, "POSTINC"), root_1);

                                adaptor.addChild(root_1, stream_primary.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:843:6: '--'
                            {
                            string_literal484=(Token)match(input,196,FOLLOW_196_in_unaryExpressionNotPlusMinus6171); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_196.add(string_literal484);



                            // AST REWRITE
                            // elements: primary
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 843:11: -> ^( POSTDEC primary )
                            {
                                // jkit/java/Java.g:843:14: ^( POSTDEC primary )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTDEC, "POSTDEC"), root_1);

                                adaptor.addChild(root_1, stream_primary.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // jkit/java/Java.g:844:6: 
                            {

                            // AST REWRITE
                            // elements: primary
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 844:6: -> primary
                            {
                                adaptor.addChild(root_0, stream_primary.nextTree());

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class castExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // jkit/java/Java.g:848:1: castExpression : ( '(' primitiveType ')' unaryExpression -> ^( CAST ^( TYPE primitiveType ) unaryExpression ) | '(' type ')' unaryExpressionNotPlusMinus -> ^( CAST type unaryExpressionNotPlusMinus ) | '(' expression ')' unaryExpressionNotPlusMinus ->);
    public final JavaParser.castExpression_return castExpression() throws RecognitionException {
        JavaParser.castExpression_return retval = new JavaParser.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal485=null;
        Token char_literal487=null;
        Token char_literal489=null;
        Token char_literal491=null;
        Token char_literal493=null;
        Token char_literal495=null;
        JavaParser.primitiveType_return primitiveType486 = null;

        JavaParser.unaryExpression_return unaryExpression488 = null;

        JavaParser.type_return type490 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus492 = null;

        JavaParser.expression_return expression494 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus496 = null;


        Object char_literal485_tree=null;
        Object char_literal487_tree=null;
        Object char_literal489_tree=null;
        Object char_literal491_tree=null;
        Object char_literal493_tree=null;
        Object char_literal495_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_unaryExpressionNotPlusMinus=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionNotPlusMinus");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // jkit/java/Java.g:849:5: ( '(' primitiveType ')' unaryExpression -> ^( CAST ^( TYPE primitiveType ) unaryExpression ) | '(' type ')' unaryExpressionNotPlusMinus -> ^( CAST type unaryExpressionNotPlusMinus ) | '(' expression ')' unaryExpressionNotPlusMinus ->)
            int alt147=3;
            alt147 = dfa147.predict(input);
            switch (alt147) {
                case 1 :
                    // jkit/java/Java.g:849:8: '(' primitiveType ')' unaryExpression
                    {
                    char_literal485=(Token)match(input,157,FOLLOW_157_in_castExpression6210); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(char_literal485);

                    pushFollow(FOLLOW_primitiveType_in_castExpression6212);
                    primitiveType486=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType486.getTree());
                    char_literal487=(Token)match(input,158,FOLLOW_158_in_castExpression6214); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_158.add(char_literal487);

                    pushFollow(FOLLOW_unaryExpression_in_castExpression6216);
                    unaryExpression488=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression488.getTree());


                    // AST REWRITE
                    // elements: primitiveType, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 849:46: -> ^( CAST ^( TYPE primitiveType ) unaryExpression )
                    {
                        // jkit/java/Java.g:849:49: ^( CAST ^( TYPE primitiveType ) unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CAST, "CAST"), root_1);

                        // jkit/java/Java.g:849:56: ^( TYPE primitiveType )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                        adaptor.addChild(root_2, stream_primitiveType.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:850:8: '(' type ')' unaryExpressionNotPlusMinus
                    {
                    char_literal489=(Token)match(input,157,FOLLOW_157_in_castExpression6239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(char_literal489);

                    pushFollow(FOLLOW_type_in_castExpression6241);
                    type490=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type490.getTree());
                    char_literal491=(Token)match(input,158,FOLLOW_158_in_castExpression6243); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_158.add(char_literal491);

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6245);
                    unaryExpressionNotPlusMinus492=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus492.getTree());


                    // AST REWRITE
                    // elements: unaryExpressionNotPlusMinus, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 850:49: -> ^( CAST type unaryExpressionNotPlusMinus )
                    {
                        // jkit/java/Java.g:850:52: ^( CAST type unaryExpressionNotPlusMinus )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CAST, "CAST"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_unaryExpressionNotPlusMinus.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:851:8: '(' expression ')' unaryExpressionNotPlusMinus
                    {
                    char_literal493=(Token)match(input,157,FOLLOW_157_in_castExpression6264); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(char_literal493);

                    pushFollow(FOLLOW_expression_in_castExpression6266);
                    expression494=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression494.getTree());
                    char_literal495=(Token)match(input,158,FOLLOW_158_in_castExpression6268); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_158.add(char_literal495);

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6270);
                    unaryExpressionNotPlusMinus496=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus496.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 851:55: ->
                    {
                        root_0 = null;
                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class primary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary"
    // jkit/java/Java.g:854:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | literal | 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) ) | 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) ) | type '.' 'class' -> ^( GETCLASS type ) | 'void' '.' 'class' -> ^( GETCLASS ^( TYPE VOID ) ) | 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) ) | Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) ) );
    public final JavaParser.primary_return primary() throws RecognitionException {
        JavaParser.primary_return retval = new JavaParser.primary_return();
        retval.start = input.LT(1);
        int primary_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal501=null;
        Token char_literal504=null;
        Token char_literal506=null;
        Token char_literal507=null;
        Token char_literal508=null;
        Token char_literal509=null;
        Token char_literal510=null;
        Token string_literal512=null;
        Token char_literal514=null;
        Token char_literal515=null;
        Token char_literal517=null;
        Token char_literal518=null;
        Token char_literal519=null;
        Token char_literal520=null;
        Token char_literal521=null;
        Token char_literal525=null;
        Token string_literal526=null;
        Token string_literal527=null;
        Token char_literal528=null;
        Token string_literal529=null;
        Token string_literal530=null;
        Token Identifier532=null;
        List list_i=null;
        JavaParser.parExpression_return parExpression497 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments498 = null;

        JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix499 = null;

        JavaParser.literal_return literal500 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments502 = null;

        JavaParser.primitiveType_return primitiveType503 = null;

        JavaParser.expression_return expression505 = null;

        JavaParser.arrayInitializer_return arrayInitializer511 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments513 = null;

        JavaParser.expression_return expression516 = null;

        JavaParser.arrayInitializer_return arrayInitializer522 = null;

        JavaParser.classCreatorRest_return classCreatorRest523 = null;

        JavaParser.type_return type524 = null;

        JavaParser.arguments_return arguments531 = null;

        JavaParser.arguments_return arguments533 = null;

        JavaParser.refComponent_return i = null;
        Object string_literal501_tree=null;
        Object char_literal504_tree=null;
        Object char_literal506_tree=null;
        Object char_literal507_tree=null;
        Object char_literal508_tree=null;
        Object char_literal509_tree=null;
        Object char_literal510_tree=null;
        Object string_literal512_tree=null;
        Object char_literal514_tree=null;
        Object char_literal515_tree=null;
        Object char_literal517_tree=null;
        Object char_literal518_tree=null;
        Object char_literal519_tree=null;
        Object char_literal520_tree=null;
        Object char_literal521_tree=null;
        Object char_literal525_tree=null;
        Object string_literal526_tree=null;
        Object string_literal527_tree=null;
        Object char_literal528_tree=null;
        Object string_literal529_tree=null;
        Object string_literal530_tree=null;
        Object Identifier532_tree=null;
        RewriteRuleTokenStream stream_199=new RewriteRuleTokenStream(adaptor,"token 199");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_arrayInitializer=new RewriteRuleSubtreeStream(adaptor,"rule arrayInitializer");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classCreatorRest=new RewriteRuleSubtreeStream(adaptor,"rule classCreatorRest");
        RewriteRuleSubtreeStream stream_explicitGenericInvocationSuffix=new RewriteRuleSubtreeStream(adaptor,"rule explicitGenericInvocationSuffix");
        RewriteRuleSubtreeStream stream_refComponent=new RewriteRuleSubtreeStream(adaptor,"rule refComponent");
        RewriteRuleSubtreeStream stream_nonWildcardTypeArguments=new RewriteRuleSubtreeStream(adaptor,"rule nonWildcardTypeArguments");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // jkit/java/Java.g:855:5: ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | literal | 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) ) | 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) ) | type '.' 'class' -> ^( GETCLASS type ) | 'void' '.' 'class' -> ^( GETCLASS ^( TYPE VOID ) ) | 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) ) | Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) ) )
            int alt161=9;
            alt161 = dfa161.predict(input);
            switch (alt161) {
                case 1 :
                    // jkit/java/Java.g:855:7: parExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_primary6290);
                    parExpression497=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression497.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:856:6: nonWildcardTypeArguments explicitGenericInvocationSuffix
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6297);
                    nonWildcardTypeArguments498=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments498.getTree());
                    pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary6299);
                    explicitGenericInvocationSuffix499=explicitGenericInvocationSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicitGenericInvocationSuffix.add(explicitGenericInvocationSuffix499.getTree());


                    // AST REWRITE
                    // elements: nonWildcardTypeArguments, explicitGenericInvocationSuffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 856:63: -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                    {
                        // jkit/java/Java.g:856:66: ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                        // jkit/java/Java.g:856:75: ^( TYPE_PARAMETER nonWildcardTypeArguments )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETER, "TYPE_PARAMETER"), root_2);

                        adaptor.addChild(root_2, stream_nonWildcardTypeArguments.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_explicitGenericInvocationSuffix.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:857:9: literal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primary6323);
                    literal500=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal500.getTree());

                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:858:9: 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) )
                    {
                    string_literal501=(Token)match(input,199,FOLLOW_199_in_primary6333); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_199.add(string_literal501);

                    // jkit/java/Java.g:858:15: ( nonWildcardTypeArguments )?
                    int alt148=2;
                    int LA148_0 = input.LA(1);

                    if ( (LA148_0==125) ) {
                        alt148=1;
                    }
                    switch (alt148) {
                        case 1 :
                            // jkit/java/Java.g:0:0: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6335);
                            nonWildcardTypeArguments502=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments502.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_primitiveType_in_primary6338);
                    primitiveType503=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType503.getTree());
                    // jkit/java/Java.g:859:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) )
                    int alt152=2;
                    alt152 = dfa152.predict(input);
                    switch (alt152) {
                        case 1 :
                            // jkit/java/Java.g:860:7: ( '[' expression ']' )+ ( '[' ']' )*
                            {
                            // jkit/java/Java.g:860:7: ( '[' expression ']' )+
                            int cnt149=0;
                            loop149:
                            do {
                                int alt149=2;
                                alt149 = dfa149.predict(input);
                                switch (alt149) {
                            	case 1 :
                            	    // jkit/java/Java.g:860:8: '[' expression ']'
                            	    {
                            	    char_literal504=(Token)match(input,134,FOLLOW_134_in_primary6354); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_134.add(char_literal504);

                            	    pushFollow(FOLLOW_expression_in_primary6356);
                            	    expression505=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_expression.add(expression505.getTree());
                            	    char_literal506=(Token)match(input,135,FOLLOW_135_in_primary6358); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal506);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt149 >= 1 ) break loop149;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(149, input);
                                        throw eee;
                                }
                                cnt149++;
                            } while (true);

                            // jkit/java/Java.g:860:29: ( '[' ']' )*
                            loop150:
                            do {
                                int alt150=2;
                                alt150 = dfa150.predict(input);
                                switch (alt150) {
                            	case 1 :
                            	    // jkit/java/Java.g:860:30: '[' ']'
                            	    {
                            	    char_literal507=(Token)match(input,134,FOLLOW_134_in_primary6363); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_134.add(char_literal507);

                            	    char_literal508=(Token)match(input,135,FOLLOW_135_in_primary6365); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal508);


                            	    }
                            	    break;

                            	default :
                            	    break loop150;
                                }
                            } while (true);



                            // AST REWRITE
                            // elements: expression, primitiveType, 134
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 860:40: -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* )
                            {
                                // jkit/java/Java.g:860:43: ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                                // jkit/java/Java.g:860:49: ^( TYPE primitiveType ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, stream_primitiveType.nextTree());
                                // jkit/java/Java.g:860:70: ( '[' )*
                                while ( stream_134.hasNext() ) {
                                    adaptor.addChild(root_2, stream_134.nextNode());

                                }
                                stream_134.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:860:76: ( expression )*
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:861:9: ( '[' ']' )+ arrayInitializer
                            {
                            // jkit/java/Java.g:861:9: ( '[' ']' )+
                            int cnt151=0;
                            loop151:
                            do {
                                int alt151=2;
                                int LA151_0 = input.LA(1);

                                if ( (LA151_0==134) ) {
                                    alt151=1;
                                }


                                switch (alt151) {
                            	case 1 :
                            	    // jkit/java/Java.g:861:10: '[' ']'
                            	    {
                            	    char_literal509=(Token)match(input,134,FOLLOW_134_in_primary6396); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_134.add(char_literal509);

                            	    char_literal510=(Token)match(input,135,FOLLOW_135_in_primary6398); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal510);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt151 >= 1 ) break loop151;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(151, input);
                                        throw eee;
                                }
                                cnt151++;
                            } while (true);

                            pushFollow(FOLLOW_arrayInitializer_in_primary6402);
                            arrayInitializer511=arrayInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arrayInitializer.add(arrayInitializer511.getTree());


                            // AST REWRITE
                            // elements: primitiveType, 134, arrayInitializer
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 861:37: -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer )
                            {
                                // jkit/java/Java.g:861:40: ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYINIT, "ARRAYINIT"), root_1);

                                // jkit/java/Java.g:861:52: ^( TYPE primitiveType ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, stream_primitiveType.nextTree());
                                // jkit/java/Java.g:861:73: ( '[' )*
                                while ( stream_134.hasNext() ) {
                                    adaptor.addChild(root_2, stream_134.nextNode());

                                }
                                stream_134.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_arrayInitializer.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:863:9: 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) )
                    {
                    string_literal512=(Token)match(input,199,FOLLOW_199_in_primary6434); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_199.add(string_literal512);

                    // jkit/java/Java.g:863:15: ( nonWildcardTypeArguments )?
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==125) ) {
                        alt153=1;
                    }
                    switch (alt153) {
                        case 1 :
                            // jkit/java/Java.g:0:0: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6436);
                            nonWildcardTypeArguments513=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments513.getTree());

                            }
                            break;

                    }

                    // jkit/java/Java.g:863:41: (i+= refComponent ( '.' i+= refComponent )* )
                    // jkit/java/Java.g:863:42: i+= refComponent ( '.' i+= refComponent )*
                    {
                    pushFollow(FOLLOW_refComponent_in_primary6442);
                    i=refComponent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i.getTree());

                    // jkit/java/Java.g:863:58: ( '.' i+= refComponent )*
                    loop154:
                    do {
                        int alt154=2;
                        int LA154_0 = input.LA(1);

                        if ( (LA154_0==120) ) {
                            alt154=1;
                        }


                        switch (alt154) {
                    	case 1 :
                    	    // jkit/java/Java.g:863:59: '.' i+= refComponent
                    	    {
                    	    char_literal514=(Token)match(input,120,FOLLOW_120_in_primary6445); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_120.add(char_literal514);

                    	    pushFollow(FOLLOW_refComponent_in_primary6449);
                    	    i=refComponent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop154;
                        }
                    } while (true);


                    }

                    // jkit/java/Java.g:864:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) )
                    int alt158=3;
                    alt158 = dfa158.predict(input);
                    switch (alt158) {
                        case 1 :
                            // jkit/java/Java.g:865:7: ( '[' expression ']' )+ ( '[' ']' )*
                            {
                            // jkit/java/Java.g:865:7: ( '[' expression ']' )+
                            int cnt155=0;
                            loop155:
                            do {
                                int alt155=2;
                                alt155 = dfa155.predict(input);
                                switch (alt155) {
                            	case 1 :
                            	    // jkit/java/Java.g:865:8: '[' expression ']'
                            	    {
                            	    char_literal515=(Token)match(input,134,FOLLOW_134_in_primary6468); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_134.add(char_literal515);

                            	    pushFollow(FOLLOW_expression_in_primary6470);
                            	    expression516=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_expression.add(expression516.getTree());
                            	    char_literal517=(Token)match(input,135,FOLLOW_135_in_primary6472); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal517);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt155 >= 1 ) break loop155;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(155, input);
                                        throw eee;
                                }
                                cnt155++;
                            } while (true);

                            // jkit/java/Java.g:865:29: ( '[' ']' )*
                            loop156:
                            do {
                                int alt156=2;
                                alt156 = dfa156.predict(input);
                                switch (alt156) {
                            	case 1 :
                            	    // jkit/java/Java.g:865:30: '[' ']'
                            	    {
                            	    char_literal518=(Token)match(input,134,FOLLOW_134_in_primary6477); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_134.add(char_literal518);

                            	    char_literal519=(Token)match(input,135,FOLLOW_135_in_primary6479); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal519);


                            	    }
                            	    break;

                            	default :
                            	    break loop156;
                                }
                            } while (true);



                            // AST REWRITE
                            // elements: 134, i, expression
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: i
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                            root_0 = (Object)adaptor.nil();
                            // 865:40: -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* )
                            {
                                // jkit/java/Java.g:865:43: ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                                // jkit/java/Java.g:865:49: ^( TYPE ( $i)+ ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                if ( !(stream_i.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_i.hasNext() ) {
                                    adaptor.addChild(root_2, stream_i.nextTree());

                                }
                                stream_i.reset();
                                // jkit/java/Java.g:865:60: ( '[' )*
                                while ( stream_134.hasNext() ) {
                                    adaptor.addChild(root_2, stream_134.nextNode());

                                }
                                stream_134.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:865:66: ( expression )*
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:866:9: ( '[' ']' )+ arrayInitializer
                            {
                            // jkit/java/Java.g:866:9: ( '[' ']' )+
                            int cnt157=0;
                            loop157:
                            do {
                                int alt157=2;
                                int LA157_0 = input.LA(1);

                                if ( (LA157_0==134) ) {
                                    alt157=1;
                                }


                                switch (alt157) {
                            	case 1 :
                            	    // jkit/java/Java.g:866:10: '[' ']'
                            	    {
                            	    char_literal520=(Token)match(input,134,FOLLOW_134_in_primary6512); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_134.add(char_literal520);

                            	    char_literal521=(Token)match(input,135,FOLLOW_135_in_primary6514); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal521);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt157 >= 1 ) break loop157;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(157, input);
                                        throw eee;
                                }
                                cnt157++;
                            } while (true);

                            pushFollow(FOLLOW_arrayInitializer_in_primary6518);
                            arrayInitializer522=arrayInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arrayInitializer.add(arrayInitializer522.getTree());


                            // AST REWRITE
                            // elements: arrayInitializer, i, 134
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: i
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                            root_0 = (Object)adaptor.nil();
                            // 866:37: -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer )
                            {
                                // jkit/java/Java.g:866:40: ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYINIT, "ARRAYINIT"), root_1);

                                // jkit/java/Java.g:866:52: ^( TYPE ( $i)+ ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                if ( !(stream_i.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_i.hasNext() ) {
                                    adaptor.addChild(root_2, stream_i.nextTree());

                                }
                                stream_i.reset();
                                // jkit/java/Java.g:866:63: ( '[' )*
                                while ( stream_134.hasNext() ) {
                                    adaptor.addChild(root_2, stream_134.nextNode());

                                }
                                stream_134.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_arrayInitializer.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:867:9: classCreatorRest
                            {
                            pushFollow(FOLLOW_classCreatorRest_in_primary6547);
                            classCreatorRest523=classCreatorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classCreatorRest.add(classCreatorRest523.getTree());


                            // AST REWRITE
                            // elements: classCreatorRest, i
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: i
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                            root_0 = (Object)adaptor.nil();
                            // 867:26: -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? )
                            {
                                // jkit/java/Java.g:867:29: ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                                // jkit/java/Java.g:867:35: ^( TYPE ( $i)+ )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                if ( !(stream_i.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_i.hasNext() ) {
                                    adaptor.addChild(root_2, stream_i.nextTree());

                                }
                                stream_i.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:867:47: ( classCreatorRest )?
                                if ( stream_classCreatorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_classCreatorRest.nextTree());

                                }
                                stream_classCreatorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:869:9: type '.' 'class'
                    {
                    pushFollow(FOLLOW_type_in_primary6579);
                    type524=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type524.getTree());
                    char_literal525=(Token)match(input,120,FOLLOW_120_in_primary6581); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(char_literal525);

                    string_literal526=(Token)match(input,122,FOLLOW_122_in_primary6583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_122.add(string_literal526);



                    // AST REWRITE
                    // elements: type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 869:26: -> ^( GETCLASS type )
                    {
                        // jkit/java/Java.g:869:29: ^( GETCLASS type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GETCLASS, "GETCLASS"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // jkit/java/Java.g:870:9: 'void' '.' 'class'
                    {
                    string_literal527=(Token)match(input,132,FOLLOW_132_in_primary6605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_132.add(string_literal527);

                    char_literal528=(Token)match(input,120,FOLLOW_120_in_primary6607); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(char_literal528);

                    string_literal529=(Token)match(input,122,FOLLOW_122_in_primary6609); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_122.add(string_literal529);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 870:28: -> ^( GETCLASS ^( TYPE VOID ) )
                    {
                        // jkit/java/Java.g:870:31: ^( GETCLASS ^( TYPE VOID ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GETCLASS, "GETCLASS"), root_1);

                        // jkit/java/Java.g:870:42: ^( TYPE VOID )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                        adaptor.addChild(root_2, (Object)adaptor.create(VOID, "VOID"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // jkit/java/Java.g:871:8: 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) )
                    {
                    string_literal530=(Token)match(input,156,FOLLOW_156_in_primary6630); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_156.add(string_literal530);

                    // jkit/java/Java.g:872:3: ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) )
                    int alt159=2;
                    alt159 = dfa159.predict(input);
                    switch (alt159) {
                        case 1 :
                            // jkit/java/Java.g:873:4: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primary6640);
                            arguments531=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments531.getTree());


                            // AST REWRITE
                            // elements: 156, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 873:14: -> ^( INVOKE 'super' ( arguments )? )
                            {
                                // jkit/java/Java.g:873:17: ^( INVOKE 'super' ( arguments )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                                adaptor.addChild(root_1, stream_156.nextNode());
                                // jkit/java/Java.g:873:34: ( arguments )?
                                if ( stream_arguments.hasNext() ) {
                                    adaptor.addChild(root_1, stream_arguments.nextTree());

                                }
                                stream_arguments.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:874:6: 
                            {

                            // AST REWRITE
                            // elements: 156
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 874:6: -> ^( VAR 'super' )
                            {
                                // jkit/java/Java.g:874:9: ^( VAR 'super' )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VAR, "VAR"), root_1);

                                adaptor.addChild(root_1, stream_156.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // jkit/java/Java.g:876:9: Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) )
                    {
                    Identifier532=(Token)match(input,Identifier,FOLLOW_Identifier_in_primary6678); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier532);

                    // jkit/java/Java.g:877:6: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) )
                    int alt160=2;
                    alt160 = dfa160.predict(input);
                    switch (alt160) {
                        case 1 :
                            // jkit/java/Java.g:878:7: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primary6694);
                            arguments533=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments533.getTree());


                            // AST REWRITE
                            // elements: arguments, Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 878:17: -> ^( INVOKE Identifier ( arguments )? )
                            {
                                // jkit/java/Java.g:878:20: ^( INVOKE Identifier ( arguments )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:878:40: ( arguments )?
                                if ( stream_arguments.hasNext() ) {
                                    adaptor.addChild(root_1, stream_arguments.nextTree());

                                }
                                stream_arguments.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:879:9: 
                            {

                            // AST REWRITE
                            // elements: Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 879:9: -> ^( VAR Identifier )
                            {
                                // jkit/java/Java.g:879:12: ^( VAR Identifier )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VAR, "VAR"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, primary_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class innerCreator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerCreator"
    // jkit/java/Java.g:883:1: innerCreator : Identifier classCreatorRest -> ^( TYPE Identifier ) ( classCreatorRest )? ;
    public final JavaParser.innerCreator_return innerCreator() throws RecognitionException {
        JavaParser.innerCreator_return retval = new JavaParser.innerCreator_return();
        retval.start = input.LT(1);
        int innerCreator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier534=null;
        JavaParser.classCreatorRest_return classCreatorRest535 = null;


        Object Identifier534_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_classCreatorRest=new RewriteRuleSubtreeStream(adaptor,"rule classCreatorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // jkit/java/Java.g:884:2: ( Identifier classCreatorRest -> ^( TYPE Identifier ) ( classCreatorRest )? )
            // jkit/java/Java.g:884:4: Identifier classCreatorRest
            {
            Identifier534=(Token)match(input,Identifier,FOLLOW_Identifier_in_innerCreator6739); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier534);

            pushFollow(FOLLOW_classCreatorRest_in_innerCreator6741);
            classCreatorRest535=classCreatorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classCreatorRest.add(classCreatorRest535.getTree());


            // AST REWRITE
            // elements: classCreatorRest, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 884:32: -> ^( TYPE Identifier ) ( classCreatorRest )?
            {
                // jkit/java/Java.g:884:35: ^( TYPE Identifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_Identifier.nextNode());

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/Java.g:884:54: ( classCreatorRest )?
                if ( stream_classCreatorRest.hasNext() ) {
                    adaptor.addChild(root_0, stream_classCreatorRest.nextTree());

                }
                stream_classCreatorRest.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, innerCreator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "innerCreator"

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classCreatorRest"
    // jkit/java/Java.g:887:1: classCreatorRest : arguments ( classBody )? -> ( arguments )? ( classBody )? ;
    public final JavaParser.classCreatorRest_return classCreatorRest() throws RecognitionException {
        JavaParser.classCreatorRest_return retval = new JavaParser.classCreatorRest_return();
        retval.start = input.LT(1);
        int classCreatorRest_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.arguments_return arguments536 = null;

        JavaParser.classBody_return classBody537 = null;


        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // jkit/java/Java.g:888:2: ( arguments ( classBody )? -> ( arguments )? ( classBody )? )
            // jkit/java/Java.g:888:4: arguments ( classBody )?
            {
            pushFollow(FOLLOW_arguments_in_classCreatorRest6763);
            arguments536=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arguments.add(arguments536.getTree());
            // jkit/java/Java.g:888:14: ( classBody )?
            int alt162=2;
            alt162 = dfa162.predict(input);
            switch (alt162) {
                case 1 :
                    // jkit/java/Java.g:0:0: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_classCreatorRest6765);
                    classBody537=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody537.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arguments, classBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 888:25: -> ( arguments )? ( classBody )?
            {
                // jkit/java/Java.g:888:28: ( arguments )?
                if ( stream_arguments.hasNext() ) {
                    adaptor.addChild(root_0, stream_arguments.nextTree());

                }
                stream_arguments.reset();
                // jkit/java/Java.g:888:39: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_classBody.nextTree());

                }
                stream_classBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, classCreatorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classCreatorRest"

    public static class explicitGenericInvocation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocation"
    // jkit/java/Java.g:891:1: explicitGenericInvocation : nonWildcardTypeArguments explicitGenericInvocationSuffix ;
    public final JavaParser.explicitGenericInvocation_return explicitGenericInvocation() throws RecognitionException {
        JavaParser.explicitGenericInvocation_return retval = new JavaParser.explicitGenericInvocation_return();
        retval.start = input.LT(1);
        int explicitGenericInvocation_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments538 = null;

        JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix539 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // jkit/java/Java.g:892:2: ( nonWildcardTypeArguments explicitGenericInvocationSuffix )
            // jkit/java/Java.g:892:4: nonWildcardTypeArguments explicitGenericInvocationSuffix
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation6786);
            nonWildcardTypeArguments538=nonWildcardTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments538.getTree());
            pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_explicitGenericInvocation6788);
            explicitGenericInvocationSuffix539=explicitGenericInvocationSuffix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, explicitGenericInvocationSuffix539.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, explicitGenericInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocation"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // jkit/java/Java.g:895:1: nonWildcardTypeArguments : '<' typeList '>' -> typeList ;
    public final JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        JavaParser.nonWildcardTypeArguments_return retval = new JavaParser.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);
        int nonWildcardTypeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal540=null;
        Token char_literal542=null;
        JavaParser.typeList_return typeList541 = null;


        Object char_literal540_tree=null;
        Object char_literal542_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // jkit/java/Java.g:896:2: ( '<' typeList '>' -> typeList )
            // jkit/java/Java.g:896:4: '<' typeList '>'
            {
            char_literal540=(Token)match(input,125,FOLLOW_125_in_nonWildcardTypeArguments6800); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(char_literal540);

            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments6802);
            typeList541=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeList.add(typeList541.getTree());
            char_literal542=(Token)match(input,127,FOLLOW_127_in_nonWildcardTypeArguments6804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal542);



            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 896:21: -> typeList
            {
                adaptor.addChild(root_0, stream_typeList.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, nonWildcardTypeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"

    public static class explicitGenericInvocationSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocationSuffix"
    // jkit/java/Java.g:899:1: explicitGenericInvocationSuffix : ( 'super' superSuffix -> 'super' ( superSuffix )? | Identifier arguments -> Identifier ( arguments )? );
    public final JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix() throws RecognitionException {
        JavaParser.explicitGenericInvocationSuffix_return retval = new JavaParser.explicitGenericInvocationSuffix_return();
        retval.start = input.LT(1);
        int explicitGenericInvocationSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal543=null;
        Token Identifier545=null;
        JavaParser.superSuffix_return superSuffix544 = null;

        JavaParser.arguments_return arguments546 = null;


        Object string_literal543_tree=null;
        Object Identifier545_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_superSuffix=new RewriteRuleSubtreeStream(adaptor,"rule superSuffix");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // jkit/java/Java.g:900:2: ( 'super' superSuffix -> 'super' ( superSuffix )? | Identifier arguments -> Identifier ( arguments )? )
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==156) ) {
                alt163=1;
            }
            else if ( (LA163_0==Identifier) ) {
                alt163=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }
            switch (alt163) {
                case 1 :
                    // jkit/java/Java.g:900:4: 'super' superSuffix
                    {
                    string_literal543=(Token)match(input,156,FOLLOW_156_in_explicitGenericInvocationSuffix6820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_156.add(string_literal543);

                    pushFollow(FOLLOW_superSuffix_in_explicitGenericInvocationSuffix6822);
                    superSuffix544=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_superSuffix.add(superSuffix544.getTree());


                    // AST REWRITE
                    // elements: 156, superSuffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 900:24: -> 'super' ( superSuffix )?
                    {
                        adaptor.addChild(root_0, stream_156.nextNode());
                        // jkit/java/Java.g:900:35: ( superSuffix )?
                        if ( stream_superSuffix.hasNext() ) {
                            adaptor.addChild(root_0, stream_superSuffix.nextTree());

                        }
                        stream_superSuffix.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:901:6: Identifier arguments
                    {
                    Identifier545=(Token)match(input,Identifier,FOLLOW_Identifier_in_explicitGenericInvocationSuffix6836); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier545);

                    pushFollow(FOLLOW_arguments_in_explicitGenericInvocationSuffix6838);
                    arguments546=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments546.getTree());


                    // AST REWRITE
                    // elements: Identifier, arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 901:27: -> Identifier ( arguments )?
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/Java.g:901:41: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            adaptor.addChild(root_0, stream_arguments.nextTree());

                        }
                        stream_arguments.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, explicitGenericInvocationSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocationSuffix"

    public static class superSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "superSuffix"
    // jkit/java/Java.g:904:1: superSuffix : ( arguments -> ( arguments )? | '.' Identifier ( arguments )? );
    public final JavaParser.superSuffix_return superSuffix() throws RecognitionException {
        JavaParser.superSuffix_return retval = new JavaParser.superSuffix_return();
        retval.start = input.LT(1);
        int superSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal548=null;
        Token Identifier549=null;
        JavaParser.arguments_return arguments547 = null;

        JavaParser.arguments_return arguments550 = null;


        Object char_literal548_tree=null;
        Object Identifier549_tree=null;
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // jkit/java/Java.g:905:2: ( arguments -> ( arguments )? | '.' Identifier ( arguments )? )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==157) ) {
                alt165=1;
            }
            else if ( (LA165_0==120) ) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }
            switch (alt165) {
                case 1 :
                    // jkit/java/Java.g:905:4: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_superSuffix6857);
                    arguments547=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments547.getTree());


                    // AST REWRITE
                    // elements: arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 905:14: -> ( arguments )?
                    {
                        // jkit/java/Java.g:905:17: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            adaptor.addChild(root_0, stream_arguments.nextTree());

                        }
                        stream_arguments.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:906:6: '.' Identifier ( arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal548=(Token)match(input,120,FOLLOW_120_in_superSuffix6869); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal548_tree = (Object)adaptor.create(char_literal548);
                    adaptor.addChild(root_0, char_literal548_tree);
                    }
                    Identifier549=(Token)match(input,Identifier,FOLLOW_Identifier_in_superSuffix6871); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier549_tree = (Object)adaptor.create(Identifier549);
                    adaptor.addChild(root_0, Identifier549_tree);
                    }
                    // jkit/java/Java.g:906:21: ( arguments )?
                    int alt164=2;
                    alt164 = dfa164.predict(input);
                    switch (alt164) {
                        case 1 :
                            // jkit/java/Java.g:906:22: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_superSuffix6874);
                            arguments550=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments550.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, superSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "superSuffix"

    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selector"
    // jkit/java/Java.g:909:1: selector : ( '.' 'super' arguments -> ^( INVOKE 'super' ( arguments )? ) | '.' 'new' ( nonWildcardTypeArguments )? innerCreator -> ^( NEW innerCreator ) | '.' nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | '.' Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) ) | '[' expression ']' -> ^( ARRAYINDEX expression ) );
    public final JavaParser.selector_return selector() throws RecognitionException {
        JavaParser.selector_return retval = new JavaParser.selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal551=null;
        Token string_literal552=null;
        Token char_literal554=null;
        Token string_literal555=null;
        Token char_literal558=null;
        Token char_literal561=null;
        Token Identifier562=null;
        Token char_literal564=null;
        Token char_literal566=null;
        JavaParser.arguments_return arguments553 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments556 = null;

        JavaParser.innerCreator_return innerCreator557 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments559 = null;

        JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix560 = null;

        JavaParser.arguments_return arguments563 = null;

        JavaParser.expression_return expression565 = null;


        Object char_literal551_tree=null;
        Object string_literal552_tree=null;
        Object char_literal554_tree=null;
        Object string_literal555_tree=null;
        Object char_literal558_tree=null;
        Object char_literal561_tree=null;
        Object Identifier562_tree=null;
        Object char_literal564_tree=null;
        Object char_literal566_tree=null;
        RewriteRuleTokenStream stream_199=new RewriteRuleTokenStream(adaptor,"token 199");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_innerCreator=new RewriteRuleSubtreeStream(adaptor,"rule innerCreator");
        RewriteRuleSubtreeStream stream_explicitGenericInvocationSuffix=new RewriteRuleSubtreeStream(adaptor,"rule explicitGenericInvocationSuffix");
        RewriteRuleSubtreeStream stream_nonWildcardTypeArguments=new RewriteRuleSubtreeStream(adaptor,"rule nonWildcardTypeArguments");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // jkit/java/Java.g:910:2: ( '.' 'super' arguments -> ^( INVOKE 'super' ( arguments )? ) | '.' 'new' ( nonWildcardTypeArguments )? innerCreator -> ^( NEW innerCreator ) | '.' nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | '.' Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) ) | '[' expression ']' -> ^( ARRAYINDEX expression ) )
            int alt168=5;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==120) ) {
                switch ( input.LA(2) ) {
                case 156:
                    {
                    alt168=1;
                    }
                    break;
                case 199:
                    {
                    alt168=2;
                    }
                    break;
                case Identifier:
                    {
                    alt168=4;
                    }
                    break;
                case 125:
                    {
                    alt168=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 168, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA168_0==134) ) {
                alt168=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;
            }
            switch (alt168) {
                case 1 :
                    // jkit/java/Java.g:910:4: '.' 'super' arguments
                    {
                    char_literal551=(Token)match(input,120,FOLLOW_120_in_selector6888); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(char_literal551);

                    string_literal552=(Token)match(input,156,FOLLOW_156_in_selector6890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_156.add(string_literal552);

                    pushFollow(FOLLOW_arguments_in_selector6892);
                    arguments553=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments553.getTree());


                    // AST REWRITE
                    // elements: 156, arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 910:26: -> ^( INVOKE 'super' ( arguments )? )
                    {
                        // jkit/java/Java.g:910:29: ^( INVOKE 'super' ( arguments )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                        adaptor.addChild(root_1, stream_156.nextNode());
                        // jkit/java/Java.g:910:46: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            adaptor.addChild(root_1, stream_arguments.nextTree());

                        }
                        stream_arguments.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:911:6: '.' 'new' ( nonWildcardTypeArguments )? innerCreator
                    {
                    char_literal554=(Token)match(input,120,FOLLOW_120_in_selector6910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(char_literal554);

                    string_literal555=(Token)match(input,199,FOLLOW_199_in_selector6912); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_199.add(string_literal555);

                    // jkit/java/Java.g:911:16: ( nonWildcardTypeArguments )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==125) ) {
                        alt166=1;
                    }
                    switch (alt166) {
                        case 1 :
                            // jkit/java/Java.g:911:17: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector6915);
                            nonWildcardTypeArguments556=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments556.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_innerCreator_in_selector6919);
                    innerCreator557=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_innerCreator.add(innerCreator557.getTree());


                    // AST REWRITE
                    // elements: innerCreator
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 911:57: -> ^( NEW innerCreator )
                    {
                        // jkit/java/Java.g:911:60: ^( NEW innerCreator )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                        adaptor.addChild(root_1, stream_innerCreator.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:912:5: '.' nonWildcardTypeArguments explicitGenericInvocationSuffix
                    {
                    char_literal558=(Token)match(input,120,FOLLOW_120_in_selector6934); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(char_literal558);

                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector6936);
                    nonWildcardTypeArguments559=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments559.getTree());
                    pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_selector6938);
                    explicitGenericInvocationSuffix560=explicitGenericInvocationSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicitGenericInvocationSuffix.add(explicitGenericInvocationSuffix560.getTree());


                    // AST REWRITE
                    // elements: nonWildcardTypeArguments, explicitGenericInvocationSuffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 912:66: -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                    {
                        // jkit/java/Java.g:912:69: ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                        // jkit/java/Java.g:912:78: ^( TYPE_PARAMETER nonWildcardTypeArguments )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETER, "TYPE_PARAMETER"), root_2);

                        adaptor.addChild(root_2, stream_nonWildcardTypeArguments.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_explicitGenericInvocationSuffix.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:913:4: '.' Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) )
                    {
                    char_literal561=(Token)match(input,120,FOLLOW_120_in_selector6957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(char_literal561);

                    Identifier562=(Token)match(input,Identifier,FOLLOW_Identifier_in_selector6959); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier562);

                    // jkit/java/Java.g:914:3: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) )
                    int alt167=2;
                    alt167 = dfa167.predict(input);
                    switch (alt167) {
                        case 1 :
                            // jkit/java/Java.g:915:4: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector6969);
                            arguments563=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments563.getTree());


                            // AST REWRITE
                            // elements: arguments, Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 915:14: -> ^( INVOKE Identifier ( arguments )? )
                            {
                                // jkit/java/Java.g:915:17: ^( INVOKE Identifier ( arguments )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:915:37: ( arguments )?
                                if ( stream_arguments.hasNext() ) {
                                    adaptor.addChild(root_1, stream_arguments.nextTree());

                                }
                                stream_arguments.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:916:6: 
                            {

                            // AST REWRITE
                            // elements: Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 916:6: -> ^( DEREF Identifier )
                            {
                                // jkit/java/Java.g:916:9: ^( DEREF Identifier )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DEREF, "DEREF"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:918:6: '[' expression ']'
                    {
                    char_literal564=(Token)match(input,134,FOLLOW_134_in_selector7004); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal564);

                    pushFollow(FOLLOW_expression_in_selector7006);
                    expression565=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression565.getTree());
                    char_literal566=(Token)match(input,135,FOLLOW_135_in_selector7008); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal566);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 918:25: -> ^( ARRAYINDEX expression )
                    {
                        // jkit/java/Java.g:918:28: ^( ARRAYINDEX expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYINDEX, "ARRAYINDEX"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selector"

    public static class arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // jkit/java/Java.g:921:1: arguments : '(' ( expressionList )? ')' ;
    public final JavaParser.arguments_return arguments() throws RecognitionException {
        JavaParser.arguments_return retval = new JavaParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal567=null;
        Token char_literal569=null;
        JavaParser.expressionList_return expressionList568 = null;


        Object char_literal567_tree=null;
        Object char_literal569_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // jkit/java/Java.g:922:2: ( '(' ( expressionList )? ')' )
            // jkit/java/Java.g:922:4: '(' ( expressionList )? ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal567=(Token)match(input,157,FOLLOW_157_in_arguments7027); if (state.failed) return retval;
            // jkit/java/Java.g:922:9: ( expressionList )?
            int alt169=2;
            alt169 = dfa169.predict(input);
            switch (alt169) {
                case 1 :
                    // jkit/java/Java.g:0:0: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments7030);
                    expressionList568=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList568.getTree());

                    }
                    break;

            }

            char_literal569=(Token)match(input,158,FOLLOW_158_in_arguments7033); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred1_Java
    public final void synpred1_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:204:4: ( annotations )
        // jkit/java/Java.g:204:4: annotations
        {
        pushFollow(FOLLOW_annotations_in_synpred1_Java453);
        annotations();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_Java

    // $ANTLR start synpred33_Java
    public final void synpred33_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:291:4: ( 'static' block )
        // jkit/java/Java.g:291:4: 'static' block
        {
        match(input,119,FOLLOW_119_in_synpred33_Java1140); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred33_Java1142);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_Java

    // $ANTLR start synpred35_Java
    public final void synpred35_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:292:4: ( ( 'static' )? block )
        // jkit/java/Java.g:292:4: ( 'static' )? block
        {
        // jkit/java/Java.g:292:4: ( 'static' )?
        int alt170=2;
        int LA170_0 = input.LA(1);

        if ( (LA170_0==119) ) {
            alt170=1;
        }
        switch (alt170) {
            case 1 :
                // jkit/java/Java.g:0:0: 'static'
                {
                match(input,119,FOLLOW_119_in_synpred35_Java1155); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_block_in_synpred35_Java1158);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_Java

    // $ANTLR start synpred38_Java
    public final void synpred38_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:295:9: ( methodDeclaration )
        // jkit/java/Java.g:295:9: methodDeclaration
        {
        pushFollow(FOLLOW_methodDeclaration_in_synpred38_Java1203);
        methodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_Java

    // $ANTLR start synpred39_Java
    public final void synpred39_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:296:9: ( fieldDeclaration )
        // jkit/java/Java.g:296:9: fieldDeclaration
        {
        pushFollow(FOLLOW_fieldDeclaration_in_synpred39_Java1229);
        fieldDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_Java

    // $ANTLR start synpred47_Java
    public final void synpred47_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:325:3: ( constantDeclaration )
        // jkit/java/Java.g:325:3: constantDeclaration
        {
        pushFollow(FOLLOW_constantDeclaration_in_synpred47_Java1542);
        constantDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred47_Java

    // $ANTLR start synpred48_Java
    public final void synpred48_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:326:5: ( type Identifier interfaceMethodDeclaratorRest )
        // jkit/java/Java.g:326:5: type Identifier interfaceMethodDeclaratorRest
        {
        pushFollow(FOLLOW_type_in_synpred48_Java1564);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,Identifier,FOLLOW_Identifier_in_synpred48_Java1566); if (state.failed) return ;
        pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_synpred48_Java1568);
        interfaceMethodDeclaratorRest();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred48_Java

    // $ANTLR start synpred84_Java
    public final void synpred84_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:429:16: ( '.' Identifier )
        // jkit/java/Java.g:429:16: '.' Identifier
        {
        match(input,120,FOLLOW_120_in_synpred84_Java2460); if (state.failed) return ;
        match(input,Identifier,FOLLOW_Identifier_in_synpred84_Java2462); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred84_Java

    // $ANTLR start synpred102_Java
    public final void synpred102_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:473:4: ( ( 'extends' type )? )
        // jkit/java/Java.g:473:4: ( 'extends' type )?
        {
        // jkit/java/Java.g:473:4: ( 'extends' type )?
        int alt179=2;
        int LA179_0 = input.LA(1);

        if ( (LA179_0==123) ) {
            alt179=1;
        }
        switch (alt179) {
            case 1 :
                // jkit/java/Java.g:473:5: 'extends' type
                {
                match(input,123,FOLLOW_123_in_synpred102_Java2764); if (state.failed) return ;
                pushFollow(FOLLOW_type_in_synpred102_Java2766);
                type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred102_Java

    // $ANTLR start synpred118_Java
    public final void synpred118_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:525:4: ( annotation )
        // jkit/java/Java.g:525:4: annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred118_Java3210);
        annotation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred118_Java

    // $ANTLR start synpred135_Java
    public final void synpred135_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:573:6: ( interfaceDeclaration ( ';' )? )
        // jkit/java/Java.g:573:6: interfaceDeclaration ( ';' )?
        {
        pushFollow(FOLLOW_interfaceDeclaration_in_synpred135_Java3458);
        interfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;
        // jkit/java/Java.g:573:27: ( ';' )?
        int alt184=2;
        int LA184_0 = input.LA(1);

        if ( (LA184_0==117) ) {
            alt184=1;
        }
        switch (alt184) {
            case 1 :
                // jkit/java/Java.g:0:0: ';'
                {
                match(input,117,FOLLOW_117_in_synpred135_Java3460); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred135_Java

    // $ANTLR start synpred142_Java
    public final void synpred142_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:602:4: ( localVariableDeclaration )
        // jkit/java/Java.g:602:4: localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred142_Java3594);
        localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred142_Java

    // $ANTLR start synpred143_Java
    public final void synpred143_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:603:4: ( classOrInterfaceDeclaration )
        // jkit/java/Java.g:603:4: classOrInterfaceDeclaration
        {
        pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred143_Java3599);
        classOrInterfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred143_Java

    // $ANTLR start synpred148_Java
    public final void synpred148_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:614:55: ( 'else' statement )
        // jkit/java/Java.g:614:55: 'else' statement
        {
        match(input,168,FOLLOW_168_in_synpred148_Java3712); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred148_Java3714);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred148_Java

    // $ANTLR start synpred153_Java
    public final void synpred153_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:619:9: ( catches 'finally' block )
        // jkit/java/Java.g:619:9: catches 'finally' block
        {
        pushFollow(FOLLOW_catches_in_synpred153_Java3843);
        catches();

        state._fsp--;
        if (state.failed) return ;
        match(input,173,FOLLOW_173_in_synpred153_Java3847); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred153_Java3849);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred153_Java

    // $ANTLR start synpred154_Java
    public final void synpred154_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:620:9: ( catches )
        // jkit/java/Java.g:620:9: catches
        {
        pushFollow(FOLLOW_catches_in_synpred154_Java3877);
        catches();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred154_Java

    // $ANTLR start synpred171_Java
    public final void synpred171_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:655:4: ( 'case' constantExpression ':' )
        // jkit/java/Java.g:655:4: 'case' constantExpression ':'
        {
        match(input,180,FOLLOW_180_in_synpred171_Java4259); if (state.failed) return ;
        pushFollow(FOLLOW_constantExpression_in_synpred171_Java4261);
        constantExpression();

        state._fsp--;
        if (state.failed) return ;
        match(input,166,FOLLOW_166_in_synpred171_Java4263); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred171_Java

    // $ANTLR start synpred172_Java
    public final void synpred172_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:656:4: ( 'case' enumConstantName ':' )
        // jkit/java/Java.g:656:4: 'case' enumConstantName ':'
        {
        match(input,180,FOLLOW_180_in_synpred172_Java4279); if (state.failed) return ;
        pushFollow(FOLLOW_enumConstantName_in_synpred172_Java4281);
        enumConstantName();

        state._fsp--;
        if (state.failed) return ;
        match(input,166,FOLLOW_166_in_synpred172_Java4283); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_Java

    // $ANTLR start synpred174_Java
    public final void synpred174_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:666:4: ( forVarControl )
        // jkit/java/Java.g:666:4: forVarControl
        {
        pushFollow(FOLLOW_forVarControl_in_synpred174_Java4343);
        forVarControl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_Java

    // $ANTLR start synpred179_Java
    public final void synpred179_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:671:4: ( ( variableModifier )* type variableDeclarators )
        // jkit/java/Java.g:671:4: ( variableModifier )* type variableDeclarators
        {
        // jkit/java/Java.g:671:4: ( variableModifier )*
        loop192:
        do {
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==141||LA192_0==163) ) {
                alt192=1;
            }


            switch (alt192) {
        	case 1 :
        	    // jkit/java/Java.g:0:0: variableModifier
        	    {
        	    pushFollow(FOLLOW_variableModifier_in_synpred179_Java4405);
        	    variableModifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop192;
            }
        } while (true);

        pushFollow(FOLLOW_type_in_synpred179_Java4408);
        type();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_variableDeclarators_in_synpred179_Java4410);
        variableDeclarators();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_Java

    // $ANTLR start synpred182_Java
    public final void synpred182_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:704:4: ( '=' expression )
        // jkit/java/Java.g:704:4: '=' expression
        {
        match(input,136,FOLLOW_136_in_synpred182_Java4575); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred182_Java4577);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_Java

    // $ANTLR start synpred183_Java
    public final void synpred183_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:705:6: ( '+' '=' expression )
        // jkit/java/Java.g:705:6: '+' '=' expression
        {
        match(input,181,FOLLOW_181_in_synpred183_Java4596); if (state.failed) return ;
        match(input,136,FOLLOW_136_in_synpred183_Java4598); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred183_Java4600);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_Java

    // $ANTLR start synpred184_Java
    public final void synpred184_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:706:6: ( '-' '=' expression )
        // jkit/java/Java.g:706:6: '-' '=' expression
        {
        match(input,182,FOLLOW_182_in_synpred184_Java4628); if (state.failed) return ;
        match(input,136,FOLLOW_136_in_synpred184_Java4630); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred184_Java4632);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred184_Java

    // $ANTLR start synpred185_Java
    public final void synpred185_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:707:6: ( '*' '=' expression )
        // jkit/java/Java.g:707:6: '*' '=' expression
        {
        match(input,121,FOLLOW_121_in_synpred185_Java4660); if (state.failed) return ;
        match(input,136,FOLLOW_136_in_synpred185_Java4662); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred185_Java4664);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred185_Java

    // $ANTLR start synpred186_Java
    public final void synpred186_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:708:6: ( '/' '=' expression )
        // jkit/java/Java.g:708:6: '/' '=' expression
        {
        match(input,183,FOLLOW_183_in_synpred186_Java4692); if (state.failed) return ;
        match(input,136,FOLLOW_136_in_synpred186_Java4694); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred186_Java4696);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_Java

    // $ANTLR start synpred187_Java
    public final void synpred187_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:709:6: ( '&=' expression )
        // jkit/java/Java.g:709:6: '&=' expression
        {
        match(input,184,FOLLOW_184_in_synpred187_Java4725); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred187_Java4727);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_Java

    // $ANTLR start synpred188_Java
    public final void synpred188_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:710:6: ( '|=' expression )
        // jkit/java/Java.g:710:6: '|=' expression
        {
        match(input,185,FOLLOW_185_in_synpred188_Java4750); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred188_Java4752);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_Java

    // $ANTLR start synpred189_Java
    public final void synpred189_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:711:6: ( '^=' expression )
        // jkit/java/Java.g:711:6: '^=' expression
        {
        match(input,186,FOLLOW_186_in_synpred189_Java4775); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred189_Java4777);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_Java

    // $ANTLR start synpred190_Java
    public final void synpred190_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:712:6: ( '%' '=' expression )
        // jkit/java/Java.g:712:6: '%' '=' expression
        {
        match(input,187,FOLLOW_187_in_synpred190_Java4805); if (state.failed) return ;
        match(input,136,FOLLOW_136_in_synpred190_Java4807); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred190_Java4809);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_Java

    // $ANTLR start synpred191_Java
    public final void synpred191_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:713:6: ( '<' '<' '=' expression )
        // jkit/java/Java.g:713:6: '<' '<' '=' expression
        {
        match(input,125,FOLLOW_125_in_synpred191_Java4837); if (state.failed) return ;
        match(input,125,FOLLOW_125_in_synpred191_Java4839); if (state.failed) return ;
        match(input,136,FOLLOW_136_in_synpred191_Java4841); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred191_Java4843);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_Java

    // $ANTLR start synpred192_Java
    public final void synpred192_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:714:6: ( '>' '>' '=' expression )
        // jkit/java/Java.g:714:6: '>' '>' '=' expression
        {
        match(input,127,FOLLOW_127_in_synpred192_Java4871); if (state.failed) return ;
        match(input,127,FOLLOW_127_in_synpred192_Java4873); if (state.failed) return ;
        match(input,136,FOLLOW_136_in_synpred192_Java4875); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred192_Java4877);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_Java

    // $ANTLR start synpred193_Java
    public final void synpred193_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:715:6: ( '>' '>' '>' '=' expression )
        // jkit/java/Java.g:715:6: '>' '>' '>' '=' expression
        {
        match(input,127,FOLLOW_127_in_synpred193_Java4903); if (state.failed) return ;
        match(input,127,FOLLOW_127_in_synpred193_Java4905); if (state.failed) return ;
        match(input,127,FOLLOW_127_in_synpred193_Java4907); if (state.failed) return ;
        match(input,136,FOLLOW_136_in_synpred193_Java4909); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred193_Java4911);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_Java

    // $ANTLR start synpred204_Java
    public final void synpred204_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:789:8: ( ( '<' shiftExpression ) )
        // jkit/java/Java.g:789:8: ( '<' shiftExpression )
        {
        // jkit/java/Java.g:789:8: ( '<' shiftExpression )
        // jkit/java/Java.g:789:9: '<' shiftExpression
        {
        match(input,125,FOLLOW_125_in_synpred204_Java5548); if (state.failed) return ;
        pushFollow(FOLLOW_shiftExpression_in_synpred204_Java5550);
        shiftExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred204_Java

    // $ANTLR start synpred208_Java
    public final void synpred208_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:799:7: ( ( '<' '<' | '>' '>' ) additiveExpression )
        // jkit/java/Java.g:799:7: ( '<' '<' | '>' '>' ) additiveExpression
        {
        // jkit/java/Java.g:799:7: ( '<' '<' | '>' '>' )
        int alt193=2;
        int LA193_0 = input.LA(1);

        if ( (LA193_0==125) ) {
            alt193=1;
        }
        else if ( (LA193_0==127) ) {
            alt193=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 193, 0, input);

            throw nvae;
        }
        switch (alt193) {
            case 1 :
                // jkit/java/Java.g:799:8: '<' '<'
                {
                match(input,125,FOLLOW_125_in_synpred208_Java5662); if (state.failed) return ;
                match(input,125,FOLLOW_125_in_synpred208_Java5664); if (state.failed) return ;

                }
                break;
            case 2 :
                // jkit/java/Java.g:799:19: '>' '>'
                {
                match(input,127,FOLLOW_127_in_synpred208_Java5668); if (state.failed) return ;
                match(input,127,FOLLOW_127_in_synpred208_Java5670); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_additiveExpression_in_synpred208_Java5673);
        additiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred208_Java

    // $ANTLR start synpred209_Java
    public final void synpred209_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:799:6: ( ( ( '<' '<' | '>' '>' ) additiveExpression )+ )
        // jkit/java/Java.g:799:6: ( ( '<' '<' | '>' '>' ) additiveExpression )+
        {
        // jkit/java/Java.g:799:6: ( ( '<' '<' | '>' '>' ) additiveExpression )+
        int cnt195=0;
        loop195:
        do {
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==125||LA195_0==127) ) {
                alt195=1;
            }


            switch (alt195) {
        	case 1 :
        	    // jkit/java/Java.g:799:7: ( '<' '<' | '>' '>' ) additiveExpression
        	    {
        	    // jkit/java/Java.g:799:7: ( '<' '<' | '>' '>' )
        	    int alt194=2;
        	    int LA194_0 = input.LA(1);

        	    if ( (LA194_0==125) ) {
        	        alt194=1;
        	    }
        	    else if ( (LA194_0==127) ) {
        	        alt194=2;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        NoViableAltException nvae =
        	            new NoViableAltException("", 194, 0, input);

        	        throw nvae;
        	    }
        	    switch (alt194) {
        	        case 1 :
        	            // jkit/java/Java.g:799:8: '<' '<'
        	            {
        	            match(input,125,FOLLOW_125_in_synpred209_Java5662); if (state.failed) return ;
        	            match(input,125,FOLLOW_125_in_synpred209_Java5664); if (state.failed) return ;

        	            }
        	            break;
        	        case 2 :
        	            // jkit/java/Java.g:799:19: '>' '>'
        	            {
        	            match(input,127,FOLLOW_127_in_synpred209_Java5668); if (state.failed) return ;
        	            match(input,127,FOLLOW_127_in_synpred209_Java5670); if (state.failed) return ;

        	            }
        	            break;

        	    }

        	    pushFollow(FOLLOW_additiveExpression_in_synpred209_Java5673);
        	    additiveExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt195 >= 1 ) break loop195;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(195, input);
                    throw eee;
            }
            cnt195++;
        } while (true);


        }
    }
    // $ANTLR end synpred209_Java

    // $ANTLR start synpred210_Java
    public final void synpred210_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:801:9: ( '>' '>' '>' additiveExpression )
        // jkit/java/Java.g:801:9: '>' '>' '>' additiveExpression
        {
        match(input,127,FOLLOW_127_in_synpred210_Java5707); if (state.failed) return ;
        match(input,127,FOLLOW_127_in_synpred210_Java5709); if (state.failed) return ;
        match(input,127,FOLLOW_127_in_synpred210_Java5711); if (state.failed) return ;
        pushFollow(FOLLOW_additiveExpression_in_synpred210_Java5713);
        additiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred210_Java

    // $ANTLR start synpred211_Java
    public final void synpred211_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:801:8: ( ( '>' '>' '>' additiveExpression )+ )
        // jkit/java/Java.g:801:8: ( '>' '>' '>' additiveExpression )+
        {
        // jkit/java/Java.g:801:8: ( '>' '>' '>' additiveExpression )+
        int cnt196=0;
        loop196:
        do {
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==127) ) {
                alt196=1;
            }


            switch (alt196) {
        	case 1 :
        	    // jkit/java/Java.g:801:9: '>' '>' '>' additiveExpression
        	    {
        	    match(input,127,FOLLOW_127_in_synpred211_Java5707); if (state.failed) return ;
        	    match(input,127,FOLLOW_127_in_synpred211_Java5709); if (state.failed) return ;
        	    match(input,127,FOLLOW_127_in_synpred211_Java5711); if (state.failed) return ;
        	    pushFollow(FOLLOW_additiveExpression_in_synpred211_Java5713);
        	    additiveExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt196 >= 1 ) break loop196;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(196, input);
                    throw eee;
            }
            cnt196++;
        } while (true);


        }
    }
    // $ANTLR end synpred211_Java

    // $ANTLR start synpred225_Java
    public final void synpred225_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:833:9: ( castExpression )
        // jkit/java/Java.g:833:9: castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred225_Java6060);
        castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred225_Java

    // $ANTLR start synpred232_Java
    public final void synpred232_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:849:8: ( '(' primitiveType ')' unaryExpression )
        // jkit/java/Java.g:849:8: '(' primitiveType ')' unaryExpression
        {
        match(input,157,FOLLOW_157_in_synpred232_Java6210); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred232_Java6212);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;
        match(input,158,FOLLOW_158_in_synpred232_Java6214); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred232_Java6216);
        unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_Java

    // $ANTLR start synpred233_Java
    public final void synpred233_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:850:8: ( '(' type ')' unaryExpressionNotPlusMinus )
        // jkit/java/Java.g:850:8: '(' type ')' unaryExpressionNotPlusMinus
        {
        match(input,157,FOLLOW_157_in_synpred233_Java6239); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred233_Java6241);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,158,FOLLOW_158_in_synpred233_Java6243); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_synpred233_Java6245);
        unaryExpressionNotPlusMinus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_Java

    // $ANTLR start synpred238_Java
    public final void synpred238_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:860:8: ( '[' expression ']' )
        // jkit/java/Java.g:860:8: '[' expression ']'
        {
        match(input,134,FOLLOW_134_in_synpred238_Java6354); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred238_Java6356);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,135,FOLLOW_135_in_synpred238_Java6358); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_Java

    // $ANTLR start synpred242_Java
    public final void synpred242_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:858:9: ( 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer ) )
        // jkit/java/Java.g:858:9: 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer )
        {
        match(input,199,FOLLOW_199_in_synpred242_Java6333); if (state.failed) return ;
        // jkit/java/Java.g:858:15: ( nonWildcardTypeArguments )?
        int alt203=2;
        int LA203_0 = input.LA(1);

        if ( (LA203_0==125) ) {
            alt203=1;
        }
        switch (alt203) {
            case 1 :
                // jkit/java/Java.g:0:0: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred242_Java6335);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_primitiveType_in_synpred242_Java6338);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;
        // jkit/java/Java.g:859:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer )
        int alt207=2;
        alt207 = dfa207.predict(input);
        switch (alt207) {
            case 1 :
                // jkit/java/Java.g:860:7: ( '[' expression ']' )+ ( '[' ']' )*
                {
                // jkit/java/Java.g:860:7: ( '[' expression ']' )+
                int cnt204=0;
                loop204:
                do {
                    int alt204=2;
                    alt204 = dfa204.predict(input);
                    switch (alt204) {
                	case 1 :
                	    // jkit/java/Java.g:860:8: '[' expression ']'
                	    {
                	    match(input,134,FOLLOW_134_in_synpred242_Java6354); if (state.failed) return ;
                	    pushFollow(FOLLOW_expression_in_synpred242_Java6356);
                	    expression();

                	    state._fsp--;
                	    if (state.failed) return ;
                	    match(input,135,FOLLOW_135_in_synpred242_Java6358); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt204 >= 1 ) break loop204;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(204, input);
                            throw eee;
                    }
                    cnt204++;
                } while (true);

                // jkit/java/Java.g:860:29: ( '[' ']' )*
                loop205:
                do {
                    int alt205=2;
                    int LA205_0 = input.LA(1);

                    if ( (LA205_0==134) ) {
                        alt205=1;
                    }


                    switch (alt205) {
                	case 1 :
                	    // jkit/java/Java.g:860:30: '[' ']'
                	    {
                	    match(input,134,FOLLOW_134_in_synpred242_Java6363); if (state.failed) return ;
                	    match(input,135,FOLLOW_135_in_synpred242_Java6365); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop205;
                    }
                } while (true);


                }
                break;
            case 2 :
                // jkit/java/Java.g:861:9: ( '[' ']' )+ arrayInitializer
                {
                // jkit/java/Java.g:861:9: ( '[' ']' )+
                int cnt206=0;
                loop206:
                do {
                    int alt206=2;
                    int LA206_0 = input.LA(1);

                    if ( (LA206_0==134) ) {
                        alt206=1;
                    }


                    switch (alt206) {
                	case 1 :
                	    // jkit/java/Java.g:861:10: '[' ']'
                	    {
                	    match(input,134,FOLLOW_134_in_synpred242_Java6396); if (state.failed) return ;
                	    match(input,135,FOLLOW_135_in_synpred242_Java6398); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt206 >= 1 ) break loop206;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(206, input);
                            throw eee;
                    }
                    cnt206++;
                } while (true);

                pushFollow(FOLLOW_arrayInitializer_in_synpred242_Java6402);
                arrayInitializer();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred242_Java

    // $ANTLR start synpred245_Java
    public final void synpred245_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:865:8: ( '[' expression ']' )
        // jkit/java/Java.g:865:8: '[' expression ']'
        {
        match(input,134,FOLLOW_134_in_synpred245_Java6468); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred245_Java6470);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,135,FOLLOW_135_in_synpred245_Java6472); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred245_Java

    // $ANTLR start synpred250_Java
    public final void synpred250_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:863:9: ( 'new' ( nonWildcardTypeArguments )? ( refComponent ( '.' refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest ) )
        // jkit/java/Java.g:863:9: 'new' ( nonWildcardTypeArguments )? ( refComponent ( '.' refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest )
        {
        match(input,199,FOLLOW_199_in_synpred250_Java6434); if (state.failed) return ;
        // jkit/java/Java.g:863:15: ( nonWildcardTypeArguments )?
        int alt211=2;
        int LA211_0 = input.LA(1);

        if ( (LA211_0==125) ) {
            alt211=1;
        }
        switch (alt211) {
            case 1 :
                // jkit/java/Java.g:0:0: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred250_Java6436);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // jkit/java/Java.g:863:41: ( refComponent ( '.' refComponent )* )
        // jkit/java/Java.g:863:42: refComponent ( '.' refComponent )*
        {
        pushFollow(FOLLOW_refComponent_in_synpred250_Java6442);
        refComponent();

        state._fsp--;
        if (state.failed) return ;
        // jkit/java/Java.g:863:58: ( '.' refComponent )*
        loop212:
        do {
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==120) ) {
                alt212=1;
            }


            switch (alt212) {
        	case 1 :
        	    // jkit/java/Java.g:863:59: '.' refComponent
        	    {
        	    match(input,120,FOLLOW_120_in_synpred250_Java6445); if (state.failed) return ;
        	    pushFollow(FOLLOW_refComponent_in_synpred250_Java6449);
        	    refComponent();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop212;
            }
        } while (true);


        }

        // jkit/java/Java.g:864:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest )
        int alt216=3;
        alt216 = dfa216.predict(input);
        switch (alt216) {
            case 1 :
                // jkit/java/Java.g:865:7: ( '[' expression ']' )+ ( '[' ']' )*
                {
                // jkit/java/Java.g:865:7: ( '[' expression ']' )+
                int cnt213=0;
                loop213:
                do {
                    int alt213=2;
                    alt213 = dfa213.predict(input);
                    switch (alt213) {
                	case 1 :
                	    // jkit/java/Java.g:865:8: '[' expression ']'
                	    {
                	    match(input,134,FOLLOW_134_in_synpred250_Java6468); if (state.failed) return ;
                	    pushFollow(FOLLOW_expression_in_synpred250_Java6470);
                	    expression();

                	    state._fsp--;
                	    if (state.failed) return ;
                	    match(input,135,FOLLOW_135_in_synpred250_Java6472); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt213 >= 1 ) break loop213;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(213, input);
                            throw eee;
                    }
                    cnt213++;
                } while (true);

                // jkit/java/Java.g:865:29: ( '[' ']' )*
                loop214:
                do {
                    int alt214=2;
                    int LA214_0 = input.LA(1);

                    if ( (LA214_0==134) ) {
                        alt214=1;
                    }


                    switch (alt214) {
                	case 1 :
                	    // jkit/java/Java.g:865:30: '[' ']'
                	    {
                	    match(input,134,FOLLOW_134_in_synpred250_Java6477); if (state.failed) return ;
                	    match(input,135,FOLLOW_135_in_synpred250_Java6479); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop214;
                    }
                } while (true);


                }
                break;
            case 2 :
                // jkit/java/Java.g:866:9: ( '[' ']' )+ arrayInitializer
                {
                // jkit/java/Java.g:866:9: ( '[' ']' )+
                int cnt215=0;
                loop215:
                do {
                    int alt215=2;
                    int LA215_0 = input.LA(1);

                    if ( (LA215_0==134) ) {
                        alt215=1;
                    }


                    switch (alt215) {
                	case 1 :
                	    // jkit/java/Java.g:866:10: '[' ']'
                	    {
                	    match(input,134,FOLLOW_134_in_synpred250_Java6512); if (state.failed) return ;
                	    match(input,135,FOLLOW_135_in_synpred250_Java6514); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt215 >= 1 ) break loop215;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(215, input);
                            throw eee;
                    }
                    cnt215++;
                } while (true);

                pushFollow(FOLLOW_arrayInitializer_in_synpred250_Java6518);
                arrayInitializer();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // jkit/java/Java.g:867:9: classCreatorRest
                {
                pushFollow(FOLLOW_classCreatorRest_in_synpred250_Java6547);
                classCreatorRest();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred250_Java

    // $ANTLR start synpred251_Java
    public final void synpred251_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:869:9: ( type '.' 'class' )
        // jkit/java/Java.g:869:9: type '.' 'class'
        {
        pushFollow(FOLLOW_type_in_synpred251_Java6579);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,120,FOLLOW_120_in_synpred251_Java6581); if (state.failed) return ;
        match(input,122,FOLLOW_122_in_synpred251_Java6583); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_Java

    // Delegated rules

    public final boolean synpred251_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred143_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA55 dfa55 = new DFA55(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA62 dfa62 = new DFA62(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA115 dfa115 = new DFA115(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA150 dfa150 = new DFA150(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA162 dfa162 = new DFA162(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA167 dfa167 = new DFA167(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA207 dfa207 = new DFA207(this);
    protected DFA204 dfa204 = new DFA204(this);
    protected DFA216 dfa216 = new DFA216(this);
    protected DFA213 dfa213 = new DFA213(this);
    static final String DFA1_eotS =
        "\26\uffff";
    static final String DFA1_eofS =
        "\26\uffff";
    static final String DFA1_minS =
        "\1\11\1\141\22\uffff\1\0\1\uffff";
    static final String DFA1_maxS =
        "\1\u00a3\1\u0083\22\uffff\1\0\1\uffff";
    static final String DFA1_acceptS =
        "\2\uffff\1\2\22\uffff\1\1";
    static final String DFA1_specialS =
        "\24\uffff\1\0\1\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\2\152\uffff\4\2\2\uffff\1\2\10\uffff\1\2\5\uffff\12\2\20"+
            "\uffff\1\1",
            "\1\24\41\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "204:4: ( annotations )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA1_20 = input.LA(1);

                         
                        int index1_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Java()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index1_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 1, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA2_eotS =
        "\23\uffff";
    static final String DFA2_eofS =
        "\23\uffff";
    static final String DFA2_minS =
        "\1\11\22\uffff";
    static final String DFA2_maxS =
        "\1\u00a3\22\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\1\1\2\20\uffff";
    static final String DFA2_specialS =
        "\23\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\2\152\uffff\1\1\3\2\2\uffff\1\2\10\uffff\1\2\5\uffff\12\2"+
            "\20\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "204:17: ( packageDeclaration )?";
        }
    }
    static final String DFA3_eotS =
        "\22\uffff";
    static final String DFA3_eofS =
        "\22\uffff";
    static final String DFA3_minS =
        "\1\11\21\uffff";
    static final String DFA3_maxS =
        "\1\u00a3\21\uffff";
    static final String DFA3_acceptS =
        "\1\uffff\1\2\17\uffff\1\1";
    static final String DFA3_specialS =
        "\22\uffff}>";
    static final String[] DFA3_transitionS = {
            "\1\1\153\uffff\1\1\1\21\1\1\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\1\20\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "()* loopback of 204:37: ( importDeclaration )*";
        }
    }
    static final String DFA4_eotS =
        "\22\uffff";
    static final String DFA4_eofS =
        "\1\1\21\uffff";
    static final String DFA4_minS =
        "\1\11\21\uffff";
    static final String DFA4_maxS =
        "\1\u00a3\21\uffff";
    static final String DFA4_acceptS =
        "\1\uffff\1\2\1\1\17\uffff";
    static final String DFA4_specialS =
        "\22\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\2\153\uffff\1\2\1\uffff\1\2\2\uffff\1\2\10\uffff\1\2\5\uffff"+
            "\12\2\20\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 204:56: ( typeDeclaration )+";
        }
    }
    static final String DFA8_eotS =
        "\21\uffff";
    static final String DFA8_eofS =
        "\21\uffff";
    static final String DFA8_minS =
        "\1\11\20\uffff";
    static final String DFA8_maxS =
        "\1\u00a3\20\uffff";
    static final String DFA8_acceptS =
        "\1\uffff\1\1\16\uffff\1\2";
    static final String DFA8_specialS =
        "\21\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\1\153\uffff\1\20\1\uffff\1\1\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\1\20\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "216:1: typeDeclaration : ( classOrInterfaceDeclaration | ';' );";
        }
    }
    static final String DFA9_eotS =
        "\22\uffff";
    static final String DFA9_eofS =
        "\22\uffff";
    static final String DFA9_minS =
        "\1\11\3\uffff\1\141\15\uffff";
    static final String DFA9_maxS =
        "\1\u00a3\3\uffff\1\u0083\15\uffff";
    static final String DFA9_acceptS =
        "\1\uffff\1\2\3\uffff\1\1\14\uffff";
    static final String DFA9_specialS =
        "\22\uffff}>";
    static final String[] DFA9_transitionS = {
            "\1\1\155\uffff\1\5\2\uffff\1\1\10\uffff\1\1\5\uffff\12\5\20"+
            "\uffff\1\4",
            "",
            "",
            "",
            "\1\5\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
    static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
    static final char[] DFA9_min = DFA.unpackEncodedStringToUnsignedChars(DFA9_minS);
    static final char[] DFA9_max = DFA.unpackEncodedStringToUnsignedChars(DFA9_maxS);
    static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
    static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
    static final short[][] DFA9_transition;

    static {
        int numStates = DFA9_transitionS.length;
        DFA9_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
        }
    }

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = DFA9_eot;
            this.eof = DFA9_eof;
            this.min = DFA9_min;
            this.max = DFA9_max;
            this.accept = DFA9_accept;
            this.special = DFA9_special;
            this.transition = DFA9_transition;
        }
        public String getDescription() {
            return "()* loopback of 222:4: ( modifier )*";
        }
    }
    static final String DFA24_eotS =
        "\30\uffff";
    static final String DFA24_eofS =
        "\1\1\27\uffff";
    static final String DFA24_minS =
        "\1\11\27\uffff";
    static final String DFA24_maxS =
        "\1\u00a3\27\uffff";
    static final String DFA24_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\24\uffff";
    static final String DFA24_specialS =
        "\30\uffff}>";
    static final String[] DFA24_transitionS = {
            "\1\3\127\uffff\1\3\23\uffff\1\3\1\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\3\3\uffff\1\3\1\1\2\3\4\uffff\22\3\10\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_eotS);
    static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_eofS);
    static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_minS);
    static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_maxS);
    static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_acceptS);
    static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_specialS);
    static final short[][] DFA24_transition;

    static {
        int numStates = DFA24_transitionS.length;
        DFA24_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA24_transition[i] = DFA.unpackEncodedString(DFA24_transitionS[i]);
        }
    }

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = DFA24_eot;
            this.eof = DFA24_eof;
            this.min = DFA24_min;
            this.max = DFA24_max;
            this.accept = DFA24_accept;
            this.special = DFA24_special;
            this.transition = DFA24_transition;
        }
        public String getDescription() {
            return "()* loopback of 265:8: ( classBodyDeclaration )*";
        }
    }
    static final String DFA29_eotS =
        "\27\uffff";
    static final String DFA29_eofS =
        "\27\uffff";
    static final String DFA29_minS =
        "\1\11\26\uffff";
    static final String DFA29_maxS =
        "\1\u00a3\26\uffff";
    static final String DFA29_acceptS =
        "\1\uffff\1\2\1\1\24\uffff";
    static final String DFA29_specialS =
        "\27\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\2\127\uffff\1\2\23\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\1\2\2\4\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "()* loopback of 282:9: ( classBodyDeclaration )*";
        }
    }
    static final String DFA30_eotS =
        "\25\uffff";
    static final String DFA30_eofS =
        "\25\uffff";
    static final String DFA30_minS =
        "\1\141\24\uffff";
    static final String DFA30_maxS =
        "\1\u00a3\24\uffff";
    static final String DFA30_acceptS =
        "\1\uffff\1\2\1\1\22\uffff";
    static final String DFA30_specialS =
        "\25\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\2\23\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\4\uffff"+
            "\1\1\2\2\4\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "()* loopback of 286:9: ( interfaceBodyDeclaration )*";
        }
    }
    static final String DFA34_eotS =
        "\53\uffff";
    static final String DFA34_eofS =
        "\53\uffff";
    static final String DFA34_minS =
        "\1\11\1\uffff\1\11\23\uffff\1\0\24\uffff";
    static final String DFA34_maxS =
        "\1\u00a3\1\uffff\1\u00a3\23\uffff\1\0\24\uffff";
    static final String DFA34_acceptS =
        "\1\uffff\1\1\1\uffff\1\3\1\4\45\uffff\1\2";
    static final String DFA34_specialS =
        "\26\uffff\1\0\24\uffff}>";
    static final String[] DFA34_transitionS = {
            "\1\4\127\uffff\1\4\23\uffff\1\1\1\uffff\1\2\2\uffff\1\4\2\uffff"+
            "\1\4\3\uffff\1\3\1\uffff\2\4\4\uffff\22\4\10\uffff\1\4",
            "",
            "\1\4\127\uffff\1\4\25\uffff\1\4\2\uffff\1\4\2\uffff\1\4\3\uffff"+
            "\1\26\1\uffff\2\4\4\uffff\22\4\10\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA34_eot = DFA.unpackEncodedString(DFA34_eotS);
    static final short[] DFA34_eof = DFA.unpackEncodedString(DFA34_eofS);
    static final char[] DFA34_min = DFA.unpackEncodedStringToUnsignedChars(DFA34_minS);
    static final char[] DFA34_max = DFA.unpackEncodedStringToUnsignedChars(DFA34_maxS);
    static final short[] DFA34_accept = DFA.unpackEncodedString(DFA34_acceptS);
    static final short[] DFA34_special = DFA.unpackEncodedString(DFA34_specialS);
    static final short[][] DFA34_transition;

    static {
        int numStates = DFA34_transitionS.length;
        DFA34_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA34_transition[i] = DFA.unpackEncodedString(DFA34_transitionS[i]);
        }
    }

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = DFA34_eot;
            this.eof = DFA34_eof;
            this.min = DFA34_min;
            this.max = DFA34_max;
            this.accept = DFA34_accept;
            this.special = DFA34_special;
            this.transition = DFA34_transition;
        }
        public String getDescription() {
            return "289:1: classBodyDeclaration : ( ';' | 'static' block -> ^( STATIC block ) | ( 'static' )? block -> block | ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA34_22 = input.LA(1);

                         
                        int index34_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Java()) ) {s = 42;}

                        else if ( (synpred35_Java()) ) {s = 3;}

                         
                        input.seek(index34_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 34, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA32_eotS =
        "\26\uffff";
    static final String DFA32_eofS =
        "\26\uffff";
    static final String DFA32_minS =
        "\1\11\5\uffff\1\141\17\uffff";
    static final String DFA32_maxS =
        "\1\u00a3\5\uffff\1\u0083\17\uffff";
    static final String DFA32_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\14\uffff";
    static final String DFA32_specialS =
        "\26\uffff}>";
    static final String[] DFA32_transitionS = {
            "\1\1\127\uffff\1\1\25\uffff\1\11\2\uffff\1\1\2\uffff\1\1\5\uffff"+
            "\2\1\4\uffff\12\11\10\1\10\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "\1\11\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "()* loopback of 293:4: ( modifier )*";
        }
    }
    static final String DFA33_eotS =
        "\22\uffff";
    static final String DFA33_eofS =
        "\22\uffff";
    static final String DFA33_minS =
        "\1\11\1\uffff\2\141\5\uffff\4\0\1\uffff\2\0\2\uffff";
    static final String DFA33_maxS =
        "\1\u00a3\1\uffff\1\u009d\1\u0086\5\uffff\4\0\1\uffff\2\0\2\uffff";
    static final String DFA33_acceptS =
        "\1\uffff\1\1\2\uffff\1\4\1\6\1\uffff\1\7\1\10\4\uffff\1\5\2\uffff"+
        "\1\2\1\3";
    static final String DFA33_specialS =
        "\11\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\2\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\10\127\uffff\1\2\30\uffff\1\7\2\uffff\1\1\5\uffff\1\5\1\4"+
            "\16\uffff\10\3\10\uffff\1\5",
            "",
            "\1\14\26\uffff\1\12\4\uffff\1\11\10\uffff\1\13\26\uffff\1\15",
            "\1\17\44\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "293:14: ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_9 = input.LA(1);

                         
                        int index33_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 16;}

                        else if ( (synpred39_Java()) ) {s = 17;}

                         
                        input.seek(index33_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA33_10 = input.LA(1);

                         
                        int index33_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 16;}

                        else if ( (synpred39_Java()) ) {s = 17;}

                         
                        input.seek(index33_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA33_11 = input.LA(1);

                         
                        int index33_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 16;}

                        else if ( (synpred39_Java()) ) {s = 17;}

                         
                        input.seek(index33_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA33_12 = input.LA(1);

                         
                        int index33_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 16;}

                        else if ( (synpred39_Java()) ) {s = 17;}

                         
                        input.seek(index33_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA33_14 = input.LA(1);

                         
                        int index33_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 16;}

                        else if ( (synpred39_Java()) ) {s = 17;}

                         
                        input.seek(index33_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA33_15 = input.LA(1);

                         
                        int index33_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 16;}

                        else if ( (synpred39_Java()) ) {s = 17;}

                         
                        input.seek(index33_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA38_eotS =
        "\24\uffff";
    static final String DFA38_eofS =
        "\24\uffff";
    static final String DFA38_minS =
        "\1\141\23\uffff";
    static final String DFA38_maxS =
        "\1\u00a3\23\uffff";
    static final String DFA38_acceptS =
        "\1\uffff\1\1\21\uffff\1\2";
    static final String DFA38_specialS =
        "\24\uffff}>";
    static final String[] DFA38_transitionS = {
            "\1\1\23\uffff\1\23\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\5\uffff"+
            "\2\1\4\uffff\22\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "323:1: interfaceBodyDeclaration : ( ( modifier )* ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) ) | ';' );";
        }
    }
    static final String DFA36_eotS =
        "\25\uffff";
    static final String DFA36_eofS =
        "\25\uffff";
    static final String DFA36_minS =
        "\1\141\5\uffff\1\141\16\uffff";
    static final String DFA36_maxS =
        "\1\u00a3\5\uffff\1\u0083\16\uffff";
    static final String DFA36_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\14\uffff";
    static final String DFA36_specialS =
        "\25\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\1\25\uffff\1\10\2\uffff\1\1\2\uffff\1\1\5\uffff\2\1\4\uffff"+
            "\12\10\10\1\10\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "\1\10\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "()* loopback of 324:4: ( modifier )*";
        }
    }
    static final String DFA37_eotS =
        "\20\uffff";
    static final String DFA37_eofS =
        "\20\uffff";
    static final String DFA37_minS =
        "\3\141\5\uffff\6\0\2\uffff";
    static final String DFA37_maxS =
        "\1\u00a3\2\u0086\5\uffff\6\0\2\uffff";
    static final String DFA37_acceptS =
        "\3\uffff\1\3\1\4\1\5\1\uffff\1\6\6\uffff\1\1\1\2";
    static final String DFA37_specialS =
        "\10\uffff\1\0\1\1\1\2\1\3\1\4\1\5\2\uffff}>";
    static final String[] DFA37_transitionS = {
            "\1\1\30\uffff\1\7\2\uffff\1\3\5\uffff\1\5\1\4\16\uffff\10\2"+
            "\10\uffff\1\5",
            "\1\13\26\uffff\1\11\4\uffff\1\10\10\uffff\1\12",
            "\1\15\44\uffff\1\14",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "324:14: ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA37_8 = input.LA(1);

                         
                        int index37_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_Java()) ) {s = 14;}

                        else if ( (synpred48_Java()) ) {s = 15;}

                         
                        input.seek(index37_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA37_9 = input.LA(1);

                         
                        int index37_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_Java()) ) {s = 14;}

                        else if ( (synpred48_Java()) ) {s = 15;}

                         
                        input.seek(index37_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA37_10 = input.LA(1);

                         
                        int index37_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_Java()) ) {s = 14;}

                        else if ( (synpred48_Java()) ) {s = 15;}

                         
                        input.seek(index37_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA37_11 = input.LA(1);

                         
                        int index37_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_Java()) ) {s = 14;}

                        else if ( (synpred48_Java()) ) {s = 15;}

                         
                        input.seek(index37_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA37_12 = input.LA(1);

                         
                        int index37_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_Java()) ) {s = 14;}

                        else if ( (synpred48_Java()) ) {s = 15;}

                         
                        input.seek(index37_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA37_13 = input.LA(1);

                         
                        int index37_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_Java()) ) {s = 14;}

                        else if ( (synpred48_Java()) ) {s = 15;}

                         
                        input.seek(index37_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 37, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA54_eotS =
        "\25\uffff";
    static final String DFA54_eofS =
        "\25\uffff";
    static final String DFA54_minS =
        "\1\141\24\uffff";
    static final String DFA54_maxS =
        "\1\u00c7\24\uffff";
    static final String DFA54_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA54_specialS =
        "\25\uffff}>";
    static final String[] DFA54_transitionS = {
            "\7\2\25\uffff\1\2\3\uffff\1\1\2\uffff\1\2\16\uffff\10\2\1\uffff"+
            "\2\2\2\uffff\3\2\22\uffff\2\2\14\uffff\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "404:1: variableInitializer : ( arrayInitializer | expression );";
        }
    }
    static final String DFA57_eotS =
        "\26\uffff";
    static final String DFA57_eofS =
        "\26\uffff";
    static final String DFA57_minS =
        "\1\141\25\uffff";
    static final String DFA57_maxS =
        "\1\u00c7\25\uffff";
    static final String DFA57_acceptS =
        "\1\uffff\1\1\23\uffff\1\2";
    static final String DFA57_specialS =
        "\26\uffff}>";
    static final String[] DFA57_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\1\1\25\1\uffff\1\1\16\uffff\10\1"+
            "\1\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "410:8: ( variableInitializer ( ',' variableInitializer )* ( ',' )? )?";
        }
    }
    static final String DFA55_eotS =
        "\30\uffff";
    static final String DFA55_eofS =
        "\30\uffff";
    static final String DFA55_minS =
        "\1\176\1\141\26\uffff";
    static final String DFA55_maxS =
        "\1\u0082\1\u00c7\26\uffff";
    static final String DFA55_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\23\uffff";
    static final String DFA55_specialS =
        "\30\uffff}>";
    static final String[] DFA55_transitionS = {
            "\1\1\3\uffff\1\2",
            "\7\4\25\uffff\1\4\3\uffff\1\4\1\2\1\uffff\1\4\16\uffff\10\4"+
            "\1\uffff\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA55_eot = DFA.unpackEncodedString(DFA55_eotS);
    static final short[] DFA55_eof = DFA.unpackEncodedString(DFA55_eofS);
    static final char[] DFA55_min = DFA.unpackEncodedStringToUnsignedChars(DFA55_minS);
    static final char[] DFA55_max = DFA.unpackEncodedStringToUnsignedChars(DFA55_maxS);
    static final short[] DFA55_accept = DFA.unpackEncodedString(DFA55_acceptS);
    static final short[] DFA55_special = DFA.unpackEncodedString(DFA55_specialS);
    static final short[][] DFA55_transition;

    static {
        int numStates = DFA55_transitionS.length;
        DFA55_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA55_transition[i] = DFA.unpackEncodedString(DFA55_transitionS[i]);
        }
    }

    class DFA55 extends DFA {

        public DFA55(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = DFA55_eot;
            this.eof = DFA55_eof;
            this.min = DFA55_min;
            this.max = DFA55_max;
            this.accept = DFA55_accept;
            this.special = DFA55_special;
            this.transition = DFA55_transition;
        }
        public String getDescription() {
            return "()* loopback of 410:29: ( ',' variableInitializer )*";
        }
    }
    static final String DFA58_eotS =
        "\15\uffff";
    static final String DFA58_eofS =
        "\15\uffff";
    static final String DFA58_minS =
        "\1\167\14\uffff";
    static final String DFA58_maxS =
        "\1\u00a3\14\uffff";
    static final String DFA58_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA58_specialS =
        "\15\uffff}>";
    static final String[] DFA58_transitionS = {
            "\1\5\21\uffff\1\2\1\3\1\4\1\6\1\7\1\10\1\11\1\12\1\13\1\14\20"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "413:1: modifier : ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' );";
        }
    }
    static final String DFA61_eotS =
        "\43\uffff";
    static final String DFA61_eofS =
        "\1\1\42\uffff";
    static final String DFA61_minS =
        "\1\141\37\uffff\1\141\2\uffff";
    static final String DFA61_maxS =
        "\1\u00c1\37\uffff\1\172\2\uffff";
    static final String DFA61_acceptS =
        "\1\uffff\1\2\40\uffff\1\1";
    static final String DFA61_specialS =
        "\43\uffff}>";
    static final String[] DFA61_transitionS = {
            "\1\1\23\uffff\1\1\2\uffff\1\40\1\1\2\uffff\7\1\3\uffff\3\1\22"+
            "\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\42\30\uffff\1\1",
            "",
            ""
    };

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "()* loopback of 442:20: ( '.' i+= refComponent )*";
        }
    }
    static final String DFA62_eotS =
        "\41\uffff";
    static final String DFA62_eofS =
        "\1\1\40\uffff";
    static final String DFA62_minS =
        "\1\141\40\uffff";
    static final String DFA62_maxS =
        "\1\u00c1\40\uffff";
    static final String DFA62_acceptS =
        "\1\uffff\1\2\36\uffff\1\1";
    static final String DFA62_specialS =
        "\41\uffff}>";
    static final String[] DFA62_transitionS = {
            "\1\1\23\uffff\1\1\2\uffff\2\1\2\uffff\7\1\3\uffff\1\40\2\1\22"+
            "\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA62_eot = DFA.unpackEncodedString(DFA62_eotS);
    static final short[] DFA62_eof = DFA.unpackEncodedString(DFA62_eofS);
    static final char[] DFA62_min = DFA.unpackEncodedStringToUnsignedChars(DFA62_minS);
    static final char[] DFA62_max = DFA.unpackEncodedStringToUnsignedChars(DFA62_maxS);
    static final short[] DFA62_accept = DFA.unpackEncodedString(DFA62_acceptS);
    static final short[] DFA62_special = DFA.unpackEncodedString(DFA62_specialS);
    static final short[][] DFA62_transition;

    static {
        int numStates = DFA62_transitionS.length;
        DFA62_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA62_transition[i] = DFA.unpackEncodedString(DFA62_transitionS[i]);
        }
    }

    class DFA62 extends DFA {

        public DFA62(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 62;
            this.eot = DFA62_eot;
            this.eof = DFA62_eof;
            this.min = DFA62_min;
            this.max = DFA62_max;
            this.accept = DFA62_accept;
            this.special = DFA62_special;
            this.transition = DFA62_transition;
        }
        public String getDescription() {
            return "()* loopback of 442:43: ( '[' ']' )*";
        }
    }
    static final String DFA63_eotS =
        "\41\uffff";
    static final String DFA63_eofS =
        "\1\1\40\uffff";
    static final String DFA63_minS =
        "\1\141\40\uffff";
    static final String DFA63_maxS =
        "\1\u00c1\40\uffff";
    static final String DFA63_acceptS =
        "\1\uffff\1\2\36\uffff\1\1";
    static final String DFA63_specialS =
        "\41\uffff}>";
    static final String[] DFA63_transitionS = {
            "\1\1\23\uffff\1\1\2\uffff\2\1\2\uffff\7\1\3\uffff\1\40\2\1\22"+
            "\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "()* loopback of 443:18: ( '[' ']' )*";
        }
    }
    static final String DFA65_eotS =
        "\46\uffff";
    static final String DFA65_eofS =
        "\1\2\45\uffff";
    static final String DFA65_minS =
        "\2\141\44\uffff";
    static final String DFA65_maxS =
        "\1\u00c1\1\u009b\44\uffff";
    static final String DFA65_acceptS =
        "\2\uffff\1\2\40\uffff\1\1\2\uffff";
    static final String DFA65_specialS =
        "\46\uffff}>";
    static final String[] DFA65_transitionS = {
            "\1\2\23\uffff\1\2\2\uffff\2\2\2\uffff\1\2\1\1\5\2\3\uffff\3"+
            "\2\22\uffff\1\2\1\uffff\3\2\6\uffff\1\2\16\uffff\15\2",
            "\1\43\33\uffff\1\2\25\uffff\11\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "447:18: ( typeArguments )?";
        }
    }
    static final String DFA70_eotS =
        "\52\uffff";
    static final String DFA70_eofS =
        "\1\4\51\uffff";
    static final String DFA70_minS =
        "\1\173\1\uffff\3\0\45\uffff";
    static final String DFA70_maxS =
        "\1\u009c\1\uffff\3\0\45\uffff";
    static final String DFA70_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\44\uffff";
    static final String DFA70_specialS =
        "\2\uffff\1\0\1\1\1\2\45\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\1\2\uffff\1\2\1\3\34\uffff\1\5",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "472:8: ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA70_2 = input.LA(1);

                         
                        int index70_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index70_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA70_3 = input.LA(1);

                         
                        int index70_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index70_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA70_4 = input.LA(1);

                         
                        int index70_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index70_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 70, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA79_eotS =
        "\30\uffff";
    static final String DFA79_eofS =
        "\1\1\27\uffff";
    static final String DFA79_minS =
        "\1\11\2\uffff\1\141\22\uffff\1\0\1\uffff";
    static final String DFA79_maxS =
        "\1\u00a3\2\uffff\1\u0083\22\uffff\1\0\1\uffff";
    static final String DFA79_acceptS =
        "\1\uffff\1\2\25\uffff\1\1";
    static final String DFA79_specialS =
        "\26\uffff\1\0\1\uffff}>";
    static final String[] DFA79_transitionS = {
            "\1\1\127\uffff\1\1\22\uffff\4\1\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\1\20\uffff\1\3",
            "",
            "",
            "\1\26\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_eotS);
    static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_eofS);
    static final char[] DFA79_min = DFA.unpackEncodedStringToUnsignedChars(DFA79_minS);
    static final char[] DFA79_max = DFA.unpackEncodedStringToUnsignedChars(DFA79_maxS);
    static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_acceptS);
    static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_specialS);
    static final short[][] DFA79_transition;

    static {
        int numStates = DFA79_transitionS.length;
        DFA79_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA79_transition[i] = DFA.unpackEncodedString(DFA79_transitionS[i]);
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;
        }
        public String getDescription() {
            return "()+ loopback of 525:4: ( annotation )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA79_22 = input.LA(1);

                         
                        int index79_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_Java()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index79_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 79, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA81_eotS =
        "\34\uffff";
    static final String DFA81_eofS =
        "\1\2\33\uffff";
    static final String DFA81_minS =
        "\1\11\33\uffff";
    static final String DFA81_maxS =
        "\1\u00a3\33\uffff";
    static final String DFA81_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA81_specialS =
        "\34\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\2\127\uffff\1\2\22\uffff\4\2\2\uffff\1\2\2\uffff\2\2\3\uffff"+
            "\3\2\4\uffff\22\2\2\uffff\1\1\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "529:23: ( '(' ( elementValuePairs )? ')' )?";
        }
    }
    static final String DFA80_eotS =
        "\27\uffff";
    static final String DFA80_eofS =
        "\27\uffff";
    static final String DFA80_minS =
        "\1\141\26\uffff";
    static final String DFA80_maxS =
        "\1\u00c7\26\uffff";
    static final String DFA80_acceptS =
        "\1\uffff\1\1\24\uffff\1\2";
    static final String DFA80_specialS =
        "\27\uffff}>";
    static final String[] DFA80_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\1\2\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\1\26\1\uffff\4\1\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "529:28: ( elementValuePairs )?";
        }
    }
    static final String DFA82_eotS =
        "\35\uffff";
    static final String DFA82_eofS =
        "\1\1\34\uffff";
    static final String DFA82_minS =
        "\1\11\34\uffff";
    static final String DFA82_maxS =
        "\1\u00a3\34\uffff";
    static final String DFA82_acceptS =
        "\1\uffff\1\2\32\uffff\1\1";
    static final String DFA82_specialS =
        "\35\uffff}>";
    static final String[] DFA82_transitionS = {
            "\1\1\127\uffff\1\1\22\uffff\4\1\1\34\1\uffff\1\1\2\uffff\2\1"+
            "\3\uffff\3\1\4\uffff\22\1\2\uffff\2\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "()* loopback of 533:15: ( '.' Identifier )*";
        }
    }
    static final String DFA84_eotS =
        "\57\uffff";
    static final String DFA84_eofS =
        "\1\uffff\1\2\55\uffff";
    static final String DFA84_minS =
        "\1\141\1\170\55\uffff";
    static final String DFA84_maxS =
        "\1\u00c7\1\u00c4\55\uffff";
    static final String DFA84_acceptS =
        "\2\uffff\1\2\23\uffff\1\1\30\uffff";
    static final String DFA84_specialS =
        "\57\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\1\6\2\25\uffff\1\2\3\uffff\1\2\2\uffff\1\2\16\uffff\10\2"+
            "\1\uffff\2\2\2\uffff\4\2\21\uffff\2\2\14\uffff\5\2",
            "\2\2\3\uffff\4\2\5\uffff\1\2\1\uffff\1\26\22\uffff\1\2\1\uffff"+
            "\2\2\26\uffff\3\2\3\uffff\12\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "541:4: ( Identifier '=' )?";
        }
    }
    static final String DFA85_eotS =
        "\26\uffff";
    static final String DFA85_eofS =
        "\26\uffff";
    static final String DFA85_minS =
        "\1\141\25\uffff";
    static final String DFA85_maxS =
        "\1\u00c7\25\uffff";
    static final String DFA85_acceptS =
        "\1\uffff\1\1\22\uffff\1\2\1\3";
    static final String DFA85_specialS =
        "\26\uffff}>";
    static final String[] DFA85_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\25\2\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\2\uffff\3\1\1\24\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "544:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );";
        }
    }
    static final String DFA87_eotS =
        "\27\uffff";
    static final String DFA87_eofS =
        "\27\uffff";
    static final String DFA87_minS =
        "\1\141\26\uffff";
    static final String DFA87_maxS =
        "\1\u00c7\26\uffff";
    static final String DFA87_acceptS =
        "\1\uffff\1\1\24\uffff\1\2";
    static final String DFA87_specialS =
        "\27\uffff}>";
    static final String[] DFA87_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\1\1\26\1\uffff\1\1\16\uffff\10\1"+
            "\1\uffff\2\1\2\uffff\4\1\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "551:8: ( elementValue ( ',' elementValue )* )?";
        }
    }
    static final String DFA88_eotS =
        "\23\uffff";
    static final String DFA88_eofS =
        "\23\uffff";
    static final String DFA88_minS =
        "\1\11\22\uffff";
    static final String DFA88_maxS =
        "\1\u00a3\22\uffff";
    static final String DFA88_acceptS =
        "\1\uffff\1\1\20\uffff\1\2";
    static final String DFA88_specialS =
        "\23\uffff}>";
    static final String[] DFA88_transitionS = {
            "\1\1\127\uffff\1\1\25\uffff\1\1\2\uffff\1\1\7\uffff\1\22\1\1"+
            "\5\uffff\22\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "559:8: ( annotationTypeElementDeclarations )?";
        }
    }
    static final String DFA89_eotS =
        "\24\uffff";
    static final String DFA89_eofS =
        "\1\1\23\uffff";
    static final String DFA89_minS =
        "\1\11\23\uffff";
    static final String DFA89_maxS =
        "\1\u00a3\23\uffff";
    static final String DFA89_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\20\uffff";
    static final String DFA89_specialS =
        "\24\uffff}>";
    static final String[] DFA89_transitionS = {
            "\1\3\127\uffff\1\3\25\uffff\1\3\2\uffff\1\3\7\uffff\1\1\1\3"+
            "\5\uffff\22\3\10\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
    static final short[][] DFA89_transition;

    static {
        int numStates = DFA89_transitionS.length;
        DFA89_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;
        }
        public String getDescription() {
            return "()* loopback of 563:39: ( annotationTypeElementDeclaration )*";
        }
    }
    static final String DFA90_eotS =
        "\24\uffff";
    static final String DFA90_eofS =
        "\24\uffff";
    static final String DFA90_minS =
        "\1\11\4\uffff\1\141\16\uffff";
    static final String DFA90_maxS =
        "\1\u00a3\4\uffff\1\u0083\16\uffff";
    static final String DFA90_acceptS =
        "\1\uffff\1\2\5\uffff\1\1\14\uffff";
    static final String DFA90_specialS =
        "\24\uffff}>";
    static final String[] DFA90_transitionS = {
            "\1\1\127\uffff\1\1\25\uffff\1\7\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\7\10\1\10\uffff\1\5",
            "",
            "",
            "",
            "",
            "\1\7\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA90_eot = DFA.unpackEncodedString(DFA90_eotS);
    static final short[] DFA90_eof = DFA.unpackEncodedString(DFA90_eofS);
    static final char[] DFA90_min = DFA.unpackEncodedStringToUnsignedChars(DFA90_minS);
    static final char[] DFA90_max = DFA.unpackEncodedStringToUnsignedChars(DFA90_maxS);
    static final short[] DFA90_accept = DFA.unpackEncodedString(DFA90_acceptS);
    static final short[] DFA90_special = DFA.unpackEncodedString(DFA90_specialS);
    static final short[][] DFA90_transition;

    static {
        int numStates = DFA90_transitionS.length;
        DFA90_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA90_transition[i] = DFA.unpackEncodedString(DFA90_transitionS[i]);
        }
    }

    class DFA90 extends DFA {

        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = DFA90_eot;
            this.eof = DFA90_eof;
            this.min = DFA90_min;
            this.max = DFA90_max;
            this.accept = DFA90_accept;
            this.special = DFA90_special;
            this.transition = DFA90_transition;
        }
        public String getDescription() {
            return "()* loopback of 567:4: ( modifier )*";
        }
    }
    static final String DFA91_eotS =
        "\25\uffff";
    static final String DFA91_eofS =
        "\1\2\24\uffff";
    static final String DFA91_minS =
        "\1\11\24\uffff";
    static final String DFA91_maxS =
        "\1\u00a3\24\uffff";
    static final String DFA91_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA91_specialS =
        "\25\uffff}>";
    static final String[] DFA91_transitionS = {
            "\1\2\127\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA91_eot = DFA.unpackEncodedString(DFA91_eotS);
    static final short[] DFA91_eof = DFA.unpackEncodedString(DFA91_eofS);
    static final char[] DFA91_min = DFA.unpackEncodedStringToUnsignedChars(DFA91_minS);
    static final char[] DFA91_max = DFA.unpackEncodedStringToUnsignedChars(DFA91_maxS);
    static final short[] DFA91_accept = DFA.unpackEncodedString(DFA91_acceptS);
    static final short[] DFA91_special = DFA.unpackEncodedString(DFA91_specialS);
    static final short[][] DFA91_transition;

    static {
        int numStates = DFA91_transitionS.length;
        DFA91_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA91_transition[i] = DFA.unpackEncodedString(DFA91_transitionS[i]);
        }
    }

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = DFA91_eot;
            this.eof = DFA91_eof;
            this.min = DFA91_min;
            this.max = DFA91_max;
            this.accept = DFA91_accept;
            this.special = DFA91_special;
            this.transition = DFA91_transition;
        }
        public String getDescription() {
            return "572:23: ( ';' )?";
        }
    }
    static final String DFA92_eotS =
        "\25\uffff";
    static final String DFA92_eofS =
        "\1\2\24\uffff";
    static final String DFA92_minS =
        "\1\11\24\uffff";
    static final String DFA92_maxS =
        "\1\u00a3\24\uffff";
    static final String DFA92_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA92_specialS =
        "\25\uffff}>";
    static final String[] DFA92_transitionS = {
            "\1\2\127\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "573:27: ( ';' )?";
        }
    }
    static final String DFA93_eotS =
        "\25\uffff";
    static final String DFA93_eofS =
        "\1\2\24\uffff";
    static final String DFA93_minS =
        "\1\11\24\uffff";
    static final String DFA93_maxS =
        "\1\u00a3\24\uffff";
    static final String DFA93_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA93_specialS =
        "\25\uffff}>";
    static final String[] DFA93_transitionS = {
            "\1\2\127\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "574:22: ( ';' )?";
        }
    }
    static final String DFA94_eotS =
        "\25\uffff";
    static final String DFA94_eofS =
        "\1\2\24\uffff";
    static final String DFA94_minS =
        "\1\11\24\uffff";
    static final String DFA94_maxS =
        "\1\u00a3\24\uffff";
    static final String DFA94_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA94_specialS =
        "\25\uffff}>";
    static final String[] DFA94_transitionS = {
            "\1\2\127\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "575:32: ( ';' )?";
        }
    }
    static final String DFA98_eotS =
        "\61\uffff";
    static final String DFA98_eofS =
        "\61\uffff";
    static final String DFA98_minS =
        "\1\11\60\uffff";
    static final String DFA98_maxS =
        "\1\u00c7\60\uffff";
    static final String DFA98_acceptS =
        "\1\uffff\1\2\1\1\56\uffff";
    static final String DFA98_specialS =
        "\61\uffff}>";
    static final String[] DFA98_transitionS = {
            "\1\2\127\uffff\7\2\15\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\1\2\2\4\uffff\22\2\1\uffff\2\2\2\uffff\4"+
            "\2\1\uffff\1\2\1\uffff\1\2\1\uffff\4\2\1\uffff\5\2\2\uffff\2"+
            "\2\14\uffff\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "()* loopback of 598:8: ( blockStatement )*";
        }
    }
    static final String DFA99_eotS =
        "\162\uffff";
    static final String DFA99_eofS =
        "\162\uffff";
    static final String DFA99_minS =
        "\2\11\3\141\6\uffff\1\11\47\uffff\1\0\5\uffff\1\0\10\uffff\1\0\1"+
        "\uffff\3\0\30\uffff\1\0\22\uffff";
    static final String DFA99_maxS =
        "\1\u00c7\1\u00a3\1\u0083\1\u00c4\1\u0086\6\uffff\1\u00a3\47\uffff"+
        "\1\0\5\uffff\1\0\10\uffff\1\0\1\uffff\3\0\30\uffff\1\0\22\uffff";
    static final String DFA99_acceptS =
        "\5\uffff\1\2\14\uffff\1\3\54\uffff\1\1\62\uffff";
    static final String DFA99_specialS =
        "\63\uffff\1\0\5\uffff\1\1\10\uffff\1\2\1\uffff\1\3\1\4\1\5\30\uffff"+
        "\1\6\22\uffff}>";
    static final String[] DFA99_transitionS = {
            "\1\5\127\uffff\1\3\6\22\15\uffff\1\22\1\uffff\1\5\2\uffff\1"+
            "\5\2\uffff\1\22\3\uffff\1\22\1\uffff\1\5\1\22\4\uffff\4\5\1"+
            "\1\1\5\1\13\3\5\10\4\1\uffff\2\22\2\uffff\3\22\1\2\1\uffff\1"+
            "\22\1\uffff\1\22\1\uffff\4\22\1\uffff\5\22\2\uffff\2\22\14\uffff"+
            "\5\22",
            "\1\5\127\uffff\1\77\25\uffff\1\5\2\uffff\1\5\10\uffff\1\5\5"+
            "\uffff\4\5\1\71\5\5\10\77\10\uffff\1\63",
            "\1\102\41\uffff\1\5",
            "\1\77\23\uffff\1\22\2\uffff\1\105\1\22\3\uffff\1\104\1\uffff"+
            "\2\22\5\uffff\1\106\1\uffff\1\22\22\uffff\1\22\1\uffff\1\22"+
            "\10\uffff\1\22\16\uffff\20\22",
            "\1\77\26\uffff\1\22\15\uffff\1\137",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\5\155\uffff\1\5\2\uffff\1\5\10\uffff\1\5\5\uffff\12\5\12"+
            "\uffff\1\22\5\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "601:1: blockStatement : ( localVariableDeclaration | classOrInterfaceDeclaration | statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA99_51 = input.LA(1);

                         
                        int index99_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_Java()) ) {s = 63;}

                        else if ( (synpred143_Java()) ) {s = 5;}

                         
                        input.seek(index99_51);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA99_57 = input.LA(1);

                         
                        int index99_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_Java()) ) {s = 63;}

                        else if ( (synpred143_Java()) ) {s = 5;}

                         
                        input.seek(index99_57);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA99_66 = input.LA(1);

                         
                        int index99_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_Java()) ) {s = 63;}

                        else if ( (synpred143_Java()) ) {s = 5;}

                         
                        input.seek(index99_66);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA99_68 = input.LA(1);

                         
                        int index99_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_Java()) ) {s = 63;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index99_68);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA99_69 = input.LA(1);

                         
                        int index99_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_Java()) ) {s = 63;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index99_69);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA99_70 = input.LA(1);

                         
                        int index99_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_Java()) ) {s = 63;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index99_70);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA99_95 = input.LA(1);

                         
                        int index99_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_Java()) ) {s = 63;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index99_95);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 99, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA107_eotS =
        "\75\uffff";
    static final String DFA107_eofS =
        "\75\uffff";
    static final String DFA107_minS =
        "\1\141\35\uffff\1\165\36\uffff";
    static final String DFA107_maxS =
        "\1\u00c7\35\uffff\1\u00c4\36\uffff";
    static final String DFA107_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\22\uffff\1\20\32\uffff";
    static final String DFA107_specialS =
        "\75\uffff}>";
    static final String[] DFA107_transitionS = {
            "\1\36\6\17\15\uffff\1\16\7\uffff\1\17\3\uffff\1\1\2\uffff\1"+
            "\17\12\uffff\1\11\3\uffff\10\17\1\uffff\2\17\2\uffff\3\17\2"+
            "\uffff\1\2\1\uffff\1\3\1\uffff\1\4\1\5\1\6\1\7\1\uffff\1\10"+
            "\1\12\1\13\1\14\1\15\2\uffff\2\17\14\uffff\5\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\17\2\uffff\2\17\3\uffff\1\17\1\uffff\2\17\5\uffff\1\17\1"+
            "\uffff\1\17\22\uffff\1\17\1\uffff\1\17\10\uffff\1\42\16\uffff"+
            "\20\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "611:1: statement : ( block | lc= 'assert' expression ( ':' expression )? ';' -> ^( ASSERT[$lc] expression ( expression )? ) | lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> ^( IF[$lc] parExpression statement ( statement )? ) | lc= 'for' '(' forControl ')' statement -> ^( FOR[$lc] forControl statement ) | lc= 'while' parExpression statement -> ^( WHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'do' statement 'while' parExpression ';' -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) ) | lc= 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups ) | lc= 'synchronized' parExpression block -> ^( SYNCHRONIZED[$lc] parExpression block ) | lc= 'return' ( expression )? ';' -> ^( RETURN[$lc] ( expression )? ) | lc= 'throw' expression ';' -> ^( THROW[$lc] expression ) | lc= 'break' ( Identifier )? ';' -> ^( BREAK[$lc] ( Identifier )? ) | lc= 'continue' ( Identifier )? ';' -> ^( CONTINUE[$lc] ( Identifier )? ) | ';' -> ^( BLOCK ) | statementExpression ';' -> statementExpression | lc= Identifier ':' statement -> ^( LABEL[$lc] Identifier statement ) );";
        }
    }
    static final String DFA104_eotS =
        "\25\uffff";
    static final String DFA104_eofS =
        "\25\uffff";
    static final String DFA104_minS =
        "\1\141\24\uffff";
    static final String DFA104_maxS =
        "\1\u00c7\24\uffff";
    static final String DFA104_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA104_specialS =
        "\25\uffff}>";
    static final String[] DFA104_transitionS = {
            "\7\1\15\uffff\1\24\7\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "625:19: ( expression )?";
        }
    }
    static final String DFA108_eotS =
        "\67\uffff";
    static final String DFA108_eofS =
        "\1\1\66\uffff";
    static final String DFA108_minS =
        "\1\11\66\uffff";
    static final String DFA108_maxS =
        "\1\u00c7\66\uffff";
    static final String DFA108_acceptS =
        "\1\uffff\1\2\64\uffff\1\1";
    static final String DFA108_specialS =
        "\67\uffff}>";
    static final String[] DFA108_transitionS = {
            "\1\1\127\uffff\7\1\15\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff"+
            "\1\1\3\uffff\4\1\4\uffff\22\1\1\uffff\2\1\2\uffff\6\1\1\uffff"+
            "\14\1\1\66\3\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA108_eot = DFA.unpackEncodedString(DFA108_eotS);
    static final short[] DFA108_eof = DFA.unpackEncodedString(DFA108_eofS);
    static final char[] DFA108_min = DFA.unpackEncodedStringToUnsignedChars(DFA108_minS);
    static final char[] DFA108_max = DFA.unpackEncodedStringToUnsignedChars(DFA108_maxS);
    static final short[] DFA108_accept = DFA.unpackEncodedString(DFA108_acceptS);
    static final short[] DFA108_special = DFA.unpackEncodedString(DFA108_specialS);
    static final short[][] DFA108_transition;

    static {
        int numStates = DFA108_transitionS.length;
        DFA108_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA108_transition[i] = DFA.unpackEncodedString(DFA108_transitionS[i]);
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;
        }
        public String getDescription() {
            return "()* loopback of 635:16: ( catchClause )*";
        }
    }
    static final String DFA111_eotS =
        "\64\uffff";
    static final String DFA111_eofS =
        "\1\1\63\uffff";
    static final String DFA111_minS =
        "\1\11\63\uffff";
    static final String DFA111_maxS =
        "\1\u00c7\63\uffff";
    static final String DFA111_acceptS =
        "\1\uffff\1\2\3\uffff\1\1\56\uffff";
    static final String DFA111_specialS =
        "\64\uffff}>";
    static final String[] DFA111_transitionS = {
            "\1\5\127\uffff\7\5\15\uffff\1\5\1\uffff\1\5\2\uffff\1\5\2\uffff"+
            "\1\5\3\uffff\1\5\1\1\2\5\4\uffff\22\5\1\uffff\2\5\2\uffff\4"+
            "\5\1\1\1\5\1\uffff\1\5\1\uffff\4\5\1\uffff\5\5\1\uffff\1\1\2"+
            "\5\14\uffff\5\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "()* loopback of 651:16: ( blockStatement )*";
        }
    }
    static final String DFA112_eotS =
        "\27\uffff";
    static final String DFA112_eofS =
        "\27\uffff";
    static final String DFA112_minS =
        "\1\u00a4\1\141\1\uffff\1\0\23\uffff";
    static final String DFA112_maxS =
        "\1\u00b4\1\u00c7\1\uffff\1\0\23\uffff";
    static final String DFA112_acceptS =
        "\2\uffff\1\3\1\uffff\1\1\21\uffff\1\2";
    static final String DFA112_specialS =
        "\3\uffff\1\0\23\uffff}>";
    static final String[] DFA112_transitionS = {
            "\1\2\17\uffff\1\1",
            "\1\3\6\4\25\uffff\1\4\6\uffff\1\4\16\uffff\10\4\1\uffff\2\4"+
            "\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "654:1: switchLabel : (lc= 'case' constantExpression ':' -> ^( CASE[$lc] constantExpression ) | lc= 'case' enumConstantName ':' -> ^( CASE[$lc] enumConstantName ) | lc= 'default' ':' -> ^( DEFAULT ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA112_3 = input.LA(1);

                         
                        int index112_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred171_Java()) ) {s = 4;}

                        else if ( (synpred172_Java()) ) {s = 22;}

                         
                        input.seek(index112_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA117_eotS =
        "\u0085\uffff";
    static final String DFA117_eofS =
        "\u0085\uffff";
    static final String DFA117_minS =
        "\5\141\22\uffff\10\141\1\165\30\uffff\1\u0087\1\uffff\1\165\21\0"+
        "\2\uffff\3\0\23\uffff\1\0\1\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA117_maxS =
        "\1\u00c7\1\u00a3\1\141\1\u00c4\1\u0086\22\uffff\2\u0086\1\u00a3"+
        "\1\141\1\u00a3\3\u00c7\1\u00a6\30\uffff\1\u0087\1\uffff\1\u00a6"+
        "\21\0\2\uffff\3\0\23\uffff\1\0\1\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA117_acceptS =
        "\5\uffff\1\2\164\uffff\1\1\12\uffff";
    static final String DFA117_specialS =
        "\73\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\2\uffff\1\21\1\22\1\23\23\uffff\1\24\1\uffff"+
        "\1\25\30\uffff\1\26\5\uffff}>";
    static final String[] DFA117_transitionS = {
            "\1\3\6\5\15\uffff\1\5\7\uffff\1\5\6\uffff\1\5\10\uffff\1\1\5"+
            "\uffff\10\4\1\uffff\2\5\2\uffff\3\5\1\2\21\uffff\2\5\14\uffff"+
            "\5\5",
            "\1\27\53\uffff\1\31\5\uffff\10\30\10\uffff\1\32",
            "\1\33",
            "\1\37\23\uffff\1\5\2\uffff\1\35\1\5\3\uffff\1\34\3\5\5\uffff"+
            "\1\36\1\uffff\1\5\22\uffff\1\5\1\uffff\1\5\27\uffff\20\5",
            "\1\72\26\uffff\1\5\15\uffff\1\70",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\76\26\uffff\1\74\4\uffff\1\73\10\uffff\1\75",
            "\1\100\44\uffff\1\77",
            "\1\101\53\uffff\1\103\5\uffff\10\102\10\uffff\1\104",
            "\1\105",
            "\1\110\26\uffff\1\106\24\uffff\1\112\5\uffff\10\111\2\uffff"+
            "\1\107\5\uffff\1\113",
            "\1\116\6\5\25\uffff\1\5\6\uffff\1\5\3\uffff\1\5\12\uffff\10"+
            "\117\1\120\2\5\2\uffff\3\5\22\uffff\2\5\14\uffff\5\5",
            "\1\144\30\uffff\1\5\2\uffff\1\5\36\uffff\1\5\52\uffff\1\5",
            "\7\5\25\uffff\1\5\6\uffff\1\5\2\uffff\1\146\13\uffff\10\5\1"+
            "\uffff\2\5\2\uffff\3\5\22\uffff\2\5\14\uffff\5\5",
            "\1\5\10\uffff\1\5\7\uffff\1\5\1\uffff\1\5\35\uffff\1\172",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\177",
            "",
            "\1\5\10\uffff\1\5\7\uffff\1\5\1\uffff\1\5\35\uffff\1\172",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "664:1: forControl options {k=3; } : ( forVarControl -> ^( FOREACH forVarControl ) | ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )? -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA117_59 = input.LA(1);

                         
                        int index117_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_59);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA117_60 = input.LA(1);

                         
                        int index117_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_60);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA117_61 = input.LA(1);

                         
                        int index117_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_61);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA117_62 = input.LA(1);

                         
                        int index117_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_62);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA117_63 = input.LA(1);

                         
                        int index117_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_63);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA117_64 = input.LA(1);

                         
                        int index117_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_64);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA117_65 = input.LA(1);

                         
                        int index117_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_65);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA117_66 = input.LA(1);

                         
                        int index117_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_66);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA117_67 = input.LA(1);

                         
                        int index117_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_67);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA117_68 = input.LA(1);

                         
                        int index117_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_68);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA117_69 = input.LA(1);

                         
                        int index117_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_69);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA117_70 = input.LA(1);

                         
                        int index117_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_70);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA117_71 = input.LA(1);

                         
                        int index117_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_71);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA117_72 = input.LA(1);

                         
                        int index117_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_72);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA117_73 = input.LA(1);

                         
                        int index117_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_73);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA117_74 = input.LA(1);

                         
                        int index117_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_74);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA117_75 = input.LA(1);

                         
                        int index117_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_75);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA117_78 = input.LA(1);

                         
                        int index117_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_78);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA117_79 = input.LA(1);

                         
                        int index117_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_79);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA117_80 = input.LA(1);

                         
                        int index117_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_80);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA117_100 = input.LA(1);

                         
                        int index117_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_100);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA117_102 = input.LA(1);

                         
                        int index117_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_102);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA117_127 = input.LA(1);

                         
                        int index117_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index117_127);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA114_eotS =
        "\27\uffff";
    static final String DFA114_eofS =
        "\27\uffff";
    static final String DFA114_minS =
        "\1\141\26\uffff";
    static final String DFA114_maxS =
        "\1\u00c7\26\uffff";
    static final String DFA114_acceptS =
        "\1\uffff\1\1\24\uffff\1\2";
    static final String DFA114_specialS =
        "\27\uffff}>";
    static final String[] DFA114_transitionS = {
            "\7\1\15\uffff\1\26\7\uffff\1\1\6\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\10\1\1\uffff\2\1\2\uffff\4\1\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_eotS);
    static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_eofS);
    static final char[] DFA114_min = DFA.unpackEncodedStringToUnsignedChars(DFA114_minS);
    static final char[] DFA114_max = DFA.unpackEncodedStringToUnsignedChars(DFA114_maxS);
    static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_acceptS);
    static final short[] DFA114_special = DFA.unpackEncodedString(DFA114_specialS);
    static final short[][] DFA114_transition;

    static {
        int numStates = DFA114_transitionS.length;
        DFA114_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA114_transition[i] = DFA.unpackEncodedString(DFA114_transitionS[i]);
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = DFA114_eot;
            this.eof = DFA114_eof;
            this.min = DFA114_min;
            this.max = DFA114_max;
            this.accept = DFA114_accept;
            this.special = DFA114_special;
            this.transition = DFA114_transition;
        }
        public String getDescription() {
            return "667:4: ( forInit )?";
        }
    }
    static final String DFA115_eotS =
        "\25\uffff";
    static final String DFA115_eofS =
        "\25\uffff";
    static final String DFA115_minS =
        "\1\141\24\uffff";
    static final String DFA115_maxS =
        "\1\u00c7\24\uffff";
    static final String DFA115_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA115_specialS =
        "\25\uffff}>";
    static final String[] DFA115_transitionS = {
            "\7\1\15\uffff\1\24\7\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_eotS);
    static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_eofS);
    static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_minS);
    static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_maxS);
    static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_acceptS);
    static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_specialS);
    static final short[][] DFA115_transition;

    static {
        int numStates = DFA115_transitionS.length;
        DFA115_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA115_transition[i] = DFA.unpackEncodedString(DFA115_transitionS[i]);
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;
        }
        public String getDescription() {
            return "667:19: (fc= expression )?";
        }
    }
    static final String DFA116_eotS =
        "\25\uffff";
    static final String DFA116_eofS =
        "\25\uffff";
    static final String DFA116_minS =
        "\1\141\24\uffff";
    static final String DFA116_maxS =
        "\1\u00c7\24\uffff";
    static final String DFA116_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA116_specialS =
        "\25\uffff}>";
    static final String[] DFA116_transitionS = {
            "\7\1\25\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff\2\1\1\24"+
            "\1\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "667:38: (fu= forUpdate )?";
        }
    }
    static final String DFA119_eotS =
        "\66\uffff";
    static final String DFA119_eofS =
        "\3\uffff\1\5\62\uffff";
    static final String DFA119_minS =
        "\1\141\2\uffff\2\141\21\uffff\3\0\32\uffff\1\0\2\uffff";
    static final String DFA119_maxS =
        "\1\u00c7\2\uffff\1\u00c4\1\u0086\21\uffff\3\0\32\uffff\1\0\2\uffff";
    static final String DFA119_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\60\uffff";
    static final String DFA119_specialS =
        "\26\uffff\1\0\1\1\1\2\32\uffff\1\3\2\uffff}>";
    static final String[] DFA119_transitionS = {
            "\1\3\6\5\25\uffff\1\5\6\uffff\1\5\10\uffff\1\1\5\uffff\10\4"+
            "\1\uffff\2\5\2\uffff\3\5\1\1\21\uffff\2\5\14\uffff\5\5",
            "",
            "",
            "\1\1\23\uffff\1\5\2\uffff\1\27\1\5\3\uffff\1\26\3\5\5\uffff"+
            "\1\30\1\uffff\1\5\22\uffff\1\5\1\uffff\1\5\27\uffff\20\5",
            "\1\1\26\uffff\1\5\15\uffff\1\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "670:1: forInit : ( ( variableModifier )* type variableDeclarators -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) | expressionList );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA119_22 = input.LA(1);

                         
                        int index119_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_22);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA119_23 = input.LA(1);

                         
                        int index119_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_23);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA119_24 = input.LA(1);

                         
                        int index119_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_24);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA119_51 = input.LA(1);

                         
                        int index119_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 119, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA122_eotS =
        "\162\uffff";
    static final String DFA122_eofS =
        "\1\14\161\uffff";
    static final String DFA122_minS =
        "\1\165\13\0\146\uffff";
    static final String DFA122_maxS =
        "\1\u00bb\13\0\146\uffff";
    static final String DFA122_acceptS =
        "\14\uffff\1\15\31\uffff\1\1\1\uffff\1\2\1\uffff\1\3\1\uffff\1\4"+
        "\1\uffff\1\5\23\uffff\1\6\23\uffff\1\7\23\uffff\1\10\1\uffff\1\11"+
        "\1\uffff\1\12\1\uffff\1\13\1\14";
    static final String DFA122_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\146\uffff}>";
    static final String[] DFA122_transitionS = {
            "\1\14\3\uffff\1\4\3\uffff\1\12\1\14\1\13\2\uffff\1\14\4\uffff"+
            "\1\14\1\1\25\uffff\1\14\7\uffff\1\14\16\uffff\1\2\1\3\1\5\1"+
            "\6\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "703:3: ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA122_1 = input.LA(1);

                         
                        int index122_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 38;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index122_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA122_2 = input.LA(1);

                         
                        int index122_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_Java()) ) {s = 40;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index122_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA122_3 = input.LA(1);

                         
                        int index122_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_Java()) ) {s = 42;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index122_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA122_4 = input.LA(1);

                         
                        int index122_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_Java()) ) {s = 44;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index122_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA122_5 = input.LA(1);

                         
                        int index122_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_Java()) ) {s = 46;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index122_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA122_6 = input.LA(1);

                         
                        int index122_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index122_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA122_7 = input.LA(1);

                         
                        int index122_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Java()) ) {s = 86;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index122_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA122_8 = input.LA(1);

                         
                        int index122_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_Java()) ) {s = 106;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index122_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA122_9 = input.LA(1);

                         
                        int index122_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred190_Java()) ) {s = 108;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index122_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA122_10 = input.LA(1);

                         
                        int index122_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_Java()) ) {s = 110;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index122_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA122_11 = input.LA(1);

                         
                        int index122_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred192_Java()) ) {s = 112;}

                        else if ( (synpred193_Java()) ) {s = 113;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index122_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA123_eotS =
        "\24\uffff";
    static final String DFA123_eofS =
        "\1\2\23\uffff";
    static final String DFA123_minS =
        "\1\165\23\uffff";
    static final String DFA123_maxS =
        "\1\u00bb\23\uffff";
    static final String DFA123_acceptS =
        "\1\uffff\1\1\1\2\21\uffff";
    static final String DFA123_specialS =
        "\24\uffff}>";
    static final String[] DFA123_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\1\2\uffff\1\2\7\uffff\1\2\16\uffff\7\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "722:6: ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression )";
        }
    }
    static final String DFA124_eotS =
        "\25\uffff";
    static final String DFA124_eofS =
        "\1\2\24\uffff";
    static final String DFA124_minS =
        "\1\165\24\uffff";
    static final String DFA124_maxS =
        "\1\u00bc\24\uffff";
    static final String DFA124_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA124_specialS =
        "\25\uffff}>";
    static final String[] DFA124_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\7\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "730:6: ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression )";
        }
    }
    static final String DFA125_eotS =
        "\26\uffff";
    static final String DFA125_eofS =
        "\1\2\25\uffff";
    static final String DFA125_minS =
        "\1\165\25\uffff";
    static final String DFA125_maxS =
        "\1\u00bd\25\uffff";
    static final String DFA125_acceptS =
        "\1\uffff\1\1\1\2\23\uffff";
    static final String DFA125_specialS =
        "\26\uffff}>";
    static final String[] DFA125_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\10\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "738:6: ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression )";
        }
    }
    static final String DFA126_eotS =
        "\27\uffff";
    static final String DFA126_eofS =
        "\1\2\26\uffff";
    static final String DFA126_minS =
        "\1\165\26\uffff";
    static final String DFA126_maxS =
        "\1\u00be\26\uffff";
    static final String DFA126_acceptS =
        "\1\uffff\1\1\1\2\24\uffff";
    static final String DFA126_specialS =
        "\27\uffff}>";
    static final String[] DFA126_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\11\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "746:9: ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression )";
        }
    }
    static final String DFA127_eotS =
        "\30\uffff";
    static final String DFA127_eofS =
        "\1\2\27\uffff";
    static final String DFA127_minS =
        "\1\165\27\uffff";
    static final String DFA127_maxS =
        "\1\u00bf\27\uffff";
    static final String DFA127_acceptS =
        "\1\uffff\1\1\1\2\25\uffff";
    static final String DFA127_specialS =
        "\30\uffff}>";
    static final String[] DFA127_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\12\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "754:5: ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression )";
        }
    }
    static final String DFA128_eotS =
        "\31\uffff";
    static final String DFA128_eofS =
        "\1\2\30\uffff";
    static final String DFA128_minS =
        "\1\165\30\uffff";
    static final String DFA128_maxS =
        "\1\u00bf\30\uffff";
    static final String DFA128_acceptS =
        "\1\uffff\1\1\1\2\26\uffff";
    static final String DFA128_specialS =
        "\31\uffff}>";
    static final String[] DFA128_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\1\1\1\uffff\1\2\4\uffff\2\2\22"+
            "\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\13\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "762:5: ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression )";
        }
    }
    static final String DFA129_eotS =
        "\33\uffff";
    static final String DFA129_eofS =
        "\1\3\32\uffff";
    static final String DFA129_minS =
        "\1\165\32\uffff";
    static final String DFA129_maxS =
        "\1\u00c1\32\uffff";
    static final String DFA129_acceptS =
        "\1\uffff\1\1\1\2\1\3\27\uffff";
    static final String DFA129_specialS =
        "\33\uffff}>";
    static final String[] DFA129_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\4\3\1\uffff\1\3\4\uffff\2\3\22\uffff"+
            "\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\13\3\1\1\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "770:5: ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression )";
        }
    }
    static final String DFA130_eotS =
        "\34\uffff";
    static final String DFA130_eofS =
        "\1\2\33\uffff";
    static final String DFA130_minS =
        "\1\165\33\uffff";
    static final String DFA130_maxS =
        "\1\u00c2\33\uffff";
    static final String DFA130_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA130_specialS =
        "\34\uffff}>";
    static final String[] DFA130_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\4\2\1\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\15\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "779:5: ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression )";
        }
    }
    static final String DFA131_eotS =
        "\105\uffff";
    static final String DFA131_eofS =
        "\1\3\104\uffff";
    static final String DFA131_minS =
        "\1\165\2\141\32\uffff\1\0\47\uffff";
    static final String DFA131_maxS =
        "\1\u00c2\2\u00c7\32\uffff\1\0\47\uffff";
    static final String DFA131_acceptS =
        "\3\uffff\1\5\30\uffff\1\1\1\uffff\1\2\21\uffff\1\3\1\uffff\1\4\22"+
        "\uffff";
    static final String DFA131_specialS =
        "\35\uffff\1\0\47\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\4\uffff"+
            "\2\3\22\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3",
            "\7\36\25\uffff\1\35\6\uffff\1\36\3\uffff\1\34\12\uffff\10\36"+
            "\1\uffff\2\36\2\uffff\3\36\22\uffff\2\36\14\uffff\5\36",
            "\7\62\25\uffff\1\62\1\uffff\1\3\4\uffff\1\62\3\uffff\1\60\12"+
            "\uffff\10\62\1\uffff\2\62\2\uffff\3\62\22\uffff\2\62\14\uffff"+
            "\5\62",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "787:5: ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA131_29 = input.LA(1);

                         
                        int index131_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 30;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index131_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA135_eotS =
        "\107\uffff";
    static final String DFA135_eofS =
        "\1\3\106\uffff";
    static final String DFA135_minS =
        "\1\165\2\141\31\uffff\1\0\23\uffff\1\0\26\uffff";
    static final String DFA135_maxS =
        "\1\u00c2\2\u00c7\31\uffff\1\0\23\uffff\1\0\26\uffff";
    static final String DFA135_acceptS =
        "\3\uffff\1\3\101\uffff\1\1\1\2";
    static final String DFA135_specialS =
        "\34\uffff\1\0\23\uffff\1\1\26\uffff}>";
    static final String[] DFA135_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\4\uffff"+
            "\2\3\22\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3",
            "\7\3\25\uffff\1\34\6\uffff\1\3\3\uffff\1\3\12\uffff\10\3\1"+
            "\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "\7\3\25\uffff\1\3\1\uffff\1\60\4\uffff\1\3\3\uffff\1\3\12\uffff"+
            "\10\3\1\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "798:5: ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA135_28 = input.LA(1);

                         
                        int index135_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_Java()) ) {s = 69;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index135_28);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA135_48 = input.LA(1);

                         
                        int index135_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_Java()) ) {s = 69;}

                        else if ( (synpred211_Java()) ) {s = 70;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index135_48);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA133_eotS =
        "\106\uffff";
    static final String DFA133_eofS =
        "\1\3\105\uffff";
    static final String DFA133_minS =
        "\1\165\2\141\32\uffff\1\0\23\uffff\1\0\24\uffff";
    static final String DFA133_maxS =
        "\1\u00c2\2\u00c7\32\uffff\1\0\23\uffff\1\0\24\uffff";
    static final String DFA133_acceptS =
        "\3\uffff\1\2\101\uffff\1\1";
    static final String DFA133_specialS =
        "\35\uffff\1\0\23\uffff\1\1\24\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\4\uffff"+
            "\2\3\22\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3",
            "\7\3\25\uffff\1\35\6\uffff\1\3\3\uffff\1\3\12\uffff\10\3\1"+
            "\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "\7\3\25\uffff\1\3\1\uffff\1\61\4\uffff\1\3\3\uffff\1\3\12\uffff"+
            "\10\3\1\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "()+ loopback of 799:6: ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA133_29 = input.LA(1);

                         
                        int index133_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_Java()) ) {s = 69;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index133_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA133_49 = input.LA(1);

                         
                        int index133_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_Java()) ) {s = 69;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index133_49);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA134_eotS =
        "\62\uffff";
    static final String DFA134_eofS =
        "\1\1\61\uffff";
    static final String DFA134_minS =
        "\1\165\1\uffff\1\141\32\uffff\1\0\24\uffff";
    static final String DFA134_maxS =
        "\1\u00c2\1\uffff\1\u00c7\32\uffff\1\0\24\uffff";
    static final String DFA134_acceptS =
        "\1\uffff\1\2\57\uffff\1\1";
    static final String DFA134_specialS =
        "\35\uffff\1\0\24\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\1\3\uffff\1\1\3\uffff\2\1\1\2\1\1\1\uffff\1\1\4\uffff\2\1"+
            "\22\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\16\1",
            "",
            "\7\1\25\uffff\1\1\1\uffff\1\35\4\uffff\1\1\3\uffff\1\1\12\uffff"+
            "\10\1\1\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "()+ loopback of 801:8: ( '>' '>' '>' additiveExpression )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA134_29 = input.LA(1);

                         
                        int index134_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred210_Java()) ) {s = 49;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index134_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA138_eotS =
        "\104\uffff";
    static final String DFA138_eofS =
        "\1\3\103\uffff";
    static final String DFA138_minS =
        "\1\165\2\141\101\uffff";
    static final String DFA138_maxS =
        "\1\u00c2\2\u00c7\101\uffff";
    static final String DFA138_acceptS =
        "\3\uffff\1\2\31\uffff\1\1\46\uffff";
    static final String DFA138_specialS =
        "\104\uffff}>";
    static final String[] DFA138_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\4\3\1\uffff\1\3\4\uffff\2\3\22\uffff"+
            "\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\1\1\1\2\14\3",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\3\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\3\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "808:5: ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression )";
        }
    }
    static final String DFA137_eotS =
        "\104\uffff";
    static final String DFA137_eofS =
        "\1\1\103\uffff";
    static final String DFA137_minS =
        "\1\165\21\uffff\2\141\60\uffff";
    static final String DFA137_maxS =
        "\1\u00c2\21\uffff\2\u00c7\60\uffff";
    static final String DFA137_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\46\uffff";
    static final String DFA137_specialS =
        "\104\uffff}>";
    static final String[] DFA137_transitionS = {
            "\1\1\3\uffff\1\1\3\uffff\4\1\1\uffff\1\1\4\uffff\2\1\22\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\1\22\1\23\14\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "()+ loopback of 809:6: ( (i+= '+' | i+= '-' ) multiplicativeExpression )+";
        }
    }
    static final String DFA141_eotS =
        "\130\uffff";
    static final String DFA141_eofS =
        "\1\4\127\uffff";
    static final String DFA141_minS =
        "\1\165\3\141\124\uffff";
    static final String DFA141_maxS =
        "\1\u00c2\3\u00c7\124\uffff";
    static final String DFA141_acceptS =
        "\4\uffff\1\2\30\uffff\1\1\72\uffff";
    static final String DFA141_specialS =
        "\130\uffff}>";
    static final String[] DFA141_transitionS = {
            "\1\4\3\uffff\1\1\3\uffff\4\4\1\uffff\1\4\4\uffff\2\4\22\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\16\uffff\2\4\1\2\3\4\1\3\7\4",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\4\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\4\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\4\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "816:5: ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression )";
        }
    }
    static final String DFA140_eotS =
        "\130\uffff";
    static final String DFA140_eofS =
        "\1\1\127\uffff";
    static final String DFA140_minS =
        "\1\165\23\uffff\2\141\3\uffff\1\141\76\uffff";
    static final String DFA140_maxS =
        "\1\u00c2\23\uffff\2\u00c7\3\uffff\1\u00c7\76\uffff";
    static final String DFA140_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\72\uffff";
    static final String DFA140_specialS =
        "\130\uffff}>";
    static final String[] DFA140_transitionS = {
            "\1\1\3\uffff\1\24\3\uffff\4\1\1\uffff\1\1\4\uffff\2\1\22\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\2\1\1\25\3\1\1\31\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "()+ loopback of 817:6: ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+";
        }
    }
    static final String DFA142_eotS =
        "\24\uffff";
    static final String DFA142_eofS =
        "\24\uffff";
    static final String DFA142_minS =
        "\1\141\23\uffff";
    static final String DFA142_maxS =
        "\1\u00c7\23\uffff";
    static final String DFA142_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\16\uffff";
    static final String DFA142_specialS =
        "\24\uffff}>";
    static final String[] DFA142_transitionS = {
            "\7\5\25\uffff\1\5\6\uffff\1\5\16\uffff\10\5\1\uffff\2\5\2\uffff"+
            "\3\5\22\uffff\1\1\1\2\14\uffff\1\3\1\4\3\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "822:1: unaryExpression : ( '+' unaryExpression -> unaryExpression | '-' unaryExpression -> ^( NEG unaryExpression ) | '++' unaryExpression -> ^( PREINC unaryExpression ) | '--' unaryExpression -> ^( PREDEC unaryExpression ) | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus );";
        }
    }
    static final String DFA146_eotS =
        "\44\uffff";
    static final String DFA146_eofS =
        "\44\uffff";
    static final String DFA146_minS =
        "\1\141\2\uffff\1\141\14\uffff\23\0\1\uffff";
    static final String DFA146_maxS =
        "\1\u00c7\2\uffff\1\u00c7\14\uffff\23\0\1\uffff";
    static final String DFA146_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\36\uffff\1\3";
    static final String DFA146_specialS =
        "\20\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff}>";
    static final String[] DFA146_transitionS = {
            "\7\4\25\uffff\1\4\6\uffff\1\4\16\uffff\10\4\1\uffff\1\4\1\3"+
            "\2\uffff\3\4\42\uffff\1\1\1\2\1\4",
            "",
            "",
            "\1\37\1\31\1\32\1\33\3\30\25\uffff\1\27\6\uffff\1\41\16\uffff"+
            "\10\40\1\uffff\1\42\1\26\2\uffff\1\35\2\34\22\uffff\1\20\1\21"+
            "\14\uffff\1\22\1\23\1\24\1\25\1\36",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "830:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression -> ^( INV unaryExpression ) | '!' unaryExpression -> ^( NOT unaryExpression ) | castExpression | primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA146_16 = input.LA(1);

                         
                        int index146_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA146_17 = input.LA(1);

                         
                        int index146_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA146_18 = input.LA(1);

                         
                        int index146_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA146_19 = input.LA(1);

                         
                        int index146_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA146_20 = input.LA(1);

                         
                        int index146_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA146_21 = input.LA(1);

                         
                        int index146_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_21);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA146_22 = input.LA(1);

                         
                        int index146_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_22);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA146_23 = input.LA(1);

                         
                        int index146_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_23);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA146_24 = input.LA(1);

                         
                        int index146_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_24);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA146_25 = input.LA(1);

                         
                        int index146_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_25);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA146_26 = input.LA(1);

                         
                        int index146_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_26);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA146_27 = input.LA(1);

                         
                        int index146_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_27);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA146_28 = input.LA(1);

                         
                        int index146_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_28);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA146_29 = input.LA(1);

                         
                        int index146_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_29);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA146_30 = input.LA(1);

                         
                        int index146_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_30);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA146_31 = input.LA(1);

                         
                        int index146_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_31);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA146_32 = input.LA(1);

                         
                        int index146_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_32);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA146_33 = input.LA(1);

                         
                        int index146_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_33);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA146_34 = input.LA(1);

                         
                        int index146_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA145_eotS =
        "\40\uffff";
    static final String DFA145_eofS =
        "\1\5\37\uffff";
    static final String DFA145_minS =
        "\1\165\37\uffff";
    static final String DFA145_maxS =
        "\1\u00c4\37\uffff";
    static final String DFA145_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\32\uffff";
    static final String DFA145_specialS =
        "\40\uffff}>";
    static final String[] DFA145_transitionS = {
            "\1\5\2\uffff\1\1\1\5\3\uffff\4\5\1\uffff\1\5\3\uffff\1\1\2\5"+
            "\22\uffff\1\5\2\uffff\1\5\7\uffff\1\5\16\uffff\16\5\1\3\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "835:3: ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary )";
        }
    }
    static final String DFA143_eotS =
        "\40\uffff";
    static final String DFA143_eofS =
        "\1\1\37\uffff";
    static final String DFA143_minS =
        "\1\165\37\uffff";
    static final String DFA143_maxS =
        "\1\u00c4\37\uffff";
    static final String DFA143_acceptS =
        "\1\uffff\1\2\34\uffff\1\1\1\uffff";
    static final String DFA143_specialS =
        "\40\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\1\2\uffff\1\36\1\1\3\uffff\4\1\1\uffff\1\1\3\uffff\1\36\2"+
            "\1\22\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\20\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "()+ loopback of 836:4: ( selector )+";
        }
    }
    static final String DFA144_eotS =
        "\36\uffff";
    static final String DFA144_eofS =
        "\1\3\35\uffff";
    static final String DFA144_minS =
        "\1\165\35\uffff";
    static final String DFA144_maxS =
        "\1\u00c4\35\uffff";
    static final String DFA144_acceptS =
        "\1\uffff\1\1\1\2\1\3\32\uffff";
    static final String DFA144_specialS =
        "\36\uffff}>";
    static final String[] DFA144_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\4\3\1\uffff\1\3\4\uffff\2\3\22\uffff"+
            "\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3\1\1\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "837:4: ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) )";
        }
    }
    static final String DFA147_eotS =
        "\27\uffff";
    static final String DFA147_eofS =
        "\27\uffff";
    static final String DFA147_minS =
        "\1\u009d\1\141\2\0\23\uffff";
    static final String DFA147_maxS =
        "\1\u009d\1\u00c7\2\0\23\uffff";
    static final String DFA147_acceptS =
        "\4\uffff\1\3\20\uffff\1\1\1\2";
    static final String DFA147_specialS =
        "\2\uffff\1\0\1\1\23\uffff}>";
    static final String[] DFA147_transitionS = {
            "\1\1",
            "\1\3\6\4\25\uffff\1\4\6\uffff\1\4\16\uffff\10\2\1\uffff\2\4"+
            "\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_eotS);
    static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_eofS);
    static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_minS);
    static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_maxS);
    static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_acceptS);
    static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_specialS);
    static final short[][] DFA147_transition;

    static {
        int numStates = DFA147_transitionS.length;
        DFA147_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA147_transition[i] = DFA.unpackEncodedString(DFA147_transitionS[i]);
        }
    }

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;
        }
        public String getDescription() {
            return "848:1: castExpression : ( '(' primitiveType ')' unaryExpression -> ^( CAST ^( TYPE primitiveType ) unaryExpression ) | '(' type ')' unaryExpressionNotPlusMinus -> ^( CAST type unaryExpressionNotPlusMinus ) | '(' expression ')' unaryExpressionNotPlusMinus ->);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA147_2 = input.LA(1);

                         
                        int index147_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_Java()) ) {s = 21;}

                        else if ( (synpred233_Java()) ) {s = 22;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA147_3 = input.LA(1);

                         
                        int index147_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 22;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 147, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA161_eotS =
        "\61\uffff";
    static final String DFA161_eofS =
        "\12\uffff\1\24\46\uffff";
    static final String DFA161_minS =
        "\1\141\10\uffff\1\141\1\165\3\uffff\1\0\2\uffff\3\0\35\uffff";
    static final String DFA161_maxS =
        "\1\u00c7\10\uffff\1\u009a\1\u00c4\3\uffff\1\0\2\uffff\3\0\35\uffff";
    static final String DFA161_acceptS =
        "\1\uffff\1\1\1\2\1\3\7\uffff\1\6\1\7\1\10\1\uffff\1\4\1\5\3\uffff"+
        "\1\11\34\uffff";
    static final String DFA161_specialS =
        "\16\uffff\1\0\2\uffff\1\1\1\2\1\3\35\uffff}>";
    static final String[] DFA161_transitionS = {
            "\1\12\6\3\25\uffff\1\2\6\uffff\1\14\16\uffff\10\13\1\uffff\1"+
            "\15\1\1\2\uffff\3\3\44\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\20\33\uffff\1\16\25\uffff\10\17",
            "\1\24\2\uffff\1\22\1\24\3\uffff\1\21\3\24\1\uffff\1\24\3\uffff"+
            "\1\23\2\24\22\uffff\1\24\1\uffff\2\24\7\uffff\1\24\16\uffff"+
            "\20\24",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "854:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | literal | 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) ) | 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) ) | type '.' 'class' -> ^( GETCLASS type ) | 'void' '.' 'class' -> ^( GETCLASS ^( TYPE VOID ) ) | 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) ) | Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA161_14 = input.LA(1);

                         
                        int index161_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 15;}

                        else if ( (synpred250_Java()) ) {s = 16;}

                         
                        input.seek(index161_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA161_17 = input.LA(1);

                         
                        int index161_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 11;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index161_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA161_18 = input.LA(1);

                         
                        int index161_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 11;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index161_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA161_19 = input.LA(1);

                         
                        int index161_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 11;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index161_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA152_eotS =
        "\26\uffff";
    static final String DFA152_eofS =
        "\26\uffff";
    static final String DFA152_minS =
        "\1\u0086\1\141\24\uffff";
    static final String DFA152_maxS =
        "\1\u0086\1\u00c7\24\uffff";
    static final String DFA152_acceptS =
        "\2\uffff\1\2\1\1\22\uffff";
    static final String DFA152_specialS =
        "\26\uffff}>";
    static final String[] DFA152_transitionS = {
            "\1\1",
            "\7\3\25\uffff\1\3\6\uffff\1\3\2\uffff\1\2\13\uffff\10\3\1\uffff"+
            "\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "859:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) )";
        }
    }
    static final String DFA149_eotS =
        "\65\uffff";
    static final String DFA149_eofS =
        "\1\2\64\uffff";
    static final String DFA149_minS =
        "\1\165\1\141\37\uffff\23\0\1\uffff";
    static final String DFA149_maxS =
        "\1\u00c4\1\u00c7\37\uffff\23\0\1\uffff";
    static final String DFA149_acceptS =
        "\2\uffff\1\2\61\uffff\1\1";
    static final String DFA149_specialS =
        "\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff}>";
    static final String[] DFA149_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\1\1\2\2\22"+
            "\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\20\2",
            "\1\60\1\52\1\53\1\54\3\51\25\uffff\1\50\6\uffff\1\62\2\uffff"+
            "\1\2\13\uffff\10\61\1\uffff\1\63\1\47\2\uffff\1\56\2\55\22\uffff"+
            "\1\41\1\42\14\uffff\1\43\1\44\1\45\1\46\1\57",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "()+ loopback of 860:7: ( '[' expression ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_33 = input.LA(1);

                         
                        int index149_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_33);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA149_34 = input.LA(1);

                         
                        int index149_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_34);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA149_35 = input.LA(1);

                         
                        int index149_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_35);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA149_36 = input.LA(1);

                         
                        int index149_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_36);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA149_37 = input.LA(1);

                         
                        int index149_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_37);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA149_38 = input.LA(1);

                         
                        int index149_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_38);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA149_39 = input.LA(1);

                         
                        int index149_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_39);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA149_40 = input.LA(1);

                         
                        int index149_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_40);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA149_41 = input.LA(1);

                         
                        int index149_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_41);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA149_42 = input.LA(1);

                         
                        int index149_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_42);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA149_43 = input.LA(1);

                         
                        int index149_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_43);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA149_44 = input.LA(1);

                         
                        int index149_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_44);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA149_45 = input.LA(1);

                         
                        int index149_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_45);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA149_46 = input.LA(1);

                         
                        int index149_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_46);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA149_47 = input.LA(1);

                         
                        int index149_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_47);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA149_48 = input.LA(1);

                         
                        int index149_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_48);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA149_49 = input.LA(1);

                         
                        int index149_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_49);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA149_50 = input.LA(1);

                         
                        int index149_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_50);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA149_51 = input.LA(1);

                         
                        int index149_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA150_eotS =
        "\64\uffff";
    static final String DFA150_eofS =
        "\1\1\63\uffff";
    static final String DFA150_minS =
        "\1\165\1\uffff\1\141\61\uffff";
    static final String DFA150_maxS =
        "\1\u00c4\1\uffff\1\u00c7\61\uffff";
    static final String DFA150_acceptS =
        "\1\uffff\1\2\36\uffff\1\1\23\uffff";
    static final String DFA150_specialS =
        "\64\uffff}>";
    static final String[] DFA150_transitionS = {
            "\1\1\2\uffff\2\1\3\uffff\4\1\1\uffff\1\1\3\uffff\1\2\2\1\22"+
            "\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\20\1",
            "",
            "\7\1\25\uffff\1\1\6\uffff\1\1\2\uffff\1\40\13\uffff\10\1\1"+
            "\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_eotS);
    static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_eofS);
    static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_minS);
    static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_maxS);
    static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_acceptS);
    static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_specialS);
    static final short[][] DFA150_transition;

    static {
        int numStates = DFA150_transitionS.length;
        DFA150_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA150_transition[i] = DFA.unpackEncodedString(DFA150_transitionS[i]);
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;
        }
        public String getDescription() {
            return "()* loopback of 860:29: ( '[' ']' )*";
        }
    }
    static final String DFA158_eotS =
        "\27\uffff";
    static final String DFA158_eofS =
        "\27\uffff";
    static final String DFA158_minS =
        "\1\u0086\1\141\25\uffff";
    static final String DFA158_maxS =
        "\1\u009d\1\u00c7\25\uffff";
    static final String DFA158_acceptS =
        "\2\uffff\1\3\1\2\1\1\22\uffff";
    static final String DFA158_specialS =
        "\27\uffff}>";
    static final String[] DFA158_transitionS = {
            "\1\1\26\uffff\1\2",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\3\13\uffff\10\4\1\uffff"+
            "\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "864:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) )";
        }
    }
    static final String DFA155_eotS =
        "\65\uffff";
    static final String DFA155_eofS =
        "\1\2\64\uffff";
    static final String DFA155_minS =
        "\1\165\1\141\37\uffff\23\0\1\uffff";
    static final String DFA155_maxS =
        "\1\u00c4\1\u00c7\37\uffff\23\0\1\uffff";
    static final String DFA155_acceptS =
        "\2\uffff\1\2\61\uffff\1\1";
    static final String DFA155_specialS =
        "\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff}>";
    static final String[] DFA155_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\1\1\2\2\22"+
            "\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\20\2",
            "\1\60\1\52\1\53\1\54\3\51\25\uffff\1\50\6\uffff\1\62\2\uffff"+
            "\1\2\13\uffff\10\61\1\uffff\1\63\1\47\2\uffff\1\56\2\55\22\uffff"+
            "\1\41\1\42\14\uffff\1\43\1\44\1\45\1\46\1\57",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "()+ loopback of 865:7: ( '[' expression ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA155_33 = input.LA(1);

                         
                        int index155_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_33);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA155_34 = input.LA(1);

                         
                        int index155_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_34);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA155_35 = input.LA(1);

                         
                        int index155_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_35);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA155_36 = input.LA(1);

                         
                        int index155_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_36);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA155_37 = input.LA(1);

                         
                        int index155_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_37);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA155_38 = input.LA(1);

                         
                        int index155_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_38);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA155_39 = input.LA(1);

                         
                        int index155_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_39);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA155_40 = input.LA(1);

                         
                        int index155_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_40);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA155_41 = input.LA(1);

                         
                        int index155_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_41);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA155_42 = input.LA(1);

                         
                        int index155_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_42);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA155_43 = input.LA(1);

                         
                        int index155_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_43);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA155_44 = input.LA(1);

                         
                        int index155_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_44);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA155_45 = input.LA(1);

                         
                        int index155_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_45);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA155_46 = input.LA(1);

                         
                        int index155_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_46);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA155_47 = input.LA(1);

                         
                        int index155_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_47);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA155_48 = input.LA(1);

                         
                        int index155_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_48);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA155_49 = input.LA(1);

                         
                        int index155_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_49);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA155_50 = input.LA(1);

                         
                        int index155_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_50);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA155_51 = input.LA(1);

                         
                        int index155_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA156_eotS =
        "\64\uffff";
    static final String DFA156_eofS =
        "\1\1\63\uffff";
    static final String DFA156_minS =
        "\1\165\1\uffff\1\141\61\uffff";
    static final String DFA156_maxS =
        "\1\u00c4\1\uffff\1\u00c7\61\uffff";
    static final String DFA156_acceptS =
        "\1\uffff\1\2\36\uffff\1\1\23\uffff";
    static final String DFA156_specialS =
        "\64\uffff}>";
    static final String[] DFA156_transitionS = {
            "\1\1\2\uffff\2\1\3\uffff\4\1\1\uffff\1\1\3\uffff\1\2\2\1\22"+
            "\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\20\1",
            "",
            "\7\1\25\uffff\1\1\6\uffff\1\1\2\uffff\1\40\13\uffff\10\1\1"+
            "\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "()* loopback of 865:29: ( '[' ']' )*";
        }
    }
    static final String DFA159_eotS =
        "\41\uffff";
    static final String DFA159_eofS =
        "\1\2\40\uffff";
    static final String DFA159_minS =
        "\1\165\40\uffff";
    static final String DFA159_maxS =
        "\1\u00c4\40\uffff";
    static final String DFA159_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA159_specialS =
        "\41\uffff}>";
    static final String[] DFA159_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "872:3: ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) )";
        }
    }
    static final String DFA160_eotS =
        "\41\uffff";
    static final String DFA160_eofS =
        "\1\2\40\uffff";
    static final String DFA160_minS =
        "\1\165\40\uffff";
    static final String DFA160_maxS =
        "\1\u00c4\40\uffff";
    static final String DFA160_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA160_specialS =
        "\41\uffff}>";
    static final String[] DFA160_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_eotS);
    static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_eofS);
    static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_minS);
    static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_maxS);
    static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_acceptS);
    static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_specialS);
    static final short[][] DFA160_transition;

    static {
        int numStates = DFA160_transitionS.length;
        DFA160_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA160_transition[i] = DFA.unpackEncodedString(DFA160_transitionS[i]);
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = DFA160_eot;
            this.eof = DFA160_eof;
            this.min = DFA160_min;
            this.max = DFA160_max;
            this.accept = DFA160_accept;
            this.special = DFA160_special;
            this.transition = DFA160_transition;
        }
        public String getDescription() {
            return "877:6: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) )";
        }
    }
    static final String DFA162_eotS =
        "\41\uffff";
    static final String DFA162_eofS =
        "\1\2\40\uffff";
    static final String DFA162_minS =
        "\1\165\40\uffff";
    static final String DFA162_maxS =
        "\1\u00c4\40\uffff";
    static final String DFA162_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA162_specialS =
        "\41\uffff}>";
    static final String[] DFA162_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\1\1\2\3\uffff\3\2\22\uffff\1"+
            "\2\2\uffff\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA162_eot = DFA.unpackEncodedString(DFA162_eotS);
    static final short[] DFA162_eof = DFA.unpackEncodedString(DFA162_eofS);
    static final char[] DFA162_min = DFA.unpackEncodedStringToUnsignedChars(DFA162_minS);
    static final char[] DFA162_max = DFA.unpackEncodedStringToUnsignedChars(DFA162_maxS);
    static final short[] DFA162_accept = DFA.unpackEncodedString(DFA162_acceptS);
    static final short[] DFA162_special = DFA.unpackEncodedString(DFA162_specialS);
    static final short[][] DFA162_transition;

    static {
        int numStates = DFA162_transitionS.length;
        DFA162_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA162_transition[i] = DFA.unpackEncodedString(DFA162_transitionS[i]);
        }
    }

    class DFA162 extends DFA {

        public DFA162(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = DFA162_eot;
            this.eof = DFA162_eof;
            this.min = DFA162_min;
            this.max = DFA162_max;
            this.accept = DFA162_accept;
            this.special = DFA162_special;
            this.transition = DFA162_transition;
        }
        public String getDescription() {
            return "888:14: ( classBody )?";
        }
    }
    static final String DFA164_eotS =
        "\41\uffff";
    static final String DFA164_eofS =
        "\1\2\40\uffff";
    static final String DFA164_minS =
        "\1\165\40\uffff";
    static final String DFA164_maxS =
        "\1\u00c4\40\uffff";
    static final String DFA164_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA164_specialS =
        "\41\uffff}>";
    static final String[] DFA164_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "906:21: ( arguments )?";
        }
    }
    static final String DFA167_eotS =
        "\41\uffff";
    static final String DFA167_eofS =
        "\1\2\40\uffff";
    static final String DFA167_minS =
        "\1\165\40\uffff";
    static final String DFA167_maxS =
        "\1\u00c4\40\uffff";
    static final String DFA167_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA167_specialS =
        "\41\uffff}>";
    static final String[] DFA167_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA167_eot = DFA.unpackEncodedString(DFA167_eotS);
    static final short[] DFA167_eof = DFA.unpackEncodedString(DFA167_eofS);
    static final char[] DFA167_min = DFA.unpackEncodedStringToUnsignedChars(DFA167_minS);
    static final char[] DFA167_max = DFA.unpackEncodedStringToUnsignedChars(DFA167_maxS);
    static final short[] DFA167_accept = DFA.unpackEncodedString(DFA167_acceptS);
    static final short[] DFA167_special = DFA.unpackEncodedString(DFA167_specialS);
    static final short[][] DFA167_transition;

    static {
        int numStates = DFA167_transitionS.length;
        DFA167_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA167_transition[i] = DFA.unpackEncodedString(DFA167_transitionS[i]);
        }
    }

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = DFA167_eot;
            this.eof = DFA167_eof;
            this.min = DFA167_min;
            this.max = DFA167_max;
            this.accept = DFA167_accept;
            this.special = DFA167_special;
            this.transition = DFA167_transition;
        }
        public String getDescription() {
            return "914:3: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) )";
        }
    }
    static final String DFA169_eotS =
        "\25\uffff";
    static final String DFA169_eofS =
        "\25\uffff";
    static final String DFA169_minS =
        "\1\141\24\uffff";
    static final String DFA169_maxS =
        "\1\u00c7\24\uffff";
    static final String DFA169_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA169_specialS =
        "\25\uffff}>";
    static final String[] DFA169_transitionS = {
            "\7\1\25\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff\2\1\1\24"+
            "\1\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA169_eot = DFA.unpackEncodedString(DFA169_eotS);
    static final short[] DFA169_eof = DFA.unpackEncodedString(DFA169_eofS);
    static final char[] DFA169_min = DFA.unpackEncodedStringToUnsignedChars(DFA169_minS);
    static final char[] DFA169_max = DFA.unpackEncodedStringToUnsignedChars(DFA169_maxS);
    static final short[] DFA169_accept = DFA.unpackEncodedString(DFA169_acceptS);
    static final short[] DFA169_special = DFA.unpackEncodedString(DFA169_specialS);
    static final short[][] DFA169_transition;

    static {
        int numStates = DFA169_transitionS.length;
        DFA169_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA169_transition[i] = DFA.unpackEncodedString(DFA169_transitionS[i]);
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = DFA169_eot;
            this.eof = DFA169_eof;
            this.min = DFA169_min;
            this.max = DFA169_max;
            this.accept = DFA169_accept;
            this.special = DFA169_special;
            this.transition = DFA169_transition;
        }
        public String getDescription() {
            return "922:9: ( expressionList )?";
        }
    }
    static final String DFA207_eotS =
        "\26\uffff";
    static final String DFA207_eofS =
        "\26\uffff";
    static final String DFA207_minS =
        "\1\u0086\1\141\24\uffff";
    static final String DFA207_maxS =
        "\1\u0086\1\u00c7\24\uffff";
    static final String DFA207_acceptS =
        "\2\uffff\1\2\1\1\22\uffff";
    static final String DFA207_specialS =
        "\26\uffff}>";
    static final String[] DFA207_transitionS = {
            "\1\1",
            "\7\3\25\uffff\1\3\6\uffff\1\3\2\uffff\1\2\13\uffff\10\3\1\uffff"+
            "\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA207_eot = DFA.unpackEncodedString(DFA207_eotS);
    static final short[] DFA207_eof = DFA.unpackEncodedString(DFA207_eofS);
    static final char[] DFA207_min = DFA.unpackEncodedStringToUnsignedChars(DFA207_minS);
    static final char[] DFA207_max = DFA.unpackEncodedStringToUnsignedChars(DFA207_maxS);
    static final short[] DFA207_accept = DFA.unpackEncodedString(DFA207_acceptS);
    static final short[] DFA207_special = DFA.unpackEncodedString(DFA207_specialS);
    static final short[][] DFA207_transition;

    static {
        int numStates = DFA207_transitionS.length;
        DFA207_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA207_transition[i] = DFA.unpackEncodedString(DFA207_transitionS[i]);
        }
    }

    class DFA207 extends DFA {

        public DFA207(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 207;
            this.eot = DFA207_eot;
            this.eof = DFA207_eof;
            this.min = DFA207_min;
            this.max = DFA207_max;
            this.accept = DFA207_accept;
            this.special = DFA207_special;
            this.transition = DFA207_transition;
        }
        public String getDescription() {
            return "859:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer )";
        }
    }
    static final String DFA204_eotS =
        "\27\uffff";
    static final String DFA204_eofS =
        "\1\2\26\uffff";
    static final String DFA204_minS =
        "\1\u0086\1\141\25\uffff";
    static final String DFA204_maxS =
        "\1\u0086\1\u00c7\25\uffff";
    static final String DFA204_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\22\uffff";
    static final String DFA204_specialS =
        "\27\uffff}>";
    static final String[] DFA204_transitionS = {
            "\1\1",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\2\13\uffff\10\4\1\uffff"+
            "\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA204_eot = DFA.unpackEncodedString(DFA204_eotS);
    static final short[] DFA204_eof = DFA.unpackEncodedString(DFA204_eofS);
    static final char[] DFA204_min = DFA.unpackEncodedStringToUnsignedChars(DFA204_minS);
    static final char[] DFA204_max = DFA.unpackEncodedStringToUnsignedChars(DFA204_maxS);
    static final short[] DFA204_accept = DFA.unpackEncodedString(DFA204_acceptS);
    static final short[] DFA204_special = DFA.unpackEncodedString(DFA204_specialS);
    static final short[][] DFA204_transition;

    static {
        int numStates = DFA204_transitionS.length;
        DFA204_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA204_transition[i] = DFA.unpackEncodedString(DFA204_transitionS[i]);
        }
    }

    class DFA204 extends DFA {

        public DFA204(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 204;
            this.eot = DFA204_eot;
            this.eof = DFA204_eof;
            this.min = DFA204_min;
            this.max = DFA204_max;
            this.accept = DFA204_accept;
            this.special = DFA204_special;
            this.transition = DFA204_transition;
        }
        public String getDescription() {
            return "()+ loopback of 860:7: ( '[' expression ']' )+";
        }
    }
    static final String DFA216_eotS =
        "\27\uffff";
    static final String DFA216_eofS =
        "\27\uffff";
    static final String DFA216_minS =
        "\1\u0086\1\141\25\uffff";
    static final String DFA216_maxS =
        "\1\u009d\1\u00c7\25\uffff";
    static final String DFA216_acceptS =
        "\2\uffff\1\3\1\2\1\1\22\uffff";
    static final String DFA216_specialS =
        "\27\uffff}>";
    static final String[] DFA216_transitionS = {
            "\1\1\26\uffff\1\2",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\3\13\uffff\10\4\1\uffff"+
            "\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA216_eot = DFA.unpackEncodedString(DFA216_eotS);
    static final short[] DFA216_eof = DFA.unpackEncodedString(DFA216_eofS);
    static final char[] DFA216_min = DFA.unpackEncodedStringToUnsignedChars(DFA216_minS);
    static final char[] DFA216_max = DFA.unpackEncodedStringToUnsignedChars(DFA216_maxS);
    static final short[] DFA216_accept = DFA.unpackEncodedString(DFA216_acceptS);
    static final short[] DFA216_special = DFA.unpackEncodedString(DFA216_specialS);
    static final short[][] DFA216_transition;

    static {
        int numStates = DFA216_transitionS.length;
        DFA216_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA216_transition[i] = DFA.unpackEncodedString(DFA216_transitionS[i]);
        }
    }

    class DFA216 extends DFA {

        public DFA216(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 216;
            this.eot = DFA216_eot;
            this.eof = DFA216_eof;
            this.min = DFA216_min;
            this.max = DFA216_max;
            this.accept = DFA216_accept;
            this.special = DFA216_special;
            this.transition = DFA216_transition;
        }
        public String getDescription() {
            return "864:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest )";
        }
    }
    static final String DFA213_eotS =
        "\27\uffff";
    static final String DFA213_eofS =
        "\1\2\26\uffff";
    static final String DFA213_minS =
        "\1\u0086\1\141\25\uffff";
    static final String DFA213_maxS =
        "\1\u0086\1\u00c7\25\uffff";
    static final String DFA213_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\22\uffff";
    static final String DFA213_specialS =
        "\27\uffff}>";
    static final String[] DFA213_transitionS = {
            "\1\1",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\2\13\uffff\10\4\1\uffff"+
            "\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA213_eot = DFA.unpackEncodedString(DFA213_eotS);
    static final short[] DFA213_eof = DFA.unpackEncodedString(DFA213_eofS);
    static final char[] DFA213_min = DFA.unpackEncodedStringToUnsignedChars(DFA213_minS);
    static final char[] DFA213_max = DFA.unpackEncodedStringToUnsignedChars(DFA213_maxS);
    static final short[] DFA213_accept = DFA.unpackEncodedString(DFA213_acceptS);
    static final short[] DFA213_special = DFA.unpackEncodedString(DFA213_specialS);
    static final short[][] DFA213_transition;

    static {
        int numStates = DFA213_transitionS.length;
        DFA213_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA213_transition[i] = DFA.unpackEncodedString(DFA213_transitionS[i]);
        }
    }

    class DFA213 extends DFA {

        public DFA213(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 213;
            this.eot = DFA213_eot;
            this.eof = DFA213_eof;
            this.min = DFA213_min;
            this.max = DFA213_max;
            this.accept = DFA213_accept;
            this.special = DFA213_special;
            this.transition = DFA213_transition;
        }
        public String getDescription() {
            return "()+ loopback of 865:7: ( '[' expression ']' )+";
        }
    }
 

    public static final BitSet FOLLOW_annotations_in_compilationUnit453 = new BitSet(new long[]{0x0000000000000200L,0x04F0000000000000L,0x000000080007FE08L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit456 = new BitSet(new long[]{0x0000000000000200L,0x04F0000000000000L,0x000000080007FE08L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit459 = new BitSet(new long[]{0x0000000000000200L,0x04F0000000000000L,0x000000080007FE08L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit462 = new BitSet(new long[]{0x0000000000000202L,0x04F0000000000000L,0x000000080007FE08L});
    public static final BitSet FOLLOW_116_in_packageDeclaration496 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_qualifiedName_in_packageDeclaration498 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_packageDeclaration500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_importDeclaration520 = new BitSet(new long[]{0x0000000000000000L,0x0080000200000000L});
    public static final BitSet FOLLOW_119_in_importDeclaration522 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration527 = new BitSet(new long[]{0x0000000000000000L,0x0120000000000000L});
    public static final BitSet FOLLOW_120_in_importDeclaration530 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration534 = new BitSet(new long[]{0x0000000000000000L,0x0120000000000000L});
    public static final BitSet FOLLOW_120_in_importDeclaration539 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_importDeclaration543 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_importDeclaration547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_typeDeclaration579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_classOrInterfaceDeclaration591 = new BitSet(new long[]{0x0000000000000200L,0x0480000000000000L,0x000000080007FE08L});
    public static final BitSet FOLLOW_classDeclaration_in_classOrInterfaceDeclaration598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classOrInterfaceDeclaration620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_classDeclaration675 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_classDeclaration677 = new BitSet(new long[]{0x0000000000000000L,0x3800000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_classDeclaration680 = new BitSet(new long[]{0x0000000000000000L,0x3800000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_classDeclaration693 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000007F80000L});
    public static final BitSet FOLLOW_type_in_classDeclaration695 = new BitSet(new long[]{0x0000000000000000L,0x3800000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_classDeclaration709 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000007F80000L});
    public static final BitSet FOLLOW_typeList_in_classDeclaration711 = new BitSet(new long[]{0x0000000000000000L,0x3800000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_classBody_in_classDeclaration723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_typeParameters760 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters764 = new BitSet(new long[]{0x0000000000000000L,0xC000000000000000L});
    public static final BitSet FOLLOW_126_in_typeParameters767 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters771 = new BitSet(new long[]{0x0000000000000000L,0xC000000000000000L});
    public static final BitSet FOLLOW_127_in_typeParameters775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeParameter792 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_typeParameter795 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000007F80000L});
    public static final BitSet FOLLOW_bound_in_typeParameter797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_bound831 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_bound834 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000007F80000L});
    public static final BitSet FOLLOW_type_in_bound838 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_ENUM_in_enumDeclaration857 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_enumDeclaration859 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_enumDeclaration862 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000007F80000L});
    public static final BitSet FOLLOW_typeList_in_enumDeclaration864 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_enumBody_in_enumDeclaration868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_enumBody894 = new BitSet(new long[]{0x0000000000000000L,0x0020000200000000L,0x0000000800000004L});
    public static final BitSet FOLLOW_enumConstants_in_enumBody896 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_enumBodyDeclarations_in_enumBody899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_enumBody902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants921 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_enumConstants924 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants926 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_annotations_in_enumConstant945 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_enumConstant948 = new BitSet(new long[]{0x0000000000000002L,0x3800000000000000L,0x0000000020000002L});
    public static final BitSet FOLLOW_arguments_in_enumConstant951 = new BitSet(new long[]{0x0000000000000002L,0x3800000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_classBody_in_enumConstant956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_enumBodyDeclarations993 = new BitSet(new long[]{0x0000000000000202L,0x24A0000200000000L,0x0000000807FFFE1AL});
    public static final BitSet FOLLOW_classBodyDeclaration_in_enumBodyDeclarations996 = new BitSet(new long[]{0x0000000000000202L,0x24A0000200000000L,0x0000000807FFFE1AL});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration1015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration1020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_normalInterfaceDeclaration1032 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_normalInterfaceDeclaration1034 = new BitSet(new long[]{0x0000000000000000L,0x2800000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_normalInterfaceDeclaration1036 = new BitSet(new long[]{0x0000000000000000L,0x2800000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_normalInterfaceDeclaration1040 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000007F80000L});
    public static final BitSet FOLLOW_typeList_in_normalInterfaceDeclaration1042 = new BitSet(new long[]{0x0000000000000000L,0x2800000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceBody_in_normalInterfaceDeclaration1046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList1077 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_typeList1080 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000007F80000L});
    public static final BitSet FOLLOW_type_in_typeList1083 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_129_in_classBody1097 = new BitSet(new long[]{0x0000000000000200L,0x24A0000200000000L,0x0000000807FFFE1EL});
    public static final BitSet FOLLOW_classBodyDeclaration_in_classBody1100 = new BitSet(new long[]{0x0000000000000200L,0x24A0000200000000L,0x0000000807FFFE1EL});
    public static final BitSet FOLLOW_130_in_classBody1103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_interfaceBody1116 = new BitSet(new long[]{0x0000000000000200L,0x24A0000200000000L,0x0000000807FFFE1CL});
    public static final BitSet FOLLOW_interfaceBodyDeclaration_in_interfaceBody1119 = new BitSet(new long[]{0x0000000000000200L,0x24A0000200000000L,0x0000000807FFFE1CL});
    public static final BitSet FOLLOW_130_in_interfaceBody1122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_classBodyDeclaration1134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_classBodyDeclaration1140 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration1142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_classBodyDeclaration1155 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration1158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_classBodyDeclaration1167 = new BitSet(new long[]{0x0000000000000200L,0x24A0000200000000L,0x0000000807FFFE1AL});
    public static final BitSet FOLLOW_genericMethodOrConstructorDecl_in_classBodyDeclaration1177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_classBodyDeclaration1203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_classBodyDeclaration1229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_classBodyDeclaration1254 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_classBodyDeclaration1256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_classBodyDeclaration1258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_classBodyDeclaration1292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_classBodyDeclaration1294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classBodyDeclaration1325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_classBodyDeclaration1350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classBodyDeclaration1377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_genericMethodOrConstructorDecl1411 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000007F80010L});
    public static final BitSet FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl1413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericMethodOrConstructorRest1425 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_genericMethodOrConstructorRest1443 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest1467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_methodDeclaration1488 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_methodDeclaration1490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_methodDeclaration1492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_fieldDeclaration1512 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_fieldDeclaration1514 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_fieldDeclaration1516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_interfaceBodyDeclaration1535 = new BitSet(new long[]{0x0000000000000200L,0x24A0000200000000L,0x0000000807FFFE1AL});
    public static final BitSet FOLLOW_constantDeclaration_in_interfaceBodyDeclaration1542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceBodyDeclaration1564 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceBodyDeclaration1566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceGenericMethodDecl_in_interfaceBodyDeclaration1595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_interfaceBodyDeclaration1617 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceBodyDeclaration1619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_interfaceBodyDeclaration1652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_interfaceBodyDeclaration1675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_interfaceBodyDeclaration1700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaratorRest1714 = new BitSet(new long[]{0x0000000000000000L,0x00A0000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_133_in_methodDeclaratorRest1726 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000007F80000L});
    public static final BitSet FOLLOW_typeList_in_methodDeclaratorRest1728 = new BitSet(new long[]{0x0000000000000000L,0x00A0000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_methodBody_in_methodDeclaratorRest1744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_methodDeclaratorRest1772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidMethodDeclaratorRest1806 = new BitSet(new long[]{0x0000000000000000L,0x00A0000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_133_in_voidMethodDeclaratorRest1809 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000007F80000L});
    public static final BitSet FOLLOW_typeList_in_voidMethodDeclaratorRest1811 = new BitSet(new long[]{0x0000000000000000L,0x00A0000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_methodBody_in_voidMethodDeclaratorRest1827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_voidMethodDeclaratorRest1855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest1889 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_interfaceMethodDeclaratorRest1892 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000007F80000L});
    public static final BitSet FOLLOW_typeList_in_interfaceMethodDeclaratorRest1894 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_interfaceMethodDeclaratorRest1898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceGenericMethodDecl1922 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000007F80010L});
    public static final BitSet FOLLOW_type_in_interfaceGenericMethodDecl1928 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceGenericMethodDecl1930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl1932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_interfaceGenericMethodDecl1948 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceGenericMethodDecl1950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl1952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest1982 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_voidInterfaceMethodDeclaratorRest1985 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000007F80000L});
    public static final BitSet FOLLOW_typeList_in_voidInterfaceMethodDeclaratorRest1987 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_voidInterfaceMethodDeclaratorRest1991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_constructorDeclaratorRest2015 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_133_in_constructorDeclaratorRest2018 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000007F80000L});
    public static final BitSet FOLLOW_typeList_in_constructorDeclaratorRest2020 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_methodBody_in_constructorDeclaratorRest2024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators2053 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_variableDeclarators2056 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators2060 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclarator2079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_variableDeclaratorRest_in_variableDeclarator2081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_variableDeclaratorRest2103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_variableDeclaratorRest2105 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_136_in_variableDeclaratorRest2110 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000737F80012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest2112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_variableDeclaratorRest2127 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000737F80012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest2129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_constantDeclaration2147 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_constantDeclarators_in_constantDeclaration2149 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_constantDeclaration2151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_constantDeclarator2168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclarator2170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclarator_in_constantDeclarators2193 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_constantDeclarators2196 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_constantDeclarator_in_constantDeclarators2200 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_134_in_constantDeclaratorRest2221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_constantDeclaratorRest2223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_136_in_constantDeclaratorRest2227 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000737F80012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_variableInitializer_in_constantDeclaratorRest2229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaratorId2248 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_variableDeclaratorId2251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_variableDeclaratorId2253 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer2266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer2276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_arrayInitializer2288 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000737F80016L,0x00000000000000F8L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer2291 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_126_in_arrayInitializer2294 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000737F80012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer2296 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_126_in_arrayInitializer2301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_arrayInitializer2308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_modifier2333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_modifier2343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_modifier2353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_modifier2363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_modifier2373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_modifier2383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_modifier2393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_modifier2403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_modifier2413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_modifier2423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_modifier2433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_modifier2443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_packageOrTypeName2457 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_packageOrTypeName2460 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_packageOrTypeName2462 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_Identifier_in_enumConstantName2480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeName2496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_packageOrTypeName_in_typeName2506 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_typeName2508 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_typeName2510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_refComponent_in_type2523 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_120_in_type2526 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_refComponent_in_type2530 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_type2535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_type2537 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_primitiveType_in_type2559 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_type2562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_type2564 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Identifier_in_refComponent2593 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_typeArguments_in_refComponent2596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_primitiveType0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_variableModifier2696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_variableModifier2706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_typeArguments2717 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x000000000FF80000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments2721 = new BitSet(new long[]{0x0000000000000000L,0xC000000000000000L});
    public static final BitSet FOLLOW_126_in_typeArguments2724 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x000000000FF80000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments2728 = new BitSet(new long[]{0x0000000000000000L,0xC000000000000000L});
    public static final BitSet FOLLOW_127_in_typeArguments2732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument2750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_typeArgument2755 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_123_in_typeArgument2764 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000007F80000L});
    public static final BitSet FOLLOW_type_in_typeArgument2766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_typeArgument2799 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000007F80000L});
    public static final BitSet FOLLOW_type_in_typeArgument2801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList2843 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_qualifiedNameList2846 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList2849 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_157_in_formalParameters2863 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000847F82000L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameters2865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_formalParameters2868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameterDecls2885 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls2888 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDecls2900 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_formalParameterDecls2903 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameterDecls2905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_formalParameterDecls2939 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDecls2941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_methodBody2984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName3002 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_qualifiedName3005 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName3009 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_integerLiteral_in_literal3032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FloatingPointLiteral_in_literal3050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CharacterLiteral_in_literal3068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal3086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal3104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_literal3122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_integerLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_booleanLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotations3210 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_163_in_annotation3222 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_annotationName_in_annotation3224 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_157_in_annotation3227 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F77F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_elementValuePairs_in_annotation3229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_annotation3232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationName3254 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_annotationName3257 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_annotationName3259 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs3273 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_elementValuePairs3276 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs3278 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_Identifier_in_elementValuePair3293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_elementValuePair3295 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair3299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue3311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue3318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue3325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_elementValueArrayInitializer3337 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82016L,0x00000000000000F8L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer3340 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_126_in_elementValueArrayInitializer3343 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer3345 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_elementValueArrayInitializer3352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_annotationTypeDeclaration3364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_annotationTypeDeclaration3366 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_annotationTypeDeclaration3368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeBody_in_annotationTypeDeclaration3370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_annotationTypeBody3382 = new BitSet(new long[]{0x0000000000000200L,0x24A0000200000000L,0x0000000807FFFE1EL});
    public static final BitSet FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody3385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_annotationTypeBody3389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3402 = new BitSet(new long[]{0x0000000000000202L,0x24A0000200000000L,0x0000000807FFFE1AL});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3406 = new BitSet(new long[]{0x0000000000000202L,0x24A0000200000000L,0x0000000807FFFE1AL});
    public static final BitSet FOLLOW_modifier_in_annotationTypeElementDeclaration3421 = new BitSet(new long[]{0x0000000000000200L,0x24A0000200000000L,0x0000000807FFFE1AL});
    public static final BitSet FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration3425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_annotationTypeElementRest3437 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest3439 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_annotationTypeElementRest3441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_annotationTypeElementRest3448 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_annotationTypeElementRest3450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_annotationTypeElementRest3458 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_annotationTypeElementRest3460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_annotationTypeElementRest3468 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_annotationTypeElementRest3470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest3478 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_annotationTypeElementRest3480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest3493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest3500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationMethodRest3513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_157_in_annotationMethodRest3515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_annotationMethodRest3517 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_defaultValue_in_annotationMethodRest3520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarators_in_annotationConstantRest3537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_defaultValue3552 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_elementValue_in_defaultValue3554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_block3568 = new BitSet(new long[]{0x0000000000000200L,0x24A000FE00000000L,0x0067DEAF37FFFE3EL,0x00000000000000F8L});
    public static final BitSet FOLLOW_blockStatement_in_block3570 = new BitSet(new long[]{0x0000000000000200L,0x24A000FE00000000L,0x0067DEAF37FFFE3EL,0x00000000000000F8L});
    public static final BitSet FOLLOW_130_in_block3573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_blockStatement3594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_blockStatement3599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement3607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_localVariableDeclaration3619 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration3622 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_localVariableDeclaration3624 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_localVariableDeclaration3626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement3655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_statement3665 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000737F80012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_statement3667 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_statement3670 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000737F80012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_statement3672 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_statement3676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_statement3698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_parExpression_in_statement3700 = new BitSet(new long[]{0x0000000000000200L,0x24A000FE00000000L,0x0067DEAF37FFFE3EL,0x00000000000000F8L});
    public static final BitSet FOLLOW_statement_in_statement3702 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_168_in_statement3712 = new BitSet(new long[]{0x0000000000000200L,0x24A000FE00000000L,0x0067DEAF37FFFE3EL,0x00000000000000F8L});
    public static final BitSet FOLLOW_statement_in_statement3714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_statement3740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_157_in_statement3742 = new BitSet(new long[]{0x0000000000000000L,0x202000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_forControl_in_statement3744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_statement3746 = new BitSet(new long[]{0x0000000000000200L,0x24A000FE00000000L,0x0067DEAF37FFFE3EL,0x00000000000000F8L});
    public static final BitSet FOLLOW_statement_in_statement3748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_statement3769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_parExpression_in_statement3771 = new BitSet(new long[]{0x0000000000000200L,0x24A000FE00000000L,0x0067DEAF37FFFE3EL,0x00000000000000F8L});
    public static final BitSet FOLLOW_statement_in_statement3773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_statement3798 = new BitSet(new long[]{0x0000000000000200L,0x24A000FE00000000L,0x0067DEAF37FFFE3EL,0x00000000000000F8L});
    public static final BitSet FOLLOW_statement_in_statement3800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_170_in_statement3802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_parExpression_in_statement3804 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_statement3806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_statement3831 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_block_in_statement3833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008200000000000L});
    public static final BitSet FOLLOW_catches_in_statement3843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_173_in_statement3847 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_block_in_statement3849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_statement3877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_statement3900 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_block_in_statement3902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_statement3936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_parExpression_in_statement3938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_statement3940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010001000000004L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_statement3942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_statement3944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_statement3965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_parExpression_in_statement3967 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_block_in_statement3969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_statement3990 = new BitSet(new long[]{0x0000000000000000L,0x202000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_statement3992 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_statement3995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_statement4015 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_statement4017 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_statement4019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_statement4038 = new BitSet(new long[]{0x0000000000000000L,0x0020000200000000L});
    public static final BitSet FOLLOW_Identifier_in_statement4040 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_statement4043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_statement4063 = new BitSet(new long[]{0x0000000000000000L,0x0020000200000000L});
    public static final BitSet FOLLOW_Identifier_in_statement4065 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_statement4068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_statement4086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementExpression_in_statement4101 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_statement4103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_statement4117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_statement4119 = new BitSet(new long[]{0x0000000000000200L,0x24A000FE00000000L,0x0067DEAF37FFFE3EL,0x00000000000000F8L});
    public static final BitSet FOLLOW_statement_in_statement4121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches4143 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_catchClause_in_catches4146 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_179_in_catchClause4162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_157_in_catchClause4164 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_formalParameter_in_catchClause4166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_catchClause4168 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_block_in_catchClause4170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameter4196 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_type_in_formalParameter4199 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameter4201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups4215 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0010001000000000L});
    public static final BitSet FOLLOW_switchLabel_in_switchBlockStatementGroup4229 = new BitSet(new long[]{0x0000000000000202L,0x24A000FE00000000L,0x0067DEAF37FFFE3EL,0x00000000000000F8L});
    public static final BitSet FOLLOW_blockStatement_in_switchBlockStatementGroup4231 = new BitSet(new long[]{0x0000000000000202L,0x24A000FE00000000L,0x0067DEAF37FFFE3EL,0x00000000000000F8L});
    public static final BitSet FOLLOW_180_in_switchLabel4259 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_constantExpression_in_switchLabel4261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_switchLabel4263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_switchLabel4279 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_enumConstantName_in_switchLabel4281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_switchLabel4283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_switchLabel4299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_switchLabel4301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_moreStatementExpressions4320 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_statementExpression_in_moreStatementExpressions4322 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_forVarControl_in_forControl4343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_forControl4356 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_forControl4359 = new BitSet(new long[]{0x0000000000000000L,0x202000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_forControl4363 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_forControl4366 = new BitSet(new long[]{0x0000000000000002L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_forUpdate_in_forControl4370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forInit4405 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_type_in_forInit4408 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_forInit4410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit4432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forVarControl4444 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_type_in_forVarControl4447 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_forVarControl4449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_forVarControl4451 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_forVarControl4453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdate4483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_parExpression4496 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_parExpression4499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_parExpression4501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList4519 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_expressionList4522 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_expressionList4525 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_expression_in_statementExpression4541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constantExpression4553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression4565 = new BitSet(new long[]{0x0000000000000002L,0xA200000000000000L,0x0FE0000000000100L});
    public static final BitSet FOLLOW_136_in_expression4575 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_expression4577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_expression4596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_expression4598 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_expression4600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_expression4628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_expression4630 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_expression4632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_expression4660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_expression4662 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_expression4664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_expression4692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_expression4694 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_expression4696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_expression4725 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_expression4727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_expression4750 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_expression4752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_expression4775 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_expression4777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_expression4805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_expression4807 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_expression4809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_expression4837 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_expression4839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_expression4841 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_expression4843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_expression4871 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_expression4873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_expression4875 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_expression4877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_expression4903 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_expression4905 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_expression4907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_expression4909 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_expression4911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression4958 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_conditionalExpression4975 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression4977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_conditionalExpression4979 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression4981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5028 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_188_in_conditionalOrExpression5046 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalOrExpression5048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5094 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_189_in_conditionalAndExpression5112 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalAndExpression5114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5166 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_inclusiveOrExpression5188 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_inclusiveOrExpression5190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression5237 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_191_in_exclusiveOrExpression5253 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_exclusiveOrExpression5255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression5299 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_andExpression5315 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_andExpression_in_andExpression5317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5361 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_192_in_equalityExpression5377 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_equalityExpression5400 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression5446 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_instanceOfExpression5461 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression5463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5507 = new BitSet(new long[]{0x0000000000000002L,0xA000000000000000L});
    public static final BitSet FOLLOW_125_in_relationalExpression5523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_relationalExpression5525 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_relationalExpression5548 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_relationalExpression5571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_relationalExpression5573 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_relationalExpression5596 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5643 = new BitSet(new long[]{0x0000000000000002L,0xA000000000000000L});
    public static final BitSet FOLLOW_125_in_shiftExpression5662 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_shiftExpression5664 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_127_in_shiftExpression5668 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_shiftExpression5670 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5673 = new BitSet(new long[]{0x0000000000000002L,0xA000000000000000L});
    public static final BitSet FOLLOW_127_in_shiftExpression5707 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_shiftExpression5709 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_shiftExpression5711 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5713 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5756 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0060000000000000L});
    public static final BitSet FOLLOW_181_in_additiveExpression5775 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_182_in_additiveExpression5779 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5782 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0060000000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5833 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0880000000000000L});
    public static final BitSet FOLLOW_121_in_multiplicativeExpression5853 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_183_in_multiplicativeExpression5857 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_187_in_multiplicativeExpression5861 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5864 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0880000000000000L});
    public static final BitSet FOLLOW_181_in_unaryExpression5916 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_unaryExpression5930 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_unaryExpression5950 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_unaryExpression5970 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression5990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_unaryExpressionNotPlusMinus6021 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_unaryExpressionNotPlusMinus6040 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus6060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus6067 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000000000000040L,0x0000000000000018L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus6077 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000000000000040L,0x0000000000000018L});
    public static final BitSet FOLLOW_195_in_unaryExpressionNotPlusMinus6090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_unaryExpressionNotPlusMinus6112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_unaryExpressionNotPlusMinus6156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_unaryExpressionNotPlusMinus6171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_castExpression6210 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression6212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_castExpression6214 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression6216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_castExpression6239 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_type_in_castExpression6241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_castExpression6243 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_castExpression6264 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_castExpression6266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_castExpression6268 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary6290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6297 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_primary6299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary6323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_primary6333 = new BitSet(new long[]{0x0000000000000000L,0x2000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6335 = new BitSet(new long[]{0x0000000000000000L,0x2000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_primitiveType_in_primary6338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_primary6354 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_primary6356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_primary6358 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_primary6363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_primary6365 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_primary6396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_primary6398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_arrayInitializer_in_primary6402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_primary6434 = new BitSet(new long[]{0x0000000000000000L,0x2000000200000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6436 = new BitSet(new long[]{0x0000000000000000L,0x2000000200000000L});
    public static final BitSet FOLLOW_refComponent_in_primary6442 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000020000040L});
    public static final BitSet FOLLOW_120_in_primary6445 = new BitSet(new long[]{0x0000000000000000L,0x2000000200000000L});
    public static final BitSet FOLLOW_refComponent_in_primary6449 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000020000040L});
    public static final BitSet FOLLOW_134_in_primary6468 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_primary6470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_primary6472 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_primary6477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_primary6479 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_primary6512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_primary6514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_arrayInitializer_in_primary6518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_primary6547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_primary6579 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_primary6581 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_primary6583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_primary6605 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_primary6607 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_primary6609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_primary6630 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000000020000040L});
    public static final BitSet FOLLOW_arguments_in_primary6640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_primary6678 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000000020000040L});
    public static final BitSet FOLLOW_arguments_in_primary6694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_innerCreator6739 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000020000040L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator6741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest6763 = new BitSet(new long[]{0x0000000000000002L,0x3800000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_classBody_in_classCreatorRest6765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation6786 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_explicitGenericInvocation6788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_nonWildcardTypeArguments6800 = new BitSet(new long[]{0x0000000000000000L,0x2000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments6802 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_nonWildcardTypeArguments6804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_explicitGenericInvocationSuffix6820 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000020000040L});
    public static final BitSet FOLLOW_superSuffix_in_explicitGenericInvocationSuffix6822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_explicitGenericInvocationSuffix6836 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000020000040L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocationSuffix6838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix6857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_superSuffix6869 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_superSuffix6871 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000000020000040L});
    public static final BitSet FOLLOW_arguments_in_superSuffix6874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_selector6888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_156_in_selector6890 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000020000040L});
    public static final BitSet FOLLOW_arguments_in_selector6892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_selector6910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_199_in_selector6912 = new BitSet(new long[]{0x0000000000000000L,0x2000000200000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector6915 = new BitSet(new long[]{0x0000000000000000L,0x2000000200000000L});
    public static final BitSet FOLLOW_innerCreator_in_selector6919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_selector6934 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector6936 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_selector6938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_selector6957 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_selector6959 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000000020000040L});
    public static final BitSet FOLLOW_arguments_in_selector6969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_selector7004 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_selector7006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_selector7008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_arguments7027 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F77F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expressionList_in_arguments7030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_arguments7033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_synpred1_Java453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_synpred33_Java1140 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_block_in_synpred33_Java1142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_synpred35_Java1155 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_block_in_synpred35_Java1158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_synpred38_Java1203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_synpred39_Java1229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaration_in_synpred47_Java1542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred48_Java1564 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_synpred48_Java1566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_synpred48_Java1568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_synpred84_Java2460 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_Identifier_in_synpred84_Java2462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_synpred102_Java2764 = new BitSet(new long[]{0x0000000000000000L,0x2000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_type_in_synpred102_Java2766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred118_Java3210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_synpred135_Java3458 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_synpred135_Java3460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred142_Java3594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred143_Java3599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_synpred148_Java3712 = new BitSet(new long[]{0x0000000000000200L,0x24A000FE00000000L,0x0067DEAF37FFFE3EL,0x00000000000000F8L});
    public static final BitSet FOLLOW_statement_in_synpred148_Java3714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred153_Java3843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_173_in_synpred153_Java3847 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_block_in_synpred153_Java3849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred154_Java3877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_synpred171_Java4259 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_constantExpression_in_synpred171_Java4261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_synpred171_Java4263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_synpred172_Java4279 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_enumConstantName_in_synpred172_Java4281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_synpred172_Java4283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forVarControl_in_synpred174_Java4343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_synpred179_Java4405 = new BitSet(new long[]{0x0000000000000000L,0x2000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_type_in_synpred179_Java4408 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_synpred179_Java4410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_synpred182_Java4575 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_synpred182_Java4577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_synpred183_Java4596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred183_Java4598 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_synpred183_Java4600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_synpred184_Java4628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred184_Java4630 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_synpred184_Java4632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_synpred185_Java4660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred185_Java4662 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_synpred185_Java4664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_synpred186_Java4692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred186_Java4694 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_synpred186_Java4696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_synpred187_Java4725 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_synpred187_Java4727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_synpred188_Java4750 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_synpred188_Java4752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_synpred189_Java4775 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_synpred189_Java4777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_synpred190_Java4805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred190_Java4807 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_synpred190_Java4809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_synpred191_Java4837 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_synpred191_Java4839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred191_Java4841 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_synpred191_Java4843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_synpred192_Java4871 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_synpred192_Java4873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred192_Java4875 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_synpred192_Java4877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_synpred193_Java4903 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_synpred193_Java4905 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_synpred193_Java4907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred193_Java4909 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_synpred193_Java4911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_synpred204_Java5548 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_shiftExpression_in_synpred204_Java5550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_synpred208_Java5662 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_synpred208_Java5664 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_127_in_synpred208_Java5668 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_synpred208_Java5670 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred208_Java5673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_synpred209_Java5662 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_synpred209_Java5664 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_127_in_synpred209_Java5668 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_synpred209_Java5670 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred209_Java5673 = new BitSet(new long[]{0x0000000000000002L,0xA000000000000000L});
    public static final BitSet FOLLOW_127_in_synpred210_Java5707 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_synpred210_Java5709 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_synpred210_Java5711 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred210_Java5713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_synpred211_Java5707 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_synpred211_Java5709 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_synpred211_Java5711 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred211_Java5713 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_castExpression_in_synpred225_Java6060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_synpred232_Java6210 = new BitSet(new long[]{0x0000000000000000L,0x2000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_primitiveType_in_synpred232_Java6212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_synpred232_Java6214 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred232_Java6216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_synpred233_Java6239 = new BitSet(new long[]{0x0000000000000000L,0x2000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_type_in_synpred233_Java6241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_synpred233_Java6243 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_synpred233_Java6245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_synpred238_Java6354 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_synpred238_Java6356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred238_Java6358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_synpred242_Java6333 = new BitSet(new long[]{0x0000000000000000L,0x2000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred242_Java6335 = new BitSet(new long[]{0x0000000000000000L,0x2000000200000000L,0x0000000807F82000L});
    public static final BitSet FOLLOW_primitiveType_in_synpred242_Java6338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_synpred242_Java6354 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_synpred242_Java6356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred242_Java6358 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_synpred242_Java6363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred242_Java6365 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_synpred242_Java6396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred242_Java6398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_arrayInitializer_in_synpred242_Java6402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_synpred245_Java6468 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_synpred245_Java6470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred245_Java6472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_synpred250_Java6434 = new BitSet(new long[]{0x0000000000000000L,0x2000000200000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred250_Java6436 = new BitSet(new long[]{0x0000000000000000L,0x2000000200000000L});
    public static final BitSet FOLLOW_refComponent_in_synpred250_Java6442 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000020000040L});
    public static final BitSet FOLLOW_120_in_synpred250_Java6445 = new BitSet(new long[]{0x0000000000000000L,0x2000000200000000L});
    public static final BitSet FOLLOW_refComponent_in_synpred250_Java6449 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000020000040L});
    public static final BitSet FOLLOW_134_in_synpred250_Java6468 = new BitSet(new long[]{0x0000000000000000L,0x200000FE00000000L,0x0060000F37F82012L,0x00000000000000F8L});
    public static final BitSet FOLLOW_expression_in_synpred250_Java6470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred250_Java6472 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_synpred250_Java6477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred250_Java6479 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_synpred250_Java6512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred250_Java6514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_arrayInitializer_in_synpred250_Java6518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_synpred250_Java6547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred251_Java6579 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_synpred251_Java6581 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_synpred251_Java6583 = new BitSet(new long[]{0x0000000000000002L});

}