// $ANTLR 3.1 jkit/java/Java.g 2008-12-02 15:27:09

package jkit.java;
import jkit.compiler.SyntaxError;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g 
 *  and got two errors that are ok (for now):
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created 
 *          elementValuePair and elementValuePairs rules, then used them in the 
 *          annotation rule.  Allows it to recognize annotation references with 
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the Identifier portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which 
 *          has the Identifier portion in it, the parser would fail on constants in 
 *          annotation definitions because it expected two identifiers.  
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to 
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing 
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *          Again, JLS doesn't seem to allow this, but java.lang.Class has an example of
 *          of this construct.
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 * 		
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *	Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *	and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *	--a[i].foo didn't work. Fixed unaryExpression
 */
public class JavaParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "UNIT", "PACKAGE", "IMPORT", "STATIC_IMPORT", "CLASS", "INTERFACE", "ENUM", "MODIFIERS", "EXTENDS", "IMPLEMENTS", "FIELD", "METHOD", "PARAMETER", "VARARGS", "TYPE", "VOID", "TYPE_PARAMETER", "THROWS", "ANNOTATION", "SUPER", "INTVAL", "FLOATVAL", "DOUBLEVAL", "CHARVAL", "STRINGVAL", "BOOLVAL", "NULLVAL", "BLOCK", "VARDEF", "ASSERT", "IF", "FOR", "WHILE", "DOWHILE", "RETURN", "THROW", "BREAK", "CONTINUE", "ASSIGN", "VAR", "LOR", "OR", "LAND", "AND", "XOR", "EQ", "NEQ", "INSTANCEOF", "LTEQ", "GTEQ", "LT", "GT", "SHL", "SHR", "USHR", "ADD", "SUB", "DIV", "MUL", "MOD", "DEREF", "NEG", "POSTINC", "PREINC", "PREDEC", "POSTDEC", "NOT", "INV", "CAST", "SELECTOR", "INVOKE", "ARRAYINDEX", "NEW", "GETCLASS", "SYNCHRONIZED", "INIT", "TEST", "STEP", "LABEL", "FOREACH", "TRY", "CATCH", "FINALLY", "CONDEXPR", "ARRAYVAL", "SWITCH", "CASE", "DEFAULT", "ARRAYINIT", "ARGUMENTS", "LABINOP", "NONE", "STATIC", "ENUM_CONSTANT", "Identifier", "FloatingPointLiteral", "CharacterLiteral", "StringLiteral", "HexLiteral", "OctalLiteral", "DecimalLiteral", "HexDigit", "IntegerTypeSuffix", "Exponent", "FloatTypeSuffix", "EscapeSequence", "UnicodeEscape", "OctalEscape", "Letter", "JavaIDDigit", "WS", "COMMENT", "LINE_COMMENT", "'package'", "';'", "'import'", "'static'", "'.'", "'*'", "'class'", "'extends'", "'implements'", "'<'", "','", "'>'", "'&'", "'{'", "'}'", "'interface'", "'void'", "'throws'", "'['", "']'", "'='", "'public'", "'protected'", "'private'", "'abstract'", "'final'", "'native'", "'synchronized'", "'transient'", "'volatile'", "'strictfp'", "'boolean'", "'char'", "'byte'", "'short'", "'int'", "'long'", "'float'", "'double'", "'?'", "'super'", "'('", "')'", "'...'", "'null'", "'true'", "'false'", "'@'", "'default'", "'assert'", "':'", "'if'", "'else'", "'for'", "'while'", "'do'", "'try'", "'finally'", "'switch'", "'return'", "'throw'", "'break'", "'continue'", "'catch'", "'case'", "'+'", "'-'", "'/'", "'&='", "'|='", "'^='", "'%'", "'||'", "'&&'", "'|'", "'^'", "'=='", "'!='", "'instanceof'", "'++'", "'--'", "'~'", "'!'", "'new'"
    };
    public static final int T__197=197;
    public static final int T__139=139;
    public static final int SYNCHRONIZED=78;
    public static final int T__174=174;
    public static final int HexDigit=105;
    public static final int T__196=196;
    public static final int T__144=144;
    public static final int T__122=122;
    public static final int METHOD=15;
    public static final int T__137=137;
    public static final int T__140=140;
    public static final int IMPORT=6;
    public static final int PACKAGE=5;
    public static final int CONTINUE=41;
    public static final int Letter=112;
    public static final int T__138=138;
    public static final int T__173=173;
    public static final int T__119=119;
    public static final int ASSERT=33;
    public static final int T__198=198;
    public static final int T__142=142;
    public static final int T__176=176;
    public static final int FloatTypeSuffix=108;
    public static final int T__118=118;
    public static final int T__135=135;
    public static final int EXTENDS=12;
    public static final int POSTDEC=69;
    public static final int ARRAYVAL=88;
    public static final int SUPER=23;
    public static final int IntegerTypeSuffix=106;
    public static final int ARGUMENTS=93;
    public static final int T__156=156;
    public static final int WS=114;
    public static final int NONE=95;
    public static final int T__159=159;
    public static final int T__177=177;
    public static final int T__158=158;
    public static final int FIELD=14;
    public static final int POSTINC=66;
    public static final int LAND=46;
    public static final int CATCH=85;
    public static final int STATIC=96;
    public static final int MUL=62;
    public static final int UnicodeEscape=110;
    public static final int T__157=157;
    public static final int MODIFIERS=11;
    public static final int CONDEXPR=87;
    public static final int T__143=143;
    public static final int T__193=193;
    public static final int XOR=48;
    public static final int T__141=141;
    public static final int ADD=59;
    public static final int FOREACH=83;
    public static final int TYPE=18;
    public static final int SHL=56;
    public static final int LOR=44;
    public static final int OctalLiteral=103;
    public static final int T__167=167;
    public static final int SELECTOR=73;
    public static final int T__194=194;
    public static final int CAST=72;
    public static final int THROWS=21;
    public static final int LABEL=82;
    public static final int MOD=63;
    public static final int T__191=191;
    public static final int DOWHILE=37;
    public static final int OR=45;
    public static final int BLOCK=31;
    public static final int T__192=192;
    public static final int EscapeSequence=109;
    public static final int INSTANCEOF=51;
    public static final int FloatingPointLiteral=99;
    public static final int NEQ=50;
    public static final int T__175=175;
    public static final int T__117=117;
    public static final int WHILE=36;
    public static final int COMMENT=115;
    public static final int INVOKE=74;
    public static final int T__199=199;
    public static final int T__172=172;
    public static final int GTEQ=53;
    public static final int LABINOP=94;
    public static final int UNIT=4;
    public static final int JavaIDDigit=113;
    public static final int T__170=170;
    public static final int T__136=136;
    public static final int RETURN=38;
    public static final int IF=34;
    public static final int T__171=171;
    public static final int GETCLASS=77;
    public static final int FOR=35;
    public static final int T__189=189;
    public static final int DEFAULT=91;
    public static final int OctalEscape=111;
    public static final int STRINGVAL=28;
    public static final int T__134=134;
    public static final int T__195=195;
    public static final int NEG=65;
    public static final int DEREF=64;
    public static final int SUB=60;
    public static final int NOT=70;
    public static final int TRY=84;
    public static final int T__162=162;
    public static final int T__160=160;
    public static final int T__123=123;
    public static final int STEP=81;
    public static final int T__145=145;
    public static final int T__187=187;
    public static final int INTVAL=24;
    public static final int SHR=57;
    public static final int PREDEC=68;
    public static final int ARRAYINIT=92;
    public static final int STATIC_IMPORT=7;
    public static final int T__186=186;
    public static final int AND=47;
    public static final int T__181=181;
    public static final int T__128=128;
    public static final int NULLVAL=30;
    public static final int PREINC=67;
    public static final int T__161=161;
    public static final int FINALLY=86;
    public static final int T__168=168;
    public static final int T__150=150;
    public static final int Identifier=98;
    public static final int ENUM_CONSTANT=97;
    public static final int T__182=182;
    public static final int EQ=49;
    public static final int NEW=76;
    public static final int BOOLVAL=29;
    public static final int LT=54;
    public static final int T__165=165;
    public static final int T__130=130;
    public static final int T__151=151;
    public static final int LINE_COMMENT=116;
    public static final int CASE=90;
    public static final int INTERFACE=9;
    public static final int CHARVAL=27;
    public static final int HexLiteral=102;
    public static final int INV=71;
    public static final int T__125=125;
    public static final int T__149=149;
    public static final int LTEQ=52;
    public static final int DecimalLiteral=104;
    public static final int T__166=166;
    public static final int BREAK=40;
    public static final int T__132=132;
    public static final int ANNOTATION=22;
    public static final int DIV=61;
    public static final int T__190=190;
    public static final int T__131=131;
    public static final int T__124=124;
    public static final int T__169=169;
    public static final int THROW=39;
    public static final int T__126=126;
    public static final int T__148=148;
    public static final int INIT=79;
    public static final int T__188=188;
    public static final int T__200=200;
    public static final int VARDEF=32;
    public static final int DOUBLEVAL=26;
    public static final int TYPE_PARAMETER=20;
    public static final int ARRAYINDEX=75;
    public static final int ASSIGN=42;
    public static final int T__127=127;
    public static final int VOID=19;
    public static final int T__183=183;
    public static final int T__133=133;
    public static final int FLOATVAL=25;
    public static final int VARARGS=17;
    public static final int T__164=164;
    public static final int T__120=120;
    public static final int USHR=58;
    public static final int ENUM=10;
    public static final int T__163=163;
    public static final int Exponent=107;
    public static final int T__153=153;
    public static final int IMPLEMENTS=13;
    public static final int SWITCH=89;
    public static final int T__185=185;
    public static final int CharacterLiteral=100;
    public static final int T__178=178;
    public static final int GT=55;
    public static final int StringLiteral=101;
    public static final int T__129=129;
    public static final int T__180=180;
    public static final int T__152=152;
    public static final int T__121=121;
    public static final int VAR=43;
    public static final int CLASS=8;
    public static final int T__147=147;
    public static final int T__179=179;
    public static final int EOF=-1;
    public static final int T__154=154;
    public static final int T__184=184;
    public static final int PARAMETER=16;
    public static final int T__155=155;
    public static final int TEST=80;
    public static final int T__146=146;

    // delegates
    // delegators


        public JavaParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public JavaParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[389+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return JavaParser.tokenNames; }
    public String getGrammarFileName() { return "jkit/java/Java.g"; }


        public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
    	  throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
        }


    public static class compilationUnit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // jkit/java/Java.g:211:1: compilationUnit : ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* -> ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* ) ;
    public final JavaParser.compilationUnit_return compilationUnit() throws RecognitionException {
        JavaParser.compilationUnit_return retval = new JavaParser.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotations_return annotations1 = null;

        JavaParser.packageDeclaration_return packageDeclaration2 = null;

        JavaParser.importDeclaration_return importDeclaration3 = null;

        JavaParser.typeDeclaration_return typeDeclaration4 = null;


        RewriteRuleSubtreeStream stream_importDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule importDeclaration");
        RewriteRuleSubtreeStream stream_packageDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule packageDeclaration");
        RewriteRuleSubtreeStream stream_annotations=new RewriteRuleSubtreeStream(adaptor,"rule annotations");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // jkit/java/Java.g:212:2: ( ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* -> ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* ) )
            // jkit/java/Java.g:212:4: ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )*
            {
            // jkit/java/Java.g:212:4: ( annotations )?
            int alt1=2;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // jkit/java/Java.g:0:0: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_compilationUnit463);
                    annotations1=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotations.add(annotations1.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:212:17: ( packageDeclaration )?
            int alt2=2;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    // jkit/java/Java.g:0:0: packageDeclaration
                    {
                    pushFollow(FOLLOW_packageDeclaration_in_compilationUnit466);
                    packageDeclaration2=packageDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_packageDeclaration.add(packageDeclaration2.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:212:37: ( importDeclaration )*
            loop3:
            do {
                int alt3=2;
                alt3 = dfa3.predict(input);
                switch (alt3) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit469);
            	    importDeclaration3=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_importDeclaration.add(importDeclaration3.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);

            // jkit/java/Java.g:212:56: ( typeDeclaration )*
            loop4:
            do {
                int alt4=2;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: typeDeclaration
            	    {
            	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit472);
            	    typeDeclaration4=typeDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration4.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);



            // AST REWRITE
            // elements: typeDeclaration, packageDeclaration, importDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 213:3: -> ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* )
            {
                // jkit/java/Java.g:213:6: ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNIT, "UNIT"), root_1);

                // jkit/java/Java.g:213:13: ( packageDeclaration )?
                if ( stream_packageDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_packageDeclaration.nextTree());

                }
                stream_packageDeclaration.reset();
                // jkit/java/Java.g:213:33: ( importDeclaration )*
                while ( stream_importDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_importDeclaration.nextTree());

                }
                stream_importDeclaration.reset();
                // jkit/java/Java.g:213:52: ( typeDeclaration )*
                while ( stream_typeDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeDeclaration.nextTree());

                }
                stream_typeDeclaration.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // jkit/java/Java.g:216:1: packageDeclaration : 'package' qualifiedName ';' -> ^( PACKAGE qualifiedName ) ;
    public final JavaParser.packageDeclaration_return packageDeclaration() throws RecognitionException {
        JavaParser.packageDeclaration_return retval = new JavaParser.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal5=null;
        Token char_literal7=null;
        JavaParser.qualifiedName_return qualifiedName6 = null;


        Object string_literal5_tree=null;
        Object char_literal7_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleSubtreeStream stream_qualifiedName=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // jkit/java/Java.g:217:2: ( 'package' qualifiedName ';' -> ^( PACKAGE qualifiedName ) )
            // jkit/java/Java.g:217:4: 'package' qualifiedName ';'
            {
            string_literal5=(Token)match(input,117,FOLLOW_117_in_packageDeclaration506); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(string_literal5);

            pushFollow(FOLLOW_qualifiedName_in_packageDeclaration508);
            qualifiedName6=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedName.add(qualifiedName6.getTree());
            char_literal7=(Token)match(input,118,FOLLOW_118_in_packageDeclaration510); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal7);



            // AST REWRITE
            // elements: qualifiedName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 217:32: -> ^( PACKAGE qualifiedName )
            {
                // jkit/java/Java.g:217:35: ^( PACKAGE qualifiedName )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PACKAGE, "PACKAGE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // jkit/java/Java.g:220:1: importDeclaration : 'import' ( 'static' i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( STATIC_IMPORT ( $i)+ ) | i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( IMPORT ( $i)+ ) ) ;
    public final JavaParser.importDeclaration_return importDeclaration() throws RecognitionException {
        JavaParser.importDeclaration_return retval = new JavaParser.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal8=null;
        Token string_literal9=null;
        Token char_literal10=null;
        Token char_literal11=null;
        Token char_literal12=null;
        Token char_literal13=null;
        Token char_literal14=null;
        Token char_literal15=null;
        Token i=null;
        List list_i=null;

        Object string_literal8_tree=null;
        Object string_literal9_tree=null;
        Object char_literal10_tree=null;
        Object char_literal11_tree=null;
        Object char_literal12_tree=null;
        Object char_literal13_tree=null;
        Object char_literal14_tree=null;
        Object char_literal15_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // jkit/java/Java.g:221:2: ( 'import' ( 'static' i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( STATIC_IMPORT ( $i)+ ) | i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( IMPORT ( $i)+ ) ) )
            // jkit/java/Java.g:221:4: 'import' ( 'static' i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( STATIC_IMPORT ( $i)+ ) | i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( IMPORT ( $i)+ ) )
            {
            string_literal8=(Token)match(input,119,FOLLOW_119_in_importDeclaration530); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal8);

            // jkit/java/Java.g:221:13: ( 'static' i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( STATIC_IMPORT ( $i)+ ) | i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( IMPORT ( $i)+ ) )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==120) ) {
                alt9=1;
            }
            else if ( (LA9_0==Identifier) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // jkit/java/Java.g:222:4: 'static' i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';'
                    {
                    string_literal9=(Token)match(input,120,FOLLOW_120_in_importDeclaration537); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(string_literal9);

                    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration541); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    // jkit/java/Java.g:222:27: ( '.' i+= Identifier )*
                    loop5:
                    do {
                        int alt5=2;
                        int LA5_0 = input.LA(1);

                        if ( (LA5_0==121) ) {
                            int LA5_1 = input.LA(2);

                            if ( (LA5_1==Identifier) ) {
                                alt5=1;
                            }


                        }


                        switch (alt5) {
                    	case 1 :
                    	    // jkit/java/Java.g:222:28: '.' i+= Identifier
                    	    {
                    	    char_literal10=(Token)match(input,121,FOLLOW_121_in_importDeclaration544); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_121.add(char_literal10);

                    	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration548); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_Identifier.add(i);

                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i);


                    	    }
                    	    break;

                    	default :
                    	    break loop5;
                        }
                    } while (true);

                    // jkit/java/Java.g:222:48: ( '.' i+= '*' )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==121) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // jkit/java/Java.g:222:49: '.' i+= '*'
                            {
                            char_literal11=(Token)match(input,121,FOLLOW_121_in_importDeclaration553); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_121.add(char_literal11);

                            i=(Token)match(input,122,FOLLOW_122_in_importDeclaration557); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_122.add(i);

                            if (list_i==null) list_i=new ArrayList();
                            list_i.add(i);


                            }
                            break;

                    }

                    char_literal12=(Token)match(input,118,FOLLOW_118_in_importDeclaration561); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal12);



                    // AST REWRITE
                    // elements: i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 222:66: -> ^( STATIC_IMPORT ( $i)+ )
                    {
                        // jkit/java/Java.g:222:69: ^( STATIC_IMPORT ( $i)+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STATIC_IMPORT, "STATIC_IMPORT"), root_1);

                        if ( !(stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:223:6: i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';'
                    {
                    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration580); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    // jkit/java/Java.g:223:20: ( '.' i+= Identifier )*
                    loop7:
                    do {
                        int alt7=2;
                        int LA7_0 = input.LA(1);

                        if ( (LA7_0==121) ) {
                            int LA7_1 = input.LA(2);

                            if ( (LA7_1==Identifier) ) {
                                alt7=1;
                            }


                        }


                        switch (alt7) {
                    	case 1 :
                    	    // jkit/java/Java.g:223:21: '.' i+= Identifier
                    	    {
                    	    char_literal13=(Token)match(input,121,FOLLOW_121_in_importDeclaration583); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_121.add(char_literal13);

                    	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration587); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_Identifier.add(i);

                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i);


                    	    }
                    	    break;

                    	default :
                    	    break loop7;
                        }
                    } while (true);

                    // jkit/java/Java.g:223:41: ( '.' i+= '*' )?
                    int alt8=2;
                    int LA8_0 = input.LA(1);

                    if ( (LA8_0==121) ) {
                        alt8=1;
                    }
                    switch (alt8) {
                        case 1 :
                            // jkit/java/Java.g:223:42: '.' i+= '*'
                            {
                            char_literal14=(Token)match(input,121,FOLLOW_121_in_importDeclaration592); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_121.add(char_literal14);

                            i=(Token)match(input,122,FOLLOW_122_in_importDeclaration596); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_122.add(i);

                            if (list_i==null) list_i=new ArrayList();
                            list_i.add(i);


                            }
                            break;

                    }

                    char_literal15=(Token)match(input,118,FOLLOW_118_in_importDeclaration600); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal15);



                    // AST REWRITE
                    // elements: i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 223:59: -> ^( IMPORT ( $i)+ )
                    {
                        // jkit/java/Java.g:223:62: ^( IMPORT ( $i)+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPORT, "IMPORT"), root_1);

                        if ( !(stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDeclaration"
    // jkit/java/Java.g:227:1: typeDeclaration : ( classOrInterfaceDeclaration | ';' );
    public final JavaParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
        JavaParser.typeDeclaration_return retval = new JavaParser.typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal17=null;
        JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration16 = null;


        Object char_literal17_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // jkit/java/Java.g:228:2: ( classOrInterfaceDeclaration | ';' )
            int alt10=2;
            alt10 = dfa10.predict(input);
            switch (alt10) {
                case 1 :
                    // jkit/java/Java.g:228:4: classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration627);
                    classOrInterfaceDeclaration16=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceDeclaration16.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:229:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal17=(Token)match(input,118,FOLLOW_118_in_typeDeclaration637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal17_tree = (Object)adaptor.create(char_literal17);
                    adaptor.addChild(root_0, char_literal17_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"

    public static class classOrInterfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceDeclaration"
    // jkit/java/Java.g:232:1: classOrInterfaceDeclaration : ( modifier )* ( classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) ) ;
    public final JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration() throws RecognitionException {
        JavaParser.classOrInterfaceDeclaration_return retval = new JavaParser.classOrInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int classOrInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.modifier_return modifier18 = null;

        JavaParser.classDeclaration_return classDeclaration19 = null;

        JavaParser.enumDeclaration_return enumDeclaration20 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration21 = null;


        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_enumDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule enumDeclaration");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        RewriteRuleSubtreeStream stream_interfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // jkit/java/Java.g:233:2: ( ( modifier )* ( classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) ) )
            // jkit/java/Java.g:233:4: ( modifier )* ( classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) )
            {
            // jkit/java/Java.g:233:4: ( modifier )*
            loop11:
            do {
                int alt11=2;
                alt11 = dfa11.predict(input);
                switch (alt11) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_classOrInterfaceDeclaration649);
            	    modifier18=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_modifier.add(modifier18.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            // jkit/java/Java.g:233:14: ( classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) )
            int alt12=3;
            switch ( input.LA(1) ) {
            case 123:
                {
                alt12=1;
                }
                break;
            case ENUM:
                {
                alt12=2;
                }
                break;
            case 132:
            case 164:
                {
                alt12=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // jkit/java/Java.g:234:3: classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_classOrInterfaceDeclaration656);
                    classDeclaration19=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classDeclaration.add(classDeclaration19.getTree());


                    // AST REWRITE
                    // elements: classDeclaration, modifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 234:20: -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                    {
                        // jkit/java/Java.g:234:23: ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CLASS, "CLASS"), root_1);

                        // jkit/java/Java.g:234:31: ( ^( MODIFIERS ( modifier )* ) )?
                        if ( stream_modifier.hasNext() ) {
                            // jkit/java/Java.g:234:31: ^( MODIFIERS ( modifier )* )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                            // jkit/java/Java.g:234:43: ( modifier )*
                            while ( stream_modifier.hasNext() ) {
                                adaptor.addChild(root_2, stream_modifier.nextTree());

                            }
                            stream_modifier.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_modifier.reset();
                        adaptor.addChild(root_1, stream_classDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:235:5: enumDeclaration
                    {
                    pushFollow(FOLLOW_enumDeclaration_in_classOrInterfaceDeclaration678);
                    enumDeclaration20=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumDeclaration.add(enumDeclaration20.getTree());


                    // AST REWRITE
                    // elements: enumDeclaration, modifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 235:21: -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                    {
                        // jkit/java/Java.g:235:24: ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ENUM, "ENUM"), root_1);

                        // jkit/java/Java.g:235:31: ( ^( MODIFIERS ( modifier )* ) )?
                        if ( stream_modifier.hasNext() ) {
                            // jkit/java/Java.g:235:31: ^( MODIFIERS ( modifier )* )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                            // jkit/java/Java.g:235:43: ( modifier )*
                            while ( stream_modifier.hasNext() ) {
                                adaptor.addChild(root_2, stream_modifier.nextTree());

                            }
                            stream_modifier.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_modifier.reset();
                        adaptor.addChild(root_1, stream_enumDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:236:5: interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration700);
                    interfaceDeclaration21=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceDeclaration.add(interfaceDeclaration21.getTree());


                    // AST REWRITE
                    // elements: modifier, interfaceDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 236:26: -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                    {
                        // jkit/java/Java.g:236:29: ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                        // jkit/java/Java.g:236:41: ( ^( MODIFIERS ( modifier )* ) )?
                        if ( stream_modifier.hasNext() ) {
                            // jkit/java/Java.g:236:41: ^( MODIFIERS ( modifier )* )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                            // jkit/java/Java.g:236:53: ( modifier )*
                            while ( stream_modifier.hasNext() ) {
                                adaptor.addChild(root_2, stream_modifier.nextTree());

                            }
                            stream_modifier.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_modifier.reset();
                        adaptor.addChild(root_1, stream_interfaceDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, classOrInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceDeclaration"

    public static class classDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classDeclaration"
    // jkit/java/Java.g:240:1: classDeclaration : 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody -> ^( Identifier ( typeParameters )? ) ( ^( EXTENDS type ) )? ( ^( IMPLEMENTS typeList ) )? ( classBody )? ;
    public final JavaParser.classDeclaration_return classDeclaration() throws RecognitionException {
        JavaParser.classDeclaration_return retval = new JavaParser.classDeclaration_return();
        retval.start = input.LT(1);
        int classDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal22=null;
        Token Identifier23=null;
        Token string_literal25=null;
        Token string_literal27=null;
        JavaParser.typeParameters_return typeParameters24 = null;

        JavaParser.type_return type26 = null;

        JavaParser.typeList_return typeList28 = null;

        JavaParser.classBody_return classBody29 = null;


        Object string_literal22_tree=null;
        Object Identifier23_tree=null;
        Object string_literal25_tree=null;
        Object string_literal27_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // jkit/java/Java.g:241:2: ( 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody -> ^( Identifier ( typeParameters )? ) ( ^( EXTENDS type ) )? ( ^( IMPLEMENTS typeList ) )? ( classBody )? )
            // jkit/java/Java.g:241:4: 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody
            {
            string_literal22=(Token)match(input,123,FOLLOW_123_in_classDeclaration733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_123.add(string_literal22);

            Identifier23=(Token)match(input,Identifier,FOLLOW_Identifier_in_classDeclaration735); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier23);

            // jkit/java/Java.g:241:23: ( typeParameters )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==126) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // jkit/java/Java.g:241:24: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_classDeclaration738);
                    typeParameters24=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters24.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:242:9: ( 'extends' type )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==124) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // jkit/java/Java.g:242:10: 'extends' type
                    {
                    string_literal25=(Token)match(input,124,FOLLOW_124_in_classDeclaration751); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(string_literal25);

                    pushFollow(FOLLOW_type_in_classDeclaration753);
                    type26=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type26.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:243:9: ( 'implements' typeList )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==125) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // jkit/java/Java.g:243:10: 'implements' typeList
                    {
                    string_literal27=(Token)match(input,125,FOLLOW_125_in_classDeclaration767); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_125.add(string_literal27);

                    pushFollow(FOLLOW_typeList_in_classDeclaration769);
                    typeList28=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList28.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_classDeclaration781);
            classBody29=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classBody.add(classBody29.getTree());


            // AST REWRITE
            // elements: typeParameters, Identifier, typeList, classBody, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 244:19: -> ^( Identifier ( typeParameters )? ) ( ^( EXTENDS type ) )? ( ^( IMPLEMENTS typeList ) )? ( classBody )?
            {
                // jkit/java/Java.g:244:22: ^( Identifier ( typeParameters )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/Java.g:244:35: ( typeParameters )?
                if ( stream_typeParameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeParameters.nextTree());

                }
                stream_typeParameters.reset();

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/Java.g:244:52: ( ^( EXTENDS type ) )?
                if ( stream_type.hasNext() ) {
                    // jkit/java/Java.g:244:52: ^( EXTENDS type )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXTENDS, "EXTENDS"), root_1);

                    adaptor.addChild(root_1, stream_type.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_type.reset();
                // jkit/java/Java.g:244:69: ( ^( IMPLEMENTS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:244:69: ^( IMPLEMENTS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPLEMENTS, "IMPLEMENTS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();
                // jkit/java/Java.g:244:93: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_classBody.nextTree());

                }
                stream_classBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, classDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classDeclaration"

    public static class typeParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameters"
    // jkit/java/Java.g:247:1: typeParameters : '<' t+= typeParameter ( ',' t+= typeParameter )* '>' -> ( $t)* ;
    public final JavaParser.typeParameters_return typeParameters() throws RecognitionException {
        JavaParser.typeParameters_return retval = new JavaParser.typeParameters_return();
        retval.start = input.LT(1);
        int typeParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal30=null;
        Token char_literal31=null;
        Token char_literal32=null;
        List list_t=null;
        JavaParser.typeParameter_return t = null;
        Object char_literal30_tree=null;
        Object char_literal31_tree=null;
        Object char_literal32_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_typeParameter=new RewriteRuleSubtreeStream(adaptor,"rule typeParameter");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // jkit/java/Java.g:248:2: ( '<' t+= typeParameter ( ',' t+= typeParameter )* '>' -> ( $t)* )
            // jkit/java/Java.g:248:4: '<' t+= typeParameter ( ',' t+= typeParameter )* '>'
            {
            char_literal30=(Token)match(input,126,FOLLOW_126_in_typeParameters818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal30);

            pushFollow(FOLLOW_typeParameter_in_typeParameters822);
            t=typeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeParameter.add(t.getTree());
            if (list_t==null) list_t=new ArrayList();
            list_t.add(t.getTree());

            // jkit/java/Java.g:248:25: ( ',' t+= typeParameter )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==127) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // jkit/java/Java.g:248:26: ',' t+= typeParameter
            	    {
            	    char_literal31=(Token)match(input,127,FOLLOW_127_in_typeParameters825); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal31);

            	    pushFollow(FOLLOW_typeParameter_in_typeParameters829);
            	    t=typeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeParameter.add(t.getTree());
            	    if (list_t==null) list_t=new ArrayList();
            	    list_t.add(t.getTree());


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            char_literal32=(Token)match(input,128,FOLLOW_128_in_typeParameters833); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal32);



            // AST REWRITE
            // elements: t
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: t
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
            root_0 = (Object)adaptor.nil();
            // 248:53: -> ( $t)*
            {
                // jkit/java/Java.g:248:56: ( $t)*
                while ( stream_t.hasNext() ) {
                    adaptor.addChild(root_0, stream_t.nextTree());

                }
                stream_t.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, typeParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameters"

    public static class typeParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameter"
    // jkit/java/Java.g:251:1: typeParameter : Identifier ( 'extends' bound )? -> ^( TYPE_PARAMETER ^( Identifier ( ^( EXTENDS bound ) )? ) ) ;
    public final JavaParser.typeParameter_return typeParameter() throws RecognitionException {
        JavaParser.typeParameter_return retval = new JavaParser.typeParameter_return();
        retval.start = input.LT(1);
        int typeParameter_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier33=null;
        Token string_literal34=null;
        JavaParser.bound_return bound35 = null;


        Object Identifier33_tree=null;
        Object string_literal34_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_bound=new RewriteRuleSubtreeStream(adaptor,"rule bound");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // jkit/java/Java.g:252:2: ( Identifier ( 'extends' bound )? -> ^( TYPE_PARAMETER ^( Identifier ( ^( EXTENDS bound ) )? ) ) )
            // jkit/java/Java.g:252:4: Identifier ( 'extends' bound )?
            {
            Identifier33=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeParameter850); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier33);

            // jkit/java/Java.g:252:15: ( 'extends' bound )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==124) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // jkit/java/Java.g:252:16: 'extends' bound
                    {
                    string_literal34=(Token)match(input,124,FOLLOW_124_in_typeParameter853); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(string_literal34);

                    pushFollow(FOLLOW_bound_in_typeParameter855);
                    bound35=bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound.add(bound35.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bound, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 252:34: -> ^( TYPE_PARAMETER ^( Identifier ( ^( EXTENDS bound ) )? ) )
            {
                // jkit/java/Java.g:252:37: ^( TYPE_PARAMETER ^( Identifier ( ^( EXTENDS bound ) )? ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETER, "TYPE_PARAMETER"), root_1);

                // jkit/java/Java.g:252:54: ^( Identifier ( ^( EXTENDS bound ) )? )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_2);

                // jkit/java/Java.g:252:67: ( ^( EXTENDS bound ) )?
                if ( stream_bound.hasNext() ) {
                    // jkit/java/Java.g:252:67: ^( EXTENDS bound )
                    {
                    Object root_3 = (Object)adaptor.nil();
                    root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXTENDS, "EXTENDS"), root_3);

                    adaptor.addChild(root_3, stream_bound.nextTree());

                    adaptor.addChild(root_2, root_3);
                    }

                }
                stream_bound.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, typeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameter"

    public static class bound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bound"
    // jkit/java/Java.g:255:1: bound : t+= type ( '&' t+= type )* -> ( $t)* ;
    public final JavaParser.bound_return bound() throws RecognitionException {
        JavaParser.bound_return retval = new JavaParser.bound_return();
        retval.start = input.LT(1);
        int bound_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal36=null;
        List list_t=null;
        JavaParser.type_return t = null;
        Object char_literal36_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // jkit/java/Java.g:256:2: (t+= type ( '&' t+= type )* -> ( $t)* )
            // jkit/java/Java.g:256:4: t+= type ( '&' t+= type )*
            {
            pushFollow(FOLLOW_type_in_bound889);
            t=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(t.getTree());
            if (list_t==null) list_t=new ArrayList();
            list_t.add(t.getTree());

            // jkit/java/Java.g:256:12: ( '&' t+= type )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==129) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // jkit/java/Java.g:256:13: '&' t+= type
            	    {
            	    char_literal36=(Token)match(input,129,FOLLOW_129_in_bound892); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_129.add(char_literal36);

            	    pushFollow(FOLLOW_type_in_bound896);
            	    t=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type.add(t.getTree());
            	    if (list_t==null) list_t=new ArrayList();
            	    list_t.add(t.getTree());


            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);



            // AST REWRITE
            // elements: t
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: t
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
            root_0 = (Object)adaptor.nil();
            // 256:27: -> ( $t)*
            {
                // jkit/java/Java.g:256:30: ( $t)*
                while ( stream_t.hasNext() ) {
                    adaptor.addChild(root_0, stream_t.nextTree());

                }
                stream_t.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, bound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bound"

    public static class enumDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumDeclaration"
    // jkit/java/Java.g:259:1: enumDeclaration : ENUM Identifier ( 'implements' typeList )? enumBody -> Identifier ( ^( IMPLEMENTS typeList ) )? ( enumBody )? ;
    public final JavaParser.enumDeclaration_return enumDeclaration() throws RecognitionException {
        JavaParser.enumDeclaration_return retval = new JavaParser.enumDeclaration_return();
        retval.start = input.LT(1);
        int enumDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token ENUM37=null;
        Token Identifier38=null;
        Token string_literal39=null;
        JavaParser.typeList_return typeList40 = null;

        JavaParser.enumBody_return enumBody41 = null;


        Object ENUM37_tree=null;
        Object Identifier38_tree=null;
        Object string_literal39_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_ENUM=new RewriteRuleTokenStream(adaptor,"token ENUM");
        RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // jkit/java/Java.g:260:2: ( ENUM Identifier ( 'implements' typeList )? enumBody -> Identifier ( ^( IMPLEMENTS typeList ) )? ( enumBody )? )
            // jkit/java/Java.g:260:4: ENUM Identifier ( 'implements' typeList )? enumBody
            {
            ENUM37=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumDeclaration915); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ENUM.add(ENUM37);

            Identifier38=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumDeclaration917); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier38);

            // jkit/java/Java.g:260:20: ( 'implements' typeList )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==125) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // jkit/java/Java.g:260:21: 'implements' typeList
                    {
                    string_literal39=(Token)match(input,125,FOLLOW_125_in_enumDeclaration920); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_125.add(string_literal39);

                    pushFollow(FOLLOW_typeList_in_enumDeclaration922);
                    typeList40=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList40.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumDeclaration926);
            enumBody41=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumBody.add(enumBody41.getTree());


            // AST REWRITE
            // elements: Identifier, typeList, enumBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 260:54: -> Identifier ( ^( IMPLEMENTS typeList ) )? ( enumBody )?
            {
                adaptor.addChild(root_0, stream_Identifier.nextNode());
                // jkit/java/Java.g:260:68: ( ^( IMPLEMENTS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:260:68: ^( IMPLEMENTS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPLEMENTS, "IMPLEMENTS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();
                // jkit/java/Java.g:260:92: ( enumBody )?
                if ( stream_enumBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumBody.nextTree());

                }
                stream_enumBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, enumDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBody"
    // jkit/java/Java.g:263:1: enumBody : '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' -> ( enumConstants )? ( enumBodyDeclarations )? ;
    public final JavaParser.enumBody_return enumBody() throws RecognitionException {
        JavaParser.enumBody_return retval = new JavaParser.enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal42=null;
        Token char_literal44=null;
        Token char_literal46=null;
        JavaParser.enumConstants_return enumConstants43 = null;

        JavaParser.enumBodyDeclarations_return enumBodyDeclarations45 = null;


        Object char_literal42_tree=null;
        Object char_literal44_tree=null;
        Object char_literal46_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_enumConstants=new RewriteRuleSubtreeStream(adaptor,"rule enumConstants");
        RewriteRuleSubtreeStream stream_enumBodyDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule enumBodyDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // jkit/java/Java.g:264:2: ( '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' -> ( enumConstants )? ( enumBodyDeclarations )? )
            // jkit/java/Java.g:264:4: '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}'
            {
            char_literal42=(Token)match(input,130,FOLLOW_130_in_enumBody952); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal42);

            // jkit/java/Java.g:264:8: ( enumConstants )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==Identifier||LA20_0==164) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // jkit/java/Java.g:0:0: enumConstants
                    {
                    pushFollow(FOLLOW_enumConstants_in_enumBody954);
                    enumConstants43=enumConstants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumConstants.add(enumConstants43.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:264:23: ( ',' )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==127) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // jkit/java/Java.g:0:0: ','
                    {
                    char_literal44=(Token)match(input,127,FOLLOW_127_in_enumBody957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(char_literal44);


                    }
                    break;

            }

            // jkit/java/Java.g:264:28: ( enumBodyDeclarations )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==118) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // jkit/java/Java.g:0:0: enumBodyDeclarations
                    {
                    pushFollow(FOLLOW_enumBodyDeclarations_in_enumBody960);
                    enumBodyDeclarations45=enumBodyDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumBodyDeclarations.add(enumBodyDeclarations45.getTree());

                    }
                    break;

            }

            char_literal46=(Token)match(input,131,FOLLOW_131_in_enumBody963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(char_literal46);



            // AST REWRITE
            // elements: enumConstants, enumBodyDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 264:54: -> ( enumConstants )? ( enumBodyDeclarations )?
            {
                // jkit/java/Java.g:264:57: ( enumConstants )?
                if ( stream_enumConstants.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumConstants.nextTree());

                }
                stream_enumConstants.reset();
                // jkit/java/Java.g:264:72: ( enumBodyDeclarations )?
                if ( stream_enumBodyDeclarations.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumBodyDeclarations.nextTree());

                }
                stream_enumBodyDeclarations.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumConstants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstants"
    // jkit/java/Java.g:267:1: enumConstants : enumConstant ( ',' enumConstant )* -> ( enumConstant )+ ;
    public final JavaParser.enumConstants_return enumConstants() throws RecognitionException {
        JavaParser.enumConstants_return retval = new JavaParser.enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal48=null;
        JavaParser.enumConstant_return enumConstant47 = null;

        JavaParser.enumConstant_return enumConstant49 = null;


        Object char_literal48_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_enumConstant=new RewriteRuleSubtreeStream(adaptor,"rule enumConstant");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // jkit/java/Java.g:268:2: ( enumConstant ( ',' enumConstant )* -> ( enumConstant )+ )
            // jkit/java/Java.g:268:4: enumConstant ( ',' enumConstant )*
            {
            pushFollow(FOLLOW_enumConstant_in_enumConstants982);
            enumConstant47=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumConstant.add(enumConstant47.getTree());
            // jkit/java/Java.g:268:17: ( ',' enumConstant )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==127) ) {
                    int LA23_1 = input.LA(2);

                    if ( (LA23_1==Identifier||LA23_1==164) ) {
                        alt23=1;
                    }


                }


                switch (alt23) {
            	case 1 :
            	    // jkit/java/Java.g:268:18: ',' enumConstant
            	    {
            	    char_literal48=(Token)match(input,127,FOLLOW_127_in_enumConstants985); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal48);

            	    pushFollow(FOLLOW_enumConstant_in_enumConstants987);
            	    enumConstant49=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_enumConstant.add(enumConstant49.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);



            // AST REWRITE
            // elements: enumConstant
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 268:37: -> ( enumConstant )+
            {
                if ( !(stream_enumConstant.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_enumConstant.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumConstant.nextTree());

                }
                stream_enumConstant.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstant"
    // jkit/java/Java.g:271:1: enumConstant : ( annotations )? Identifier ( arguments )? ( classBody )? -> ^( ENUM_CONSTANT ( annotations )? Identifier ( arguments )? ( classBody )? ) ;
    public final JavaParser.enumConstant_return enumConstant() throws RecognitionException {
        JavaParser.enumConstant_return retval = new JavaParser.enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier51=null;
        JavaParser.annotations_return annotations50 = null;

        JavaParser.arguments_return arguments52 = null;

        JavaParser.classBody_return classBody53 = null;


        Object Identifier51_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_annotations=new RewriteRuleSubtreeStream(adaptor,"rule annotations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // jkit/java/Java.g:272:2: ( ( annotations )? Identifier ( arguments )? ( classBody )? -> ^( ENUM_CONSTANT ( annotations )? Identifier ( arguments )? ( classBody )? ) )
            // jkit/java/Java.g:272:4: ( annotations )? Identifier ( arguments )? ( classBody )?
            {
            // jkit/java/Java.g:272:4: ( annotations )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==164) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // jkit/java/Java.g:0:0: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_enumConstant1006);
                    annotations50=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotations.add(annotations50.getTree());

                    }
                    break;

            }

            Identifier51=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumConstant1009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier51);

            // jkit/java/Java.g:272:28: ( arguments )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==158) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // jkit/java/Java.g:272:29: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant1012);
                    arguments52=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments52.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:272:41: ( classBody )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==130) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // jkit/java/Java.g:272:42: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant1017);
                    classBody53=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody53.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: annotations, arguments, Identifier, classBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 272:54: -> ^( ENUM_CONSTANT ( annotations )? Identifier ( arguments )? ( classBody )? )
            {
                // jkit/java/Java.g:272:57: ^( ENUM_CONSTANT ( annotations )? Identifier ( arguments )? ( classBody )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ENUM_CONSTANT, "ENUM_CONSTANT"), root_1);

                // jkit/java/Java.g:272:73: ( annotations )?
                if ( stream_annotations.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotations.nextTree());

                }
                stream_annotations.reset();
                adaptor.addChild(root_1, stream_Identifier.nextNode());
                // jkit/java/Java.g:272:97: ( arguments )?
                if ( stream_arguments.hasNext() ) {
                    adaptor.addChild(root_1, stream_arguments.nextTree());

                }
                stream_arguments.reset();
                // jkit/java/Java.g:272:110: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_1, stream_classBody.nextTree());

                }
                stream_classBody.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class enumBodyDeclarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBodyDeclarations"
    // jkit/java/Java.g:275:1: enumBodyDeclarations : ';' ( classBodyDeclaration )* -> ( classBodyDeclaration )* ;
    public final JavaParser.enumBodyDeclarations_return enumBodyDeclarations() throws RecognitionException {
        JavaParser.enumBodyDeclarations_return retval = new JavaParser.enumBodyDeclarations_return();
        retval.start = input.LT(1);
        int enumBodyDeclarations_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal54=null;
        JavaParser.classBodyDeclaration_return classBodyDeclaration55 = null;


        Object char_literal54_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleSubtreeStream stream_classBodyDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classBodyDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // jkit/java/Java.g:276:2: ( ';' ( classBodyDeclaration )* -> ( classBodyDeclaration )* )
            // jkit/java/Java.g:276:4: ';' ( classBodyDeclaration )*
            {
            char_literal54=(Token)match(input,118,FOLLOW_118_in_enumBodyDeclarations1052); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal54);

            // jkit/java/Java.g:276:8: ( classBodyDeclaration )*
            loop27:
            do {
                int alt27=2;
                alt27 = dfa27.predict(input);
                switch (alt27) {
            	case 1 :
            	    // jkit/java/Java.g:276:9: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations1055);
            	    classBodyDeclaration55=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classBodyDeclaration.add(classBodyDeclaration55.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);



            // AST REWRITE
            // elements: classBodyDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 276:32: -> ( classBodyDeclaration )*
            {
                // jkit/java/Java.g:276:35: ( classBodyDeclaration )*
                while ( stream_classBodyDeclaration.hasNext() ) {
                    adaptor.addChild(root_0, stream_classBodyDeclaration.nextTree());

                }
                stream_classBodyDeclaration.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, enumBodyDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBodyDeclarations"

    public static class interfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceDeclaration"
    // jkit/java/Java.g:279:1: interfaceDeclaration : ( normalInterfaceDeclaration | annotationTypeDeclaration );
    public final JavaParser.interfaceDeclaration_return interfaceDeclaration() throws RecognitionException {
        JavaParser.interfaceDeclaration_return retval = new JavaParser.interfaceDeclaration_return();
        retval.start = input.LT(1);
        int interfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.normalInterfaceDeclaration_return normalInterfaceDeclaration56 = null;

        JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration57 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // jkit/java/Java.g:280:2: ( normalInterfaceDeclaration | annotationTypeDeclaration )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==132) ) {
                alt28=1;
            }
            else if ( (LA28_0==164) ) {
                alt28=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;
            }
            switch (alt28) {
                case 1 :
                    // jkit/java/Java.g:280:4: normalInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration1074);
                    normalInterfaceDeclaration56=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalInterfaceDeclaration56.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:281:4: annotationTypeDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration1079);
                    annotationTypeDeclaration57=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration57.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, interfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceDeclaration"

    public static class normalInterfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalInterfaceDeclaration"
    // jkit/java/Java.g:284:1: normalInterfaceDeclaration : 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody -> ^( Identifier ( typeParameters )? ) ( ^( IMPLEMENTS typeList ) )? ( interfaceBody )? ;
    public final JavaParser.normalInterfaceDeclaration_return normalInterfaceDeclaration() throws RecognitionException {
        JavaParser.normalInterfaceDeclaration_return retval = new JavaParser.normalInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int normalInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal58=null;
        Token Identifier59=null;
        Token string_literal61=null;
        JavaParser.typeParameters_return typeParameters60 = null;

        JavaParser.typeList_return typeList62 = null;

        JavaParser.interfaceBody_return interfaceBody63 = null;


        Object string_literal58_tree=null;
        Object Identifier59_tree=null;
        Object string_literal61_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // jkit/java/Java.g:285:2: ( 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody -> ^( Identifier ( typeParameters )? ) ( ^( IMPLEMENTS typeList ) )? ( interfaceBody )? )
            // jkit/java/Java.g:285:4: 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody
            {
            string_literal58=(Token)match(input,132,FOLLOW_132_in_normalInterfaceDeclaration1091); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_132.add(string_literal58);

            Identifier59=(Token)match(input,Identifier,FOLLOW_Identifier_in_normalInterfaceDeclaration1093); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier59);

            // jkit/java/Java.g:285:27: ( typeParameters )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==126) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // jkit/java/Java.g:0:0: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration1095);
                    typeParameters60=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters60.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:285:43: ( 'extends' typeList )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==124) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // jkit/java/Java.g:285:44: 'extends' typeList
                    {
                    string_literal61=(Token)match(input,124,FOLLOW_124_in_normalInterfaceDeclaration1099); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(string_literal61);

                    pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration1101);
                    typeList62=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList62.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_normalInterfaceDeclaration1105);
            interfaceBody63=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceBody.add(interfaceBody63.getTree());


            // AST REWRITE
            // elements: interfaceBody, Identifier, typeList, typeParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 285:79: -> ^( Identifier ( typeParameters )? ) ( ^( IMPLEMENTS typeList ) )? ( interfaceBody )?
            {
                // jkit/java/Java.g:285:82: ^( Identifier ( typeParameters )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/Java.g:285:95: ( typeParameters )?
                if ( stream_typeParameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeParameters.nextTree());

                }
                stream_typeParameters.reset();

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/Java.g:285:112: ( ^( IMPLEMENTS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:285:112: ^( IMPLEMENTS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPLEMENTS, "IMPLEMENTS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();
                // jkit/java/Java.g:285:136: ( interfaceBody )?
                if ( stream_interfaceBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_interfaceBody.nextTree());

                }
                stream_interfaceBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, normalInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalInterfaceDeclaration"

    public static class typeList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // jkit/java/Java.g:288:1: typeList : type ( ',' type )* ;
    public final JavaParser.typeList_return typeList() throws RecognitionException {
        JavaParser.typeList_return retval = new JavaParser.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal65=null;
        JavaParser.type_return type64 = null;

        JavaParser.type_return type66 = null;


        Object char_literal65_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // jkit/java/Java.g:289:2: ( type ( ',' type )* )
            // jkit/java/Java.g:289:4: type ( ',' type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList1136);
            type64=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type64.getTree());
            // jkit/java/Java.g:289:9: ( ',' type )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==127) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // jkit/java/Java.g:289:10: ',' type
            	    {
            	    char_literal65=(Token)match(input,127,FOLLOW_127_in_typeList1139); if (state.failed) return retval;
            	    pushFollow(FOLLOW_type_in_typeList1142);
            	    type66=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type66.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class classBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // jkit/java/Java.g:292:1: classBody : '{' ( classBodyDeclaration )* '}' ;
    public final JavaParser.classBody_return classBody() throws RecognitionException {
        JavaParser.classBody_return retval = new JavaParser.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal67=null;
        Token char_literal69=null;
        JavaParser.classBodyDeclaration_return classBodyDeclaration68 = null;


        Object char_literal67_tree=null;
        Object char_literal69_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // jkit/java/Java.g:293:2: ( '{' ( classBodyDeclaration )* '}' )
            // jkit/java/Java.g:293:4: '{' ( classBodyDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal67=(Token)match(input,130,FOLLOW_130_in_classBody1156); if (state.failed) return retval;
            // jkit/java/Java.g:293:9: ( classBodyDeclaration )*
            loop32:
            do {
                int alt32=2;
                alt32 = dfa32.predict(input);
                switch (alt32) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_classBody1159);
            	    classBodyDeclaration68=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBodyDeclaration68.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);

            char_literal69=(Token)match(input,131,FOLLOW_131_in_classBody1162); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // jkit/java/Java.g:296:1: interfaceBody : '{' ( interfaceBodyDeclaration )* '}' ;
    public final JavaParser.interfaceBody_return interfaceBody() throws RecognitionException {
        JavaParser.interfaceBody_return retval = new JavaParser.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal70=null;
        Token char_literal72=null;
        JavaParser.interfaceBodyDeclaration_return interfaceBodyDeclaration71 = null;


        Object char_literal70_tree=null;
        Object char_literal72_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // jkit/java/Java.g:297:2: ( '{' ( interfaceBodyDeclaration )* '}' )
            // jkit/java/Java.g:297:4: '{' ( interfaceBodyDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal70=(Token)match(input,130,FOLLOW_130_in_interfaceBody1175); if (state.failed) return retval;
            // jkit/java/Java.g:297:9: ( interfaceBodyDeclaration )*
            loop33:
            do {
                int alt33=2;
                alt33 = dfa33.predict(input);
                switch (alt33) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: interfaceBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody1178);
            	    interfaceBodyDeclaration71=interfaceBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceBodyDeclaration71.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);

            char_literal72=(Token)match(input,131,FOLLOW_131_in_interfaceBody1181); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class classBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBodyDeclaration"
    // jkit/java/Java.g:300:1: classBodyDeclaration : ( ';' | 'static' block -> ^( STATIC block ) | ( 'static' )? block -> block | ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) ) );
    public final JavaParser.classBodyDeclaration_return classBodyDeclaration() throws RecognitionException {
        JavaParser.classBodyDeclaration_return retval = new JavaParser.classBodyDeclaration_return();
        retval.start = input.LT(1);
        int classBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal73=null;
        Token string_literal74=null;
        Token string_literal76=null;
        Token string_literal82=null;
        Token Identifier83=null;
        Token Identifier85=null;
        JavaParser.block_return block75 = null;

        JavaParser.block_return block77 = null;

        JavaParser.modifier_return modifier78 = null;

        JavaParser.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl79 = null;

        JavaParser.methodDeclaration_return methodDeclaration80 = null;

        JavaParser.fieldDeclaration_return fieldDeclaration81 = null;

        JavaParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest84 = null;

        JavaParser.constructorDeclaratorRest_return constructorDeclaratorRest86 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration87 = null;

        JavaParser.classDeclaration_return classDeclaration88 = null;

        JavaParser.enumDeclaration_return enumDeclaration89 = null;


        Object char_literal73_tree=null;
        Object string_literal74_tree=null;
        Object string_literal76_tree=null;
        Object string_literal82_tree=null;
        Object Identifier83_tree=null;
        Object Identifier85_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_constructorDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constructorDeclaratorRest");
        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_fieldDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule fieldDeclaration");
        RewriteRuleSubtreeStream stream_enumDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule enumDeclaration");
        RewriteRuleSubtreeStream stream_genericMethodOrConstructorDecl=new RewriteRuleSubtreeStream(adaptor,"rule genericMethodOrConstructorDecl");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        RewriteRuleSubtreeStream stream_voidMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule voidMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_methodDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaration");
        RewriteRuleSubtreeStream stream_interfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDeclaration");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // jkit/java/Java.g:301:2: ( ';' | 'static' block -> ^( STATIC block ) | ( 'static' )? block -> block | ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) ) )
            int alt37=4;
            alt37 = dfa37.predict(input);
            switch (alt37) {
                case 1 :
                    // jkit/java/Java.g:301:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal73=(Token)match(input,118,FOLLOW_118_in_classBodyDeclaration1193); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:302:4: 'static' block
                    {
                    string_literal74=(Token)match(input,120,FOLLOW_120_in_classBodyDeclaration1199); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(string_literal74);

                    pushFollow(FOLLOW_block_in_classBodyDeclaration1201);
                    block75=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block75.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 302:19: -> ^( STATIC block )
                    {
                        // jkit/java/Java.g:302:22: ^( STATIC block )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STATIC, "STATIC"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:303:4: ( 'static' )? block
                    {
                    // jkit/java/Java.g:303:4: ( 'static' )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==120) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // jkit/java/Java.g:0:0: 'static'
                            {
                            string_literal76=(Token)match(input,120,FOLLOW_120_in_classBodyDeclaration1214); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_120.add(string_literal76);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_classBodyDeclaration1217);
                    block77=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block77.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 303:20: -> block
                    {
                        adaptor.addChild(root_0, stream_block.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:304:4: ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) )
                    {
                    // jkit/java/Java.g:304:4: ( modifier )*
                    loop35:
                    do {
                        int alt35=2;
                        alt35 = dfa35.predict(input);
                        switch (alt35) {
                    	case 1 :
                    	    // jkit/java/Java.g:0:0: modifier
                    	    {
                    	    pushFollow(FOLLOW_modifier_in_classBodyDeclaration1226);
                    	    modifier78=modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_modifier.add(modifier78.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop35;
                        }
                    } while (true);

                    // jkit/java/Java.g:304:14: ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) )
                    int alt36=8;
                    alt36 = dfa36.predict(input);
                    switch (alt36) {
                        case 1 :
                            // jkit/java/Java.g:305:6: genericMethodOrConstructorDecl
                            {
                            pushFollow(FOLLOW_genericMethodOrConstructorDecl_in_classBodyDeclaration1236);
                            genericMethodOrConstructorDecl79=genericMethodOrConstructorDecl();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericMethodOrConstructorDecl.add(genericMethodOrConstructorDecl79.getTree());


                            // AST REWRITE
                            // elements: genericMethodOrConstructorDecl, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 305:37: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl )
                            {
                                // jkit/java/Java.g:305:40: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:305:49: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:305:49: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:305:61: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_genericMethodOrConstructorDecl.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:306:9: methodDeclaration
                            {
                            pushFollow(FOLLOW_methodDeclaration_in_classBodyDeclaration1262);
                            methodDeclaration80=methodDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_methodDeclaration.add(methodDeclaration80.getTree());


                            // AST REWRITE
                            // elements: modifier, methodDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 306:27: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration )
                            {
                                // jkit/java/Java.g:306:30: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:306:39: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:306:39: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:306:51: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_methodDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:307:9: fieldDeclaration
                            {
                            pushFollow(FOLLOW_fieldDeclaration_in_classBodyDeclaration1288);
                            fieldDeclaration81=fieldDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldDeclaration.add(fieldDeclaration81.getTree());


                            // AST REWRITE
                            // elements: fieldDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 307:26: -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration )
                            {
                                // jkit/java/Java.g:307:29: ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FIELD, "FIELD"), root_1);

                                // jkit/java/Java.g:307:37: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:307:37: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:307:49: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_fieldDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // jkit/java/Java.g:308:8: 'void' Identifier voidMethodDeclaratorRest
                            {
                            string_literal82=(Token)match(input,133,FOLLOW_133_in_classBodyDeclaration1313); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_133.add(string_literal82);

                            Identifier83=(Token)match(input,Identifier,FOLLOW_Identifier_in_classBodyDeclaration1315); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier83);

                            pushFollow(FOLLOW_voidMethodDeclaratorRest_in_classBodyDeclaration1317);
                            voidMethodDeclaratorRest84=voidMethodDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_voidMethodDeclaratorRest.add(voidMethodDeclaratorRest84.getTree());


                            // AST REWRITE
                            // elements: modifier, Identifier, voidMethodDeclaratorRest
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 308:51: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? )
                            {
                                // jkit/java/Java.g:308:54: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:308:63: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:308:63: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:308:75: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:308:98: ^( TYPE VOID )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, (Object)adaptor.create(VOID, "VOID"));

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:308:111: ( voidMethodDeclaratorRest )?
                                if ( stream_voidMethodDeclaratorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_voidMethodDeclaratorRest.nextTree());

                                }
                                stream_voidMethodDeclaratorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // jkit/java/Java.g:309:8: Identifier constructorDeclaratorRest
                            {
                            Identifier85=(Token)match(input,Identifier,FOLLOW_Identifier_in_classBodyDeclaration1351); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier85);

                            pushFollow(FOLLOW_constructorDeclaratorRest_in_classBodyDeclaration1353);
                            constructorDeclaratorRest86=constructorDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constructorDeclaratorRest.add(constructorDeclaratorRest86.getTree());


                            // AST REWRITE
                            // elements: Identifier, constructorDeclaratorRest, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 309:45: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest )
                            {
                                // jkit/java/Java.g:309:48: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:309:57: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:309:57: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:309:69: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:309:92: ^( NONE )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(NONE, "NONE"), root_2);

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_constructorDeclaratorRest.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 6 :
                            // jkit/java/Java.g:310:8: interfaceDeclaration
                            {
                            pushFollow(FOLLOW_interfaceDeclaration_in_classBodyDeclaration1384);
                            interfaceDeclaration87=interfaceDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceDeclaration.add(interfaceDeclaration87.getTree());


                            // AST REWRITE
                            // elements: interfaceDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 310:29: -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                            {
                                // jkit/java/Java.g:310:32: ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                                // jkit/java/Java.g:310:44: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:310:44: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:310:56: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_interfaceDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 7 :
                            // jkit/java/Java.g:311:8: classDeclaration
                            {
                            pushFollow(FOLLOW_classDeclaration_in_classBodyDeclaration1409);
                            classDeclaration88=classDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classDeclaration.add(classDeclaration88.getTree());


                            // AST REWRITE
                            // elements: modifier, classDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 311:25: -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                            {
                                // jkit/java/Java.g:311:28: ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CLASS, "CLASS"), root_1);

                                // jkit/java/Java.g:311:36: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:311:36: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:311:48: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_classDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 8 :
                            // jkit/java/Java.g:312:10: enumDeclaration
                            {
                            pushFollow(FOLLOW_enumDeclaration_in_classBodyDeclaration1436);
                            enumDeclaration89=enumDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_enumDeclaration.add(enumDeclaration89.getTree());


                            // AST REWRITE
                            // elements: modifier, enumDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 312:26: -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                            {
                                // jkit/java/Java.g:312:29: ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ENUM, "ENUM"), root_1);

                                // jkit/java/Java.g:312:36: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:312:36: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:312:48: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_enumDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, classBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBodyDeclaration"

    public static class genericMethodOrConstructorDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorDecl"
    // jkit/java/Java.g:316:1: genericMethodOrConstructorDecl : typeParameters genericMethodOrConstructorRest ;
    public final JavaParser.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl() throws RecognitionException {
        JavaParser.genericMethodOrConstructorDecl_return retval = new JavaParser.genericMethodOrConstructorDecl_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorDecl_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.typeParameters_return typeParameters90 = null;

        JavaParser.genericMethodOrConstructorRest_return genericMethodOrConstructorRest91 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // jkit/java/Java.g:317:2: ( typeParameters genericMethodOrConstructorRest )
            // jkit/java/Java.g:317:4: typeParameters genericMethodOrConstructorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeParameters_in_genericMethodOrConstructorDecl1470);
            typeParameters90=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameters90.getTree());
            pushFollow(FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl1472);
            genericMethodOrConstructorRest91=genericMethodOrConstructorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, genericMethodOrConstructorRest91.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, genericMethodOrConstructorDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorDecl"

    public static class genericMethodOrConstructorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorRest"
    // jkit/java/Java.g:320:1: genericMethodOrConstructorRest : ( type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? | 'void' Identifier methodDeclaratorRest -> Identifier ^( TYPE VOID ) ( methodDeclaratorRest )? | Identifier constructorDeclaratorRest -> Identifier ^( NONE ) constructorDeclaratorRest );
    public final JavaParser.genericMethodOrConstructorRest_return genericMethodOrConstructorRest() throws RecognitionException {
        JavaParser.genericMethodOrConstructorRest_return retval = new JavaParser.genericMethodOrConstructorRest_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorRest_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier93=null;
        Token string_literal95=null;
        Token Identifier96=null;
        Token Identifier98=null;
        JavaParser.type_return type92 = null;

        JavaParser.methodDeclaratorRest_return methodDeclaratorRest94 = null;

        JavaParser.methodDeclaratorRest_return methodDeclaratorRest97 = null;

        JavaParser.constructorDeclaratorRest_return constructorDeclaratorRest99 = null;


        Object Identifier93_tree=null;
        Object string_literal95_tree=null;
        Object Identifier96_tree=null;
        Object Identifier98_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_constructorDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constructorDeclaratorRest");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_methodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // jkit/java/Java.g:321:2: ( type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? | 'void' Identifier methodDeclaratorRest -> Identifier ^( TYPE VOID ) ( methodDeclaratorRest )? | Identifier constructorDeclaratorRest -> Identifier ^( NONE ) constructorDeclaratorRest )
            int alt38=3;
            switch ( input.LA(1) ) {
            case Identifier:
                {
                int LA38_1 = input.LA(2);

                if ( (LA38_1==158) ) {
                    alt38=3;
                }
                else if ( (LA38_1==Identifier||LA38_1==121||LA38_1==126||LA38_1==135) ) {
                    alt38=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 1, input);

                    throw nvae;
                }
                }
                break;
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
                {
                alt38=1;
                }
                break;
            case 133:
                {
                alt38=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;
            }

            switch (alt38) {
                case 1 :
                    // jkit/java/Java.g:321:4: type Identifier methodDeclaratorRest
                    {
                    pushFollow(FOLLOW_type_in_genericMethodOrConstructorRest1484);
                    type92=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type92.getTree());
                    Identifier93=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1486); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier93);

                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1488);
                    methodDeclaratorRest94=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest94.getTree());


                    // AST REWRITE
                    // elements: methodDeclaratorRest, type, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 321:41: -> Identifier type ( methodDeclaratorRest )?
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        adaptor.addChild(root_0, stream_type.nextTree());
                        // jkit/java/Java.g:321:60: ( methodDeclaratorRest )?
                        if ( stream_methodDeclaratorRest.hasNext() ) {
                            adaptor.addChild(root_0, stream_methodDeclaratorRest.nextTree());

                        }
                        stream_methodDeclaratorRest.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:322:4: 'void' Identifier methodDeclaratorRest
                    {
                    string_literal95=(Token)match(input,133,FOLLOW_133_in_genericMethodOrConstructorRest1502); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(string_literal95);

                    Identifier96=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1504); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier96);

                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1506);
                    methodDeclaratorRest97=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest97.getTree());


                    // AST REWRITE
                    // elements: Identifier, methodDeclaratorRest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 322:43: -> Identifier ^( TYPE VOID ) ( methodDeclaratorRest )?
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/Java.g:322:57: ^( TYPE VOID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(VOID, "VOID"));

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/Java.g:322:70: ( methodDeclaratorRest )?
                        if ( stream_methodDeclaratorRest.hasNext() ) {
                            adaptor.addChild(root_0, stream_methodDeclaratorRest.nextTree());

                        }
                        stream_methodDeclaratorRest.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:323:4: Identifier constructorDeclaratorRest
                    {
                    Identifier98=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1524); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier98);

                    pushFollow(FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest1526);
                    constructorDeclaratorRest99=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constructorDeclaratorRest.add(constructorDeclaratorRest99.getTree());


                    // AST REWRITE
                    // elements: constructorDeclaratorRest, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 323:41: -> Identifier ^( NONE ) constructorDeclaratorRest
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/Java.g:323:55: ^( NONE )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NONE, "NONE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_constructorDeclaratorRest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, genericMethodOrConstructorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorRest"

    public static class methodDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaration"
    // jkit/java/Java.g:326:1: methodDeclaration : type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? ;
    public final JavaParser.methodDeclaration_return methodDeclaration() throws RecognitionException {
        JavaParser.methodDeclaration_return retval = new JavaParser.methodDeclaration_return();
        retval.start = input.LT(1);
        int methodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier101=null;
        JavaParser.type_return type100 = null;

        JavaParser.methodDeclaratorRest_return methodDeclaratorRest102 = null;


        Object Identifier101_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_methodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // jkit/java/Java.g:327:2: ( type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? )
            // jkit/java/Java.g:327:4: type Identifier methodDeclaratorRest
            {
            pushFollow(FOLLOW_type_in_methodDeclaration1547);
            type100=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type100.getTree());
            Identifier101=(Token)match(input,Identifier,FOLLOW_Identifier_in_methodDeclaration1549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier101);

            pushFollow(FOLLOW_methodDeclaratorRest_in_methodDeclaration1551);
            methodDeclaratorRest102=methodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest102.getTree());


            // AST REWRITE
            // elements: methodDeclaratorRest, Identifier, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 327:41: -> Identifier type ( methodDeclaratorRest )?
            {
                adaptor.addChild(root_0, stream_Identifier.nextNode());
                adaptor.addChild(root_0, stream_type.nextTree());
                // jkit/java/Java.g:327:60: ( methodDeclaratorRest )?
                if ( stream_methodDeclaratorRest.hasNext() ) {
                    adaptor.addChild(root_0, stream_methodDeclaratorRest.nextTree());

                }
                stream_methodDeclaratorRest.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, methodDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodDeclaration"

    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fieldDeclaration"
    // jkit/java/Java.g:330:1: fieldDeclaration : type variableDeclarators ';' -> type variableDeclarators ;
    public final JavaParser.fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        JavaParser.fieldDeclaration_return retval = new JavaParser.fieldDeclaration_return();
        retval.start = input.LT(1);
        int fieldDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal105=null;
        JavaParser.type_return type103 = null;

        JavaParser.variableDeclarators_return variableDeclarators104 = null;


        Object char_literal105_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // jkit/java/Java.g:331:2: ( type variableDeclarators ';' -> type variableDeclarators )
            // jkit/java/Java.g:331:4: type variableDeclarators ';'
            {
            pushFollow(FOLLOW_type_in_fieldDeclaration1571);
            type103=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type103.getTree());
            pushFollow(FOLLOW_variableDeclarators_in_fieldDeclaration1573);
            variableDeclarators104=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarators.add(variableDeclarators104.getTree());
            char_literal105=(Token)match(input,118,FOLLOW_118_in_fieldDeclaration1575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal105);



            // AST REWRITE
            // elements: type, variableDeclarators
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 331:33: -> type variableDeclarators
            {
                adaptor.addChild(root_0, stream_type.nextTree());
                adaptor.addChild(root_0, stream_variableDeclarators.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, fieldDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fieldDeclaration"

    public static class interfaceBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBodyDeclaration"
    // jkit/java/Java.g:334:1: interfaceBodyDeclaration : ( ( modifier )* ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) ) | ';' );
    public final JavaParser.interfaceBodyDeclaration_return interfaceBodyDeclaration() throws RecognitionException {
        JavaParser.interfaceBodyDeclaration_return retval = new JavaParser.interfaceBodyDeclaration_return();
        retval.start = input.LT(1);
        int interfaceBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier109=null;
        Token string_literal112=null;
        Token Identifier113=null;
        Token char_literal118=null;
        JavaParser.modifier_return modifier106 = null;

        JavaParser.constantDeclaration_return constantDeclaration107 = null;

        JavaParser.type_return type108 = null;

        JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest110 = null;

        JavaParser.interfaceGenericMethodDecl_return interfaceGenericMethodDecl111 = null;

        JavaParser.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest114 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration115 = null;

        JavaParser.classDeclaration_return classDeclaration116 = null;

        JavaParser.enumDeclaration_return enumDeclaration117 = null;


        Object Identifier109_tree=null;
        Object string_literal112_tree=null;
        Object Identifier113_tree=null;
        Object char_literal118_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_interfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule interfaceMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_voidInterfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule voidInterfaceMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_constantDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclaration");
        RewriteRuleSubtreeStream stream_interfaceGenericMethodDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceGenericMethodDecl");
        RewriteRuleSubtreeStream stream_enumDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule enumDeclaration");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        RewriteRuleSubtreeStream stream_interfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // jkit/java/Java.g:335:2: ( ( modifier )* ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) ) | ';' )
            int alt41=2;
            alt41 = dfa41.predict(input);
            switch (alt41) {
                case 1 :
                    // jkit/java/Java.g:335:4: ( modifier )* ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) )
                    {
                    // jkit/java/Java.g:335:4: ( modifier )*
                    loop39:
                    do {
                        int alt39=2;
                        alt39 = dfa39.predict(input);
                        switch (alt39) {
                    	case 1 :
                    	    // jkit/java/Java.g:0:0: modifier
                    	    {
                    	    pushFollow(FOLLOW_modifier_in_interfaceBodyDeclaration1594);
                    	    modifier106=modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_modifier.add(modifier106.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);

                    // jkit/java/Java.g:335:14: ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) )
                    int alt40=7;
                    alt40 = dfa40.predict(input);
                    switch (alt40) {
                        case 1 :
                            // jkit/java/Java.g:336:3: constantDeclaration
                            {
                            pushFollow(FOLLOW_constantDeclaration_in_interfaceBodyDeclaration1601);
                            constantDeclaration107=constantDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constantDeclaration.add(constantDeclaration107.getTree());


                            // AST REWRITE
                            // elements: constantDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 336:23: -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration )
                            {
                                // jkit/java/Java.g:336:26: ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FIELD, "FIELD"), root_1);

                                // jkit/java/Java.g:336:34: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:336:34: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:336:46: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_constantDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:337:5: type Identifier interfaceMethodDeclaratorRest
                            {
                            pushFollow(FOLLOW_type_in_interfaceBodyDeclaration1623);
                            type108=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type108.getTree());
                            Identifier109=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceBodyDeclaration1625); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier109);

                            pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1627);
                            interfaceMethodDeclaratorRest110=interfaceMethodDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest110.getTree());


                            // AST REWRITE
                            // elements: Identifier, interfaceMethodDeclaratorRest, modifier, type
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 337:51: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? )
                            {
                                // jkit/java/Java.g:337:54: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:337:63: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:337:63: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:337:75: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                // jkit/java/Java.g:337:103: ( interfaceMethodDeclaratorRest )?
                                if ( stream_interfaceMethodDeclaratorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_interfaceMethodDeclaratorRest.nextTree());

                                }
                                stream_interfaceMethodDeclaratorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:338:5: interfaceGenericMethodDecl
                            {
                            pushFollow(FOLLOW_interfaceGenericMethodDecl_in_interfaceBodyDeclaration1654);
                            interfaceGenericMethodDecl111=interfaceGenericMethodDecl();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceGenericMethodDecl.add(interfaceGenericMethodDecl111.getTree());


                            // AST REWRITE
                            // elements: interfaceGenericMethodDecl, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 338:32: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl )
                            {
                                // jkit/java/Java.g:338:35: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:338:44: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:338:44: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:338:56: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_interfaceGenericMethodDecl.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // jkit/java/Java.g:339:5: 'void' Identifier voidInterfaceMethodDeclaratorRest
                            {
                            string_literal112=(Token)match(input,133,FOLLOW_133_in_interfaceBodyDeclaration1676); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_133.add(string_literal112);

                            Identifier113=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceBodyDeclaration1678); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier113);

                            pushFollow(FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1680);
                            voidInterfaceMethodDeclaratorRest114=voidInterfaceMethodDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_voidInterfaceMethodDeclaratorRest.add(voidInterfaceMethodDeclaratorRest114.getTree());


                            // AST REWRITE
                            // elements: modifier, voidInterfaceMethodDeclaratorRest, Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 339:57: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? )
                            {
                                // jkit/java/Java.g:339:60: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:339:69: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:339:69: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:339:81: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:339:104: ^( TYPE VOID )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, (Object)adaptor.create(VOID, "VOID"));

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:339:117: ( voidInterfaceMethodDeclaratorRest )?
                                if ( stream_voidInterfaceMethodDeclaratorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_voidInterfaceMethodDeclaratorRest.nextTree());

                                }
                                stream_voidInterfaceMethodDeclaratorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // jkit/java/Java.g:340:5: interfaceDeclaration
                            {
                            pushFollow(FOLLOW_interfaceDeclaration_in_interfaceBodyDeclaration1711);
                            interfaceDeclaration115=interfaceDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceDeclaration.add(interfaceDeclaration115.getTree());


                            // AST REWRITE
                            // elements: modifier, interfaceDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 340:26: -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                            {
                                // jkit/java/Java.g:340:29: ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                                // jkit/java/Java.g:340:41: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:340:41: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:340:53: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_interfaceDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 6 :
                            // jkit/java/Java.g:341:5: classDeclaration
                            {
                            pushFollow(FOLLOW_classDeclaration_in_interfaceBodyDeclaration1734);
                            classDeclaration116=classDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classDeclaration.add(classDeclaration116.getTree());


                            // AST REWRITE
                            // elements: modifier, classDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 341:22: -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                            {
                                // jkit/java/Java.g:341:25: ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CLASS, "CLASS"), root_1);

                                // jkit/java/Java.g:341:33: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:341:33: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:341:45: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_classDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 7 :
                            // jkit/java/Java.g:342:10: enumDeclaration
                            {
                            pushFollow(FOLLOW_enumDeclaration_in_interfaceBodyDeclaration1761);
                            enumDeclaration117=enumDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_enumDeclaration.add(enumDeclaration117.getTree());


                            // AST REWRITE
                            // elements: enumDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 342:26: -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                            {
                                // jkit/java/Java.g:342:29: ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ENUM, "ENUM"), root_1);

                                // jkit/java/Java.g:342:36: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:342:36: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:342:48: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_enumDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:344:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal118=(Token)match(input,118,FOLLOW_118_in_interfaceBodyDeclaration1786); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, interfaceBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBodyDeclaration"

    public static class methodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaratorRest"
    // jkit/java/Java.g:347:1: methodDeclaratorRest : formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ) ;
    public final JavaParser.methodDeclaratorRest_return methodDeclaratorRest() throws RecognitionException {
        JavaParser.methodDeclaratorRest_return retval = new JavaParser.methodDeclaratorRest_return();
        retval.start = input.LT(1);
        int methodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal120=null;
        Token char_literal123=null;
        JavaParser.formalParameters_return formalParameters119 = null;

        JavaParser.typeList_return typeList121 = null;

        JavaParser.methodBody_return methodBody122 = null;


        Object string_literal120_tree=null;
        Object char_literal123_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // jkit/java/Java.g:348:2: ( formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ) )
            // jkit/java/Java.g:348:4: formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            {
            pushFollow(FOLLOW_formalParameters_in_methodDeclaratorRest1800);
            formalParameters119=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters119.getTree());
            // jkit/java/Java.g:349:9: ( 'throws' typeList )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==134) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // jkit/java/Java.g:349:10: 'throws' typeList
                    {
                    string_literal120=(Token)match(input,134,FOLLOW_134_in_methodDeclaratorRest1812); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(string_literal120);

                    pushFollow(FOLLOW_typeList_in_methodDeclaratorRest1814);
                    typeList121=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList121.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:350:9: ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==130) ) {
                alt43=1;
            }
            else if ( (LA43_0==118) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    // jkit/java/Java.g:350:13: methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_methodDeclaratorRest1830);
                    methodBody122=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodBody.add(methodBody122.getTree());


                    // AST REWRITE
                    // elements: methodBody, typeList, formalParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 350:24: -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody
                    {
                        // jkit/java/Java.g:350:27: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();
                        // jkit/java/Java.g:350:45: ( ^( THROWS typeList ) )?
                        if ( stream_typeList.hasNext() ) {
                            // jkit/java/Java.g:350:45: ^( THROWS typeList )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                            adaptor.addChild(root_1, stream_typeList.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_typeList.reset();
                        adaptor.addChild(root_0, stream_methodBody.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:351:13: ';'
                    {
                    char_literal123=(Token)match(input,118,FOLLOW_118_in_methodDeclaratorRest1858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal123);



                    // AST REWRITE
                    // elements: formalParameters, typeList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 351:17: -> ( formalParameters )? ( ^( THROWS typeList ) )?
                    {
                        // jkit/java/Java.g:351:20: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();
                        // jkit/java/Java.g:351:38: ( ^( THROWS typeList ) )?
                        if ( stream_typeList.hasNext() ) {
                            // jkit/java/Java.g:351:38: ^( THROWS typeList )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                            adaptor.addChild(root_1, stream_typeList.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_typeList.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, methodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodDeclaratorRest"

    public static class voidMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidMethodDeclaratorRest"
    // jkit/java/Java.g:355:1: voidMethodDeclaratorRest : formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ) ;
    public final JavaParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest() throws RecognitionException {
        JavaParser.voidMethodDeclaratorRest_return retval = new JavaParser.voidMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal125=null;
        Token char_literal128=null;
        JavaParser.formalParameters_return formalParameters124 = null;

        JavaParser.typeList_return typeList126 = null;

        JavaParser.methodBody_return methodBody127 = null;


        Object string_literal125_tree=null;
        Object char_literal128_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // jkit/java/Java.g:356:2: ( formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ) )
            // jkit/java/Java.g:356:4: formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            {
            pushFollow(FOLLOW_formalParameters_in_voidMethodDeclaratorRest1892);
            formalParameters124=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters124.getTree());
            // jkit/java/Java.g:356:21: ( 'throws' typeList )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==134) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // jkit/java/Java.g:356:22: 'throws' typeList
                    {
                    string_literal125=(Token)match(input,134,FOLLOW_134_in_voidMethodDeclaratorRest1895); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(string_literal125);

                    pushFollow(FOLLOW_typeList_in_voidMethodDeclaratorRest1897);
                    typeList126=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList126.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:357:9: ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==130) ) {
                alt45=1;
            }
            else if ( (LA45_0==118) ) {
                alt45=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }
            switch (alt45) {
                case 1 :
                    // jkit/java/Java.g:357:13: methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_voidMethodDeclaratorRest1913);
                    methodBody127=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodBody.add(methodBody127.getTree());


                    // AST REWRITE
                    // elements: typeList, methodBody, formalParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 357:24: -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody
                    {
                        // jkit/java/Java.g:357:27: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();
                        // jkit/java/Java.g:357:45: ( ^( THROWS typeList ) )?
                        if ( stream_typeList.hasNext() ) {
                            // jkit/java/Java.g:357:45: ^( THROWS typeList )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                            adaptor.addChild(root_1, stream_typeList.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_typeList.reset();
                        adaptor.addChild(root_0, stream_methodBody.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:358:13: ';'
                    {
                    char_literal128=(Token)match(input,118,FOLLOW_118_in_voidMethodDeclaratorRest1941); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal128);



                    // AST REWRITE
                    // elements: typeList, formalParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 358:17: -> ( formalParameters )? ( ^( THROWS typeList ) )?
                    {
                        // jkit/java/Java.g:358:20: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();
                        // jkit/java/Java.g:358:38: ( ^( THROWS typeList ) )?
                        if ( stream_typeList.hasNext() ) {
                            // jkit/java/Java.g:358:38: ^( THROWS typeList )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                            adaptor.addChild(root_1, stream_typeList.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_typeList.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, voidMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidMethodDeclaratorRest"

    public static class interfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodDeclaratorRest"
    // jkit/java/Java.g:362:1: interfaceMethodDeclaratorRest : formalParameters ( 'throws' typeList )? ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ;
    public final JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest() throws RecognitionException {
        JavaParser.interfaceMethodDeclaratorRest_return retval = new JavaParser.interfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int interfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal130=null;
        Token char_literal132=null;
        JavaParser.formalParameters_return formalParameters129 = null;

        JavaParser.typeList_return typeList131 = null;


        Object string_literal130_tree=null;
        Object char_literal132_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // jkit/java/Java.g:363:2: ( formalParameters ( 'throws' typeList )? ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            // jkit/java/Java.g:363:4: formalParameters ( 'throws' typeList )? ';'
            {
            pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest1975);
            formalParameters129=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters129.getTree());
            // jkit/java/Java.g:363:21: ( 'throws' typeList )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==134) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // jkit/java/Java.g:363:22: 'throws' typeList
                    {
                    string_literal130=(Token)match(input,134,FOLLOW_134_in_interfaceMethodDeclaratorRest1978); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(string_literal130);

                    pushFollow(FOLLOW_typeList_in_interfaceMethodDeclaratorRest1980);
                    typeList131=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList131.getTree());

                    }
                    break;

            }

            char_literal132=(Token)match(input,118,FOLLOW_118_in_interfaceMethodDeclaratorRest1984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal132);



            // AST REWRITE
            // elements: formalParameters, typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 363:46: -> ( formalParameters )? ( ^( THROWS typeList ) )?
            {
                // jkit/java/Java.g:363:49: ( formalParameters )?
                if ( stream_formalParameters.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameters.nextTree());

                }
                stream_formalParameters.reset();
                // jkit/java/Java.g:363:67: ( ^( THROWS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:363:67: ^( THROWS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, interfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodDeclaratorRest"

    public static class interfaceGenericMethodDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceGenericMethodDecl"
    // jkit/java/Java.g:366:1: interfaceGenericMethodDecl : typeParameters ( type Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier type interfaceMethodDeclaratorRest | 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest ) ;
    public final JavaParser.interfaceGenericMethodDecl_return interfaceGenericMethodDecl() throws RecognitionException {
        JavaParser.interfaceGenericMethodDecl_return retval = new JavaParser.interfaceGenericMethodDecl_return();
        retval.start = input.LT(1);
        int interfaceGenericMethodDecl_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier135=null;
        Token string_literal137=null;
        Token Identifier138=null;
        JavaParser.typeParameters_return typeParameters133 = null;

        JavaParser.type_return type134 = null;

        JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest136 = null;

        JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest139 = null;


        Object Identifier135_tree=null;
        Object string_literal137_tree=null;
        Object Identifier138_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_interfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule interfaceMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // jkit/java/Java.g:367:2: ( typeParameters ( type Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier type interfaceMethodDeclaratorRest | 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest ) )
            // jkit/java/Java.g:367:4: typeParameters ( type Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier type interfaceMethodDeclaratorRest | 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest )
            {
            pushFollow(FOLLOW_typeParameters_in_interfaceGenericMethodDecl2008);
            typeParameters133=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters133.getTree());
            // jkit/java/Java.g:368:3: ( type Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier type interfaceMethodDeclaratorRest | 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==Identifier||(LA47_0>=148 && LA47_0<=155)) ) {
                alt47=1;
            }
            else if ( (LA47_0==133) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    // jkit/java/Java.g:368:4: type Identifier interfaceMethodDeclaratorRest
                    {
                    pushFollow(FOLLOW_type_in_interfaceGenericMethodDecl2014);
                    type134=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type134.getTree());
                    Identifier135=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceGenericMethodDecl2016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier135);

                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl2018);
                    interfaceMethodDeclaratorRest136=interfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest136.getTree());


                    // AST REWRITE
                    // elements: type, typeParameters, interfaceMethodDeclaratorRest, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 368:50: -> typeParameters Identifier type interfaceMethodDeclaratorRest
                    {
                        adaptor.addChild(root_0, stream_typeParameters.nextTree());
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        adaptor.addChild(root_0, stream_type.nextTree());
                        adaptor.addChild(root_0, stream_interfaceMethodDeclaratorRest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:369:5: 'void' Identifier interfaceMethodDeclaratorRest
                    {
                    string_literal137=(Token)match(input,133,FOLLOW_133_in_interfaceGenericMethodDecl2034); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(string_literal137);

                    Identifier138=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceGenericMethodDecl2036); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier138);

                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl2038);
                    interfaceMethodDeclaratorRest139=interfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest139.getTree());


                    // AST REWRITE
                    // elements: Identifier, interfaceMethodDeclaratorRest, typeParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 369:53: -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest
                    {
                        adaptor.addChild(root_0, stream_typeParameters.nextTree());
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/Java.g:369:82: ^( TYPE VOID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(VOID, "VOID"));

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_interfaceMethodDeclaratorRest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, interfaceGenericMethodDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceGenericMethodDecl"

    public static class voidInterfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidInterfaceMethodDeclaratorRest"
    // jkit/java/Java.g:373:1: voidInterfaceMethodDeclaratorRest : formalParameters ( 'throws' typeList )? ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ;
    public final JavaParser.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest() throws RecognitionException {
        JavaParser.voidInterfaceMethodDeclaratorRest_return retval = new JavaParser.voidInterfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidInterfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal141=null;
        Token char_literal143=null;
        JavaParser.formalParameters_return formalParameters140 = null;

        JavaParser.typeList_return typeList142 = null;


        Object string_literal141_tree=null;
        Object char_literal143_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // jkit/java/Java.g:374:2: ( formalParameters ( 'throws' typeList )? ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            // jkit/java/Java.g:374:4: formalParameters ( 'throws' typeList )? ';'
            {
            pushFollow(FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest2068);
            formalParameters140=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters140.getTree());
            // jkit/java/Java.g:374:21: ( 'throws' typeList )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==134) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // jkit/java/Java.g:374:22: 'throws' typeList
                    {
                    string_literal141=(Token)match(input,134,FOLLOW_134_in_voidInterfaceMethodDeclaratorRest2071); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(string_literal141);

                    pushFollow(FOLLOW_typeList_in_voidInterfaceMethodDeclaratorRest2073);
                    typeList142=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList142.getTree());

                    }
                    break;

            }

            char_literal143=(Token)match(input,118,FOLLOW_118_in_voidInterfaceMethodDeclaratorRest2077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal143);



            // AST REWRITE
            // elements: formalParameters, typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 374:46: -> ( formalParameters )? ( ^( THROWS typeList ) )?
            {
                // jkit/java/Java.g:374:49: ( formalParameters )?
                if ( stream_formalParameters.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameters.nextTree());

                }
                stream_formalParameters.reset();
                // jkit/java/Java.g:374:67: ( ^( THROWS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:374:67: ^( THROWS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, voidInterfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidInterfaceMethodDeclaratorRest"

    public static class constructorDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorDeclaratorRest"
    // jkit/java/Java.g:377:1: constructorDeclaratorRest : formalParameters ( 'throws' typeList )? methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody ;
    public final JavaParser.constructorDeclaratorRest_return constructorDeclaratorRest() throws RecognitionException {
        JavaParser.constructorDeclaratorRest_return retval = new JavaParser.constructorDeclaratorRest_return();
        retval.start = input.LT(1);
        int constructorDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal145=null;
        JavaParser.formalParameters_return formalParameters144 = null;

        JavaParser.typeList_return typeList146 = null;

        JavaParser.methodBody_return methodBody147 = null;


        Object string_literal145_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // jkit/java/Java.g:378:2: ( formalParameters ( 'throws' typeList )? methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody )
            // jkit/java/Java.g:378:4: formalParameters ( 'throws' typeList )? methodBody
            {
            pushFollow(FOLLOW_formalParameters_in_constructorDeclaratorRest2101);
            formalParameters144=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters144.getTree());
            // jkit/java/Java.g:378:21: ( 'throws' typeList )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==134) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // jkit/java/Java.g:378:22: 'throws' typeList
                    {
                    string_literal145=(Token)match(input,134,FOLLOW_134_in_constructorDeclaratorRest2104); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(string_literal145);

                    pushFollow(FOLLOW_typeList_in_constructorDeclaratorRest2106);
                    typeList146=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList146.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_methodBody_in_constructorDeclaratorRest2110);
            methodBody147=methodBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_methodBody.add(methodBody147.getTree());


            // AST REWRITE
            // elements: typeList, formalParameters, methodBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 378:53: -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody
            {
                // jkit/java/Java.g:378:56: ( formalParameters )?
                if ( stream_formalParameters.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameters.nextTree());

                }
                stream_formalParameters.reset();
                // jkit/java/Java.g:378:74: ( ^( THROWS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:378:74: ^( THROWS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();
                adaptor.addChild(root_0, stream_methodBody.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, constructorDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructorDeclaratorRest"

    public static class variableDeclarators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarators"
    // jkit/java/Java.g:382:1: variableDeclarators : i+= variableDeclarator ( ',' i+= variableDeclarator )* -> ( $i)+ ;
    public final JavaParser.variableDeclarators_return variableDeclarators() throws RecognitionException {
        JavaParser.variableDeclarators_return retval = new JavaParser.variableDeclarators_return();
        retval.start = input.LT(1);
        int variableDeclarators_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal148=null;
        List list_i=null;
        JavaParser.variableDeclarator_return i = null;
        Object char_literal148_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_variableDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // jkit/java/Java.g:383:2: (i+= variableDeclarator ( ',' i+= variableDeclarator )* -> ( $i)+ )
            // jkit/java/Java.g:383:4: i+= variableDeclarator ( ',' i+= variableDeclarator )*
            {
            pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators2139);
            i=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarator.add(i.getTree());
            if (list_i==null) list_i=new ArrayList();
            list_i.add(i.getTree());

            // jkit/java/Java.g:383:26: ( ',' i+= variableDeclarator )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==127) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // jkit/java/Java.g:383:27: ',' i+= variableDeclarator
            	    {
            	    char_literal148=(Token)match(input,127,FOLLOW_127_in_variableDeclarators2142); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal148);

            	    pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators2146);
            	    i=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableDeclarator.add(i.getTree());
            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i.getTree());


            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: i
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
            root_0 = (Object)adaptor.nil();
            // 383:55: -> ( $i)+
            {
                if ( !(stream_i.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_0, stream_i.nextTree());

                }
                stream_i.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, variableDeclarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarators"

    public static class variableDeclarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarator"
    // jkit/java/Java.g:386:1: variableDeclarator : Identifier variableDeclaratorRest -> ^( Identifier ( variableDeclaratorRest )? ) ;
    public final JavaParser.variableDeclarator_return variableDeclarator() throws RecognitionException {
        JavaParser.variableDeclarator_return retval = new JavaParser.variableDeclarator_return();
        retval.start = input.LT(1);
        int variableDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier149=null;
        JavaParser.variableDeclaratorRest_return variableDeclaratorRest150 = null;


        Object Identifier149_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_variableDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // jkit/java/Java.g:387:2: ( Identifier variableDeclaratorRest -> ^( Identifier ( variableDeclaratorRest )? ) )
            // jkit/java/Java.g:387:4: Identifier variableDeclaratorRest
            {
            Identifier149=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclarator2165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier149);

            pushFollow(FOLLOW_variableDeclaratorRest_in_variableDeclarator2167);
            variableDeclaratorRest150=variableDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorRest.add(variableDeclaratorRest150.getTree());


            // AST REWRITE
            // elements: Identifier, variableDeclaratorRest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 387:38: -> ^( Identifier ( variableDeclaratorRest )? )
            {
                // jkit/java/Java.g:387:41: ^( Identifier ( variableDeclaratorRest )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/Java.g:387:54: ( variableDeclaratorRest )?
                if ( stream_variableDeclaratorRest.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableDeclaratorRest.nextTree());

                }
                stream_variableDeclaratorRest.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, variableDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarator"

    public static class variableDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorRest"
    // jkit/java/Java.g:390:1: variableDeclaratorRest : ( ( '[' ']' )+ ( '=' variableInitializer )? -> ( '[' )+ ( variableInitializer )? | '=' variableInitializer -> variableInitializer | );
    public final JavaParser.variableDeclaratorRest_return variableDeclaratorRest() throws RecognitionException {
        JavaParser.variableDeclaratorRest_return retval = new JavaParser.variableDeclaratorRest_return();
        retval.start = input.LT(1);
        int variableDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal151=null;
        Token char_literal152=null;
        Token char_literal153=null;
        Token char_literal155=null;
        JavaParser.variableInitializer_return variableInitializer154 = null;

        JavaParser.variableInitializer_return variableInitializer156 = null;


        Object char_literal151_tree=null;
        Object char_literal152_tree=null;
        Object char_literal153_tree=null;
        Object char_literal155_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // jkit/java/Java.g:391:2: ( ( '[' ']' )+ ( '=' variableInitializer )? -> ( '[' )+ ( variableInitializer )? | '=' variableInitializer -> variableInitializer | )
            int alt53=3;
            switch ( input.LA(1) ) {
            case 135:
                {
                alt53=1;
                }
                break;
            case 137:
                {
                alt53=2;
                }
                break;
            case EOF:
            case 118:
            case 127:
                {
                alt53=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;
            }

            switch (alt53) {
                case 1 :
                    // jkit/java/Java.g:391:4: ( '[' ']' )+ ( '=' variableInitializer )?
                    {
                    // jkit/java/Java.g:391:4: ( '[' ']' )+
                    int cnt51=0;
                    loop51:
                    do {
                        int alt51=2;
                        int LA51_0 = input.LA(1);

                        if ( (LA51_0==135) ) {
                            alt51=1;
                        }


                        switch (alt51) {
                    	case 1 :
                    	    // jkit/java/Java.g:391:5: '[' ']'
                    	    {
                    	    char_literal151=(Token)match(input,135,FOLLOW_135_in_variableDeclaratorRest2189); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_135.add(char_literal151);

                    	    char_literal152=(Token)match(input,136,FOLLOW_136_in_variableDeclaratorRest2191); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_136.add(char_literal152);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt51 >= 1 ) break loop51;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(51, input);
                                throw eee;
                        }
                        cnt51++;
                    } while (true);

                    // jkit/java/Java.g:391:15: ( '=' variableInitializer )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==137) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            // jkit/java/Java.g:391:16: '=' variableInitializer
                            {
                            char_literal153=(Token)match(input,137,FOLLOW_137_in_variableDeclaratorRest2196); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_137.add(char_literal153);

                            pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest2198);
                            variableInitializer154=variableInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer154.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: variableInitializer, 135
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 391:42: -> ( '[' )+ ( variableInitializer )?
                    {
                        if ( !(stream_135.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_135.hasNext() ) {
                            adaptor.addChild(root_0, stream_135.nextNode());

                        }
                        stream_135.reset();
                        // jkit/java/Java.g:391:50: ( variableInitializer )?
                        if ( stream_variableInitializer.hasNext() ) {
                            adaptor.addChild(root_0, stream_variableInitializer.nextTree());

                        }
                        stream_variableInitializer.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:392:4: '=' variableInitializer
                    {
                    char_literal155=(Token)match(input,137,FOLLOW_137_in_variableDeclaratorRest2213); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal155);

                    pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest2215);
                    variableInitializer156=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer156.getTree());


                    // AST REWRITE
                    // elements: variableInitializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 392:28: -> variableInitializer
                    {
                        adaptor.addChild(root_0, stream_variableInitializer.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:394:2: 
                    {
                    root_0 = (Object)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, variableDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorRest"

    public static class constantDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclaration"
    // jkit/java/Java.g:396:1: constantDeclaration : type constantDeclarators ';' -> type constantDeclarators ;
    public final JavaParser.constantDeclaration_return constantDeclaration() throws RecognitionException {
        JavaParser.constantDeclaration_return retval = new JavaParser.constantDeclaration_return();
        retval.start = input.LT(1);
        int constantDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal159=null;
        JavaParser.type_return type157 = null;

        JavaParser.constantDeclarators_return constantDeclarators158 = null;


        Object char_literal159_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_constantDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // jkit/java/Java.g:397:2: ( type constantDeclarators ';' -> type constantDeclarators )
            // jkit/java/Java.g:397:4: type constantDeclarators ';'
            {
            pushFollow(FOLLOW_type_in_constantDeclaration2233);
            type157=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type157.getTree());
            pushFollow(FOLLOW_constantDeclarators_in_constantDeclaration2235);
            constantDeclarators158=constantDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constantDeclarators.add(constantDeclarators158.getTree());
            char_literal159=(Token)match(input,118,FOLLOW_118_in_constantDeclaration2237); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal159);



            // AST REWRITE
            // elements: type, constantDeclarators
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 397:33: -> type constantDeclarators
            {
                adaptor.addChild(root_0, stream_type.nextTree());
                adaptor.addChild(root_0, stream_constantDeclarators.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, constantDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclaration"

    public static class constantDeclarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarator"
    // jkit/java/Java.g:400:1: constantDeclarator : Identifier constantDeclaratorRest -> ^( Identifier constantDeclaratorRest ) ;
    public final JavaParser.constantDeclarator_return constantDeclarator() throws RecognitionException {
        JavaParser.constantDeclarator_return retval = new JavaParser.constantDeclarator_return();
        retval.start = input.LT(1);
        int constantDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier160=null;
        JavaParser.constantDeclaratorRest_return constantDeclaratorRest161 = null;


        Object Identifier160_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_constantDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // jkit/java/Java.g:401:2: ( Identifier constantDeclaratorRest -> ^( Identifier constantDeclaratorRest ) )
            // jkit/java/Java.g:401:4: Identifier constantDeclaratorRest
            {
            Identifier160=(Token)match(input,Identifier,FOLLOW_Identifier_in_constantDeclarator2254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier160);

            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclarator2256);
            constantDeclaratorRest161=constantDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constantDeclaratorRest.add(constantDeclaratorRest161.getTree());


            // AST REWRITE
            // elements: Identifier, constantDeclaratorRest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 401:38: -> ^( Identifier constantDeclaratorRest )
            {
                // jkit/java/Java.g:401:41: ^( Identifier constantDeclaratorRest )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                adaptor.addChild(root_1, stream_constantDeclaratorRest.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, constantDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarator"

    public static class constantDeclarators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarators"
    // jkit/java/Java.g:404:1: constantDeclarators : i+= constantDeclarator ( ',' i+= constantDeclarator )* -> ( $i)+ ;
    public final JavaParser.constantDeclarators_return constantDeclarators() throws RecognitionException {
        JavaParser.constantDeclarators_return retval = new JavaParser.constantDeclarators_return();
        retval.start = input.LT(1);
        int constantDeclarators_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal162=null;
        List list_i=null;
        JavaParser.constantDeclarator_return i = null;
        Object char_literal162_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_constantDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // jkit/java/Java.g:405:2: (i+= constantDeclarator ( ',' i+= constantDeclarator )* -> ( $i)+ )
            // jkit/java/Java.g:405:4: i+= constantDeclarator ( ',' i+= constantDeclarator )*
            {
            pushFollow(FOLLOW_constantDeclarator_in_constantDeclarators2279);
            i=constantDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constantDeclarator.add(i.getTree());
            if (list_i==null) list_i=new ArrayList();
            list_i.add(i.getTree());

            // jkit/java/Java.g:405:26: ( ',' i+= constantDeclarator )*
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==127) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // jkit/java/Java.g:405:27: ',' i+= constantDeclarator
            	    {
            	    char_literal162=(Token)match(input,127,FOLLOW_127_in_constantDeclarators2282); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal162);

            	    pushFollow(FOLLOW_constantDeclarator_in_constantDeclarators2286);
            	    i=constantDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_constantDeclarator.add(i.getTree());
            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i.getTree());


            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: i
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
            root_0 = (Object)adaptor.nil();
            // 405:55: -> ( $i)+
            {
                if ( !(stream_i.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_0, stream_i.nextTree());

                }
                stream_i.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, constantDeclarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarators"

    public static class constantDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclaratorRest"
    // jkit/java/Java.g:408:1: constantDeclaratorRest : ( '[' ']' )* '=' variableInitializer -> ( '[' )* variableInitializer ;
    public final JavaParser.constantDeclaratorRest_return constantDeclaratorRest() throws RecognitionException {
        JavaParser.constantDeclaratorRest_return retval = new JavaParser.constantDeclaratorRest_return();
        retval.start = input.LT(1);
        int constantDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal163=null;
        Token char_literal164=null;
        Token char_literal165=null;
        JavaParser.variableInitializer_return variableInitializer166 = null;


        Object char_literal163_tree=null;
        Object char_literal164_tree=null;
        Object char_literal165_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // jkit/java/Java.g:409:2: ( ( '[' ']' )* '=' variableInitializer -> ( '[' )* variableInitializer )
            // jkit/java/Java.g:409:4: ( '[' ']' )* '=' variableInitializer
            {
            // jkit/java/Java.g:409:4: ( '[' ']' )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==135) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // jkit/java/Java.g:409:5: '[' ']'
            	    {
            	    char_literal163=(Token)match(input,135,FOLLOW_135_in_constantDeclaratorRest2307); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_135.add(char_literal163);

            	    char_literal164=(Token)match(input,136,FOLLOW_136_in_constantDeclaratorRest2309); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_136.add(char_literal164);


            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);

            char_literal165=(Token)match(input,137,FOLLOW_137_in_constantDeclaratorRest2313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(char_literal165);

            pushFollow(FOLLOW_variableInitializer_in_constantDeclaratorRest2315);
            variableInitializer166=variableInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer166.getTree());


            // AST REWRITE
            // elements: variableInitializer, 135
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 409:39: -> ( '[' )* variableInitializer
            {
                // jkit/java/Java.g:409:42: ( '[' )*
                while ( stream_135.hasNext() ) {
                    adaptor.addChild(root_0, stream_135.nextNode());

                }
                stream_135.reset();
                adaptor.addChild(root_0, stream_variableInitializer.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, constantDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclaratorRest"

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorId"
    // jkit/java/Java.g:412:1: variableDeclaratorId : Identifier ( '[' ']' )* ;
    public final JavaParser.variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
        JavaParser.variableDeclaratorId_return retval = new JavaParser.variableDeclaratorId_return();
        retval.start = input.LT(1);
        int variableDeclaratorId_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier167=null;
        Token char_literal168=null;
        Token char_literal169=null;

        Object Identifier167_tree=null;
        Object char_literal168_tree=null;
        Object char_literal169_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // jkit/java/Java.g:413:2: ( Identifier ( '[' ']' )* )
            // jkit/java/Java.g:413:4: Identifier ( '[' ']' )*
            {
            root_0 = (Object)adaptor.nil();

            Identifier167=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaratorId2334); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier167_tree = (Object)adaptor.create(Identifier167);
            adaptor.addChild(root_0, Identifier167_tree);
            }
            // jkit/java/Java.g:413:15: ( '[' ']' )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==135) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // jkit/java/Java.g:413:16: '[' ']'
            	    {
            	    char_literal168=(Token)match(input,135,FOLLOW_135_in_variableDeclaratorId2337); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal168_tree = (Object)adaptor.create(char_literal168);
            	    adaptor.addChild(root_0, char_literal168_tree);
            	    }
            	    char_literal169=(Token)match(input,136,FOLLOW_136_in_variableDeclaratorId2339); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal169_tree = (Object)adaptor.create(char_literal169);
            	    adaptor.addChild(root_0, char_literal169_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, variableDeclaratorId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorId"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // jkit/java/Java.g:416:1: variableInitializer : ( arrayInitializer | expression );
    public final JavaParser.variableInitializer_return variableInitializer() throws RecognitionException {
        JavaParser.variableInitializer_return retval = new JavaParser.variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.arrayInitializer_return arrayInitializer170 = null;

        JavaParser.expression_return expression171 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // jkit/java/Java.g:417:2: ( arrayInitializer | expression )
            int alt57=2;
            alt57 = dfa57.predict(input);
            switch (alt57) {
                case 1 :
                    // jkit/java/Java.g:417:4: arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer2352);
                    arrayInitializer170=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer170.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:418:9: expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer2362);
                    expression171=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression171.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // jkit/java/Java.g:421:1: arrayInitializer : '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}' -> ^( ARRAYVAL ( variableInitializer )* ) ;
    public final JavaParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
        JavaParser.arrayInitializer_return retval = new JavaParser.arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal172=null;
        Token char_literal174=null;
        Token char_literal176=null;
        Token char_literal177=null;
        JavaParser.variableInitializer_return variableInitializer173 = null;

        JavaParser.variableInitializer_return variableInitializer175 = null;


        Object char_literal172_tree=null;
        Object char_literal174_tree=null;
        Object char_literal176_tree=null;
        Object char_literal177_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // jkit/java/Java.g:422:2: ( '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}' -> ^( ARRAYVAL ( variableInitializer )* ) )
            // jkit/java/Java.g:422:4: '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}'
            {
            char_literal172=(Token)match(input,130,FOLLOW_130_in_arrayInitializer2374); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal172);

            // jkit/java/Java.g:422:8: ( variableInitializer ( ',' variableInitializer )* ( ',' )? )?
            int alt60=2;
            alt60 = dfa60.predict(input);
            switch (alt60) {
                case 1 :
                    // jkit/java/Java.g:422:9: variableInitializer ( ',' variableInitializer )* ( ',' )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer2377);
                    variableInitializer173=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer173.getTree());
                    // jkit/java/Java.g:422:29: ( ',' variableInitializer )*
                    loop58:
                    do {
                        int alt58=2;
                        alt58 = dfa58.predict(input);
                        switch (alt58) {
                    	case 1 :
                    	    // jkit/java/Java.g:422:30: ',' variableInitializer
                    	    {
                    	    char_literal174=(Token)match(input,127,FOLLOW_127_in_arrayInitializer2380); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_127.add(char_literal174);

                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer2382);
                    	    variableInitializer175=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer175.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop58;
                        }
                    } while (true);

                    // jkit/java/Java.g:422:56: ( ',' )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==127) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // jkit/java/Java.g:422:57: ','
                            {
                            char_literal176=(Token)match(input,127,FOLLOW_127_in_arrayInitializer2387); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_127.add(char_literal176);


                            }
                            break;

                    }


                    }
                    break;

            }

            char_literal177=(Token)match(input,131,FOLLOW_131_in_arrayInitializer2394); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(char_literal177);



            // AST REWRITE
            // elements: variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 422:70: -> ^( ARRAYVAL ( variableInitializer )* )
            {
                // jkit/java/Java.g:422:73: ^( ARRAYVAL ( variableInitializer )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYVAL, "ARRAYVAL"), root_1);

                // jkit/java/Java.g:422:84: ( variableInitializer )*
                while ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifier"
    // jkit/java/Java.g:425:1: modifier : ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' );
    public final JavaParser.modifier_return modifier() throws RecognitionException {
        JavaParser.modifier_return retval = new JavaParser.modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal179=null;
        Token string_literal180=null;
        Token string_literal181=null;
        Token string_literal182=null;
        Token string_literal183=null;
        Token string_literal184=null;
        Token string_literal185=null;
        Token string_literal186=null;
        Token string_literal187=null;
        Token string_literal188=null;
        Token string_literal189=null;
        JavaParser.annotation_return annotation178 = null;


        Object string_literal179_tree=null;
        Object string_literal180_tree=null;
        Object string_literal181_tree=null;
        Object string_literal182_tree=null;
        Object string_literal183_tree=null;
        Object string_literal184_tree=null;
        Object string_literal185_tree=null;
        Object string_literal186_tree=null;
        Object string_literal187_tree=null;
        Object string_literal188_tree=null;
        Object string_literal189_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // jkit/java/Java.g:426:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )
            int alt61=12;
            alt61 = dfa61.predict(input);
            switch (alt61) {
                case 1 :
                    // jkit/java/Java.g:426:9: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_modifier2419);
                    annotation178=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation178.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:427:9: 'public'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal179=(Token)match(input,138,FOLLOW_138_in_modifier2429); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal179_tree = (Object)adaptor.create(string_literal179);
                    adaptor.addChild(root_0, string_literal179_tree);
                    }

                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:428:9: 'protected'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal180=(Token)match(input,139,FOLLOW_139_in_modifier2439); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal180_tree = (Object)adaptor.create(string_literal180);
                    adaptor.addChild(root_0, string_literal180_tree);
                    }

                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:429:9: 'private'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal181=(Token)match(input,140,FOLLOW_140_in_modifier2449); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal181_tree = (Object)adaptor.create(string_literal181);
                    adaptor.addChild(root_0, string_literal181_tree);
                    }

                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:430:9: 'static'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal182=(Token)match(input,120,FOLLOW_120_in_modifier2459); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal182_tree = (Object)adaptor.create(string_literal182);
                    adaptor.addChild(root_0, string_literal182_tree);
                    }

                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:431:9: 'abstract'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal183=(Token)match(input,141,FOLLOW_141_in_modifier2469); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal183_tree = (Object)adaptor.create(string_literal183);
                    adaptor.addChild(root_0, string_literal183_tree);
                    }

                    }
                    break;
                case 7 :
                    // jkit/java/Java.g:432:9: 'final'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal184=(Token)match(input,142,FOLLOW_142_in_modifier2479); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal184_tree = (Object)adaptor.create(string_literal184);
                    adaptor.addChild(root_0, string_literal184_tree);
                    }

                    }
                    break;
                case 8 :
                    // jkit/java/Java.g:433:9: 'native'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal185=(Token)match(input,143,FOLLOW_143_in_modifier2489); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal185_tree = (Object)adaptor.create(string_literal185);
                    adaptor.addChild(root_0, string_literal185_tree);
                    }

                    }
                    break;
                case 9 :
                    // jkit/java/Java.g:434:9: 'synchronized'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal186=(Token)match(input,144,FOLLOW_144_in_modifier2499); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal186_tree = (Object)adaptor.create(string_literal186);
                    adaptor.addChild(root_0, string_literal186_tree);
                    }

                    }
                    break;
                case 10 :
                    // jkit/java/Java.g:435:9: 'transient'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal187=(Token)match(input,145,FOLLOW_145_in_modifier2509); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal187_tree = (Object)adaptor.create(string_literal187);
                    adaptor.addChild(root_0, string_literal187_tree);
                    }

                    }
                    break;
                case 11 :
                    // jkit/java/Java.g:436:9: 'volatile'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal188=(Token)match(input,146,FOLLOW_146_in_modifier2519); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal188_tree = (Object)adaptor.create(string_literal188);
                    adaptor.addChild(root_0, string_literal188_tree);
                    }

                    }
                    break;
                case 12 :
                    // jkit/java/Java.g:437:9: 'strictfp'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal189=(Token)match(input,147,FOLLOW_147_in_modifier2529); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal189_tree = (Object)adaptor.create(string_literal189);
                    adaptor.addChild(root_0, string_literal189_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public static class packageOrTypeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageOrTypeName"
    // jkit/java/Java.g:440:1: packageOrTypeName : Identifier ( '.' Identifier )* ;
    public final JavaParser.packageOrTypeName_return packageOrTypeName() throws RecognitionException {
        JavaParser.packageOrTypeName_return retval = new JavaParser.packageOrTypeName_return();
        retval.start = input.LT(1);
        int packageOrTypeName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier190=null;
        Token char_literal191=null;
        Token Identifier192=null;

        Object Identifier190_tree=null;
        Object char_literal191_tree=null;
        Object Identifier192_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // jkit/java/Java.g:441:2: ( Identifier ( '.' Identifier )* )
            // jkit/java/Java.g:441:4: Identifier ( '.' Identifier )*
            {
            root_0 = (Object)adaptor.nil();

            Identifier190=(Token)match(input,Identifier,FOLLOW_Identifier_in_packageOrTypeName2543); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier190_tree = (Object)adaptor.create(Identifier190);
            adaptor.addChild(root_0, Identifier190_tree);
            }
            // jkit/java/Java.g:441:15: ( '.' Identifier )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==121) ) {
                    int LA62_1 = input.LA(2);

                    if ( (LA62_1==Identifier) ) {
                        int LA62_2 = input.LA(3);

                        if ( (synpred88_Java()) ) {
                            alt62=1;
                        }


                    }


                }


                switch (alt62) {
            	case 1 :
            	    // jkit/java/Java.g:441:16: '.' Identifier
            	    {
            	    char_literal191=(Token)match(input,121,FOLLOW_121_in_packageOrTypeName2546); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal191_tree = (Object)adaptor.create(char_literal191);
            	    adaptor.addChild(root_0, char_literal191_tree);
            	    }
            	    Identifier192=(Token)match(input,Identifier,FOLLOW_Identifier_in_packageOrTypeName2548); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    Identifier192_tree = (Object)adaptor.create(Identifier192);
            	    adaptor.addChild(root_0, Identifier192_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, packageOrTypeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageOrTypeName"

    public static class enumConstantName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstantName"
    // jkit/java/Java.g:444:1: enumConstantName : Identifier ;
    public final JavaParser.enumConstantName_return enumConstantName() throws RecognitionException {
        JavaParser.enumConstantName_return retval = new JavaParser.enumConstantName_return();
        retval.start = input.LT(1);
        int enumConstantName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier193=null;

        Object Identifier193_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // jkit/java/Java.g:445:5: ( Identifier )
            // jkit/java/Java.g:445:9: Identifier
            {
            root_0 = (Object)adaptor.nil();

            Identifier193=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumConstantName2566); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier193_tree = (Object)adaptor.create(Identifier193);
            adaptor.addChild(root_0, Identifier193_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, enumConstantName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstantName"

    public static class typeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // jkit/java/Java.g:448:1: typeName : ( Identifier | packageOrTypeName '.' Identifier );
    public final JavaParser.typeName_return typeName() throws RecognitionException {
        JavaParser.typeName_return retval = new JavaParser.typeName_return();
        retval.start = input.LT(1);
        int typeName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier194=null;
        Token char_literal196=null;
        Token Identifier197=null;
        JavaParser.packageOrTypeName_return packageOrTypeName195 = null;


        Object Identifier194_tree=null;
        Object char_literal196_tree=null;
        Object Identifier197_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // jkit/java/Java.g:449:2: ( Identifier | packageOrTypeName '.' Identifier )
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==Identifier) ) {
                int LA63_1 = input.LA(2);

                if ( (LA63_1==EOF) ) {
                    alt63=1;
                }
                else if ( (LA63_1==121) ) {
                    alt63=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 63, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }
            switch (alt63) {
                case 1 :
                    // jkit/java/Java.g:449:6: Identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    Identifier194=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeName2582); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier194_tree = (Object)adaptor.create(Identifier194);
                    adaptor.addChild(root_0, Identifier194_tree);
                    }

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:450:9: packageOrTypeName '.' Identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_packageOrTypeName_in_typeName2592);
                    packageOrTypeName195=packageOrTypeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, packageOrTypeName195.getTree());
                    char_literal196=(Token)match(input,121,FOLLOW_121_in_typeName2594); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal196_tree = (Object)adaptor.create(char_literal196);
                    adaptor.addChild(root_0, char_literal196_tree);
                    }
                    Identifier197=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeName2596); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier197_tree = (Object)adaptor.create(Identifier197);
                    adaptor.addChild(root_0, Identifier197_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, typeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // jkit/java/Java.g:453:1: type : (i+= refComponent ( '.' i+= refComponent )* ( '[' ']' )* -> ^( TYPE ( $i)+ ( '[' )* ) | primitiveType ( '[' ']' )* -> ^( TYPE primitiveType ( '[' )* ) );
    public final JavaParser.type_return type() throws RecognitionException {
        JavaParser.type_return retval = new JavaParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal198=null;
        Token char_literal199=null;
        Token char_literal200=null;
        Token char_literal202=null;
        Token char_literal203=null;
        List list_i=null;
        JavaParser.primitiveType_return primitiveType201 = null;

        JavaParser.refComponent_return i = null;
        Object char_literal198_tree=null;
        Object char_literal199_tree=null;
        Object char_literal200_tree=null;
        Object char_literal202_tree=null;
        Object char_literal203_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleSubtreeStream stream_refComponent=new RewriteRuleSubtreeStream(adaptor,"rule refComponent");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // jkit/java/Java.g:454:2: (i+= refComponent ( '.' i+= refComponent )* ( '[' ']' )* -> ^( TYPE ( $i)+ ( '[' )* ) | primitiveType ( '[' ']' )* -> ^( TYPE primitiveType ( '[' )* ) )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==Identifier) ) {
                alt67=1;
            }
            else if ( ((LA67_0>=148 && LA67_0<=155)) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    // jkit/java/Java.g:454:4: i+= refComponent ( '.' i+= refComponent )* ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_refComponent_in_type2609);
                    i=refComponent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i.getTree());

                    // jkit/java/Java.g:454:20: ( '.' i+= refComponent )*
                    loop64:
                    do {
                        int alt64=2;
                        alt64 = dfa64.predict(input);
                        switch (alt64) {
                    	case 1 :
                    	    // jkit/java/Java.g:454:21: '.' i+= refComponent
                    	    {
                    	    char_literal198=(Token)match(input,121,FOLLOW_121_in_type2612); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_121.add(char_literal198);

                    	    pushFollow(FOLLOW_refComponent_in_type2616);
                    	    i=refComponent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop64;
                        }
                    } while (true);

                    // jkit/java/Java.g:454:43: ( '[' ']' )*
                    loop65:
                    do {
                        int alt65=2;
                        alt65 = dfa65.predict(input);
                        switch (alt65) {
                    	case 1 :
                    	    // jkit/java/Java.g:454:44: '[' ']'
                    	    {
                    	    char_literal199=(Token)match(input,135,FOLLOW_135_in_type2621); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_135.add(char_literal199);

                    	    char_literal200=(Token)match(input,136,FOLLOW_136_in_type2623); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_136.add(char_literal200);


                    	    }
                    	    break;

                    	default :
                    	    break loop65;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: i, 135
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: i
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                    root_0 = (Object)adaptor.nil();
                    // 454:54: -> ^( TYPE ( $i)+ ( '[' )* )
                    {
                        // jkit/java/Java.g:454:57: ^( TYPE ( $i)+ ( '[' )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        if ( !(stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextTree());

                        }
                        stream_i.reset();
                        // jkit/java/Java.g:454:68: ( '[' )*
                        while ( stream_135.hasNext() ) {
                            adaptor.addChild(root_1, stream_135.nextNode());

                        }
                        stream_135.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:455:4: primitiveType ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_primitiveType_in_type2645);
                    primitiveType201=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType201.getTree());
                    // jkit/java/Java.g:455:18: ( '[' ']' )*
                    loop66:
                    do {
                        int alt66=2;
                        alt66 = dfa66.predict(input);
                        switch (alt66) {
                    	case 1 :
                    	    // jkit/java/Java.g:455:19: '[' ']'
                    	    {
                    	    char_literal202=(Token)match(input,135,FOLLOW_135_in_type2648); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_135.add(char_literal202);

                    	    char_literal203=(Token)match(input,136,FOLLOW_136_in_type2650); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_136.add(char_literal203);


                    	    }
                    	    break;

                    	default :
                    	    break loop66;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: 135, primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 455:29: -> ^( TYPE primitiveType ( '[' )* )
                    {
                        // jkit/java/Java.g:455:32: ^( TYPE primitiveType ( '[' )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, stream_primitiveType.nextTree());
                        // jkit/java/Java.g:455:53: ( '[' )*
                        while ( stream_135.hasNext() ) {
                            adaptor.addChild(root_1, stream_135.nextNode());

                        }
                        stream_135.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class refComponent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "refComponent"
    // jkit/java/Java.g:458:1: refComponent : Identifier ( typeArguments )? -> ^( Identifier ( typeArguments )? ) ;
    public final JavaParser.refComponent_return refComponent() throws RecognitionException {
        JavaParser.refComponent_return retval = new JavaParser.refComponent_return();
        retval.start = input.LT(1);
        int refComponent_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier204=null;
        JavaParser.typeArguments_return typeArguments205 = null;


        Object Identifier204_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_typeArguments=new RewriteRuleSubtreeStream(adaptor,"rule typeArguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // jkit/java/Java.g:459:5: ( Identifier ( typeArguments )? -> ^( Identifier ( typeArguments )? ) )
            // jkit/java/Java.g:459:7: Identifier ( typeArguments )?
            {
            Identifier204=(Token)match(input,Identifier,FOLLOW_Identifier_in_refComponent2679); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier204);

            // jkit/java/Java.g:459:18: ( typeArguments )?
            int alt68=2;
            alt68 = dfa68.predict(input);
            switch (alt68) {
                case 1 :
                    // jkit/java/Java.g:459:19: typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_refComponent2682);
                    typeArguments205=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeArguments.add(typeArguments205.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: typeArguments, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 459:35: -> ^( Identifier ( typeArguments )? )
            {
                // jkit/java/Java.g:459:38: ^( Identifier ( typeArguments )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/Java.g:459:51: ( typeArguments )?
                if ( stream_typeArguments.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeArguments.nextTree());

                }
                stream_typeArguments.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, refComponent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "refComponent"

    public static class primitiveType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // jkit/java/Java.g:462:1: primitiveType : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
    public final JavaParser.primitiveType_return primitiveType() throws RecognitionException {
        JavaParser.primitiveType_return retval = new JavaParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        Object root_0 = null;

        Token set206=null;

        Object set206_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // jkit/java/Java.g:463:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
            // jkit/java/Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set206=(Token)input.LT(1);
            if ( (input.LA(1)>=148 && input.LA(1)<=155) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set206));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class variableModifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableModifier"
    // jkit/java/Java.g:473:1: variableModifier : ( 'final' | annotation );
    public final JavaParser.variableModifier_return variableModifier() throws RecognitionException {
        JavaParser.variableModifier_return retval = new JavaParser.variableModifier_return();
        retval.start = input.LT(1);
        int variableModifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal207=null;
        JavaParser.annotation_return annotation208 = null;


        Object string_literal207_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // jkit/java/Java.g:474:2: ( 'final' | annotation )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==142) ) {
                alt69=1;
            }
            else if ( (LA69_0==164) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // jkit/java/Java.g:474:4: 'final'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal207=(Token)match(input,142,FOLLOW_142_in_variableModifier2782); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal207_tree = (Object)adaptor.create(string_literal207);
                    adaptor.addChild(root_0, string_literal207_tree);
                    }

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:475:9: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_variableModifier2792);
                    annotation208=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation208.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, variableModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableModifier"

    public static class typeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArguments"
    // jkit/java/Java.g:478:1: typeArguments : '<' t+= typeArgument ( ',' t+= typeArgument )* '>' -> ( $t)+ ;
    public final JavaParser.typeArguments_return typeArguments() throws RecognitionException {
        JavaParser.typeArguments_return retval = new JavaParser.typeArguments_return();
        retval.start = input.LT(1);
        int typeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal209=null;
        Token char_literal210=null;
        Token char_literal211=null;
        List list_t=null;
        JavaParser.typeArgument_return t = null;
        Object char_literal209_tree=null;
        Object char_literal210_tree=null;
        Object char_literal211_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_typeArgument=new RewriteRuleSubtreeStream(adaptor,"rule typeArgument");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // jkit/java/Java.g:479:2: ( '<' t+= typeArgument ( ',' t+= typeArgument )* '>' -> ( $t)+ )
            // jkit/java/Java.g:479:4: '<' t+= typeArgument ( ',' t+= typeArgument )* '>'
            {
            char_literal209=(Token)match(input,126,FOLLOW_126_in_typeArguments2803); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal209);

            pushFollow(FOLLOW_typeArgument_in_typeArguments2807);
            t=typeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeArgument.add(t.getTree());
            if (list_t==null) list_t=new ArrayList();
            list_t.add(t.getTree());

            // jkit/java/Java.g:479:24: ( ',' t+= typeArgument )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==127) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // jkit/java/Java.g:479:25: ',' t+= typeArgument
            	    {
            	    char_literal210=(Token)match(input,127,FOLLOW_127_in_typeArguments2810); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal210);

            	    pushFollow(FOLLOW_typeArgument_in_typeArguments2814);
            	    t=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeArgument.add(t.getTree());
            	    if (list_t==null) list_t=new ArrayList();
            	    list_t.add(t.getTree());


            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);

            char_literal211=(Token)match(input,128,FOLLOW_128_in_typeArguments2818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal211);



            // AST REWRITE
            // elements: t
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: t
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
            root_0 = (Object)adaptor.nil();
            // 479:51: -> ( $t)+
            {
                if ( !(stream_t.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_t.hasNext() ) {
                    adaptor.addChild(root_0, stream_t.nextTree());

                }
                stream_t.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, typeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArguments"

    public static class typeArgument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArgument"
    // jkit/java/Java.g:482:1: typeArgument : ( type | '?' ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) ) );
    public final JavaParser.typeArgument_return typeArgument() throws RecognitionException {
        JavaParser.typeArgument_return retval = new JavaParser.typeArgument_return();
        retval.start = input.LT(1);
        int typeArgument_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal213=null;
        Token string_literal214=null;
        Token string_literal216=null;
        JavaParser.type_return type212 = null;

        JavaParser.type_return type215 = null;

        JavaParser.type_return type217 = null;


        Object char_literal213_tree=null;
        Object string_literal214_tree=null;
        Object string_literal216_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // jkit/java/Java.g:483:2: ( type | '?' ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) ) )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==Identifier||(LA74_0>=148 && LA74_0<=155)) ) {
                alt74=1;
            }
            else if ( (LA74_0==156) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    // jkit/java/Java.g:483:4: type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_typeArgument2836);
                    type212=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type212.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:484:4: '?' ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) )
                    {
                    char_literal213=(Token)match(input,156,FOLLOW_156_in_typeArgument2841); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_156.add(char_literal213);

                    // jkit/java/Java.g:484:8: ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) )
                    int alt73=2;
                    alt73 = dfa73.predict(input);
                    switch (alt73) {
                        case 1 :
                            // jkit/java/Java.g:485:4: ( 'extends' type )?
                            {
                            // jkit/java/Java.g:485:4: ( 'extends' type )?
                            int alt71=2;
                            int LA71_0 = input.LA(1);

                            if ( (LA71_0==124) ) {
                                alt71=1;
                            }
                            switch (alt71) {
                                case 1 :
                                    // jkit/java/Java.g:485:5: 'extends' type
                                    {
                                    string_literal214=(Token)match(input,124,FOLLOW_124_in_typeArgument2850); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_124.add(string_literal214);

                                    pushFollow(FOLLOW_type_in_typeArgument2852);
                                    type215=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type215.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: type, 156
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 485:22: -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) )
                            {
                                // jkit/java/Java.g:485:25: ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                                // jkit/java/Java.g:485:32: ^( '?' ( ^( EXTENDS type ) )? )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_2);

                                // jkit/java/Java.g:485:38: ( ^( EXTENDS type ) )?
                                if ( stream_type.hasNext() ) {
                                    // jkit/java/Java.g:485:38: ^( EXTENDS type )
                                    {
                                    Object root_3 = (Object)adaptor.nil();
                                    root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXTENDS, "EXTENDS"), root_3);

                                    adaptor.addChild(root_3, stream_type.nextTree());

                                    adaptor.addChild(root_2, root_3);
                                    }

                                }
                                stream_type.reset();

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:486:12: ( 'super' type )?
                            {
                            // jkit/java/Java.g:486:12: ( 'super' type )?
                            int alt72=2;
                            int LA72_0 = input.LA(1);

                            if ( (LA72_0==157) ) {
                                alt72=1;
                            }
                            switch (alt72) {
                                case 1 :
                                    // jkit/java/Java.g:486:13: 'super' type
                                    {
                                    string_literal216=(Token)match(input,157,FOLLOW_157_in_typeArgument2885); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_157.add(string_literal216);

                                    pushFollow(FOLLOW_type_in_typeArgument2887);
                                    type217=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type217.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: type, 156
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 486:28: -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) )
                            {
                                // jkit/java/Java.g:486:31: ^( TYPE ^( '?' ( ^( SUPER type ) )? ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                                // jkit/java/Java.g:486:38: ^( '?' ( ^( SUPER type ) )? )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_2);

                                // jkit/java/Java.g:486:44: ( ^( SUPER type ) )?
                                if ( stream_type.hasNext() ) {
                                    // jkit/java/Java.g:486:44: ^( SUPER type )
                                    {
                                    Object root_3 = (Object)adaptor.nil();
                                    root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(SUPER, "SUPER"), root_3);

                                    adaptor.addChild(root_3, stream_type.nextTree());

                                    adaptor.addChild(root_2, root_3);
                                    }

                                }
                                stream_type.reset();

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, typeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArgument"

    public static class qualifiedNameList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedNameList"
    // jkit/java/Java.g:490:1: qualifiedNameList : qualifiedName ( ',' qualifiedName )* ;
    public final JavaParser.qualifiedNameList_return qualifiedNameList() throws RecognitionException {
        JavaParser.qualifiedNameList_return retval = new JavaParser.qualifiedNameList_return();
        retval.start = input.LT(1);
        int qualifiedNameList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal219=null;
        JavaParser.qualifiedName_return qualifiedName218 = null;

        JavaParser.qualifiedName_return qualifiedName220 = null;


        Object char_literal219_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // jkit/java/Java.g:491:2: ( qualifiedName ( ',' qualifiedName )* )
            // jkit/java/Java.g:491:4: qualifiedName ( ',' qualifiedName )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList2929);
            qualifiedName218=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName218.getTree());
            // jkit/java/Java.g:491:18: ( ',' qualifiedName )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==127) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // jkit/java/Java.g:491:19: ',' qualifiedName
            	    {
            	    char_literal219=(Token)match(input,127,FOLLOW_127_in_qualifiedNameList2932); if (state.failed) return retval;
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList2935);
            	    qualifiedName220=qualifiedName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName220.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, qualifiedNameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList"

    public static class formalParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameters"
    // jkit/java/Java.g:494:1: formalParameters : '(' ( formalParameterDecls )? ')' -> ( formalParameterDecls )? ;
    public final JavaParser.formalParameters_return formalParameters() throws RecognitionException {
        JavaParser.formalParameters_return retval = new JavaParser.formalParameters_return();
        retval.start = input.LT(1);
        int formalParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal221=null;
        Token char_literal223=null;
        JavaParser.formalParameterDecls_return formalParameterDecls222 = null;


        Object char_literal221_tree=null;
        Object char_literal223_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_formalParameterDecls=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterDecls");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // jkit/java/Java.g:495:2: ( '(' ( formalParameterDecls )? ')' -> ( formalParameterDecls )? )
            // jkit/java/Java.g:495:4: '(' ( formalParameterDecls )? ')'
            {
            char_literal221=(Token)match(input,158,FOLLOW_158_in_formalParameters2949); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(char_literal221);

            // jkit/java/Java.g:495:8: ( formalParameterDecls )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==Identifier||LA76_0==142||(LA76_0>=148 && LA76_0<=155)||LA76_0==164) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // jkit/java/Java.g:0:0: formalParameterDecls
                    {
                    pushFollow(FOLLOW_formalParameterDecls_in_formalParameters2951);
                    formalParameterDecls222=formalParameterDecls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterDecls.add(formalParameterDecls222.getTree());

                    }
                    break;

            }

            char_literal223=(Token)match(input,159,FOLLOW_159_in_formalParameters2954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(char_literal223);



            // AST REWRITE
            // elements: formalParameterDecls
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 495:34: -> ( formalParameterDecls )?
            {
                // jkit/java/Java.g:495:37: ( formalParameterDecls )?
                if ( stream_formalParameterDecls.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameterDecls.nextTree());

                }
                stream_formalParameterDecls.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, formalParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameters"

    public static class formalParameterDecls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterDecls"
    // jkit/java/Java.g:498:1: formalParameterDecls : ( variableModifier )* type ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ) ;
    public final JavaParser.formalParameterDecls_return formalParameterDecls() throws RecognitionException {
        JavaParser.formalParameterDecls_return retval = new JavaParser.formalParameterDecls_return();
        retval.start = input.LT(1);
        int formalParameterDecls_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal227=null;
        Token string_literal229=null;
        JavaParser.variableModifier_return variableModifier224 = null;

        JavaParser.type_return type225 = null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId226 = null;

        JavaParser.formalParameterDecls_return formalParameterDecls228 = null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId230 = null;


        Object char_literal227_tree=null;
        Object string_literal229_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_formalParameterDecls=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterDecls");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // jkit/java/Java.g:499:2: ( ( variableModifier )* type ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ) )
            // jkit/java/Java.g:499:4: ( variableModifier )* type ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) )
            {
            // jkit/java/Java.g:499:4: ( variableModifier )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==142||LA77_0==164) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameterDecls2971);
            	    variableModifier224=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier224.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameterDecls2974);
            type225=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type225.getTree());
            // jkit/java/Java.g:499:27: ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) )
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==Identifier) ) {
                alt79=1;
            }
            else if ( (LA79_0==160) ) {
                alt79=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }
            switch (alt79) {
                case 1 :
                    // jkit/java/Java.g:500:9: variableDeclaratorId ( ',' formalParameterDecls )?
                    {
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDecls2986);
                    variableDeclaratorId226=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId226.getTree());
                    // jkit/java/Java.g:500:30: ( ',' formalParameterDecls )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==127) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // jkit/java/Java.g:500:31: ',' formalParameterDecls
                            {
                            char_literal227=(Token)match(input,127,FOLLOW_127_in_formalParameterDecls2989); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_127.add(char_literal227);

                            pushFollow(FOLLOW_formalParameterDecls_in_formalParameterDecls2991);
                            formalParameterDecls228=formalParameterDecls();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_formalParameterDecls.add(formalParameterDecls228.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: formalParameterDecls, variableDeclaratorId, type, variableModifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 500:58: -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )?
                    {
                        // jkit/java/Java.g:500:61: ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETER, "PARAMETER"), root_1);

                        // jkit/java/Java.g:500:73: ^( MODIFIERS ( variableModifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/Java.g:500:85: ( variableModifier )*
                        while ( stream_variableModifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_variableModifier.nextTree());

                        }
                        stream_variableModifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/Java.g:500:131: ( formalParameterDecls )?
                        if ( stream_formalParameterDecls.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameterDecls.nextTree());

                        }
                        stream_formalParameterDecls.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:501:11: '...' variableDeclaratorId
                    {
                    string_literal229=(Token)match(input,160,FOLLOW_160_in_formalParameterDecls3025); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_160.add(string_literal229);

                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDecls3027);
                    variableDeclaratorId230=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId230.getTree());


                    // AST REWRITE
                    // elements: variableModifier, variableDeclaratorId, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 501:38: -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId )
                    {
                        // jkit/java/Java.g:501:41: ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARARGS, "VARARGS"), root_1);

                        // jkit/java/Java.g:501:51: ^( MODIFIERS ( variableModifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/Java.g:501:63: ( variableModifier )*
                        while ( stream_variableModifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_variableModifier.nextTree());

                        }
                        stream_variableModifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, formalParameterDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterDecls"

    public static class methodBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodBody"
    // jkit/java/Java.g:506:1: methodBody : block -> block ;
    public final JavaParser.methodBody_return methodBody() throws RecognitionException {
        JavaParser.methodBody_return retval = new JavaParser.methodBody_return();
        retval.start = input.LT(1);
        int methodBody_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.block_return block231 = null;


        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // jkit/java/Java.g:507:2: ( block -> block )
            // jkit/java/Java.g:507:4: block
            {
            pushFollow(FOLLOW_block_in_methodBody3070);
            block231=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block231.getTree());


            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 507:10: -> block
            {
                adaptor.addChild(root_0, stream_block.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, methodBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodBody"

    public static class qualifiedName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName"
    // jkit/java/Java.g:510:1: qualifiedName : i+= Identifier ( '.' i+= Identifier )* -> ( $i)+ ;
    public final JavaParser.qualifiedName_return qualifiedName() throws RecognitionException {
        JavaParser.qualifiedName_return retval = new JavaParser.qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal232=null;
        Token i=null;
        List list_i=null;

        Object char_literal232_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // jkit/java/Java.g:511:2: (i+= Identifier ( '.' i+= Identifier )* -> ( $i)+ )
            // jkit/java/Java.g:511:4: i+= Identifier ( '.' i+= Identifier )*
            {
            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName3088); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(i);

            if (list_i==null) list_i=new ArrayList();
            list_i.add(i);

            // jkit/java/Java.g:511:18: ( '.' i+= Identifier )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==121) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // jkit/java/Java.g:511:19: '.' i+= Identifier
            	    {
            	    char_literal232=(Token)match(input,121,FOLLOW_121_in_qualifiedName3091); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_121.add(char_literal232);

            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName3095); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Identifier.add(i);

            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i);


            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: i
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 511:39: -> ( $i)+
            {
                if ( !(stream_i.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_0, stream_i.nextNode());

                }
                stream_i.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // jkit/java/Java.g:514:1: literal : ( integerLiteral -> ^( INTVAL integerLiteral ) | FloatingPointLiteral -> ^( FLOATVAL FloatingPointLiteral ) | CharacterLiteral -> ^( CHARVAL CharacterLiteral ) | StringLiteral -> ^( STRINGVAL StringLiteral ) | booleanLiteral -> ^( BOOLVAL booleanLiteral ) | 'null' -> ^( NULLVAL ) );
    public final JavaParser.literal_return literal() throws RecognitionException {
        JavaParser.literal_return retval = new JavaParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        Object root_0 = null;

        Token FloatingPointLiteral234=null;
        Token CharacterLiteral235=null;
        Token StringLiteral236=null;
        Token string_literal238=null;
        JavaParser.integerLiteral_return integerLiteral233 = null;

        JavaParser.booleanLiteral_return booleanLiteral237 = null;


        Object FloatingPointLiteral234_tree=null;
        Object CharacterLiteral235_tree=null;
        Object StringLiteral236_tree=null;
        Object string_literal238_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_FloatingPointLiteral=new RewriteRuleTokenStream(adaptor,"token FloatingPointLiteral");
        RewriteRuleTokenStream stream_CharacterLiteral=new RewriteRuleTokenStream(adaptor,"token CharacterLiteral");
        RewriteRuleSubtreeStream stream_booleanLiteral=new RewriteRuleSubtreeStream(adaptor,"rule booleanLiteral");
        RewriteRuleSubtreeStream stream_integerLiteral=new RewriteRuleSubtreeStream(adaptor,"rule integerLiteral");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // jkit/java/Java.g:515:2: ( integerLiteral -> ^( INTVAL integerLiteral ) | FloatingPointLiteral -> ^( FLOATVAL FloatingPointLiteral ) | CharacterLiteral -> ^( CHARVAL CharacterLiteral ) | StringLiteral -> ^( STRINGVAL StringLiteral ) | booleanLiteral -> ^( BOOLVAL booleanLiteral ) | 'null' -> ^( NULLVAL ) )
            int alt81=6;
            switch ( input.LA(1) ) {
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
                {
                alt81=1;
                }
                break;
            case FloatingPointLiteral:
                {
                alt81=2;
                }
                break;
            case CharacterLiteral:
                {
                alt81=3;
                }
                break;
            case StringLiteral:
                {
                alt81=4;
                }
                break;
            case 162:
            case 163:
                {
                alt81=5;
                }
                break;
            case 161:
                {
                alt81=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }

            switch (alt81) {
                case 1 :
                    // jkit/java/Java.g:515:6: integerLiteral
                    {
                    pushFollow(FOLLOW_integerLiteral_in_literal3118);
                    integerLiteral233=integerLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_integerLiteral.add(integerLiteral233.getTree());


                    // AST REWRITE
                    // elements: integerLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 515:21: -> ^( INTVAL integerLiteral )
                    {
                        // jkit/java/Java.g:515:24: ^( INTVAL integerLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTVAL, "INTVAL"), root_1);

                        adaptor.addChild(root_1, stream_integerLiteral.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:516:9: FloatingPointLiteral
                    {
                    FloatingPointLiteral234=(Token)match(input,FloatingPointLiteral,FOLLOW_FloatingPointLiteral_in_literal3136); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FloatingPointLiteral.add(FloatingPointLiteral234);



                    // AST REWRITE
                    // elements: FloatingPointLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 516:30: -> ^( FLOATVAL FloatingPointLiteral )
                    {
                        // jkit/java/Java.g:516:33: ^( FLOATVAL FloatingPointLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FLOATVAL, "FLOATVAL"), root_1);

                        adaptor.addChild(root_1, stream_FloatingPointLiteral.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:517:9: CharacterLiteral
                    {
                    CharacterLiteral235=(Token)match(input,CharacterLiteral,FOLLOW_CharacterLiteral_in_literal3154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CharacterLiteral.add(CharacterLiteral235);



                    // AST REWRITE
                    // elements: CharacterLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 517:26: -> ^( CHARVAL CharacterLiteral )
                    {
                        // jkit/java/Java.g:517:29: ^( CHARVAL CharacterLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CHARVAL, "CHARVAL"), root_1);

                        adaptor.addChild(root_1, stream_CharacterLiteral.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:518:9: StringLiteral
                    {
                    StringLiteral236=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_literal3172); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral236);



                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 518:23: -> ^( STRINGVAL StringLiteral )
                    {
                        // jkit/java/Java.g:518:26: ^( STRINGVAL StringLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STRINGVAL, "STRINGVAL"), root_1);

                        adaptor.addChild(root_1, stream_StringLiteral.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:519:9: booleanLiteral
                    {
                    pushFollow(FOLLOW_booleanLiteral_in_literal3190);
                    booleanLiteral237=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_booleanLiteral.add(booleanLiteral237.getTree());


                    // AST REWRITE
                    // elements: booleanLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 519:24: -> ^( BOOLVAL booleanLiteral )
                    {
                        // jkit/java/Java.g:519:27: ^( BOOLVAL booleanLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BOOLVAL, "BOOLVAL"), root_1);

                        adaptor.addChild(root_1, stream_booleanLiteral.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:520:9: 'null'
                    {
                    string_literal238=(Token)match(input,161,FOLLOW_161_in_literal3208); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_161.add(string_literal238);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 520:16: -> ^( NULLVAL )
                    {
                        // jkit/java/Java.g:520:19: ^( NULLVAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NULLVAL, "NULLVAL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class integerLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integerLiteral"
    // jkit/java/Java.g:523:1: integerLiteral : ( HexLiteral | OctalLiteral | DecimalLiteral );
    public final JavaParser.integerLiteral_return integerLiteral() throws RecognitionException {
        JavaParser.integerLiteral_return retval = new JavaParser.integerLiteral_return();
        retval.start = input.LT(1);
        int integerLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token set239=null;

        Object set239_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // jkit/java/Java.g:524:5: ( HexLiteral | OctalLiteral | DecimalLiteral )
            // jkit/java/Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set239=(Token)input.LT(1);
            if ( (input.LA(1)>=HexLiteral && input.LA(1)<=DecimalLiteral) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set239));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, integerLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integerLiteral"

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "booleanLiteral"
    // jkit/java/Java.g:529:1: booleanLiteral : ( 'true' | 'false' );
    public final JavaParser.booleanLiteral_return booleanLiteral() throws RecognitionException {
        JavaParser.booleanLiteral_return retval = new JavaParser.booleanLiteral_return();
        retval.start = input.LT(1);
        int booleanLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token set240=null;

        Object set240_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // jkit/java/Java.g:530:5: ( 'true' | 'false' )
            // jkit/java/Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set240=(Token)input.LT(1);
            if ( (input.LA(1)>=162 && input.LA(1)<=163) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set240));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, booleanLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"

    public static class annotations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotations"
    // jkit/java/Java.g:536:1: annotations : ( annotation )+ ;
    public final JavaParser.annotations_return annotations() throws RecognitionException {
        JavaParser.annotations_return retval = new JavaParser.annotations_return();
        retval.start = input.LT(1);
        int annotations_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotation_return annotation241 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // jkit/java/Java.g:537:2: ( ( annotation )+ )
            // jkit/java/Java.g:537:4: ( annotation )+
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:537:4: ( annotation )+
            int cnt82=0;
            loop82:
            do {
                int alt82=2;
                alt82 = dfa82.predict(input);
                switch (alt82) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations3296);
            	    annotation241=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation241.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt82 >= 1 ) break loop82;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(82, input);
                        throw eee;
                }
                cnt82++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, annotations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotations"

    public static class annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // jkit/java/Java.g:540:1: annotation : '@' annotationName ( '(' ( elementValuePairs )? ')' )? -> ^( ANNOTATION annotationName ) ;
    public final JavaParser.annotation_return annotation() throws RecognitionException {
        JavaParser.annotation_return retval = new JavaParser.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal242=null;
        Token char_literal244=null;
        Token char_literal246=null;
        JavaParser.annotationName_return annotationName243 = null;

        JavaParser.elementValuePairs_return elementValuePairs245 = null;


        Object char_literal242_tree=null;
        Object char_literal244_tree=null;
        Object char_literal246_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_annotationName=new RewriteRuleSubtreeStream(adaptor,"rule annotationName");
        RewriteRuleSubtreeStream stream_elementValuePairs=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairs");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // jkit/java/Java.g:541:2: ( '@' annotationName ( '(' ( elementValuePairs )? ')' )? -> ^( ANNOTATION annotationName ) )
            // jkit/java/Java.g:541:4: '@' annotationName ( '(' ( elementValuePairs )? ')' )?
            {
            char_literal242=(Token)match(input,164,FOLLOW_164_in_annotation3308); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(char_literal242);

            pushFollow(FOLLOW_annotationName_in_annotation3310);
            annotationName243=annotationName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationName.add(annotationName243.getTree());
            // jkit/java/Java.g:541:23: ( '(' ( elementValuePairs )? ')' )?
            int alt84=2;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // jkit/java/Java.g:541:24: '(' ( elementValuePairs )? ')'
                    {
                    char_literal244=(Token)match(input,158,FOLLOW_158_in_annotation3313); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_158.add(char_literal244);

                    // jkit/java/Java.g:541:28: ( elementValuePairs )?
                    int alt83=2;
                    alt83 = dfa83.predict(input);
                    switch (alt83) {
                        case 1 :
                            // jkit/java/Java.g:0:0: elementValuePairs
                            {
                            pushFollow(FOLLOW_elementValuePairs_in_annotation3315);
                            elementValuePairs245=elementValuePairs();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairs.add(elementValuePairs245.getTree());

                            }
                            break;

                    }

                    char_literal246=(Token)match(input,159,FOLLOW_159_in_annotation3318); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_159.add(char_literal246);


                    }
                    break;

            }



            // AST REWRITE
            // elements: annotationName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 541:53: -> ^( ANNOTATION annotationName )
            {
                // jkit/java/Java.g:541:56: ^( ANNOTATION annotationName )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_annotationName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationName"
    // jkit/java/Java.g:544:1: annotationName : Identifier ( '.' Identifier )* ;
    public final JavaParser.annotationName_return annotationName() throws RecognitionException {
        JavaParser.annotationName_return retval = new JavaParser.annotationName_return();
        retval.start = input.LT(1);
        int annotationName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier247=null;
        Token char_literal248=null;
        Token Identifier249=null;

        Object Identifier247_tree=null;
        Object char_literal248_tree=null;
        Object Identifier249_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // jkit/java/Java.g:545:2: ( Identifier ( '.' Identifier )* )
            // jkit/java/Java.g:545:4: Identifier ( '.' Identifier )*
            {
            root_0 = (Object)adaptor.nil();

            Identifier247=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationName3340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier247_tree = (Object)adaptor.create(Identifier247);
            adaptor.addChild(root_0, Identifier247_tree);
            }
            // jkit/java/Java.g:545:15: ( '.' Identifier )*
            loop85:
            do {
                int alt85=2;
                alt85 = dfa85.predict(input);
                switch (alt85) {
            	case 1 :
            	    // jkit/java/Java.g:545:16: '.' Identifier
            	    {
            	    char_literal248=(Token)match(input,121,FOLLOW_121_in_annotationName3343); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal248_tree = (Object)adaptor.create(char_literal248);
            	    adaptor.addChild(root_0, char_literal248_tree);
            	    }
            	    Identifier249=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationName3345); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    Identifier249_tree = (Object)adaptor.create(Identifier249);
            	    adaptor.addChild(root_0, Identifier249_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, annotationName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationName"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairs"
    // jkit/java/Java.g:548:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
    public final JavaParser.elementValuePairs_return elementValuePairs() throws RecognitionException {
        JavaParser.elementValuePairs_return retval = new JavaParser.elementValuePairs_return();
        retval.start = input.LT(1);
        int elementValuePairs_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal251=null;
        JavaParser.elementValuePair_return elementValuePair250 = null;

        JavaParser.elementValuePair_return elementValuePair252 = null;


        Object char_literal251_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // jkit/java/Java.g:549:2: ( elementValuePair ( ',' elementValuePair )* )
            // jkit/java/Java.g:549:4: elementValuePair ( ',' elementValuePair )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs3359);
            elementValuePair250=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair250.getTree());
            // jkit/java/Java.g:549:21: ( ',' elementValuePair )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==127) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // jkit/java/Java.g:549:22: ',' elementValuePair
            	    {
            	    char_literal251=(Token)match(input,127,FOLLOW_127_in_elementValuePairs3362); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal251_tree = (Object)adaptor.create(char_literal251);
            	    adaptor.addChild(root_0, char_literal251_tree);
            	    }
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs3364);
            	    elementValuePair252=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair252.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, elementValuePairs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePair"
    // jkit/java/Java.g:552:1: elementValuePair : ( Identifier '=' )? elementValue ;
    public final JavaParser.elementValuePair_return elementValuePair() throws RecognitionException {
        JavaParser.elementValuePair_return retval = new JavaParser.elementValuePair_return();
        retval.start = input.LT(1);
        int elementValuePair_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier253=null;
        Token char_literal254=null;
        JavaParser.elementValue_return elementValue255 = null;


        Object Identifier253_tree=null;
        Object char_literal254_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // jkit/java/Java.g:553:2: ( ( Identifier '=' )? elementValue )
            // jkit/java/Java.g:553:4: ( Identifier '=' )? elementValue
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:553:4: ( Identifier '=' )?
            int alt87=2;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // jkit/java/Java.g:553:5: Identifier '='
                    {
                    Identifier253=(Token)match(input,Identifier,FOLLOW_Identifier_in_elementValuePair3379); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier253_tree = (Object)adaptor.create(Identifier253);
                    adaptor.addChild(root_0, Identifier253_tree);
                    }
                    char_literal254=(Token)match(input,137,FOLLOW_137_in_elementValuePair3381); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal254_tree = (Object)adaptor.create(char_literal254);
                    adaptor.addChild(root_0, char_literal254_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_elementValue_in_elementValuePair3385);
            elementValue255=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue255.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, elementValuePair_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValue"
    // jkit/java/Java.g:556:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );
    public final JavaParser.elementValue_return elementValue() throws RecognitionException {
        JavaParser.elementValue_return retval = new JavaParser.elementValue_return();
        retval.start = input.LT(1);
        int elementValue_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.conditionalExpression_return conditionalExpression256 = null;

        JavaParser.annotation_return annotation257 = null;

        JavaParser.elementValueArrayInitializer_return elementValueArrayInitializer258 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // jkit/java/Java.g:557:2: ( conditionalExpression | annotation | elementValueArrayInitializer )
            int alt88=3;
            alt88 = dfa88.predict(input);
            switch (alt88) {
                case 1 :
                    // jkit/java/Java.g:557:4: conditionalExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_conditionalExpression_in_elementValue3397);
                    conditionalExpression256=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression256.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:558:6: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_elementValue3404);
                    annotation257=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation257.getTree());

                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:559:6: elementValueArrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue3411);
                    elementValueArrayInitializer258=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValueArrayInitializer258.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, elementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // jkit/java/Java.g:562:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? '}' ;
    public final JavaParser.elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        JavaParser.elementValueArrayInitializer_return retval = new JavaParser.elementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int elementValueArrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal259=null;
        Token char_literal261=null;
        Token char_literal263=null;
        JavaParser.elementValue_return elementValue260 = null;

        JavaParser.elementValue_return elementValue262 = null;


        Object char_literal259_tree=null;
        Object char_literal261_tree=null;
        Object char_literal263_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // jkit/java/Java.g:563:2: ( '{' ( elementValue ( ',' elementValue )* )? '}' )
            // jkit/java/Java.g:563:4: '{' ( elementValue ( ',' elementValue )* )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal259=(Token)match(input,130,FOLLOW_130_in_elementValueArrayInitializer3423); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal259_tree = (Object)adaptor.create(char_literal259);
            adaptor.addChild(root_0, char_literal259_tree);
            }
            // jkit/java/Java.g:563:8: ( elementValue ( ',' elementValue )* )?
            int alt90=2;
            alt90 = dfa90.predict(input);
            switch (alt90) {
                case 1 :
                    // jkit/java/Java.g:563:9: elementValue ( ',' elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer3426);
                    elementValue260=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue260.getTree());
                    // jkit/java/Java.g:563:22: ( ',' elementValue )*
                    loop89:
                    do {
                        int alt89=2;
                        int LA89_0 = input.LA(1);

                        if ( (LA89_0==127) ) {
                            alt89=1;
                        }


                        switch (alt89) {
                    	case 1 :
                    	    // jkit/java/Java.g:563:23: ',' elementValue
                    	    {
                    	    char_literal261=(Token)match(input,127,FOLLOW_127_in_elementValueArrayInitializer3429); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal261_tree = (Object)adaptor.create(char_literal261);
                    	    adaptor.addChild(root_0, char_literal261_tree);
                    	    }
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer3431);
                    	    elementValue262=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue262.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop89;
                        }
                    } while (true);


                    }
                    break;

            }

            char_literal263=(Token)match(input,131,FOLLOW_131_in_elementValueArrayInitializer3438); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal263_tree = (Object)adaptor.create(char_literal263);
            adaptor.addChild(root_0, char_literal263_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, elementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // jkit/java/Java.g:566:1: annotationTypeDeclaration : '@' 'interface' Identifier annotationTypeBody ;
    public final JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration() throws RecognitionException {
        JavaParser.annotationTypeDeclaration_return retval = new JavaParser.annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal264=null;
        Token string_literal265=null;
        Token Identifier266=null;
        JavaParser.annotationTypeBody_return annotationTypeBody267 = null;


        Object char_literal264_tree=null;
        Object string_literal265_tree=null;
        Object Identifier266_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // jkit/java/Java.g:567:2: ( '@' 'interface' Identifier annotationTypeBody )
            // jkit/java/Java.g:567:4: '@' 'interface' Identifier annotationTypeBody
            {
            root_0 = (Object)adaptor.nil();

            char_literal264=(Token)match(input,164,FOLLOW_164_in_annotationTypeDeclaration3450); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal264_tree = (Object)adaptor.create(char_literal264);
            adaptor.addChild(root_0, char_literal264_tree);
            }
            string_literal265=(Token)match(input,132,FOLLOW_132_in_annotationTypeDeclaration3452); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal265_tree = (Object)adaptor.create(string_literal265);
            adaptor.addChild(root_0, string_literal265_tree);
            }
            Identifier266=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationTypeDeclaration3454); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier266_tree = (Object)adaptor.create(Identifier266);
            adaptor.addChild(root_0, Identifier266_tree);
            }
            pushFollow(FOLLOW_annotationTypeBody_in_annotationTypeDeclaration3456);
            annotationTypeBody267=annotationTypeBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeBody267.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationTypeBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeBody"
    // jkit/java/Java.g:570:1: annotationTypeBody : '{' ( annotationTypeElementDeclarations )? '}' ;
    public final JavaParser.annotationTypeBody_return annotationTypeBody() throws RecognitionException {
        JavaParser.annotationTypeBody_return retval = new JavaParser.annotationTypeBody_return();
        retval.start = input.LT(1);
        int annotationTypeBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal268=null;
        Token char_literal270=null;
        JavaParser.annotationTypeElementDeclarations_return annotationTypeElementDeclarations269 = null;


        Object char_literal268_tree=null;
        Object char_literal270_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // jkit/java/Java.g:571:2: ( '{' ( annotationTypeElementDeclarations )? '}' )
            // jkit/java/Java.g:571:4: '{' ( annotationTypeElementDeclarations )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal268=(Token)match(input,130,FOLLOW_130_in_annotationTypeBody3468); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal268_tree = (Object)adaptor.create(char_literal268);
            adaptor.addChild(root_0, char_literal268_tree);
            }
            // jkit/java/Java.g:571:8: ( annotationTypeElementDeclarations )?
            int alt91=2;
            alt91 = dfa91.predict(input);
            switch (alt91) {
                case 1 :
                    // jkit/java/Java.g:571:9: annotationTypeElementDeclarations
                    {
                    pushFollow(FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody3471);
                    annotationTypeElementDeclarations269=annotationTypeElementDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclarations269.getTree());

                    }
                    break;

            }

            char_literal270=(Token)match(input,131,FOLLOW_131_in_annotationTypeBody3475); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal270_tree = (Object)adaptor.create(char_literal270);
            adaptor.addChild(root_0, char_literal270_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, annotationTypeBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeBody"

    public static class annotationTypeElementDeclarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclarations"
    // jkit/java/Java.g:574:1: annotationTypeElementDeclarations : ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )* ;
    public final JavaParser.annotationTypeElementDeclarations_return annotationTypeElementDeclarations() throws RecognitionException {
        JavaParser.annotationTypeElementDeclarations_return retval = new JavaParser.annotationTypeElementDeclarations_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclarations_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration271 = null;

        JavaParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration272 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // jkit/java/Java.g:575:2: ( ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )* )
            // jkit/java/Java.g:575:4: ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )*
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:575:4: ( annotationTypeElementDeclaration )
            // jkit/java/Java.g:575:5: annotationTypeElementDeclaration
            {
            pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3488);
            annotationTypeElementDeclaration271=annotationTypeElementDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclaration271.getTree());

            }

            // jkit/java/Java.g:575:39: ( annotationTypeElementDeclaration )*
            loop92:
            do {
                int alt92=2;
                alt92 = dfa92.predict(input);
                switch (alt92) {
            	case 1 :
            	    // jkit/java/Java.g:575:40: annotationTypeElementDeclaration
            	    {
            	    pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3492);
            	    annotationTypeElementDeclaration272=annotationTypeElementDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclaration272.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, annotationTypeElementDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclarations"

    public static class annotationTypeElementDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclaration"
    // jkit/java/Java.g:578:1: annotationTypeElementDeclaration : ( modifier )* annotationTypeElementRest ;
    public final JavaParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration() throws RecognitionException {
        JavaParser.annotationTypeElementDeclaration_return retval = new JavaParser.annotationTypeElementDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclaration_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.modifier_return modifier273 = null;

        JavaParser.annotationTypeElementRest_return annotationTypeElementRest274 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // jkit/java/Java.g:579:2: ( ( modifier )* annotationTypeElementRest )
            // jkit/java/Java.g:579:4: ( modifier )* annotationTypeElementRest
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:579:4: ( modifier )*
            loop93:
            do {
                int alt93=2;
                alt93 = dfa93.predict(input);
                switch (alt93) {
            	case 1 :
            	    // jkit/java/Java.g:579:5: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_annotationTypeElementDeclaration3507);
            	    modifier273=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier273.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);

            pushFollow(FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration3511);
            annotationTypeElementRest274=annotationTypeElementRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementRest274.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, annotationTypeElementDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclaration"

    public static class annotationTypeElementRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementRest"
    // jkit/java/Java.g:582:1: annotationTypeElementRest : ( type annotationMethodOrConstantRest ';' | classDeclaration ( ';' )? | interfaceDeclaration ( ';' )? | enumDeclaration ( ';' )? | annotationTypeDeclaration ( ';' )? );
    public final JavaParser.annotationTypeElementRest_return annotationTypeElementRest() throws RecognitionException {
        JavaParser.annotationTypeElementRest_return retval = new JavaParser.annotationTypeElementRest_return();
        retval.start = input.LT(1);
        int annotationTypeElementRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal277=null;
        Token char_literal279=null;
        Token char_literal281=null;
        Token char_literal283=null;
        Token char_literal285=null;
        JavaParser.type_return type275 = null;

        JavaParser.annotationMethodOrConstantRest_return annotationMethodOrConstantRest276 = null;

        JavaParser.classDeclaration_return classDeclaration278 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration280 = null;

        JavaParser.enumDeclaration_return enumDeclaration282 = null;

        JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration284 = null;


        Object char_literal277_tree=null;
        Object char_literal279_tree=null;
        Object char_literal281_tree=null;
        Object char_literal283_tree=null;
        Object char_literal285_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // jkit/java/Java.g:583:2: ( type annotationMethodOrConstantRest ';' | classDeclaration ( ';' )? | interfaceDeclaration ( ';' )? | enumDeclaration ( ';' )? | annotationTypeDeclaration ( ';' )? )
            int alt98=5;
            switch ( input.LA(1) ) {
            case Identifier:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
                {
                alt98=1;
                }
                break;
            case 123:
                {
                alt98=2;
                }
                break;
            case 132:
                {
                alt98=3;
                }
                break;
            case 164:
                {
                int LA98_5 = input.LA(2);

                if ( (LA98_5==132) ) {
                    int LA98_7 = input.LA(3);

                    if ( (synpred139_Java()) ) {
                        alt98=3;
                    }
                    else if ( (true) ) {
                        alt98=5;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 98, 7, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 5, input);

                    throw nvae;
                }
                }
                break;
            case ENUM:
                {
                alt98=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }

            switch (alt98) {
                case 1 :
                    // jkit/java/Java.g:583:4: type annotationMethodOrConstantRest ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_annotationTypeElementRest3523);
                    type275=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type275.getTree());
                    pushFollow(FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest3525);
                    annotationMethodOrConstantRest276=annotationMethodOrConstantRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationMethodOrConstantRest276.getTree());
                    char_literal277=(Token)match(input,118,FOLLOW_118_in_annotationTypeElementRest3527); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal277_tree = (Object)adaptor.create(char_literal277);
                    adaptor.addChild(root_0, char_literal277_tree);
                    }

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:584:6: classDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_annotationTypeElementRest3534);
                    classDeclaration278=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration278.getTree());
                    // jkit/java/Java.g:584:23: ( ';' )?
                    int alt94=2;
                    alt94 = dfa94.predict(input);
                    switch (alt94) {
                        case 1 :
                            // jkit/java/Java.g:0:0: ';'
                            {
                            char_literal279=(Token)match(input,118,FOLLOW_118_in_annotationTypeElementRest3536); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal279_tree = (Object)adaptor.create(char_literal279);
                            adaptor.addChild(root_0, char_literal279_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:585:6: interfaceDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_annotationTypeElementRest3544);
                    interfaceDeclaration280=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration280.getTree());
                    // jkit/java/Java.g:585:27: ( ';' )?
                    int alt95=2;
                    alt95 = dfa95.predict(input);
                    switch (alt95) {
                        case 1 :
                            // jkit/java/Java.g:0:0: ';'
                            {
                            char_literal281=(Token)match(input,118,FOLLOW_118_in_annotationTypeElementRest3546); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal281_tree = (Object)adaptor.create(char_literal281);
                            adaptor.addChild(root_0, char_literal281_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:586:6: enumDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enumDeclaration_in_annotationTypeElementRest3554);
                    enumDeclaration282=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDeclaration282.getTree());
                    // jkit/java/Java.g:586:22: ( ';' )?
                    int alt96=2;
                    alt96 = dfa96.predict(input);
                    switch (alt96) {
                        case 1 :
                            // jkit/java/Java.g:0:0: ';'
                            {
                            char_literal283=(Token)match(input,118,FOLLOW_118_in_annotationTypeElementRest3556); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal283_tree = (Object)adaptor.create(char_literal283);
                            adaptor.addChild(root_0, char_literal283_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:587:6: annotationTypeDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest3564);
                    annotationTypeDeclaration284=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration284.getTree());
                    // jkit/java/Java.g:587:32: ( ';' )?
                    int alt97=2;
                    alt97 = dfa97.predict(input);
                    switch (alt97) {
                        case 1 :
                            // jkit/java/Java.g:0:0: ';'
                            {
                            char_literal285=(Token)match(input,118,FOLLOW_118_in_annotationTypeElementRest3566); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal285_tree = (Object)adaptor.create(char_literal285);
                            adaptor.addChild(root_0, char_literal285_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, annotationTypeElementRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementRest"

    public static class annotationMethodOrConstantRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodOrConstantRest"
    // jkit/java/Java.g:590:1: annotationMethodOrConstantRest : ( annotationMethodRest | annotationConstantRest );
    public final JavaParser.annotationMethodOrConstantRest_return annotationMethodOrConstantRest() throws RecognitionException {
        JavaParser.annotationMethodOrConstantRest_return retval = new JavaParser.annotationMethodOrConstantRest_return();
        retval.start = input.LT(1);
        int annotationMethodOrConstantRest_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotationMethodRest_return annotationMethodRest286 = null;

        JavaParser.annotationConstantRest_return annotationConstantRest287 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // jkit/java/Java.g:591:2: ( annotationMethodRest | annotationConstantRest )
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==Identifier) ) {
                int LA99_1 = input.LA(2);

                if ( (LA99_1==158) ) {
                    alt99=1;
                }
                else if ( (LA99_1==118||LA99_1==127||LA99_1==135||LA99_1==137) ) {
                    alt99=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;
            }
            switch (alt99) {
                case 1 :
                    // jkit/java/Java.g:591:4: annotationMethodRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest3579);
                    annotationMethodRest286=annotationMethodRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationMethodRest286.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:592:6: annotationConstantRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest3586);
                    annotationConstantRest287=annotationConstantRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationConstantRest287.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, annotationMethodOrConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodOrConstantRest"

    public static class annotationMethodRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodRest"
    // jkit/java/Java.g:595:1: annotationMethodRest : Identifier '(' ')' ( defaultValue )? ;
    public final JavaParser.annotationMethodRest_return annotationMethodRest() throws RecognitionException {
        JavaParser.annotationMethodRest_return retval = new JavaParser.annotationMethodRest_return();
        retval.start = input.LT(1);
        int annotationMethodRest_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier288=null;
        Token char_literal289=null;
        Token char_literal290=null;
        JavaParser.defaultValue_return defaultValue291 = null;


        Object Identifier288_tree=null;
        Object char_literal289_tree=null;
        Object char_literal290_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // jkit/java/Java.g:596:3: ( Identifier '(' ')' ( defaultValue )? )
            // jkit/java/Java.g:596:5: Identifier '(' ')' ( defaultValue )?
            {
            root_0 = (Object)adaptor.nil();

            Identifier288=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationMethodRest3599); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier288_tree = (Object)adaptor.create(Identifier288);
            adaptor.addChild(root_0, Identifier288_tree);
            }
            char_literal289=(Token)match(input,158,FOLLOW_158_in_annotationMethodRest3601); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal289_tree = (Object)adaptor.create(char_literal289);
            adaptor.addChild(root_0, char_literal289_tree);
            }
            char_literal290=(Token)match(input,159,FOLLOW_159_in_annotationMethodRest3603); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal290_tree = (Object)adaptor.create(char_literal290);
            adaptor.addChild(root_0, char_literal290_tree);
            }
            // jkit/java/Java.g:596:24: ( defaultValue )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==165) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // jkit/java/Java.g:596:25: defaultValue
                    {
                    pushFollow(FOLLOW_defaultValue_in_annotationMethodRest3606);
                    defaultValue291=defaultValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defaultValue291.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, annotationMethodRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodRest"

    public static class annotationConstantRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationConstantRest"
    // jkit/java/Java.g:599:1: annotationConstantRest : variableDeclarators ;
    public final JavaParser.annotationConstantRest_return annotationConstantRest() throws RecognitionException {
        JavaParser.annotationConstantRest_return retval = new JavaParser.annotationConstantRest_return();
        retval.start = input.LT(1);
        int annotationConstantRest_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.variableDeclarators_return variableDeclarators292 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // jkit/java/Java.g:600:3: ( variableDeclarators )
            // jkit/java/Java.g:600:5: variableDeclarators
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclarators_in_annotationConstantRest3623);
            variableDeclarators292=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarators292.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, annotationConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationConstantRest"

    public static class defaultValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultValue"
    // jkit/java/Java.g:603:1: defaultValue : 'default' elementValue ;
    public final JavaParser.defaultValue_return defaultValue() throws RecognitionException {
        JavaParser.defaultValue_return retval = new JavaParser.defaultValue_return();
        retval.start = input.LT(1);
        int defaultValue_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal293=null;
        JavaParser.elementValue_return elementValue294 = null;


        Object string_literal293_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // jkit/java/Java.g:604:3: ( 'default' elementValue )
            // jkit/java/Java.g:604:5: 'default' elementValue
            {
            root_0 = (Object)adaptor.nil();

            string_literal293=(Token)match(input,165,FOLLOW_165_in_defaultValue3638); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal293_tree = (Object)adaptor.create(string_literal293);
            adaptor.addChild(root_0, string_literal293_tree);
            }
            pushFollow(FOLLOW_elementValue_in_defaultValue3640);
            elementValue294=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue294.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, defaultValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "defaultValue"

    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // jkit/java/Java.g:609:1: block : '{' ( blockStatement )* '}' -> ^( BLOCK ( blockStatement )* ) ;
    public final JavaParser.block_return block() throws RecognitionException {
        JavaParser.block_return retval = new JavaParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal295=null;
        Token char_literal297=null;
        JavaParser.blockStatement_return blockStatement296 = null;


        Object char_literal295_tree=null;
        Object char_literal297_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // jkit/java/Java.g:610:2: ( '{' ( blockStatement )* '}' -> ^( BLOCK ( blockStatement )* ) )
            // jkit/java/Java.g:610:4: '{' ( blockStatement )* '}'
            {
            char_literal295=(Token)match(input,130,FOLLOW_130_in_block3654); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal295);

            // jkit/java/Java.g:610:8: ( blockStatement )*
            loop101:
            do {
                int alt101=2;
                alt101 = dfa101.predict(input);
                switch (alt101) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block3656);
            	    blockStatement296=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement296.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);

            char_literal297=(Token)match(input,131,FOLLOW_131_in_block3659); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(char_literal297);



            // AST REWRITE
            // elements: blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 610:28: -> ^( BLOCK ( blockStatement )* )
            {
                // jkit/java/Java.g:610:31: ^( BLOCK ( blockStatement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, "BLOCK"), root_1);

                // jkit/java/Java.g:610:39: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // jkit/java/Java.g:613:1: blockStatement : ( localVariableDeclaration | classOrInterfaceDeclaration | statement );
    public final JavaParser.blockStatement_return blockStatement() throws RecognitionException {
        JavaParser.blockStatement_return retval = new JavaParser.blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.localVariableDeclaration_return localVariableDeclaration298 = null;

        JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration299 = null;

        JavaParser.statement_return statement300 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // jkit/java/Java.g:614:2: ( localVariableDeclaration | classOrInterfaceDeclaration | statement )
            int alt102=3;
            alt102 = dfa102.predict(input);
            switch (alt102) {
                case 1 :
                    // jkit/java/Java.g:614:4: localVariableDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_blockStatement3680);
                    localVariableDeclaration298=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration298.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:615:4: classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_blockStatement3685);
                    classOrInterfaceDeclaration299=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceDeclaration299.getTree());

                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:616:7: statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_blockStatement3693);
                    statement300=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement300.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclaration"
    // jkit/java/Java.g:619:1: localVariableDeclaration : ( variableModifier )* type variableDeclarators ';' -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) ;
    public final JavaParser.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        JavaParser.localVariableDeclaration_return retval = new JavaParser.localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal304=null;
        JavaParser.variableModifier_return variableModifier301 = null;

        JavaParser.type_return type302 = null;

        JavaParser.variableDeclarators_return variableDeclarators303 = null;


        Object char_literal304_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // jkit/java/Java.g:620:2: ( ( variableModifier )* type variableDeclarators ';' -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) )
            // jkit/java/Java.g:620:4: ( variableModifier )* type variableDeclarators ';'
            {
            // jkit/java/Java.g:620:4: ( variableModifier )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==142||LA103_0==164) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_localVariableDeclaration3705);
            	    variableModifier301=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier301.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_localVariableDeclaration3708);
            type302=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type302.getTree());
            pushFollow(FOLLOW_variableDeclarators_in_localVariableDeclaration3710);
            variableDeclarators303=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarators.add(variableDeclarators303.getTree());
            char_literal304=(Token)match(input,118,FOLLOW_118_in_localVariableDeclaration3712); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal304);



            // AST REWRITE
            // elements: type, variableModifier, variableDeclarators
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 620:51: -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
            {
                // jkit/java/Java.g:620:54: ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARDEF, "VARDEF"), root_1);

                // jkit/java/Java.g:620:63: ^( MODIFIERS ( variableModifier )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                // jkit/java/Java.g:620:75: ( variableModifier )*
                while ( stream_variableModifier.hasNext() ) {
                    adaptor.addChild(root_2, stream_variableModifier.nextTree());

                }
                stream_variableModifier.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_variableDeclarators.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // jkit/java/Java.g:623:1: statement : ( block | lc= 'assert' expression ( ':' expression )? ';' -> ^( ASSERT[$lc] expression ( expression )? ) | lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> ^( IF[$lc] parExpression statement ( statement )? ) | lc= 'for' '(' forControl ')' statement -> ^( FOR[$lc] forControl statement ) | lc= 'while' parExpression statement -> ^( WHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'do' statement 'while' parExpression ';' -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) ) | lc= 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups ) | lc= 'synchronized' parExpression block -> ^( SYNCHRONIZED[$lc] parExpression block ) | lc= 'return' ( expression )? ';' -> ^( RETURN[$lc] ( expression )? ) | lc= 'throw' expression ';' -> ^( THROW[$lc] expression ) | lc= 'break' ( Identifier )? ';' -> ^( BREAK[$lc] ( Identifier )? ) | lc= 'continue' ( Identifier )? ';' -> ^( CONTINUE[$lc] ( Identifier )? ) | ';' -> ^( BLOCK ) | statementExpression ';' -> statementExpression | lc= Identifier ':' statement -> ^( LABEL[$lc] Identifier statement ) );
    public final JavaParser.statement_return statement() throws RecognitionException {
        JavaParser.statement_return retval = new JavaParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token fc=null;
        Token char_literal307=null;
        Token char_literal309=null;
        Token string_literal312=null;
        Token char_literal314=null;
        Token char_literal316=null;
        Token string_literal321=null;
        Token char_literal323=null;
        Token char_literal330=null;
        Token char_literal332=null;
        Token char_literal336=null;
        Token char_literal338=null;
        Token Identifier339=null;
        Token char_literal340=null;
        Token Identifier341=null;
        Token char_literal342=null;
        Token char_literal343=null;
        Token char_literal345=null;
        Token char_literal346=null;
        JavaParser.block_return block305 = null;

        JavaParser.expression_return expression306 = null;

        JavaParser.expression_return expression308 = null;

        JavaParser.parExpression_return parExpression310 = null;

        JavaParser.statement_return statement311 = null;

        JavaParser.statement_return statement313 = null;

        JavaParser.forControl_return forControl315 = null;

        JavaParser.statement_return statement317 = null;

        JavaParser.parExpression_return parExpression318 = null;

        JavaParser.statement_return statement319 = null;

        JavaParser.statement_return statement320 = null;

        JavaParser.parExpression_return parExpression322 = null;

        JavaParser.block_return block324 = null;

        JavaParser.catches_return catches325 = null;

        JavaParser.block_return block326 = null;

        JavaParser.catches_return catches327 = null;

        JavaParser.block_return block328 = null;

        JavaParser.parExpression_return parExpression329 = null;

        JavaParser.switchBlockStatementGroups_return switchBlockStatementGroups331 = null;

        JavaParser.parExpression_return parExpression333 = null;

        JavaParser.block_return block334 = null;

        JavaParser.expression_return expression335 = null;

        JavaParser.expression_return expression337 = null;

        JavaParser.statementExpression_return statementExpression344 = null;

        JavaParser.statement_return statement347 = null;


        Object lc_tree=null;
        Object fc_tree=null;
        Object char_literal307_tree=null;
        Object char_literal309_tree=null;
        Object string_literal312_tree=null;
        Object char_literal314_tree=null;
        Object char_literal316_tree=null;
        Object string_literal321_tree=null;
        Object char_literal323_tree=null;
        Object char_literal330_tree=null;
        Object char_literal332_tree=null;
        Object char_literal336_tree=null;
        Object char_literal338_tree=null;
        Object Identifier339_tree=null;
        Object char_literal340_tree=null;
        Object Identifier341_tree=null;
        Object char_literal342_tree=null;
        Object char_literal343_tree=null;
        Object char_literal345_tree=null;
        Object char_literal346_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_parExpression=new RewriteRuleSubtreeStream(adaptor,"rule parExpression");
        RewriteRuleSubtreeStream stream_statementExpression=new RewriteRuleSubtreeStream(adaptor,"rule statementExpression");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
        RewriteRuleSubtreeStream stream_switchBlockStatementGroups=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockStatementGroups");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_forControl=new RewriteRuleSubtreeStream(adaptor,"rule forControl");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // jkit/java/Java.g:624:2: ( block | lc= 'assert' expression ( ':' expression )? ';' -> ^( ASSERT[$lc] expression ( expression )? ) | lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> ^( IF[$lc] parExpression statement ( statement )? ) | lc= 'for' '(' forControl ')' statement -> ^( FOR[$lc] forControl statement ) | lc= 'while' parExpression statement -> ^( WHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'do' statement 'while' parExpression ';' -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) ) | lc= 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups ) | lc= 'synchronized' parExpression block -> ^( SYNCHRONIZED[$lc] parExpression block ) | lc= 'return' ( expression )? ';' -> ^( RETURN[$lc] ( expression )? ) | lc= 'throw' expression ';' -> ^( THROW[$lc] expression ) | lc= 'break' ( Identifier )? ';' -> ^( BREAK[$lc] ( Identifier )? ) | lc= 'continue' ( Identifier )? ';' -> ^( CONTINUE[$lc] ( Identifier )? ) | ';' -> ^( BLOCK ) | statementExpression ';' -> statementExpression | lc= Identifier ':' statement -> ^( LABEL[$lc] Identifier statement ) )
            int alt110=16;
            alt110 = dfa110.predict(input);
            switch (alt110) {
                case 1 :
                    // jkit/java/Java.g:624:4: block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_block_in_statement3741);
                    block305=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block305.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:625:7: lc= 'assert' expression ( ':' expression )? ';'
                    {
                    lc=(Token)match(input,166,FOLLOW_166_in_statement3751); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_166.add(lc);

                    pushFollow(FOLLOW_expression_in_statement3753);
                    expression306=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression306.getTree());
                    // jkit/java/Java.g:625:30: ( ':' expression )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==167) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // jkit/java/Java.g:625:31: ':' expression
                            {
                            char_literal307=(Token)match(input,167,FOLLOW_167_in_statement3756); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_167.add(char_literal307);

                            pushFollow(FOLLOW_expression_in_statement3758);
                            expression308=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression308.getTree());

                            }
                            break;

                    }

                    char_literal309=(Token)match(input,118,FOLLOW_118_in_statement3762); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal309);



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 625:52: -> ^( ASSERT[$lc] expression ( expression )? )
                    {
                        // jkit/java/Java.g:625:55: ^( ASSERT[$lc] expression ( expression )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSERT, lc), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        // jkit/java/Java.g:625:80: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:626:7: lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )?
                    {
                    lc=(Token)match(input,168,FOLLOW_168_in_statement3784); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_168.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement3786);
                    parExpression310=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression310.getTree());
                    pushFollow(FOLLOW_statement_in_statement3788);
                    statement311=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement311.getTree());
                    // jkit/java/Java.g:626:39: ( options {k=1; } : 'else' statement )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==169) ) {
                        int LA105_2 = input.LA(2);

                        if ( (synpred152_Java()) ) {
                            alt105=1;
                        }
                    }
                    switch (alt105) {
                        case 1 :
                            // jkit/java/Java.g:626:55: 'else' statement
                            {
                            string_literal312=(Token)match(input,169,FOLLOW_169_in_statement3798); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_169.add(string_literal312);

                            pushFollow(FOLLOW_statement_in_statement3800);
                            statement313=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement313.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: statement, parExpression, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 626:74: -> ^( IF[$lc] parExpression statement ( statement )? )
                    {
                        // jkit/java/Java.g:626:77: ^( IF[$lc] parExpression statement ( statement )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IF, lc), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());
                        // jkit/java/Java.g:626:111: ( statement )?
                        if ( stream_statement.hasNext() ) {
                            adaptor.addChild(root_1, stream_statement.nextTree());

                        }
                        stream_statement.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:627:7: lc= 'for' '(' forControl ')' statement
                    {
                    lc=(Token)match(input,170,FOLLOW_170_in_statement3826); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(lc);

                    char_literal314=(Token)match(input,158,FOLLOW_158_in_statement3828); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_158.add(char_literal314);

                    pushFollow(FOLLOW_forControl_in_statement3830);
                    forControl315=forControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_forControl.add(forControl315.getTree());
                    char_literal316=(Token)match(input,159,FOLLOW_159_in_statement3832); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_159.add(char_literal316);

                    pushFollow(FOLLOW_statement_in_statement3834);
                    statement317=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement317.getTree());


                    // AST REWRITE
                    // elements: statement, forControl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 627:45: -> ^( FOR[$lc] forControl statement )
                    {
                        // jkit/java/Java.g:627:48: ^( FOR[$lc] forControl statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FOR, lc), root_1);

                        adaptor.addChild(root_1, stream_forControl.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:628:7: lc= 'while' parExpression statement
                    {
                    lc=(Token)match(input,171,FOLLOW_171_in_statement3855); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement3857);
                    parExpression318=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression318.getTree());
                    pushFollow(FOLLOW_statement_in_statement3859);
                    statement319=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement319.getTree());


                    // AST REWRITE
                    // elements: parExpression, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 628:42: -> ^( WHILE[$lc] ^( TEST parExpression ) statement )
                    {
                        // jkit/java/Java.g:628:45: ^( WHILE[$lc] ^( TEST parExpression ) statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(WHILE, lc), root_1);

                        // jkit/java/Java.g:628:58: ^( TEST parExpression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TEST, "TEST"), root_2);

                        adaptor.addChild(root_2, stream_parExpression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:629:7: lc= 'do' statement 'while' parExpression ';'
                    {
                    lc=(Token)match(input,172,FOLLOW_172_in_statement3884); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_172.add(lc);

                    pushFollow(FOLLOW_statement_in_statement3886);
                    statement320=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement320.getTree());
                    string_literal321=(Token)match(input,171,FOLLOW_171_in_statement3888); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(string_literal321);

                    pushFollow(FOLLOW_parExpression_in_statement3890);
                    parExpression322=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression322.getTree());
                    char_literal323=(Token)match(input,118,FOLLOW_118_in_statement3892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal323);



                    // AST REWRITE
                    // elements: statement, parExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 629:51: -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement )
                    {
                        // jkit/java/Java.g:629:54: ^( DOWHILE[$lc] ^( TEST parExpression ) statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DOWHILE, lc), root_1);

                        // jkit/java/Java.g:629:69: ^( TEST parExpression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TEST, "TEST"), root_2);

                        adaptor.addChild(root_2, stream_parExpression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // jkit/java/Java.g:630:7: lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) )
                    {
                    lc=(Token)match(input,173,FOLLOW_173_in_statement3917); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_173.add(lc);

                    pushFollow(FOLLOW_block_in_statement3919);
                    block324=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block324.getTree());
                    // jkit/java/Java.g:631:7: ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) )
                    int alt106=3;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==180) ) {
                        int LA106_1 = input.LA(2);

                        if ( (LA106_1==158) ) {
                            int LA106_3 = input.LA(3);

                            if ( (synpred157_Java()) ) {
                                alt106=1;
                            }
                            else if ( (synpred158_Java()) ) {
                                alt106=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 106, 3, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 106, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA106_0==174) ) {
                        alt106=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 106, 0, input);

                        throw nvae;
                    }
                    switch (alt106) {
                        case 1 :
                            // jkit/java/Java.g:631:9: catches fc= 'finally' block
                            {
                            pushFollow(FOLLOW_catches_in_statement3929);
                            catches325=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_catches.add(catches325.getTree());
                            fc=(Token)match(input,174,FOLLOW_174_in_statement3933); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_174.add(fc);

                            pushFollow(FOLLOW_block_in_statement3935);
                            block326=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_block.add(block326.getTree());


                            // AST REWRITE
                            // elements: block, catches, block
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 631:36: -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) )
                            {
                                // jkit/java/Java.g:631:39: ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TRY, lc), root_1);

                                adaptor.addChild(root_1, stream_block.nextTree());
                                adaptor.addChild(root_1, stream_catches.nextTree());
                                // jkit/java/Java.g:631:64: ^( FINALLY[$fc] block )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(FINALLY, fc), root_2);

                                adaptor.addChild(root_2, stream_block.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:632:9: catches
                            {
                            pushFollow(FOLLOW_catches_in_statement3963);
                            catches327=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_catches.add(catches327.getTree());


                            // AST REWRITE
                            // elements: catches, block
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 632:17: -> ^( TRY[$lc] block catches )
                            {
                                // jkit/java/Java.g:632:20: ^( TRY[$lc] block catches )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TRY, lc), root_1);

                                adaptor.addChild(root_1, stream_block.nextTree());
                                adaptor.addChild(root_1, stream_catches.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:633:9: fc= 'finally' block
                            {
                            fc=(Token)match(input,174,FOLLOW_174_in_statement3986); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_174.add(fc);

                            pushFollow(FOLLOW_block_in_statement3988);
                            block328=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_block.add(block328.getTree());


                            // AST REWRITE
                            // elements: block, block
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 633:28: -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) )
                            {
                                // jkit/java/Java.g:633:31: ^( TRY[$lc] block ^( FINALLY[$fc] block ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TRY, lc), root_1);

                                adaptor.addChild(root_1, stream_block.nextTree());
                                // jkit/java/Java.g:633:48: ^( FINALLY[$fc] block )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(FINALLY, fc), root_2);

                                adaptor.addChild(root_2, stream_block.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 8 :
                    // jkit/java/Java.g:635:7: lc= 'switch' parExpression '{' switchBlockStatementGroups '}'
                    {
                    lc=(Token)match(input,175,FOLLOW_175_in_statement4022); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_175.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement4024);
                    parExpression329=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression329.getTree());
                    char_literal330=(Token)match(input,130,FOLLOW_130_in_statement4026); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_130.add(char_literal330);

                    pushFollow(FOLLOW_switchBlockStatementGroups_in_statement4028);
                    switchBlockStatementGroups331=switchBlockStatementGroups();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchBlockStatementGroups.add(switchBlockStatementGroups331.getTree());
                    char_literal332=(Token)match(input,131,FOLLOW_131_in_statement4030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_131.add(char_literal332);



                    // AST REWRITE
                    // elements: switchBlockStatementGroups, parExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 635:68: -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups )
                    {
                        // jkit/java/Java.g:635:71: ^( SWITCH[$lc] parExpression switchBlockStatementGroups )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SWITCH, lc), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_switchBlockStatementGroups.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // jkit/java/Java.g:636:7: lc= 'synchronized' parExpression block
                    {
                    lc=(Token)match(input,144,FOLLOW_144_in_statement4051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_144.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement4053);
                    parExpression333=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression333.getTree());
                    pushFollow(FOLLOW_block_in_statement4055);
                    block334=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block334.getTree());


                    // AST REWRITE
                    // elements: block, parExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 636:45: -> ^( SYNCHRONIZED[$lc] parExpression block )
                    {
                        // jkit/java/Java.g:636:48: ^( SYNCHRONIZED[$lc] parExpression block )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SYNCHRONIZED, lc), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // jkit/java/Java.g:637:7: lc= 'return' ( expression )? ';'
                    {
                    lc=(Token)match(input,176,FOLLOW_176_in_statement4076); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_176.add(lc);

                    // jkit/java/Java.g:637:19: ( expression )?
                    int alt107=2;
                    alt107 = dfa107.predict(input);
                    switch (alt107) {
                        case 1 :
                            // jkit/java/Java.g:0:0: expression
                            {
                            pushFollow(FOLLOW_expression_in_statement4078);
                            expression335=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression335.getTree());

                            }
                            break;

                    }

                    char_literal336=(Token)match(input,118,FOLLOW_118_in_statement4081); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal336);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 637:35: -> ^( RETURN[$lc] ( expression )? )
                    {
                        // jkit/java/Java.g:637:38: ^( RETURN[$lc] ( expression )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RETURN, lc), root_1);

                        // jkit/java/Java.g:637:52: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // jkit/java/Java.g:638:7: lc= 'throw' expression ';'
                    {
                    lc=(Token)match(input,177,FOLLOW_177_in_statement4101); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_177.add(lc);

                    pushFollow(FOLLOW_expression_in_statement4103);
                    expression337=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression337.getTree());
                    char_literal338=(Token)match(input,118,FOLLOW_118_in_statement4105); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal338);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 638:33: -> ^( THROW[$lc] expression )
                    {
                        // jkit/java/Java.g:638:36: ^( THROW[$lc] expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROW, lc), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // jkit/java/Java.g:639:7: lc= 'break' ( Identifier )? ';'
                    {
                    lc=(Token)match(input,178,FOLLOW_178_in_statement4124); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(lc);

                    // jkit/java/Java.g:639:18: ( Identifier )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==Identifier) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // jkit/java/Java.g:0:0: Identifier
                            {
                            Identifier339=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement4126); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier339);


                            }
                            break;

                    }

                    char_literal340=(Token)match(input,118,FOLLOW_118_in_statement4129); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal340);



                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 639:34: -> ^( BREAK[$lc] ( Identifier )? )
                    {
                        // jkit/java/Java.g:639:37: ^( BREAK[$lc] ( Identifier )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BREAK, lc), root_1);

                        // jkit/java/Java.g:639:50: ( Identifier )?
                        if ( stream_Identifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_Identifier.nextNode());

                        }
                        stream_Identifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // jkit/java/Java.g:640:7: lc= 'continue' ( Identifier )? ';'
                    {
                    lc=(Token)match(input,179,FOLLOW_179_in_statement4149); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_179.add(lc);

                    // jkit/java/Java.g:640:21: ( Identifier )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==Identifier) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // jkit/java/Java.g:0:0: Identifier
                            {
                            Identifier341=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement4151); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier341);


                            }
                            break;

                    }

                    char_literal342=(Token)match(input,118,FOLLOW_118_in_statement4154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal342);



                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 640:37: -> ^( CONTINUE[$lc] ( Identifier )? )
                    {
                        // jkit/java/Java.g:640:40: ^( CONTINUE[$lc] ( Identifier )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CONTINUE, lc), root_1);

                        // jkit/java/Java.g:640:56: ( Identifier )?
                        if ( stream_Identifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_Identifier.nextNode());

                        }
                        stream_Identifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // jkit/java/Java.g:641:7: ';'
                    {
                    char_literal343=(Token)match(input,118,FOLLOW_118_in_statement4172); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal343);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 641:11: -> ^( BLOCK )
                    {
                        // jkit/java/Java.g:641:14: ^( BLOCK )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, "BLOCK"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    // jkit/java/Java.g:642:7: statementExpression ';'
                    {
                    pushFollow(FOLLOW_statementExpression_in_statement4187);
                    statementExpression344=statementExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statementExpression.add(statementExpression344.getTree());
                    char_literal345=(Token)match(input,118,FOLLOW_118_in_statement4189); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal345);



                    // AST REWRITE
                    // elements: statementExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 642:31: -> statementExpression
                    {
                        adaptor.addChild(root_0, stream_statementExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 16 :
                    // jkit/java/Java.g:643:7: lc= Identifier ':' statement
                    {
                    lc=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement4203); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(lc);

                    char_literal346=(Token)match(input,167,FOLLOW_167_in_statement4205); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(char_literal346);

                    pushFollow(FOLLOW_statement_in_statement4207);
                    statement347=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement347.getTree());


                    // AST REWRITE
                    // elements: Identifier, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 643:35: -> ^( LABEL[$lc] Identifier statement )
                    {
                        // jkit/java/Java.g:643:38: ^( LABEL[$lc] Identifier statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABEL, lc), root_1);

                        adaptor.addChild(root_1, stream_Identifier.nextNode());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class catches_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catches"
    // jkit/java/Java.g:646:1: catches : catchClause ( catchClause )* ;
    public final JavaParser.catches_return catches() throws RecognitionException {
        JavaParser.catches_return retval = new JavaParser.catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.catchClause_return catchClause348 = null;

        JavaParser.catchClause_return catchClause349 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // jkit/java/Java.g:647:2: ( catchClause ( catchClause )* )
            // jkit/java/Java.g:647:4: catchClause ( catchClause )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_catchClause_in_catches4229);
            catchClause348=catchClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause348.getTree());
            // jkit/java/Java.g:647:16: ( catchClause )*
            loop111:
            do {
                int alt111=2;
                alt111 = dfa111.predict(input);
                switch (alt111) {
            	case 1 :
            	    // jkit/java/Java.g:647:17: catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches4232);
            	    catchClause349=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause349.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // jkit/java/Java.g:650:1: catchClause : lc= 'catch' '(' formalParameter ')' block -> ^( CATCH[$lc] ^( PARAMETER formalParameter ) block ) ;
    public final JavaParser.catchClause_return catchClause() throws RecognitionException {
        JavaParser.catchClause_return retval = new JavaParser.catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token char_literal350=null;
        Token char_literal352=null;
        JavaParser.formalParameter_return formalParameter351 = null;

        JavaParser.block_return block353 = null;


        Object lc_tree=null;
        Object char_literal350_tree=null;
        Object char_literal352_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // jkit/java/Java.g:651:2: (lc= 'catch' '(' formalParameter ')' block -> ^( CATCH[$lc] ^( PARAMETER formalParameter ) block ) )
            // jkit/java/Java.g:651:4: lc= 'catch' '(' formalParameter ')' block
            {
            lc=(Token)match(input,180,FOLLOW_180_in_catchClause4248); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_180.add(lc);

            char_literal350=(Token)match(input,158,FOLLOW_158_in_catchClause4250); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(char_literal350);

            pushFollow(FOLLOW_formalParameter_in_catchClause4252);
            formalParameter351=formalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter351.getTree());
            char_literal352=(Token)match(input,159,FOLLOW_159_in_catchClause4254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(char_literal352);

            pushFollow(FOLLOW_block_in_catchClause4256);
            block353=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block353.getTree());


            // AST REWRITE
            // elements: block, formalParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 651:45: -> ^( CATCH[$lc] ^( PARAMETER formalParameter ) block )
            {
                // jkit/java/Java.g:651:48: ^( CATCH[$lc] ^( PARAMETER formalParameter ) block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CATCH, lc), root_1);

                // jkit/java/Java.g:651:61: ^( PARAMETER formalParameter )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETER, "PARAMETER"), root_2);

                adaptor.addChild(root_2, stream_formalParameter.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class formalParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameter"
    // jkit/java/Java.g:654:1: formalParameter : ( variableModifier )* type variableDeclaratorId ;
    public final JavaParser.formalParameter_return formalParameter() throws RecognitionException {
        JavaParser.formalParameter_return retval = new JavaParser.formalParameter_return();
        retval.start = input.LT(1);
        int formalParameter_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.variableModifier_return variableModifier354 = null;

        JavaParser.type_return type355 = null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId356 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // jkit/java/Java.g:655:2: ( ( variableModifier )* type variableDeclaratorId )
            // jkit/java/Java.g:655:4: ( variableModifier )* type variableDeclaratorId
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:655:4: ( variableModifier )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==142||LA112_0==164) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameter4282);
            	    variableModifier354=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifier354.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameter4285);
            type355=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type355.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameter4287);
            variableDeclaratorId356=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclaratorId356.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, formalParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameter"

    public static class switchBlockStatementGroups_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroups"
    // jkit/java/Java.g:658:1: switchBlockStatementGroups : ( switchBlockStatementGroup )* ;
    public final JavaParser.switchBlockStatementGroups_return switchBlockStatementGroups() throws RecognitionException {
        JavaParser.switchBlockStatementGroups_return retval = new JavaParser.switchBlockStatementGroups_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroups_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.switchBlockStatementGroup_return switchBlockStatementGroup357 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // jkit/java/Java.g:659:2: ( ( switchBlockStatementGroup )* )
            // jkit/java/Java.g:659:4: ( switchBlockStatementGroup )*
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:659:4: ( switchBlockStatementGroup )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==165||LA113_0==181) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // jkit/java/Java.g:659:5: switchBlockStatementGroup
            	    {
            	    pushFollow(FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups4301);
            	    switchBlockStatementGroup357=switchBlockStatementGroup();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchBlockStatementGroup357.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, switchBlockStatementGroups_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroups"

    public static class switchBlockStatementGroup_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroup"
    // jkit/java/Java.g:662:1: switchBlockStatementGroup : switchLabel ( blockStatement )* -> ^( switchLabel ^( BLOCK ( blockStatement )* ) ) ;
    public final JavaParser.switchBlockStatementGroup_return switchBlockStatementGroup() throws RecognitionException {
        JavaParser.switchBlockStatementGroup_return retval = new JavaParser.switchBlockStatementGroup_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroup_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.switchLabel_return switchLabel358 = null;

        JavaParser.blockStatement_return blockStatement359 = null;


        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        RewriteRuleSubtreeStream stream_switchLabel=new RewriteRuleSubtreeStream(adaptor,"rule switchLabel");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // jkit/java/Java.g:663:2: ( switchLabel ( blockStatement )* -> ^( switchLabel ^( BLOCK ( blockStatement )* ) ) )
            // jkit/java/Java.g:663:4: switchLabel ( blockStatement )*
            {
            pushFollow(FOLLOW_switchLabel_in_switchBlockStatementGroup4315);
            switchLabel358=switchLabel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_switchLabel.add(switchLabel358.getTree());
            // jkit/java/Java.g:663:16: ( blockStatement )*
            loop114:
            do {
                int alt114=2;
                alt114 = dfa114.predict(input);
                switch (alt114) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchBlockStatementGroup4317);
            	    blockStatement359=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement359.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);



            // AST REWRITE
            // elements: blockStatement, switchLabel
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 663:32: -> ^( switchLabel ^( BLOCK ( blockStatement )* ) )
            {
                // jkit/java/Java.g:663:35: ^( switchLabel ^( BLOCK ( blockStatement )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_switchLabel.nextNode(), root_1);

                // jkit/java/Java.g:663:49: ^( BLOCK ( blockStatement )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, "BLOCK"), root_2);

                // jkit/java/Java.g:663:57: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_2, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, switchBlockStatementGroup_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroup"

    public static class switchLabel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchLabel"
    // jkit/java/Java.g:666:1: switchLabel : (lc= 'case' constantExpression ':' -> ^( CASE[$lc] constantExpression ) | lc= 'case' enumConstantName ':' -> ^( CASE[$lc] enumConstantName ) | lc= 'default' ':' -> ^( DEFAULT ) );
    public final JavaParser.switchLabel_return switchLabel() throws RecognitionException {
        JavaParser.switchLabel_return retval = new JavaParser.switchLabel_return();
        retval.start = input.LT(1);
        int switchLabel_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token char_literal361=null;
        Token char_literal363=null;
        Token char_literal364=null;
        JavaParser.constantExpression_return constantExpression360 = null;

        JavaParser.enumConstantName_return enumConstantName362 = null;


        Object lc_tree=null;
        Object char_literal361_tree=null;
        Object char_literal363_tree=null;
        Object char_literal364_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleSubtreeStream stream_enumConstantName=new RewriteRuleSubtreeStream(adaptor,"rule enumConstantName");
        RewriteRuleSubtreeStream stream_constantExpression=new RewriteRuleSubtreeStream(adaptor,"rule constantExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // jkit/java/Java.g:667:2: (lc= 'case' constantExpression ':' -> ^( CASE[$lc] constantExpression ) | lc= 'case' enumConstantName ':' -> ^( CASE[$lc] enumConstantName ) | lc= 'default' ':' -> ^( DEFAULT ) )
            int alt115=3;
            alt115 = dfa115.predict(input);
            switch (alt115) {
                case 1 :
                    // jkit/java/Java.g:667:4: lc= 'case' constantExpression ':'
                    {
                    lc=(Token)match(input,181,FOLLOW_181_in_switchLabel4345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_181.add(lc);

                    pushFollow(FOLLOW_constantExpression_in_switchLabel4347);
                    constantExpression360=constantExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constantExpression.add(constantExpression360.getTree());
                    char_literal361=(Token)match(input,167,FOLLOW_167_in_switchLabel4349); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(char_literal361);



                    // AST REWRITE
                    // elements: constantExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 667:37: -> ^( CASE[$lc] constantExpression )
                    {
                        // jkit/java/Java.g:667:40: ^( CASE[$lc] constantExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CASE, lc), root_1);

                        adaptor.addChild(root_1, stream_constantExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:668:4: lc= 'case' enumConstantName ':'
                    {
                    lc=(Token)match(input,181,FOLLOW_181_in_switchLabel4365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_181.add(lc);

                    pushFollow(FOLLOW_enumConstantName_in_switchLabel4367);
                    enumConstantName362=enumConstantName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumConstantName.add(enumConstantName362.getTree());
                    char_literal363=(Token)match(input,167,FOLLOW_167_in_switchLabel4369); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(char_literal363);



                    // AST REWRITE
                    // elements: enumConstantName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 668:35: -> ^( CASE[$lc] enumConstantName )
                    {
                        // jkit/java/Java.g:668:38: ^( CASE[$lc] enumConstantName )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CASE, lc), root_1);

                        adaptor.addChild(root_1, stream_enumConstantName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:669:4: lc= 'default' ':'
                    {
                    lc=(Token)match(input,165,FOLLOW_165_in_switchLabel4385); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_165.add(lc);

                    char_literal364=(Token)match(input,167,FOLLOW_167_in_switchLabel4387); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(char_literal364);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 669:21: -> ^( DEFAULT )
                    {
                        // jkit/java/Java.g:669:24: ^( DEFAULT )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DEFAULT, "DEFAULT"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, switchLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchLabel"

    public static class moreStatementExpressions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moreStatementExpressions"
    // jkit/java/Java.g:672:1: moreStatementExpressions : ( ',' statementExpression )* ;
    public final JavaParser.moreStatementExpressions_return moreStatementExpressions() throws RecognitionException {
        JavaParser.moreStatementExpressions_return retval = new JavaParser.moreStatementExpressions_return();
        retval.start = input.LT(1);
        int moreStatementExpressions_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal365=null;
        JavaParser.statementExpression_return statementExpression366 = null;


        Object char_literal365_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // jkit/java/Java.g:673:2: ( ( ',' statementExpression )* )
            // jkit/java/Java.g:673:4: ( ',' statementExpression )*
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:673:4: ( ',' statementExpression )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==127) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // jkit/java/Java.g:673:5: ',' statementExpression
            	    {
            	    char_literal365=(Token)match(input,127,FOLLOW_127_in_moreStatementExpressions4406); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal365_tree = (Object)adaptor.create(char_literal365);
            	    adaptor.addChild(root_0, char_literal365_tree);
            	    }
            	    pushFollow(FOLLOW_statementExpression_in_moreStatementExpressions4408);
            	    statementExpression366=statementExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statementExpression366.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, moreStatementExpressions_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moreStatementExpressions"

    public static class forControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forControl"
    // jkit/java/Java.g:676:1: forControl options {k=3; } : ( forVarControl -> ^( FOREACH forVarControl ) | ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )? -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? ) );
    public final JavaParser.forControl_return forControl() throws RecognitionException {
        JavaParser.forControl_return retval = new JavaParser.forControl_return();
        retval.start = input.LT(1);
        int forControl_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal369=null;
        Token char_literal370=null;
        JavaParser.expression_return fc = null;

        JavaParser.forUpdate_return fu = null;

        JavaParser.forVarControl_return forVarControl367 = null;

        JavaParser.forInit_return forInit368 = null;


        Object char_literal369_tree=null;
        Object char_literal370_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleSubtreeStream stream_forUpdate=new RewriteRuleSubtreeStream(adaptor,"rule forUpdate");
        RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
        RewriteRuleSubtreeStream stream_forVarControl=new RewriteRuleSubtreeStream(adaptor,"rule forVarControl");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // jkit/java/Java.g:678:2: ( forVarControl -> ^( FOREACH forVarControl ) | ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )? -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? ) )
            int alt120=2;
            alt120 = dfa120.predict(input);
            switch (alt120) {
                case 1 :
                    // jkit/java/Java.g:678:4: forVarControl
                    {
                    pushFollow(FOLLOW_forVarControl_in_forControl4429);
                    forVarControl367=forVarControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_forVarControl.add(forVarControl367.getTree());


                    // AST REWRITE
                    // elements: forVarControl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 678:18: -> ^( FOREACH forVarControl )
                    {
                        // jkit/java/Java.g:678:21: ^( FOREACH forVarControl )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FOREACH, "FOREACH"), root_1);

                        adaptor.addChild(root_1, stream_forVarControl.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:679:4: ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )?
                    {
                    // jkit/java/Java.g:679:4: ( forInit )?
                    int alt117=2;
                    alt117 = dfa117.predict(input);
                    switch (alt117) {
                        case 1 :
                            // jkit/java/Java.g:0:0: forInit
                            {
                            pushFollow(FOLLOW_forInit_in_forControl4442);
                            forInit368=forInit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forInit.add(forInit368.getTree());

                            }
                            break;

                    }

                    char_literal369=(Token)match(input,118,FOLLOW_118_in_forControl4445); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal369);

                    // jkit/java/Java.g:679:19: (fc= expression )?
                    int alt118=2;
                    alt118 = dfa118.predict(input);
                    switch (alt118) {
                        case 1 :
                            // jkit/java/Java.g:0:0: fc= expression
                            {
                            pushFollow(FOLLOW_expression_in_forControl4449);
                            fc=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(fc.getTree());

                            }
                            break;

                    }

                    char_literal370=(Token)match(input,118,FOLLOW_118_in_forControl4452); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal370);

                    // jkit/java/Java.g:679:38: (fu= forUpdate )?
                    int alt119=2;
                    alt119 = dfa119.predict(input);
                    switch (alt119) {
                        case 1 :
                            // jkit/java/Java.g:0:0: fu= forUpdate
                            {
                            pushFollow(FOLLOW_forUpdate_in_forControl4456);
                            fu=forUpdate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forUpdate.add(fu.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: forInit, forUpdate, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 679:50: -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? )
                    {
                        // jkit/java/Java.g:679:53: ^( INIT ( forInit )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INIT, "INIT"), root_1);

                        // jkit/java/Java.g:679:60: ( forInit )?
                        if ( stream_forInit.hasNext() ) {
                            adaptor.addChild(root_1, stream_forInit.nextTree());

                        }
                        stream_forInit.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/Java.g:679:70: ^( TEST ( expression )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TEST, "TEST"), root_1);

                        // jkit/java/Java.g:679:77: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/Java.g:679:90: ^( STEP ( forUpdate )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STEP, "STEP"), root_1);

                        // jkit/java/Java.g:679:97: ( forUpdate )?
                        if ( stream_forUpdate.hasNext() ) {
                            adaptor.addChild(root_1, stream_forUpdate.nextTree());

                        }
                        stream_forUpdate.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, forControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forControl"

    public static class forInit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // jkit/java/Java.g:682:1: forInit : ( ( variableModifier )* type variableDeclarators -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) | expressionList );
    public final JavaParser.forInit_return forInit() throws RecognitionException {
        JavaParser.forInit_return retval = new JavaParser.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.variableModifier_return variableModifier371 = null;

        JavaParser.type_return type372 = null;

        JavaParser.variableDeclarators_return variableDeclarators373 = null;

        JavaParser.expressionList_return expressionList374 = null;


        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // jkit/java/Java.g:683:2: ( ( variableModifier )* type variableDeclarators -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) | expressionList )
            int alt122=2;
            alt122 = dfa122.predict(input);
            switch (alt122) {
                case 1 :
                    // jkit/java/Java.g:683:4: ( variableModifier )* type variableDeclarators
                    {
                    // jkit/java/Java.g:683:4: ( variableModifier )*
                    loop121:
                    do {
                        int alt121=2;
                        int LA121_0 = input.LA(1);

                        if ( (LA121_0==142||LA121_0==164) ) {
                            alt121=1;
                        }


                        switch (alt121) {
                    	case 1 :
                    	    // jkit/java/Java.g:0:0: variableModifier
                    	    {
                    	    pushFollow(FOLLOW_variableModifier_in_forInit4491);
                    	    variableModifier371=variableModifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier371.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop121;
                        }
                    } while (true);

                    pushFollow(FOLLOW_type_in_forInit4494);
                    type372=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type372.getTree());
                    pushFollow(FOLLOW_variableDeclarators_in_forInit4496);
                    variableDeclarators373=variableDeclarators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableDeclarators.add(variableDeclarators373.getTree());


                    // AST REWRITE
                    // elements: type, variableModifier, variableDeclarators
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 683:47: -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
                    {
                        // jkit/java/Java.g:683:50: ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARDEF, "VARDEF"), root_1);

                        // jkit/java/Java.g:683:59: ^( MODIFIERS ( variableModifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/Java.g:683:71: ( variableModifier )*
                        while ( stream_variableModifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_variableModifier.nextTree());

                        }
                        stream_variableModifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_variableDeclarators.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:684:4: expressionList
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expressionList_in_forInit4518);
                    expressionList374=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList374.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class forVarControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forVarControl"
    // jkit/java/Java.g:687:1: forVarControl : ( variableModifier )* type Identifier ':' expression -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier ) expression ;
    public final JavaParser.forVarControl_return forVarControl() throws RecognitionException {
        JavaParser.forVarControl_return retval = new JavaParser.forVarControl_return();
        retval.start = input.LT(1);
        int forVarControl_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier377=null;
        Token char_literal378=null;
        JavaParser.variableModifier_return variableModifier375 = null;

        JavaParser.type_return type376 = null;

        JavaParser.expression_return expression379 = null;


        Object Identifier377_tree=null;
        Object char_literal378_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // jkit/java/Java.g:688:2: ( ( variableModifier )* type Identifier ':' expression -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier ) expression )
            // jkit/java/Java.g:688:4: ( variableModifier )* type Identifier ':' expression
            {
            // jkit/java/Java.g:688:4: ( variableModifier )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==142||LA123_0==164) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_forVarControl4530);
            	    variableModifier375=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier375.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_forVarControl4533);
            type376=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type376.getTree());
            Identifier377=(Token)match(input,Identifier,FOLLOW_Identifier_in_forVarControl4535); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier377);

            char_literal378=(Token)match(input,167,FOLLOW_167_in_forVarControl4537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(char_literal378);

            pushFollow(FOLLOW_expression_in_forVarControl4539);
            expression379=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression379.getTree());


            // AST REWRITE
            // elements: type, variableModifier, expression, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 688:53: -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier ) expression
            {
                // jkit/java/Java.g:688:56: ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARDEF, "VARDEF"), root_1);

                // jkit/java/Java.g:688:65: ^( MODIFIERS ( variableModifier )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                // jkit/java/Java.g:688:77: ( variableModifier )*
                while ( stream_variableModifier.hasNext() ) {
                    adaptor.addChild(root_2, stream_variableModifier.nextTree());

                }
                stream_variableModifier.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_Identifier.nextNode());

                adaptor.addChild(root_0, root_1);
                }
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, forVarControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forVarControl"

    public static class forUpdate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forUpdate"
    // jkit/java/Java.g:691:1: forUpdate : expressionList ;
    public final JavaParser.forUpdate_return forUpdate() throws RecognitionException {
        JavaParser.forUpdate_return retval = new JavaParser.forUpdate_return();
        retval.start = input.LT(1);
        int forUpdate_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.expressionList_return expressionList380 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // jkit/java/Java.g:692:2: ( expressionList )
            // jkit/java/Java.g:692:4: expressionList
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expressionList_in_forUpdate4569);
            expressionList380=expressionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList380.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, forUpdate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forUpdate"

    public static class parExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // jkit/java/Java.g:697:1: parExpression : '(' expression ')' ;
    public final JavaParser.parExpression_return parExpression() throws RecognitionException {
        JavaParser.parExpression_return retval = new JavaParser.parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal381=null;
        Token char_literal383=null;
        JavaParser.expression_return expression382 = null;


        Object char_literal381_tree=null;
        Object char_literal383_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // jkit/java/Java.g:698:2: ( '(' expression ')' )
            // jkit/java/Java.g:698:4: '(' expression ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal381=(Token)match(input,158,FOLLOW_158_in_parExpression4582); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_parExpression4585);
            expression382=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression382.getTree());
            char_literal383=(Token)match(input,159,FOLLOW_159_in_parExpression4587); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class expressionList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // jkit/java/Java.g:701:1: expressionList : expression ( ',' expression )* ;
    public final JavaParser.expressionList_return expressionList() throws RecognitionException {
        JavaParser.expressionList_return retval = new JavaParser.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal385=null;
        JavaParser.expression_return expression384 = null;

        JavaParser.expression_return expression386 = null;


        Object char_literal385_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // jkit/java/Java.g:702:5: ( expression ( ',' expression )* )
            // jkit/java/Java.g:702:9: expression ( ',' expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList4605);
            expression384=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression384.getTree());
            // jkit/java/Java.g:702:20: ( ',' expression )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==127) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // jkit/java/Java.g:702:21: ',' expression
            	    {
            	    char_literal385=(Token)match(input,127,FOLLOW_127_in_expressionList4608); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList4611);
            	    expression386=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression386.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class statementExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statementExpression"
    // jkit/java/Java.g:705:1: statementExpression : expression ;
    public final JavaParser.statementExpression_return statementExpression() throws RecognitionException {
        JavaParser.statementExpression_return retval = new JavaParser.statementExpression_return();
        retval.start = input.LT(1);
        int statementExpression_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.expression_return expression387 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // jkit/java/Java.g:706:2: ( expression )
            // jkit/java/Java.g:706:4: expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_statementExpression4627);
            expression387=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression387.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, statementExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statementExpression"

    public static class constantExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantExpression"
    // jkit/java/Java.g:709:1: constantExpression : expression ;
    public final JavaParser.constantExpression_return constantExpression() throws RecognitionException {
        JavaParser.constantExpression_return retval = new JavaParser.constantExpression_return();
        retval.start = input.LT(1);
        int constantExpression_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.expression_return expression388 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // jkit/java/Java.g:710:2: ( expression )
            // jkit/java/Java.g:710:4: expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_constantExpression4639);
            expression388=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression388.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, constantExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantExpression"

    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // jkit/java/Java.g:713:1: expression : conditionalExpression ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression ) ;
    public final JavaParser.expression_return expression() throws RecognitionException {
        JavaParser.expression_return retval = new JavaParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal390=null;
        Token char_literal392=null;
        Token char_literal394=null;
        Token char_literal396=null;
        Token char_literal398=null;
        Token string_literal400=null;
        Token string_literal402=null;
        Token string_literal404=null;
        Token char_literal406=null;
        Token char_literal408=null;
        Token char_literal409=null;
        Token char_literal411=null;
        Token char_literal412=null;
        Token char_literal414=null;
        Token char_literal415=null;
        Token char_literal416=null;
        Token char_literal417=null;
        Token i=null;
        List list_i=null;
        JavaParser.conditionalExpression_return conditionalExpression389 = null;

        JavaParser.expression_return expression391 = null;

        JavaParser.expression_return expression393 = null;

        JavaParser.expression_return expression395 = null;

        JavaParser.expression_return expression397 = null;

        JavaParser.expression_return expression399 = null;

        JavaParser.expression_return expression401 = null;

        JavaParser.expression_return expression403 = null;

        JavaParser.expression_return expression405 = null;

        JavaParser.expression_return expression407 = null;

        JavaParser.expression_return expression410 = null;

        JavaParser.expression_return expression413 = null;

        JavaParser.expression_return expression418 = null;


        Object char_literal390_tree=null;
        Object char_literal392_tree=null;
        Object char_literal394_tree=null;
        Object char_literal396_tree=null;
        Object char_literal398_tree=null;
        Object string_literal400_tree=null;
        Object string_literal402_tree=null;
        Object string_literal404_tree=null;
        Object char_literal406_tree=null;
        Object char_literal408_tree=null;
        Object char_literal409_tree=null;
        Object char_literal411_tree=null;
        Object char_literal412_tree=null;
        Object char_literal414_tree=null;
        Object char_literal415_tree=null;
        Object char_literal416_tree=null;
        Object char_literal417_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // jkit/java/Java.g:714:2: ( conditionalExpression ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression ) )
            // jkit/java/Java.g:714:4: conditionalExpression ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression )
            {
            pushFollow(FOLLOW_conditionalExpression_in_expression4651);
            conditionalExpression389=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalExpression.add(conditionalExpression389.getTree());
            // jkit/java/Java.g:715:3: ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression )
            int alt125=13;
            alt125 = dfa125.predict(input);
            switch (alt125) {
                case 1 :
                    // jkit/java/Java.g:716:4: '=' expression
                    {
                    char_literal390=(Token)match(input,137,FOLLOW_137_in_expression4661); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal390);

                    pushFollow(FOLLOW_expression_in_expression4663);
                    expression391=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression391.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 716:19: -> ^( ASSIGN conditionalExpression expression )
                    {
                        // jkit/java/Java.g:716:22: ^( ASSIGN conditionalExpression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:717:6: i+= '+' '=' expression
                    {
                    i=(Token)match(input,182,FOLLOW_182_in_expression4682); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_182.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal392=(Token)match(input,137,FOLLOW_137_in_expression4684); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal392);

                    pushFollow(FOLLOW_expression_in_expression4686);
                    expression393=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression393.getTree());


                    // AST REWRITE
                    // elements: i, conditionalExpression, conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 717:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:717:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:717:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:718:6: i+= '-' '=' expression
                    {
                    i=(Token)match(input,183,FOLLOW_183_in_expression4714); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_183.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal394=(Token)match(input,137,FOLLOW_137_in_expression4716); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal394);

                    pushFollow(FOLLOW_expression_in_expression4718);
                    expression395=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression395.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression, i, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 718:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:718:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:718:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:719:6: i+= '*' '=' expression
                    {
                    i=(Token)match(input,122,FOLLOW_122_in_expression4746); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_122.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal396=(Token)match(input,137,FOLLOW_137_in_expression4748); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal396);

                    pushFollow(FOLLOW_expression_in_expression4750);
                    expression397=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression397.getTree());


                    // AST REWRITE
                    // elements: i, conditionalExpression, conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 719:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:719:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:719:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:720:6: i+= '/' '=' expression
                    {
                    i=(Token)match(input,184,FOLLOW_184_in_expression4778); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal398=(Token)match(input,137,FOLLOW_137_in_expression4780); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal398);

                    pushFollow(FOLLOW_expression_in_expression4782);
                    expression399=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression399.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression, conditionalExpression, i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 720:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:720:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:720:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:721:6: '&=' expression
                    {
                    string_literal400=(Token)match(input,185,FOLLOW_185_in_expression4811); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_185.add(string_literal400);

                    pushFollow(FOLLOW_expression_in_expression4813);
                    expression401=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression401.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 721:22: -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) )
                    {
                        // jkit/java/Java.g:721:25: ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:721:56: ^( AND conditionalExpression expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(AND, "AND"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // jkit/java/Java.g:722:6: '|=' expression
                    {
                    string_literal402=(Token)match(input,186,FOLLOW_186_in_expression4836); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_186.add(string_literal402);

                    pushFollow(FOLLOW_expression_in_expression4838);
                    expression403=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression403.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 722:22: -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) )
                    {
                        // jkit/java/Java.g:722:25: ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:722:56: ^( OR conditionalExpression expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(OR, "OR"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // jkit/java/Java.g:723:6: '^=' expression
                    {
                    string_literal404=(Token)match(input,187,FOLLOW_187_in_expression4861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_187.add(string_literal404);

                    pushFollow(FOLLOW_expression_in_expression4863);
                    expression405=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression405.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 723:22: -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) )
                    {
                        // jkit/java/Java.g:723:25: ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:723:56: ^( XOR conditionalExpression expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(XOR, "XOR"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // jkit/java/Java.g:724:6: i+= '%' '=' expression
                    {
                    i=(Token)match(input,188,FOLLOW_188_in_expression4891); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_188.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal406=(Token)match(input,137,FOLLOW_137_in_expression4893); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal406);

                    pushFollow(FOLLOW_expression_in_expression4895);
                    expression407=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression407.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, i, conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 724:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:724:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:724:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // jkit/java/Java.g:725:6: i+= '<' '<' '=' expression
                    {
                    i=(Token)match(input,126,FOLLOW_126_in_expression4923); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_126.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal408=(Token)match(input,126,FOLLOW_126_in_expression4925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_126.add(char_literal408);

                    char_literal409=(Token)match(input,137,FOLLOW_137_in_expression4927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal409);

                    pushFollow(FOLLOW_expression_in_expression4929);
                    expression410=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression410.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression, i, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 725:32: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:725:35: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:725:66: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // jkit/java/Java.g:726:6: i+= '>' '>' '=' expression
                    {
                    i=(Token)match(input,128,FOLLOW_128_in_expression4957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal411=(Token)match(input,128,FOLLOW_128_in_expression4959); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal411);

                    char_literal412=(Token)match(input,137,FOLLOW_137_in_expression4961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal412);

                    pushFollow(FOLLOW_expression_in_expression4963);
                    expression413=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression413.getTree());


                    // AST REWRITE
                    // elements: i, expression, conditionalExpression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 726:32: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:726:35: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:726:66: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // jkit/java/Java.g:727:6: '>' '>' '>' '=' expression
                    {
                    char_literal414=(Token)match(input,128,FOLLOW_128_in_expression4989); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal414);

                    char_literal415=(Token)match(input,128,FOLLOW_128_in_expression4991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal415);

                    char_literal416=(Token)match(input,128,FOLLOW_128_in_expression4993); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal416);

                    char_literal417=(Token)match(input,137,FOLLOW_137_in_expression4995); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal417);

                    pushFollow(FOLLOW_expression_in_expression4997);
                    expression418=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression418.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 727:33: -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) )
                    {
                        // jkit/java/Java.g:727:36: ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:727:67: ^( USHR conditionalExpression expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(USHR, "USHR"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // jkit/java/Java.g:728:6: 
                    {

                    // AST REWRITE
                    // elements: conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 728:6: -> conditionalExpression
                    {
                        adaptor.addChild(root_0, stream_conditionalExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // jkit/java/Java.g:732:1: conditionalExpression : conditionalOrExpression ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression ) ;
    public final JavaParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        JavaParser.conditionalExpression_return retval = new JavaParser.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal420=null;
        Token char_literal422=null;
        JavaParser.conditionalOrExpression_return conditionalOrExpression419 = null;

        JavaParser.expression_return expression421 = null;

        JavaParser.expression_return expression423 = null;


        Object char_literal420_tree=null;
        Object char_literal422_tree=null;
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // jkit/java/Java.g:733:5: ( conditionalOrExpression ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression ) )
            // jkit/java/Java.g:733:9: conditionalOrExpression ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression )
            {
            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression5044);
            conditionalOrExpression419=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalOrExpression.add(conditionalOrExpression419.getTree());
            // jkit/java/Java.g:734:6: ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression )
            int alt126=2;
            alt126 = dfa126.predict(input);
            switch (alt126) {
                case 1 :
                    // jkit/java/Java.g:735:7: '?' expression ':' expression
                    {
                    char_literal420=(Token)match(input,156,FOLLOW_156_in_conditionalExpression5061); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_156.add(char_literal420);

                    pushFollow(FOLLOW_expression_in_conditionalExpression5063);
                    expression421=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression421.getTree());
                    char_literal422=(Token)match(input,167,FOLLOW_167_in_conditionalExpression5065); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(char_literal422);

                    pushFollow(FOLLOW_expression_in_conditionalExpression5067);
                    expression423=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression423.getTree());


                    // AST REWRITE
                    // elements: expression, expression, conditionalOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 735:37: -> ^( CONDEXPR conditionalOrExpression expression expression )
                    {
                        // jkit/java/Java.g:735:40: ^( CONDEXPR conditionalOrExpression expression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CONDEXPR, "CONDEXPR"), root_1);

                        adaptor.addChild(root_1, stream_conditionalOrExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:736:9: 
                    {

                    // AST REWRITE
                    // elements: conditionalOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 736:9: -> conditionalOrExpression
                    {
                        adaptor.addChild(root_0, stream_conditionalOrExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // jkit/java/Java.g:740:1: conditionalOrExpression : conditionalAndExpression ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression ) ;
    public final JavaParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        JavaParser.conditionalOrExpression_return retval = new JavaParser.conditionalOrExpression_return();
        retval.start = input.LT(1);
        int conditionalOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal425=null;
        JavaParser.conditionalAndExpression_return conditionalAndExpression424 = null;

        JavaParser.conditionalOrExpression_return conditionalOrExpression426 = null;


        Object string_literal425_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_conditionalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalAndExpression");
        RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // jkit/java/Java.g:741:5: ( conditionalAndExpression ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression ) )
            // jkit/java/Java.g:741:9: conditionalAndExpression ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression )
            {
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5114);
            conditionalAndExpression424=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalAndExpression.add(conditionalAndExpression424.getTree());
            // jkit/java/Java.g:742:6: ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression )
            int alt127=2;
            alt127 = dfa127.predict(input);
            switch (alt127) {
                case 1 :
                    // jkit/java/Java.g:743:7: ( '||' conditionalOrExpression )
                    {
                    // jkit/java/Java.g:743:7: ( '||' conditionalOrExpression )
                    // jkit/java/Java.g:743:8: '||' conditionalOrExpression
                    {
                    string_literal425=(Token)match(input,189,FOLLOW_189_in_conditionalOrExpression5132); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_189.add(string_literal425);

                    pushFollow(FOLLOW_conditionalOrExpression_in_conditionalOrExpression5134);
                    conditionalOrExpression426=conditionalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditionalOrExpression.add(conditionalOrExpression426.getTree());

                    }



                    // AST REWRITE
                    // elements: conditionalAndExpression, conditionalOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 743:38: -> ^( LOR conditionalAndExpression conditionalOrExpression )
                    {
                        // jkit/java/Java.g:743:41: ^( LOR conditionalAndExpression conditionalOrExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOR, "LOR"), root_1);

                        adaptor.addChild(root_1, stream_conditionalAndExpression.nextTree());
                        adaptor.addChild(root_1, stream_conditionalOrExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:744:9: 
                    {

                    // AST REWRITE
                    // elements: conditionalAndExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 744:9: -> conditionalAndExpression
                    {
                        adaptor.addChild(root_0, stream_conditionalAndExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, conditionalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // jkit/java/Java.g:748:1: conditionalAndExpression : inclusiveOrExpression ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression ) ;
    public final JavaParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        JavaParser.conditionalAndExpression_return retval = new JavaParser.conditionalAndExpression_return();
        retval.start = input.LT(1);
        int conditionalAndExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal428=null;
        JavaParser.inclusiveOrExpression_return inclusiveOrExpression427 = null;

        JavaParser.conditionalAndExpression_return conditionalAndExpression429 = null;


        Object string_literal428_tree=null;
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_conditionalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalAndExpression");
        RewriteRuleSubtreeStream stream_inclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule inclusiveOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // jkit/java/Java.g:749:5: ( inclusiveOrExpression ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression ) )
            // jkit/java/Java.g:749:9: inclusiveOrExpression ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression )
            {
            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5180);
            inclusiveOrExpression427=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inclusiveOrExpression.add(inclusiveOrExpression427.getTree());
            // jkit/java/Java.g:750:6: ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression )
            int alt128=2;
            alt128 = dfa128.predict(input);
            switch (alt128) {
                case 1 :
                    // jkit/java/Java.g:751:7: ( '&&' conditionalAndExpression )
                    {
                    // jkit/java/Java.g:751:7: ( '&&' conditionalAndExpression )
                    // jkit/java/Java.g:751:8: '&&' conditionalAndExpression
                    {
                    string_literal428=(Token)match(input,190,FOLLOW_190_in_conditionalAndExpression5198); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(string_literal428);

                    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalAndExpression5200);
                    conditionalAndExpression429=conditionalAndExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditionalAndExpression.add(conditionalAndExpression429.getTree());

                    }



                    // AST REWRITE
                    // elements: inclusiveOrExpression, conditionalAndExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 751:39: -> ^( LAND inclusiveOrExpression conditionalAndExpression )
                    {
                        // jkit/java/Java.g:751:42: ^( LAND inclusiveOrExpression conditionalAndExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LAND, "LAND"), root_1);

                        adaptor.addChild(root_1, stream_inclusiveOrExpression.nextTree());
                        adaptor.addChild(root_1, stream_conditionalAndExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:752:9: 
                    {

                    // AST REWRITE
                    // elements: inclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 752:9: -> inclusiveOrExpression
                    {
                        adaptor.addChild(root_0, stream_inclusiveOrExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, conditionalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // jkit/java/Java.g:756:1: inclusiveOrExpression : exclusiveOrExpression ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression ) ;
    public final JavaParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        JavaParser.inclusiveOrExpression_return retval = new JavaParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal431=null;
        JavaParser.exclusiveOrExpression_return exclusiveOrExpression430 = null;

        JavaParser.inclusiveOrExpression_return inclusiveOrExpression432 = null;


        Object char_literal431_tree=null;
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleSubtreeStream stream_inclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule inclusiveOrExpression");
        RewriteRuleSubtreeStream stream_exclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule exclusiveOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // jkit/java/Java.g:757:5: ( exclusiveOrExpression ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression ) )
            // jkit/java/Java.g:757:9: exclusiveOrExpression ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression )
            {
            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5252);
            exclusiveOrExpression430=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exclusiveOrExpression.add(exclusiveOrExpression430.getTree());
            // jkit/java/Java.g:758:9: ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression )
            int alt129=2;
            alt129 = dfa129.predict(input);
            switch (alt129) {
                case 1 :
                    // jkit/java/Java.g:759:10: ( '|' inclusiveOrExpression )
                    {
                    // jkit/java/Java.g:759:10: ( '|' inclusiveOrExpression )
                    // jkit/java/Java.g:759:11: '|' inclusiveOrExpression
                    {
                    char_literal431=(Token)match(input,191,FOLLOW_191_in_inclusiveOrExpression5274); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_191.add(char_literal431);

                    pushFollow(FOLLOW_inclusiveOrExpression_in_inclusiveOrExpression5276);
                    inclusiveOrExpression432=inclusiveOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inclusiveOrExpression.add(inclusiveOrExpression432.getTree());

                    }



                    // AST REWRITE
                    // elements: inclusiveOrExpression, exclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 759:38: -> ^( OR exclusiveOrExpression inclusiveOrExpression )
                    {
                        // jkit/java/Java.g:759:41: ^( OR exclusiveOrExpression inclusiveOrExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OR, "OR"), root_1);

                        adaptor.addChild(root_1, stream_exclusiveOrExpression.nextTree());
                        adaptor.addChild(root_1, stream_inclusiveOrExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:760:6: 
                    {

                    // AST REWRITE
                    // elements: exclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 760:6: -> exclusiveOrExpression
                    {
                        adaptor.addChild(root_0, stream_exclusiveOrExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // jkit/java/Java.g:764:1: exclusiveOrExpression : andExpression ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression ) ;
    public final JavaParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        JavaParser.exclusiveOrExpression_return retval = new JavaParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal434=null;
        JavaParser.andExpression_return andExpression433 = null;

        JavaParser.exclusiveOrExpression_return exclusiveOrExpression435 = null;


        Object char_literal434_tree=null;
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        RewriteRuleSubtreeStream stream_exclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule exclusiveOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // jkit/java/Java.g:765:5: ( andExpression ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression ) )
            // jkit/java/Java.g:765:9: andExpression ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression )
            {
            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression5323);
            andExpression433=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression433.getTree());
            // jkit/java/Java.g:766:5: ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression )
            int alt130=2;
            alt130 = dfa130.predict(input);
            switch (alt130) {
                case 1 :
                    // jkit/java/Java.g:767:6: ( '^' exclusiveOrExpression )
                    {
                    // jkit/java/Java.g:767:6: ( '^' exclusiveOrExpression )
                    // jkit/java/Java.g:767:7: '^' exclusiveOrExpression
                    {
                    char_literal434=(Token)match(input,192,FOLLOW_192_in_exclusiveOrExpression5339); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_192.add(char_literal434);

                    pushFollow(FOLLOW_exclusiveOrExpression_in_exclusiveOrExpression5341);
                    exclusiveOrExpression435=exclusiveOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exclusiveOrExpression.add(exclusiveOrExpression435.getTree());

                    }



                    // AST REWRITE
                    // elements: andExpression, exclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 767:34: -> ^( XOR andExpression exclusiveOrExpression )
                    {
                        // jkit/java/Java.g:767:37: ^( XOR andExpression exclusiveOrExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XOR, "XOR"), root_1);

                        adaptor.addChild(root_1, stream_andExpression.nextTree());
                        adaptor.addChild(root_1, stream_exclusiveOrExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:768:8: 
                    {

                    // AST REWRITE
                    // elements: andExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 768:8: -> andExpression
                    {
                        adaptor.addChild(root_0, stream_andExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // jkit/java/Java.g:772:1: andExpression : equalityExpression ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression ) ;
    public final JavaParser.andExpression_return andExpression() throws RecognitionException {
        JavaParser.andExpression_return retval = new JavaParser.andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal437=null;
        JavaParser.equalityExpression_return equalityExpression436 = null;

        JavaParser.andExpression_return andExpression438 = null;


        Object char_literal437_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleSubtreeStream stream_equalityExpression=new RewriteRuleSubtreeStream(adaptor,"rule equalityExpression");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // jkit/java/Java.g:773:5: ( equalityExpression ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression ) )
            // jkit/java/Java.g:773:9: equalityExpression ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression )
            {
            pushFollow(FOLLOW_equalityExpression_in_andExpression5385);
            equalityExpression436=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_equalityExpression.add(equalityExpression436.getTree());
            // jkit/java/Java.g:774:5: ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression )
            int alt131=2;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // jkit/java/Java.g:775:6: ( '&' andExpression )
                    {
                    // jkit/java/Java.g:775:6: ( '&' andExpression )
                    // jkit/java/Java.g:775:7: '&' andExpression
                    {
                    char_literal437=(Token)match(input,129,FOLLOW_129_in_andExpression5401); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_129.add(char_literal437);

                    pushFollow(FOLLOW_andExpression_in_andExpression5403);
                    andExpression438=andExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_andExpression.add(andExpression438.getTree());

                    }



                    // AST REWRITE
                    // elements: equalityExpression, andExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 775:26: -> ^( AND equalityExpression andExpression )
                    {
                        // jkit/java/Java.g:775:29: ^( AND equalityExpression andExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AND, "AND"), root_1);

                        adaptor.addChild(root_1, stream_equalityExpression.nextTree());
                        adaptor.addChild(root_1, stream_andExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:776:8: 
                    {

                    // AST REWRITE
                    // elements: equalityExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 776:8: -> equalityExpression
                    {
                        adaptor.addChild(root_0, stream_equalityExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // jkit/java/Java.g:780:1: equalityExpression : instanceOfExpression ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression ) ;
    public final JavaParser.equalityExpression_return equalityExpression() throws RecognitionException {
        JavaParser.equalityExpression_return retval = new JavaParser.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal440=null;
        Token string_literal442=null;
        JavaParser.instanceOfExpression_return instanceOfExpression439 = null;

        JavaParser.instanceOfExpression_return instanceOfExpression441 = null;

        JavaParser.instanceOfExpression_return instanceOfExpression443 = null;


        Object string_literal440_tree=null;
        Object string_literal442_tree=null;
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_instanceOfExpression=new RewriteRuleSubtreeStream(adaptor,"rule instanceOfExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // jkit/java/Java.g:781:5: ( instanceOfExpression ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression ) )
            // jkit/java/Java.g:781:9: instanceOfExpression ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression )
            {
            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5447);
            instanceOfExpression439=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_instanceOfExpression.add(instanceOfExpression439.getTree());
            // jkit/java/Java.g:782:5: ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression )
            int alt132=3;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // jkit/java/Java.g:783:6: ( '==' instanceOfExpression )
                    {
                    // jkit/java/Java.g:783:6: ( '==' instanceOfExpression )
                    // jkit/java/Java.g:783:7: '==' instanceOfExpression
                    {
                    string_literal440=(Token)match(input,193,FOLLOW_193_in_equalityExpression5463); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(string_literal440);

                    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5465);
                    instanceOfExpression441=instanceOfExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_instanceOfExpression.add(instanceOfExpression441.getTree());

                    }



                    // AST REWRITE
                    // elements: instanceOfExpression, instanceOfExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 783:34: -> ^( EQ instanceOfExpression instanceOfExpression )
                    {
                        // jkit/java/Java.g:783:37: ^( EQ instanceOfExpression instanceOfExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EQ, "EQ"), root_1);

                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());
                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:784:8: ( '!=' instanceOfExpression )
                    {
                    // jkit/java/Java.g:784:8: ( '!=' instanceOfExpression )
                    // jkit/java/Java.g:784:9: '!=' instanceOfExpression
                    {
                    string_literal442=(Token)match(input,194,FOLLOW_194_in_equalityExpression5486); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_194.add(string_literal442);

                    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5488);
                    instanceOfExpression443=instanceOfExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_instanceOfExpression.add(instanceOfExpression443.getTree());

                    }



                    // AST REWRITE
                    // elements: instanceOfExpression, instanceOfExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 784:36: -> ^( NEQ instanceOfExpression instanceOfExpression )
                    {
                        // jkit/java/Java.g:784:39: ^( NEQ instanceOfExpression instanceOfExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEQ, "NEQ"), root_1);

                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());
                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:785:8: 
                    {

                    // AST REWRITE
                    // elements: instanceOfExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 785:8: -> instanceOfExpression
                    {
                        adaptor.addChild(root_0, stream_instanceOfExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // jkit/java/Java.g:789:1: instanceOfExpression : relationalExpression ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression ) ;
    public final JavaParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        JavaParser.instanceOfExpression_return retval = new JavaParser.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal445=null;
        JavaParser.relationalExpression_return relationalExpression444 = null;

        JavaParser.type_return type446 = null;


        Object string_literal445_tree=null;
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_relationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule relationalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // jkit/java/Java.g:790:5: ( relationalExpression ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression ) )
            // jkit/java/Java.g:790:9: relationalExpression ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression )
            {
            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression5532);
            relationalExpression444=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_relationalExpression.add(relationalExpression444.getTree());
            // jkit/java/Java.g:791:5: ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression )
            int alt133=2;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    // jkit/java/Java.g:792:6: ( 'instanceof' type )
                    {
                    // jkit/java/Java.g:792:6: ( 'instanceof' type )
                    // jkit/java/Java.g:792:7: 'instanceof' type
                    {
                    string_literal445=(Token)match(input,195,FOLLOW_195_in_instanceOfExpression5547); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_195.add(string_literal445);

                    pushFollow(FOLLOW_type_in_instanceOfExpression5549);
                    type446=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type446.getTree());

                    }



                    // AST REWRITE
                    // elements: relationalExpression, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 792:26: -> ^( INSTANCEOF relationalExpression type )
                    {
                        // jkit/java/Java.g:792:29: ^( INSTANCEOF relationalExpression type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INSTANCEOF, "INSTANCEOF"), root_1);

                        adaptor.addChild(root_1, stream_relationalExpression.nextTree());
                        adaptor.addChild(root_1, stream_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:793:8: 
                    {

                    // AST REWRITE
                    // elements: relationalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 793:8: -> relationalExpression
                    {
                        adaptor.addChild(root_0, stream_relationalExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // jkit/java/Java.g:797:1: relationalExpression : shiftExpression ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression ) ;
    public final JavaParser.relationalExpression_return relationalExpression() throws RecognitionException {
        JavaParser.relationalExpression_return retval = new JavaParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal448=null;
        Token char_literal449=null;
        Token char_literal451=null;
        Token char_literal453=null;
        Token char_literal454=null;
        Token char_literal456=null;
        JavaParser.shiftExpression_return shiftExpression447 = null;

        JavaParser.shiftExpression_return shiftExpression450 = null;

        JavaParser.shiftExpression_return shiftExpression452 = null;

        JavaParser.shiftExpression_return shiftExpression455 = null;

        JavaParser.shiftExpression_return shiftExpression457 = null;


        Object char_literal448_tree=null;
        Object char_literal449_tree=null;
        Object char_literal451_tree=null;
        Object char_literal453_tree=null;
        Object char_literal454_tree=null;
        Object char_literal456_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_shiftExpression=new RewriteRuleSubtreeStream(adaptor,"rule shiftExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // jkit/java/Java.g:798:5: ( shiftExpression ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression ) )
            // jkit/java/Java.g:798:9: shiftExpression ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression )
            {
            pushFollow(FOLLOW_shiftExpression_in_relationalExpression5593);
            shiftExpression447=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression447.getTree());
            // jkit/java/Java.g:799:5: ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression )
            int alt134=5;
            alt134 = dfa134.predict(input);
            switch (alt134) {
                case 1 :
                    // jkit/java/Java.g:800:6: ( '<' '=' shiftExpression )
                    {
                    // jkit/java/Java.g:800:6: ( '<' '=' shiftExpression )
                    // jkit/java/Java.g:800:7: '<' '=' shiftExpression
                    {
                    char_literal448=(Token)match(input,126,FOLLOW_126_in_relationalExpression5609); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_126.add(char_literal448);

                    char_literal449=(Token)match(input,137,FOLLOW_137_in_relationalExpression5611); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal449);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5613);
                    shiftExpression450=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression450.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 800:32: -> ^( LTEQ shiftExpression shiftExpression )
                    {
                        // jkit/java/Java.g:800:35: ^( LTEQ shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LTEQ, "LTEQ"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:801:8: ( '<' shiftExpression )
                    {
                    // jkit/java/Java.g:801:8: ( '<' shiftExpression )
                    // jkit/java/Java.g:801:9: '<' shiftExpression
                    {
                    char_literal451=(Token)match(input,126,FOLLOW_126_in_relationalExpression5634); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_126.add(char_literal451);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5636);
                    shiftExpression452=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression452.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 801:30: -> ^( LT shiftExpression shiftExpression )
                    {
                        // jkit/java/Java.g:801:33: ^( LT shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LT, "LT"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:802:8: ( '>' '=' shiftExpression )
                    {
                    // jkit/java/Java.g:802:8: ( '>' '=' shiftExpression )
                    // jkit/java/Java.g:802:9: '>' '=' shiftExpression
                    {
                    char_literal453=(Token)match(input,128,FOLLOW_128_in_relationalExpression5657); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal453);

                    char_literal454=(Token)match(input,137,FOLLOW_137_in_relationalExpression5659); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal454);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5661);
                    shiftExpression455=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression455.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 802:34: -> ^( GTEQ shiftExpression shiftExpression )
                    {
                        // jkit/java/Java.g:802:37: ^( GTEQ shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GTEQ, "GTEQ"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:803:8: ( '>' shiftExpression )
                    {
                    // jkit/java/Java.g:803:8: ( '>' shiftExpression )
                    // jkit/java/Java.g:803:9: '>' shiftExpression
                    {
                    char_literal456=(Token)match(input,128,FOLLOW_128_in_relationalExpression5682); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal456);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5684);
                    shiftExpression457=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression457.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 803:30: -> ^( GT shiftExpression shiftExpression )
                    {
                        // jkit/java/Java.g:803:33: ^( GT shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GT, "GT"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:804:8: 
                    {

                    // AST REWRITE
                    // elements: shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 804:8: -> shiftExpression
                    {
                        adaptor.addChild(root_0, stream_shiftExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // jkit/java/Java.g:808:1: shiftExpression : additiveExpression ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression ) ;
    public final JavaParser.shiftExpression_return shiftExpression() throws RecognitionException {
        JavaParser.shiftExpression_return retval = new JavaParser.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal459=null;
        Token char_literal460=null;
        Token char_literal462=null;
        Token char_literal463=null;
        Token char_literal464=null;
        Token i=null;
        List list_i=null;
        JavaParser.additiveExpression_return additiveExpression458 = null;

        JavaParser.additiveExpression_return additiveExpression461 = null;

        JavaParser.additiveExpression_return additiveExpression465 = null;


        Object char_literal459_tree=null;
        Object char_literal460_tree=null;
        Object char_literal462_tree=null;
        Object char_literal463_tree=null;
        Object char_literal464_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // jkit/java/Java.g:809:5: ( additiveExpression ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression ) )
            // jkit/java/Java.g:809:9: additiveExpression ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression )
            {
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression5729);
            additiveExpression458=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression458.getTree());
            // jkit/java/Java.g:810:5: ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression )
            int alt138=3;
            alt138 = dfa138.predict(input);
            switch (alt138) {
                case 1 :
                    // jkit/java/Java.g:811:6: ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+
                    {
                    // jkit/java/Java.g:811:6: ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+
                    int cnt136=0;
                    loop136:
                    do {
                        int alt136=2;
                        alt136 = dfa136.predict(input);
                        switch (alt136) {
                    	case 1 :
                    	    // jkit/java/Java.g:811:7: (i+= '<' '<' | i+= '>' '>' ) additiveExpression
                    	    {
                    	    // jkit/java/Java.g:811:7: (i+= '<' '<' | i+= '>' '>' )
                    	    int alt135=2;
                    	    int LA135_0 = input.LA(1);

                    	    if ( (LA135_0==126) ) {
                    	        alt135=1;
                    	    }
                    	    else if ( (LA135_0==128) ) {
                    	        alt135=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 135, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt135) {
                    	        case 1 :
                    	            // jkit/java/Java.g:811:8: i+= '<' '<'
                    	            {
                    	            i=(Token)match(input,126,FOLLOW_126_in_shiftExpression5748); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_126.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);

                    	            char_literal459=(Token)match(input,126,FOLLOW_126_in_shiftExpression5750); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_126.add(char_literal459);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // jkit/java/Java.g:811:19: i+= '>' '>'
                    	            {
                    	            i=(Token)match(input,128,FOLLOW_128_in_shiftExpression5754); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_128.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);

                    	            char_literal460=(Token)match(input,128,FOLLOW_128_in_shiftExpression5756); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_128.add(char_literal460);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression5759);
                    	    additiveExpression461=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression461.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt136 >= 1 ) break loop136;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(136, input);
                                throw eee;
                        }
                        cnt136++;
                    } while (true);



                    // AST REWRITE
                    // elements: additiveExpression, i, additiveExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 811:52: -> ^( LABINOP additiveExpression ( $i additiveExpression )+ )
                    {
                        // jkit/java/Java.g:811:55: ^( LABINOP additiveExpression ( $i additiveExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_1);

                        adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                        if ( !(stream_additiveExpression.hasNext()||stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_additiveExpression.hasNext()||stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                            adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                        }
                        stream_additiveExpression.reset();
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:813:8: ( '>' '>' '>' additiveExpression )+
                    {
                    // jkit/java/Java.g:813:8: ( '>' '>' '>' additiveExpression )+
                    int cnt137=0;
                    loop137:
                    do {
                        int alt137=2;
                        alt137 = dfa137.predict(input);
                        switch (alt137) {
                    	case 1 :
                    	    // jkit/java/Java.g:813:9: '>' '>' '>' additiveExpression
                    	    {
                    	    char_literal462=(Token)match(input,128,FOLLOW_128_in_shiftExpression5793); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_128.add(char_literal462);

                    	    char_literal463=(Token)match(input,128,FOLLOW_128_in_shiftExpression5795); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_128.add(char_literal463);

                    	    char_literal464=(Token)match(input,128,FOLLOW_128_in_shiftExpression5797); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_128.add(char_literal464);

                    	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression5799);
                    	    additiveExpression465=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression465.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt137 >= 1 ) break loop137;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(137, input);
                                throw eee;
                        }
                        cnt137++;
                    } while (true);



                    // AST REWRITE
                    // elements: additiveExpression, additiveExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 813:42: -> ^( USHR additiveExpression ( additiveExpression )+ )
                    {
                        // jkit/java/Java.g:813:45: ^( USHR additiveExpression ( additiveExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(USHR, "USHR"), root_1);

                        adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                        if ( !(stream_additiveExpression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_additiveExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                        }
                        stream_additiveExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:814:8: 
                    {

                    // AST REWRITE
                    // elements: additiveExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 814:8: -> additiveExpression
                    {
                        adaptor.addChild(root_0, stream_additiveExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // jkit/java/Java.g:818:1: additiveExpression : multiplicativeExpression ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression ) ;
    public final JavaParser.additiveExpression_return additiveExpression() throws RecognitionException {
        JavaParser.additiveExpression_return retval = new JavaParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        Object root_0 = null;

        Token i=null;
        List list_i=null;
        JavaParser.multiplicativeExpression_return multiplicativeExpression466 = null;

        JavaParser.multiplicativeExpression_return multiplicativeExpression467 = null;


        Object i_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleSubtreeStream stream_multiplicativeExpression=new RewriteRuleSubtreeStream(adaptor,"rule multiplicativeExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // jkit/java/Java.g:819:5: ( multiplicativeExpression ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression ) )
            // jkit/java/Java.g:819:9: multiplicativeExpression ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression )
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5842);
            multiplicativeExpression466=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(multiplicativeExpression466.getTree());
            // jkit/java/Java.g:820:5: ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression )
            int alt141=2;
            alt141 = dfa141.predict(input);
            switch (alt141) {
                case 1 :
                    // jkit/java/Java.g:821:6: ( (i+= '+' | i+= '-' ) multiplicativeExpression )+
                    {
                    // jkit/java/Java.g:821:6: ( (i+= '+' | i+= '-' ) multiplicativeExpression )+
                    int cnt140=0;
                    loop140:
                    do {
                        int alt140=2;
                        alt140 = dfa140.predict(input);
                        switch (alt140) {
                    	case 1 :
                    	    // jkit/java/Java.g:821:7: (i+= '+' | i+= '-' ) multiplicativeExpression
                    	    {
                    	    // jkit/java/Java.g:821:7: (i+= '+' | i+= '-' )
                    	    int alt139=2;
                    	    int LA139_0 = input.LA(1);

                    	    if ( (LA139_0==182) ) {
                    	        alt139=1;
                    	    }
                    	    else if ( (LA139_0==183) ) {
                    	        alt139=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 139, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt139) {
                    	        case 1 :
                    	            // jkit/java/Java.g:821:8: i+= '+'
                    	            {
                    	            i=(Token)match(input,182,FOLLOW_182_in_additiveExpression5861); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_182.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // jkit/java/Java.g:821:15: i+= '-'
                    	            {
                    	            i=(Token)match(input,183,FOLLOW_183_in_additiveExpression5865); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_183.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5868);
                    	    multiplicativeExpression467=multiplicativeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_multiplicativeExpression.add(multiplicativeExpression467.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt140 >= 1 ) break loop140;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(140, input);
                                throw eee;
                        }
                        cnt140++;
                    } while (true);



                    // AST REWRITE
                    // elements: i, multiplicativeExpression, multiplicativeExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 821:50: -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ )
                    {
                        // jkit/java/Java.g:821:53: ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_1);

                        adaptor.addChild(root_1, stream_multiplicativeExpression.nextTree());
                        if ( !(stream_i.hasNext()||stream_multiplicativeExpression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext()||stream_multiplicativeExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                            adaptor.addChild(root_1, stream_multiplicativeExpression.nextTree());

                        }
                        stream_i.reset();
                        stream_multiplicativeExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:822:8: 
                    {

                    // AST REWRITE
                    // elements: multiplicativeExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 822:8: -> multiplicativeExpression
                    {
                        adaptor.addChild(root_0, stream_multiplicativeExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // jkit/java/Java.g:826:1: multiplicativeExpression : unaryExpression ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression ) ;
    public final JavaParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        JavaParser.multiplicativeExpression_return retval = new JavaParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        Object root_0 = null;

        Token i=null;
        List list_i=null;
        JavaParser.unaryExpression_return unaryExpression468 = null;

        JavaParser.unaryExpression_return unaryExpression469 = null;


        Object i_tree=null;
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // jkit/java/Java.g:827:5: ( unaryExpression ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression ) )
            // jkit/java/Java.g:827:9: unaryExpression ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression )
            {
            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5919);
            unaryExpression468=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression468.getTree());
            // jkit/java/Java.g:828:5: ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression )
            int alt144=2;
            alt144 = dfa144.predict(input);
            switch (alt144) {
                case 1 :
                    // jkit/java/Java.g:829:6: ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+
                    {
                    // jkit/java/Java.g:829:6: ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+
                    int cnt143=0;
                    loop143:
                    do {
                        int alt143=2;
                        alt143 = dfa143.predict(input);
                        switch (alt143) {
                    	case 1 :
                    	    // jkit/java/Java.g:829:8: (i+= '*' | i+= '/' | i+= '%' ) unaryExpression
                    	    {
                    	    // jkit/java/Java.g:829:8: (i+= '*' | i+= '/' | i+= '%' )
                    	    int alt142=3;
                    	    switch ( input.LA(1) ) {
                    	    case 122:
                    	        {
                    	        alt142=1;
                    	        }
                    	        break;
                    	    case 184:
                    	        {
                    	        alt142=2;
                    	        }
                    	        break;
                    	    case 188:
                    	        {
                    	        alt142=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 142, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt142) {
                    	        case 1 :
                    	            // jkit/java/Java.g:829:9: i+= '*'
                    	            {
                    	            i=(Token)match(input,122,FOLLOW_122_in_multiplicativeExpression5939); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_122.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // jkit/java/Java.g:829:16: i+= '/'
                    	            {
                    	            i=(Token)match(input,184,FOLLOW_184_in_multiplicativeExpression5943); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_184.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // jkit/java/Java.g:829:23: i+= '%'
                    	            {
                    	            i=(Token)match(input,188,FOLLOW_188_in_multiplicativeExpression5947); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_188.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5950);
                    	    unaryExpression469=unaryExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression469.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt143 >= 1 ) break loop143;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(143, input);
                                throw eee;
                        }
                        cnt143++;
                    } while (true);



                    // AST REWRITE
                    // elements: unaryExpression, unaryExpression, i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 829:49: -> ^( LABINOP unaryExpression ( $i unaryExpression )+ )
                    {
                        // jkit/java/Java.g:829:52: ^( LABINOP unaryExpression ( $i unaryExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());
                        if ( !(stream_unaryExpression.hasNext()||stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_unaryExpression.hasNext()||stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                            adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        }
                        stream_unaryExpression.reset();
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:830:8: 
                    {

                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 830:8: -> unaryExpression
                    {
                        adaptor.addChild(root_0, stream_unaryExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // jkit/java/Java.g:834:1: unaryExpression : ( '+' unaryExpression -> unaryExpression | '-' unaryExpression -> ^( NEG unaryExpression ) | '++' unaryExpression -> ^( PREINC unaryExpression ) | '--' unaryExpression -> ^( PREDEC unaryExpression ) | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus );
    public final JavaParser.unaryExpression_return unaryExpression() throws RecognitionException {
        JavaParser.unaryExpression_return retval = new JavaParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal470=null;
        Token char_literal472=null;
        Token string_literal474=null;
        Token string_literal476=null;
        JavaParser.unaryExpression_return unaryExpression471 = null;

        JavaParser.unaryExpression_return unaryExpression473 = null;

        JavaParser.unaryExpression_return unaryExpression475 = null;

        JavaParser.unaryExpression_return unaryExpression477 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus478 = null;


        Object char_literal470_tree=null;
        Object char_literal472_tree=null;
        Object string_literal474_tree=null;
        Object string_literal476_tree=null;
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_unaryExpressionNotPlusMinus=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionNotPlusMinus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // jkit/java/Java.g:835:5: ( '+' unaryExpression -> unaryExpression | '-' unaryExpression -> ^( NEG unaryExpression ) | '++' unaryExpression -> ^( PREINC unaryExpression ) | '--' unaryExpression -> ^( PREDEC unaryExpression ) | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus )
            int alt145=5;
            alt145 = dfa145.predict(input);
            switch (alt145) {
                case 1 :
                    // jkit/java/Java.g:835:9: '+' unaryExpression
                    {
                    char_literal470=(Token)match(input,182,FOLLOW_182_in_unaryExpression6002); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_182.add(char_literal470);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression6004);
                    unaryExpression471=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression471.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 835:29: -> unaryExpression
                    {
                        adaptor.addChild(root_0, stream_unaryExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:836:7: '-' unaryExpression
                    {
                    char_literal472=(Token)match(input,183,FOLLOW_183_in_unaryExpression6016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_183.add(char_literal472);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression6018);
                    unaryExpression473=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression473.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 836:27: -> ^( NEG unaryExpression )
                    {
                        // jkit/java/Java.g:836:30: ^( NEG unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEG, "NEG"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:837:9: '++' unaryExpression
                    {
                    string_literal474=(Token)match(input,196,FOLLOW_196_in_unaryExpression6036); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_196.add(string_literal474);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression6038);
                    unaryExpression475=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression475.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 837:30: -> ^( PREINC unaryExpression )
                    {
                        // jkit/java/Java.g:837:33: ^( PREINC unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PREINC, "PREINC"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:838:9: '--' unaryExpression
                    {
                    string_literal476=(Token)match(input,197,FOLLOW_197_in_unaryExpression6056); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_197.add(string_literal476);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression6058);
                    unaryExpression477=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression477.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 838:30: -> ^( PREDEC unaryExpression )
                    {
                        // jkit/java/Java.g:838:33: ^( PREDEC unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PREDEC, "PREDEC"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:839:9: unaryExpressionNotPlusMinus
                    {
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression6076);
                    unaryExpressionNotPlusMinus478=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus478.getTree());


                    // AST REWRITE
                    // elements: unaryExpressionNotPlusMinus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 839:37: -> unaryExpressionNotPlusMinus
                    {
                        adaptor.addChild(root_0, stream_unaryExpressionNotPlusMinus.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // jkit/java/Java.g:842:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression -> ^( INV unaryExpression ) | '!' unaryExpression -> ^( NOT unaryExpression ) | castExpression | primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary ) );
    public final JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        JavaParser.unaryExpressionNotPlusMinus_return retval = new JavaParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal479=null;
        Token char_literal481=null;
        Token string_literal486=null;
        Token string_literal487=null;
        Token string_literal488=null;
        Token string_literal489=null;
        JavaParser.unaryExpression_return unaryExpression480 = null;

        JavaParser.unaryExpression_return unaryExpression482 = null;

        JavaParser.castExpression_return castExpression483 = null;

        JavaParser.primary_return primary484 = null;

        JavaParser.selector_return selector485 = null;


        Object char_literal479_tree=null;
        Object char_literal481_tree=null;
        Object string_literal486_tree=null;
        Object string_literal487_tree=null;
        Object string_literal488_tree=null;
        Object string_literal489_tree=null;
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_199=new RewriteRuleTokenStream(adaptor,"token 199");
        RewriteRuleTokenStream stream_198=new RewriteRuleTokenStream(adaptor,"token 198");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_primary=new RewriteRuleSubtreeStream(adaptor,"rule primary");
        RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // jkit/java/Java.g:843:5: ( '~' unaryExpression -> ^( INV unaryExpression ) | '!' unaryExpression -> ^( NOT unaryExpression ) | castExpression | primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary ) )
            int alt149=4;
            alt149 = dfa149.predict(input);
            switch (alt149) {
                case 1 :
                    // jkit/java/Java.g:843:9: '~' unaryExpression
                    {
                    char_literal479=(Token)match(input,198,FOLLOW_198_in_unaryExpressionNotPlusMinus6107); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_198.add(char_literal479);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6109);
                    unaryExpression480=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression480.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 843:29: -> ^( INV unaryExpression )
                    {
                        // jkit/java/Java.g:843:32: ^( INV unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INV, "INV"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:844:8: '!' unaryExpression
                    {
                    char_literal481=(Token)match(input,199,FOLLOW_199_in_unaryExpressionNotPlusMinus6126); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_199.add(char_literal481);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6128);
                    unaryExpression482=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression482.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 844:28: -> ^( NOT unaryExpression )
                    {
                        // jkit/java/Java.g:844:31: ^( NOT unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NOT, "NOT"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:845:9: castExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus6146);
                    castExpression483=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, castExpression483.getTree());

                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:846:6: primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary )
                    {
                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus6153);
                    primary484=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primary.add(primary484.getTree());
                    // jkit/java/Java.g:847:3: ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary )
                    int alt148=4;
                    alt148 = dfa148.predict(input);
                    switch (alt148) {
                        case 1 :
                            // jkit/java/Java.g:848:4: ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) )
                            {
                            // jkit/java/Java.g:848:4: ( selector )+
                            int cnt146=0;
                            loop146:
                            do {
                                int alt146=2;
                                alt146 = dfa146.predict(input);
                                switch (alt146) {
                            	case 1 :
                            	    // jkit/java/Java.g:0:0: selector
                            	    {
                            	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus6163);
                            	    selector485=selector();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_selector.add(selector485.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt146 >= 1 ) break loop146;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(146, input);
                                        throw eee;
                                }
                                cnt146++;
                            } while (true);

                            // jkit/java/Java.g:849:4: ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) )
                            int alt147=3;
                            alt147 = dfa147.predict(input);
                            switch (alt147) {
                                case 1 :
                                    // jkit/java/Java.g:850:5: '++'
                                    {
                                    string_literal486=(Token)match(input,196,FOLLOW_196_in_unaryExpressionNotPlusMinus6176); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_196.add(string_literal486);



                                    // AST REWRITE
                                    // elements: selector, primary
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (Object)adaptor.nil();
                                    // 850:10: -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) )
                                    {
                                        // jkit/java/Java.g:850:13: ^( POSTINC ^( SELECTOR primary ( selector )+ ) )
                                        {
                                        Object root_1 = (Object)adaptor.nil();
                                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTINC, "POSTINC"), root_1);

                                        // jkit/java/Java.g:850:23: ^( SELECTOR primary ( selector )+ )
                                        {
                                        Object root_2 = (Object)adaptor.nil();
                                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTOR, "SELECTOR"), root_2);

                                        adaptor.addChild(root_2, stream_primary.nextTree());
                                        if ( !(stream_selector.hasNext()) ) {
                                            throw new RewriteEarlyExitException();
                                        }
                                        while ( stream_selector.hasNext() ) {
                                            adaptor.addChild(root_2, stream_selector.nextTree());

                                        }
                                        stream_selector.reset();

                                        adaptor.addChild(root_1, root_2);
                                        }

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // jkit/java/Java.g:851:6: '--'
                                    {
                                    string_literal487=(Token)match(input,197,FOLLOW_197_in_unaryExpressionNotPlusMinus6198); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_197.add(string_literal487);



                                    // AST REWRITE
                                    // elements: primary, selector
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (Object)adaptor.nil();
                                    // 851:11: -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) )
                                    {
                                        // jkit/java/Java.g:851:14: ^( POSTDEC ^( SELECTOR primary ( selector )+ ) )
                                        {
                                        Object root_1 = (Object)adaptor.nil();
                                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTDEC, "POSTDEC"), root_1);

                                        // jkit/java/Java.g:851:24: ^( SELECTOR primary ( selector )+ )
                                        {
                                        Object root_2 = (Object)adaptor.nil();
                                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTOR, "SELECTOR"), root_2);

                                        adaptor.addChild(root_2, stream_primary.nextTree());
                                        if ( !(stream_selector.hasNext()) ) {
                                            throw new RewriteEarlyExitException();
                                        }
                                        while ( stream_selector.hasNext() ) {
                                            adaptor.addChild(root_2, stream_selector.nextTree());

                                        }
                                        stream_selector.reset();

                                        adaptor.addChild(root_1, root_2);
                                        }

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 3 :
                                    // jkit/java/Java.g:852:7: 
                                    {

                                    // AST REWRITE
                                    // elements: primary, selector
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (Object)adaptor.nil();
                                    // 852:7: -> ^( SELECTOR primary ( selector )+ )
                                    {
                                        // jkit/java/Java.g:852:10: ^( SELECTOR primary ( selector )+ )
                                        {
                                        Object root_1 = (Object)adaptor.nil();
                                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTOR, "SELECTOR"), root_1);

                                        adaptor.addChild(root_1, stream_primary.nextTree());
                                        if ( !(stream_selector.hasNext()) ) {
                                            throw new RewriteEarlyExitException();
                                        }
                                        while ( stream_selector.hasNext() ) {
                                            adaptor.addChild(root_1, stream_selector.nextTree());

                                        }
                                        stream_selector.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:854:6: '++'
                            {
                            string_literal488=(Token)match(input,196,FOLLOW_196_in_unaryExpressionNotPlusMinus6242); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_196.add(string_literal488);



                            // AST REWRITE
                            // elements: primary
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 854:11: -> ^( POSTINC primary )
                            {
                                // jkit/java/Java.g:854:14: ^( POSTINC primary )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTINC, "POSTINC"), root_1);

                                adaptor.addChild(root_1, stream_primary.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:855:6: '--'
                            {
                            string_literal489=(Token)match(input,197,FOLLOW_197_in_unaryExpressionNotPlusMinus6257); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_197.add(string_literal489);



                            // AST REWRITE
                            // elements: primary
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 855:11: -> ^( POSTDEC primary )
                            {
                                // jkit/java/Java.g:855:14: ^( POSTDEC primary )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTDEC, "POSTDEC"), root_1);

                                adaptor.addChild(root_1, stream_primary.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // jkit/java/Java.g:856:6: 
                            {

                            // AST REWRITE
                            // elements: primary
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 856:6: -> primary
                            {
                                adaptor.addChild(root_0, stream_primary.nextTree());

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class castExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // jkit/java/Java.g:860:1: castExpression : ( '(' primitiveType ')' unaryExpression -> ^( CAST ^( TYPE primitiveType ) unaryExpression ) | '(' type ')' unaryExpressionNotPlusMinus -> ^( CAST type unaryExpressionNotPlusMinus ) | '(' expression ')' unaryExpressionNotPlusMinus ->);
    public final JavaParser.castExpression_return castExpression() throws RecognitionException {
        JavaParser.castExpression_return retval = new JavaParser.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal490=null;
        Token char_literal492=null;
        Token char_literal494=null;
        Token char_literal496=null;
        Token char_literal498=null;
        Token char_literal500=null;
        JavaParser.primitiveType_return primitiveType491 = null;

        JavaParser.unaryExpression_return unaryExpression493 = null;

        JavaParser.type_return type495 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus497 = null;

        JavaParser.expression_return expression499 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus501 = null;


        Object char_literal490_tree=null;
        Object char_literal492_tree=null;
        Object char_literal494_tree=null;
        Object char_literal496_tree=null;
        Object char_literal498_tree=null;
        Object char_literal500_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_unaryExpressionNotPlusMinus=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionNotPlusMinus");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // jkit/java/Java.g:861:5: ( '(' primitiveType ')' unaryExpression -> ^( CAST ^( TYPE primitiveType ) unaryExpression ) | '(' type ')' unaryExpressionNotPlusMinus -> ^( CAST type unaryExpressionNotPlusMinus ) | '(' expression ')' unaryExpressionNotPlusMinus ->)
            int alt150=3;
            alt150 = dfa150.predict(input);
            switch (alt150) {
                case 1 :
                    // jkit/java/Java.g:861:8: '(' primitiveType ')' unaryExpression
                    {
                    char_literal490=(Token)match(input,158,FOLLOW_158_in_castExpression6296); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_158.add(char_literal490);

                    pushFollow(FOLLOW_primitiveType_in_castExpression6298);
                    primitiveType491=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType491.getTree());
                    char_literal492=(Token)match(input,159,FOLLOW_159_in_castExpression6300); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_159.add(char_literal492);

                    pushFollow(FOLLOW_unaryExpression_in_castExpression6302);
                    unaryExpression493=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression493.getTree());


                    // AST REWRITE
                    // elements: unaryExpression, primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 861:46: -> ^( CAST ^( TYPE primitiveType ) unaryExpression )
                    {
                        // jkit/java/Java.g:861:49: ^( CAST ^( TYPE primitiveType ) unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CAST, "CAST"), root_1);

                        // jkit/java/Java.g:861:56: ^( TYPE primitiveType )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                        adaptor.addChild(root_2, stream_primitiveType.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:862:8: '(' type ')' unaryExpressionNotPlusMinus
                    {
                    char_literal494=(Token)match(input,158,FOLLOW_158_in_castExpression6325); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_158.add(char_literal494);

                    pushFollow(FOLLOW_type_in_castExpression6327);
                    type495=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type495.getTree());
                    char_literal496=(Token)match(input,159,FOLLOW_159_in_castExpression6329); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_159.add(char_literal496);

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6331);
                    unaryExpressionNotPlusMinus497=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus497.getTree());


                    // AST REWRITE
                    // elements: unaryExpressionNotPlusMinus, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 862:49: -> ^( CAST type unaryExpressionNotPlusMinus )
                    {
                        // jkit/java/Java.g:862:52: ^( CAST type unaryExpressionNotPlusMinus )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CAST, "CAST"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_unaryExpressionNotPlusMinus.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:863:8: '(' expression ')' unaryExpressionNotPlusMinus
                    {
                    char_literal498=(Token)match(input,158,FOLLOW_158_in_castExpression6350); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_158.add(char_literal498);

                    pushFollow(FOLLOW_expression_in_castExpression6352);
                    expression499=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression499.getTree());
                    char_literal500=(Token)match(input,159,FOLLOW_159_in_castExpression6354); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_159.add(char_literal500);

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6356);
                    unaryExpressionNotPlusMinus501=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus501.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 863:55: ->
                    {
                        root_0 = null;
                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class primary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary"
    // jkit/java/Java.g:866:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | literal | 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) ) | 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) ) | type '.' 'class' -> ^( GETCLASS type ) | 'void' '.' 'class' -> ^( GETCLASS ^( TYPE VOID ) ) | 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) ) | Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) ) );
    public final JavaParser.primary_return primary() throws RecognitionException {
        JavaParser.primary_return retval = new JavaParser.primary_return();
        retval.start = input.LT(1);
        int primary_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal506=null;
        Token char_literal509=null;
        Token char_literal511=null;
        Token char_literal512=null;
        Token char_literal513=null;
        Token char_literal514=null;
        Token char_literal515=null;
        Token string_literal517=null;
        Token char_literal519=null;
        Token char_literal520=null;
        Token char_literal522=null;
        Token char_literal523=null;
        Token char_literal524=null;
        Token char_literal525=null;
        Token char_literal526=null;
        Token char_literal530=null;
        Token string_literal531=null;
        Token string_literal532=null;
        Token char_literal533=null;
        Token string_literal534=null;
        Token string_literal535=null;
        Token Identifier537=null;
        List list_i=null;
        JavaParser.parExpression_return parExpression502 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments503 = null;

        JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix504 = null;

        JavaParser.literal_return literal505 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments507 = null;

        JavaParser.primitiveType_return primitiveType508 = null;

        JavaParser.expression_return expression510 = null;

        JavaParser.arrayInitializer_return arrayInitializer516 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments518 = null;

        JavaParser.expression_return expression521 = null;

        JavaParser.arrayInitializer_return arrayInitializer527 = null;

        JavaParser.classCreatorRest_return classCreatorRest528 = null;

        JavaParser.type_return type529 = null;

        JavaParser.arguments_return arguments536 = null;

        JavaParser.arguments_return arguments538 = null;

        JavaParser.refComponent_return i = null;
        Object string_literal506_tree=null;
        Object char_literal509_tree=null;
        Object char_literal511_tree=null;
        Object char_literal512_tree=null;
        Object char_literal513_tree=null;
        Object char_literal514_tree=null;
        Object char_literal515_tree=null;
        Object string_literal517_tree=null;
        Object char_literal519_tree=null;
        Object char_literal520_tree=null;
        Object char_literal522_tree=null;
        Object char_literal523_tree=null;
        Object char_literal524_tree=null;
        Object char_literal525_tree=null;
        Object char_literal526_tree=null;
        Object char_literal530_tree=null;
        Object string_literal531_tree=null;
        Object string_literal532_tree=null;
        Object char_literal533_tree=null;
        Object string_literal534_tree=null;
        Object string_literal535_tree=null;
        Object Identifier537_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_arrayInitializer=new RewriteRuleSubtreeStream(adaptor,"rule arrayInitializer");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classCreatorRest=new RewriteRuleSubtreeStream(adaptor,"rule classCreatorRest");
        RewriteRuleSubtreeStream stream_explicitGenericInvocationSuffix=new RewriteRuleSubtreeStream(adaptor,"rule explicitGenericInvocationSuffix");
        RewriteRuleSubtreeStream stream_refComponent=new RewriteRuleSubtreeStream(adaptor,"rule refComponent");
        RewriteRuleSubtreeStream stream_nonWildcardTypeArguments=new RewriteRuleSubtreeStream(adaptor,"rule nonWildcardTypeArguments");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // jkit/java/Java.g:867:5: ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | literal | 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) ) | 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) ) | type '.' 'class' -> ^( GETCLASS type ) | 'void' '.' 'class' -> ^( GETCLASS ^( TYPE VOID ) ) | 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) ) | Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) ) )
            int alt164=9;
            alt164 = dfa164.predict(input);
            switch (alt164) {
                case 1 :
                    // jkit/java/Java.g:867:7: parExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_primary6376);
                    parExpression502=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression502.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:868:6: nonWildcardTypeArguments explicitGenericInvocationSuffix
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6383);
                    nonWildcardTypeArguments503=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments503.getTree());
                    pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary6385);
                    explicitGenericInvocationSuffix504=explicitGenericInvocationSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicitGenericInvocationSuffix.add(explicitGenericInvocationSuffix504.getTree());


                    // AST REWRITE
                    // elements: nonWildcardTypeArguments, explicitGenericInvocationSuffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 868:63: -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                    {
                        // jkit/java/Java.g:868:66: ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                        // jkit/java/Java.g:868:75: ^( TYPE_PARAMETER nonWildcardTypeArguments )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETER, "TYPE_PARAMETER"), root_2);

                        adaptor.addChild(root_2, stream_nonWildcardTypeArguments.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_explicitGenericInvocationSuffix.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:869:9: literal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primary6409);
                    literal505=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal505.getTree());

                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:870:9: 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) )
                    {
                    string_literal506=(Token)match(input,200,FOLLOW_200_in_primary6419); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_200.add(string_literal506);

                    // jkit/java/Java.g:870:15: ( nonWildcardTypeArguments )?
                    int alt151=2;
                    int LA151_0 = input.LA(1);

                    if ( (LA151_0==126) ) {
                        alt151=1;
                    }
                    switch (alt151) {
                        case 1 :
                            // jkit/java/Java.g:0:0: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6421);
                            nonWildcardTypeArguments507=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments507.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_primitiveType_in_primary6424);
                    primitiveType508=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType508.getTree());
                    // jkit/java/Java.g:871:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) )
                    int alt155=2;
                    alt155 = dfa155.predict(input);
                    switch (alt155) {
                        case 1 :
                            // jkit/java/Java.g:872:7: ( '[' expression ']' )+ ( '[' ']' )*
                            {
                            // jkit/java/Java.g:872:7: ( '[' expression ']' )+
                            int cnt152=0;
                            loop152:
                            do {
                                int alt152=2;
                                alt152 = dfa152.predict(input);
                                switch (alt152) {
                            	case 1 :
                            	    // jkit/java/Java.g:872:8: '[' expression ']'
                            	    {
                            	    char_literal509=(Token)match(input,135,FOLLOW_135_in_primary6440); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal509);

                            	    pushFollow(FOLLOW_expression_in_primary6442);
                            	    expression510=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_expression.add(expression510.getTree());
                            	    char_literal511=(Token)match(input,136,FOLLOW_136_in_primary6444); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_136.add(char_literal511);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt152 >= 1 ) break loop152;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(152, input);
                                        throw eee;
                                }
                                cnt152++;
                            } while (true);

                            // jkit/java/Java.g:872:29: ( '[' ']' )*
                            loop153:
                            do {
                                int alt153=2;
                                alt153 = dfa153.predict(input);
                                switch (alt153) {
                            	case 1 :
                            	    // jkit/java/Java.g:872:30: '[' ']'
                            	    {
                            	    char_literal512=(Token)match(input,135,FOLLOW_135_in_primary6449); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal512);

                            	    char_literal513=(Token)match(input,136,FOLLOW_136_in_primary6451); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_136.add(char_literal513);


                            	    }
                            	    break;

                            	default :
                            	    break loop153;
                                }
                            } while (true);



                            // AST REWRITE
                            // elements: primitiveType, 135, expression
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 872:40: -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* )
                            {
                                // jkit/java/Java.g:872:43: ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                                // jkit/java/Java.g:872:49: ^( TYPE primitiveType ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, stream_primitiveType.nextTree());
                                // jkit/java/Java.g:872:70: ( '[' )*
                                while ( stream_135.hasNext() ) {
                                    adaptor.addChild(root_2, stream_135.nextNode());

                                }
                                stream_135.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:872:76: ( expression )*
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:873:9: ( '[' ']' )+ arrayInitializer
                            {
                            // jkit/java/Java.g:873:9: ( '[' ']' )+
                            int cnt154=0;
                            loop154:
                            do {
                                int alt154=2;
                                int LA154_0 = input.LA(1);

                                if ( (LA154_0==135) ) {
                                    alt154=1;
                                }


                                switch (alt154) {
                            	case 1 :
                            	    // jkit/java/Java.g:873:10: '[' ']'
                            	    {
                            	    char_literal514=(Token)match(input,135,FOLLOW_135_in_primary6482); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal514);

                            	    char_literal515=(Token)match(input,136,FOLLOW_136_in_primary6484); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_136.add(char_literal515);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt154 >= 1 ) break loop154;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(154, input);
                                        throw eee;
                                }
                                cnt154++;
                            } while (true);

                            pushFollow(FOLLOW_arrayInitializer_in_primary6488);
                            arrayInitializer516=arrayInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arrayInitializer.add(arrayInitializer516.getTree());


                            // AST REWRITE
                            // elements: arrayInitializer, 135, primitiveType
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 873:37: -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer )
                            {
                                // jkit/java/Java.g:873:40: ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYINIT, "ARRAYINIT"), root_1);

                                // jkit/java/Java.g:873:52: ^( TYPE primitiveType ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, stream_primitiveType.nextTree());
                                // jkit/java/Java.g:873:73: ( '[' )*
                                while ( stream_135.hasNext() ) {
                                    adaptor.addChild(root_2, stream_135.nextNode());

                                }
                                stream_135.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_arrayInitializer.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:875:9: 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) )
                    {
                    string_literal517=(Token)match(input,200,FOLLOW_200_in_primary6520); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_200.add(string_literal517);

                    // jkit/java/Java.g:875:15: ( nonWildcardTypeArguments )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==126) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            // jkit/java/Java.g:0:0: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6522);
                            nonWildcardTypeArguments518=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments518.getTree());

                            }
                            break;

                    }

                    // jkit/java/Java.g:875:41: (i+= refComponent ( '.' i+= refComponent )* )
                    // jkit/java/Java.g:875:42: i+= refComponent ( '.' i+= refComponent )*
                    {
                    pushFollow(FOLLOW_refComponent_in_primary6528);
                    i=refComponent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i.getTree());

                    // jkit/java/Java.g:875:58: ( '.' i+= refComponent )*
                    loop157:
                    do {
                        int alt157=2;
                        int LA157_0 = input.LA(1);

                        if ( (LA157_0==121) ) {
                            alt157=1;
                        }


                        switch (alt157) {
                    	case 1 :
                    	    // jkit/java/Java.g:875:59: '.' i+= refComponent
                    	    {
                    	    char_literal519=(Token)match(input,121,FOLLOW_121_in_primary6531); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_121.add(char_literal519);

                    	    pushFollow(FOLLOW_refComponent_in_primary6535);
                    	    i=refComponent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop157;
                        }
                    } while (true);


                    }

                    // jkit/java/Java.g:876:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) )
                    int alt161=3;
                    alt161 = dfa161.predict(input);
                    switch (alt161) {
                        case 1 :
                            // jkit/java/Java.g:877:7: ( '[' expression ']' )+ ( '[' ']' )*
                            {
                            // jkit/java/Java.g:877:7: ( '[' expression ']' )+
                            int cnt158=0;
                            loop158:
                            do {
                                int alt158=2;
                                alt158 = dfa158.predict(input);
                                switch (alt158) {
                            	case 1 :
                            	    // jkit/java/Java.g:877:8: '[' expression ']'
                            	    {
                            	    char_literal520=(Token)match(input,135,FOLLOW_135_in_primary6554); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal520);

                            	    pushFollow(FOLLOW_expression_in_primary6556);
                            	    expression521=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_expression.add(expression521.getTree());
                            	    char_literal522=(Token)match(input,136,FOLLOW_136_in_primary6558); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_136.add(char_literal522);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt158 >= 1 ) break loop158;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(158, input);
                                        throw eee;
                                }
                                cnt158++;
                            } while (true);

                            // jkit/java/Java.g:877:29: ( '[' ']' )*
                            loop159:
                            do {
                                int alt159=2;
                                alt159 = dfa159.predict(input);
                                switch (alt159) {
                            	case 1 :
                            	    // jkit/java/Java.g:877:30: '[' ']'
                            	    {
                            	    char_literal523=(Token)match(input,135,FOLLOW_135_in_primary6563); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal523);

                            	    char_literal524=(Token)match(input,136,FOLLOW_136_in_primary6565); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_136.add(char_literal524);


                            	    }
                            	    break;

                            	default :
                            	    break loop159;
                                }
                            } while (true);



                            // AST REWRITE
                            // elements: i, expression, 135
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: i
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                            root_0 = (Object)adaptor.nil();
                            // 877:40: -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* )
                            {
                                // jkit/java/Java.g:877:43: ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                                // jkit/java/Java.g:877:49: ^( TYPE ( $i)+ ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                if ( !(stream_i.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_i.hasNext() ) {
                                    adaptor.addChild(root_2, stream_i.nextTree());

                                }
                                stream_i.reset();
                                // jkit/java/Java.g:877:60: ( '[' )*
                                while ( stream_135.hasNext() ) {
                                    adaptor.addChild(root_2, stream_135.nextNode());

                                }
                                stream_135.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:877:66: ( expression )*
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:878:9: ( '[' ']' )+ arrayInitializer
                            {
                            // jkit/java/Java.g:878:9: ( '[' ']' )+
                            int cnt160=0;
                            loop160:
                            do {
                                int alt160=2;
                                int LA160_0 = input.LA(1);

                                if ( (LA160_0==135) ) {
                                    alt160=1;
                                }


                                switch (alt160) {
                            	case 1 :
                            	    // jkit/java/Java.g:878:10: '[' ']'
                            	    {
                            	    char_literal525=(Token)match(input,135,FOLLOW_135_in_primary6598); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal525);

                            	    char_literal526=(Token)match(input,136,FOLLOW_136_in_primary6600); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_136.add(char_literal526);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt160 >= 1 ) break loop160;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(160, input);
                                        throw eee;
                                }
                                cnt160++;
                            } while (true);

                            pushFollow(FOLLOW_arrayInitializer_in_primary6604);
                            arrayInitializer527=arrayInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arrayInitializer.add(arrayInitializer527.getTree());


                            // AST REWRITE
                            // elements: arrayInitializer, i, 135
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: i
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                            root_0 = (Object)adaptor.nil();
                            // 878:37: -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer )
                            {
                                // jkit/java/Java.g:878:40: ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYINIT, "ARRAYINIT"), root_1);

                                // jkit/java/Java.g:878:52: ^( TYPE ( $i)+ ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                if ( !(stream_i.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_i.hasNext() ) {
                                    adaptor.addChild(root_2, stream_i.nextTree());

                                }
                                stream_i.reset();
                                // jkit/java/Java.g:878:63: ( '[' )*
                                while ( stream_135.hasNext() ) {
                                    adaptor.addChild(root_2, stream_135.nextNode());

                                }
                                stream_135.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_arrayInitializer.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:879:9: classCreatorRest
                            {
                            pushFollow(FOLLOW_classCreatorRest_in_primary6633);
                            classCreatorRest528=classCreatorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classCreatorRest.add(classCreatorRest528.getTree());


                            // AST REWRITE
                            // elements: classCreatorRest, i
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: i
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                            root_0 = (Object)adaptor.nil();
                            // 879:26: -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? )
                            {
                                // jkit/java/Java.g:879:29: ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                                // jkit/java/Java.g:879:35: ^( TYPE ( $i)+ )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                if ( !(stream_i.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_i.hasNext() ) {
                                    adaptor.addChild(root_2, stream_i.nextTree());

                                }
                                stream_i.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:879:47: ( classCreatorRest )?
                                if ( stream_classCreatorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_classCreatorRest.nextTree());

                                }
                                stream_classCreatorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:881:9: type '.' 'class'
                    {
                    pushFollow(FOLLOW_type_in_primary6665);
                    type529=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type529.getTree());
                    char_literal530=(Token)match(input,121,FOLLOW_121_in_primary6667); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal530);

                    string_literal531=(Token)match(input,123,FOLLOW_123_in_primary6669); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_123.add(string_literal531);



                    // AST REWRITE
                    // elements: type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 881:26: -> ^( GETCLASS type )
                    {
                        // jkit/java/Java.g:881:29: ^( GETCLASS type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GETCLASS, "GETCLASS"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // jkit/java/Java.g:882:9: 'void' '.' 'class'
                    {
                    string_literal532=(Token)match(input,133,FOLLOW_133_in_primary6691); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(string_literal532);

                    char_literal533=(Token)match(input,121,FOLLOW_121_in_primary6693); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal533);

                    string_literal534=(Token)match(input,123,FOLLOW_123_in_primary6695); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_123.add(string_literal534);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 882:28: -> ^( GETCLASS ^( TYPE VOID ) )
                    {
                        // jkit/java/Java.g:882:31: ^( GETCLASS ^( TYPE VOID ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GETCLASS, "GETCLASS"), root_1);

                        // jkit/java/Java.g:882:42: ^( TYPE VOID )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                        adaptor.addChild(root_2, (Object)adaptor.create(VOID, "VOID"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // jkit/java/Java.g:883:8: 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) )
                    {
                    string_literal535=(Token)match(input,157,FOLLOW_157_in_primary6716); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(string_literal535);

                    // jkit/java/Java.g:884:3: ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) )
                    int alt162=2;
                    alt162 = dfa162.predict(input);
                    switch (alt162) {
                        case 1 :
                            // jkit/java/Java.g:885:4: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primary6726);
                            arguments536=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments536.getTree());


                            // AST REWRITE
                            // elements: arguments, 157
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 885:14: -> ^( INVOKE 'super' ( arguments )? )
                            {
                                // jkit/java/Java.g:885:17: ^( INVOKE 'super' ( arguments )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                                adaptor.addChild(root_1, stream_157.nextNode());
                                // jkit/java/Java.g:885:34: ( arguments )?
                                if ( stream_arguments.hasNext() ) {
                                    adaptor.addChild(root_1, stream_arguments.nextTree());

                                }
                                stream_arguments.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:886:6: 
                            {

                            // AST REWRITE
                            // elements: 157
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 886:6: -> ^( VAR 'super' )
                            {
                                // jkit/java/Java.g:886:9: ^( VAR 'super' )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VAR, "VAR"), root_1);

                                adaptor.addChild(root_1, stream_157.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // jkit/java/Java.g:888:9: Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) )
                    {
                    Identifier537=(Token)match(input,Identifier,FOLLOW_Identifier_in_primary6764); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier537);

                    // jkit/java/Java.g:889:6: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) )
                    int alt163=2;
                    alt163 = dfa163.predict(input);
                    switch (alt163) {
                        case 1 :
                            // jkit/java/Java.g:890:7: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primary6780);
                            arguments538=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments538.getTree());


                            // AST REWRITE
                            // elements: Identifier, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 890:17: -> ^( INVOKE Identifier ( arguments )? )
                            {
                                // jkit/java/Java.g:890:20: ^( INVOKE Identifier ( arguments )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:890:40: ( arguments )?
                                if ( stream_arguments.hasNext() ) {
                                    adaptor.addChild(root_1, stream_arguments.nextTree());

                                }
                                stream_arguments.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:891:9: 
                            {

                            // AST REWRITE
                            // elements: Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 891:9: -> ^( VAR Identifier )
                            {
                                // jkit/java/Java.g:891:12: ^( VAR Identifier )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VAR, "VAR"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, primary_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class innerCreator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerCreator"
    // jkit/java/Java.g:895:1: innerCreator : Identifier classCreatorRest -> ^( TYPE Identifier ) ( classCreatorRest )? ;
    public final JavaParser.innerCreator_return innerCreator() throws RecognitionException {
        JavaParser.innerCreator_return retval = new JavaParser.innerCreator_return();
        retval.start = input.LT(1);
        int innerCreator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier539=null;
        JavaParser.classCreatorRest_return classCreatorRest540 = null;


        Object Identifier539_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_classCreatorRest=new RewriteRuleSubtreeStream(adaptor,"rule classCreatorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // jkit/java/Java.g:896:2: ( Identifier classCreatorRest -> ^( TYPE Identifier ) ( classCreatorRest )? )
            // jkit/java/Java.g:896:4: Identifier classCreatorRest
            {
            Identifier539=(Token)match(input,Identifier,FOLLOW_Identifier_in_innerCreator6825); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier539);

            pushFollow(FOLLOW_classCreatorRest_in_innerCreator6827);
            classCreatorRest540=classCreatorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classCreatorRest.add(classCreatorRest540.getTree());


            // AST REWRITE
            // elements: Identifier, classCreatorRest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 896:32: -> ^( TYPE Identifier ) ( classCreatorRest )?
            {
                // jkit/java/Java.g:896:35: ^( TYPE Identifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_Identifier.nextNode());

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/Java.g:896:54: ( classCreatorRest )?
                if ( stream_classCreatorRest.hasNext() ) {
                    adaptor.addChild(root_0, stream_classCreatorRest.nextTree());

                }
                stream_classCreatorRest.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, innerCreator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "innerCreator"

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classCreatorRest"
    // jkit/java/Java.g:899:1: classCreatorRest : arguments ( classBody )? -> ( arguments )? ( classBody )? ;
    public final JavaParser.classCreatorRest_return classCreatorRest() throws RecognitionException {
        JavaParser.classCreatorRest_return retval = new JavaParser.classCreatorRest_return();
        retval.start = input.LT(1);
        int classCreatorRest_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.arguments_return arguments541 = null;

        JavaParser.classBody_return classBody542 = null;


        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // jkit/java/Java.g:900:2: ( arguments ( classBody )? -> ( arguments )? ( classBody )? )
            // jkit/java/Java.g:900:4: arguments ( classBody )?
            {
            pushFollow(FOLLOW_arguments_in_classCreatorRest6849);
            arguments541=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arguments.add(arguments541.getTree());
            // jkit/java/Java.g:900:14: ( classBody )?
            int alt165=2;
            alt165 = dfa165.predict(input);
            switch (alt165) {
                case 1 :
                    // jkit/java/Java.g:0:0: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_classCreatorRest6851);
                    classBody542=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody542.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classBody, arguments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 900:25: -> ( arguments )? ( classBody )?
            {
                // jkit/java/Java.g:900:28: ( arguments )?
                if ( stream_arguments.hasNext() ) {
                    adaptor.addChild(root_0, stream_arguments.nextTree());

                }
                stream_arguments.reset();
                // jkit/java/Java.g:900:39: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_classBody.nextTree());

                }
                stream_classBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, classCreatorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classCreatorRest"

    public static class explicitGenericInvocation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocation"
    // jkit/java/Java.g:903:1: explicitGenericInvocation : nonWildcardTypeArguments explicitGenericInvocationSuffix ;
    public final JavaParser.explicitGenericInvocation_return explicitGenericInvocation() throws RecognitionException {
        JavaParser.explicitGenericInvocation_return retval = new JavaParser.explicitGenericInvocation_return();
        retval.start = input.LT(1);
        int explicitGenericInvocation_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments543 = null;

        JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix544 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // jkit/java/Java.g:904:2: ( nonWildcardTypeArguments explicitGenericInvocationSuffix )
            // jkit/java/Java.g:904:4: nonWildcardTypeArguments explicitGenericInvocationSuffix
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation6872);
            nonWildcardTypeArguments543=nonWildcardTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments543.getTree());
            pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_explicitGenericInvocation6874);
            explicitGenericInvocationSuffix544=explicitGenericInvocationSuffix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, explicitGenericInvocationSuffix544.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, explicitGenericInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocation"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // jkit/java/Java.g:907:1: nonWildcardTypeArguments : '<' typeList '>' -> typeList ;
    public final JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        JavaParser.nonWildcardTypeArguments_return retval = new JavaParser.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);
        int nonWildcardTypeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal545=null;
        Token char_literal547=null;
        JavaParser.typeList_return typeList546 = null;


        Object char_literal545_tree=null;
        Object char_literal547_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // jkit/java/Java.g:908:2: ( '<' typeList '>' -> typeList )
            // jkit/java/Java.g:908:4: '<' typeList '>'
            {
            char_literal545=(Token)match(input,126,FOLLOW_126_in_nonWildcardTypeArguments6886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal545);

            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments6888);
            typeList546=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeList.add(typeList546.getTree());
            char_literal547=(Token)match(input,128,FOLLOW_128_in_nonWildcardTypeArguments6890); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal547);



            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 908:21: -> typeList
            {
                adaptor.addChild(root_0, stream_typeList.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, nonWildcardTypeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"

    public static class explicitGenericInvocationSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocationSuffix"
    // jkit/java/Java.g:911:1: explicitGenericInvocationSuffix : ( 'super' superSuffix -> 'super' ( superSuffix )? | Identifier arguments -> Identifier ( arguments )? );
    public final JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix() throws RecognitionException {
        JavaParser.explicitGenericInvocationSuffix_return retval = new JavaParser.explicitGenericInvocationSuffix_return();
        retval.start = input.LT(1);
        int explicitGenericInvocationSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal548=null;
        Token Identifier550=null;
        JavaParser.superSuffix_return superSuffix549 = null;

        JavaParser.arguments_return arguments551 = null;


        Object string_literal548_tree=null;
        Object Identifier550_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_superSuffix=new RewriteRuleSubtreeStream(adaptor,"rule superSuffix");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // jkit/java/Java.g:912:2: ( 'super' superSuffix -> 'super' ( superSuffix )? | Identifier arguments -> Identifier ( arguments )? )
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==157) ) {
                alt166=1;
            }
            else if ( (LA166_0==Identifier) ) {
                alt166=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;
            }
            switch (alt166) {
                case 1 :
                    // jkit/java/Java.g:912:4: 'super' superSuffix
                    {
                    string_literal548=(Token)match(input,157,FOLLOW_157_in_explicitGenericInvocationSuffix6906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(string_literal548);

                    pushFollow(FOLLOW_superSuffix_in_explicitGenericInvocationSuffix6908);
                    superSuffix549=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_superSuffix.add(superSuffix549.getTree());


                    // AST REWRITE
                    // elements: superSuffix, 157
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 912:24: -> 'super' ( superSuffix )?
                    {
                        adaptor.addChild(root_0, stream_157.nextNode());
                        // jkit/java/Java.g:912:35: ( superSuffix )?
                        if ( stream_superSuffix.hasNext() ) {
                            adaptor.addChild(root_0, stream_superSuffix.nextTree());

                        }
                        stream_superSuffix.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:913:6: Identifier arguments
                    {
                    Identifier550=(Token)match(input,Identifier,FOLLOW_Identifier_in_explicitGenericInvocationSuffix6922); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier550);

                    pushFollow(FOLLOW_arguments_in_explicitGenericInvocationSuffix6924);
                    arguments551=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments551.getTree());


                    // AST REWRITE
                    // elements: arguments, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 913:27: -> Identifier ( arguments )?
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/Java.g:913:41: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            adaptor.addChild(root_0, stream_arguments.nextTree());

                        }
                        stream_arguments.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, explicitGenericInvocationSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocationSuffix"

    public static class superSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "superSuffix"
    // jkit/java/Java.g:916:1: superSuffix : ( arguments -> ( arguments )? | '.' Identifier ( arguments )? );
    public final JavaParser.superSuffix_return superSuffix() throws RecognitionException {
        JavaParser.superSuffix_return retval = new JavaParser.superSuffix_return();
        retval.start = input.LT(1);
        int superSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal553=null;
        Token Identifier554=null;
        JavaParser.arguments_return arguments552 = null;

        JavaParser.arguments_return arguments555 = null;


        Object char_literal553_tree=null;
        Object Identifier554_tree=null;
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // jkit/java/Java.g:917:2: ( arguments -> ( arguments )? | '.' Identifier ( arguments )? )
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==158) ) {
                alt168=1;
            }
            else if ( (LA168_0==121) ) {
                alt168=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;
            }
            switch (alt168) {
                case 1 :
                    // jkit/java/Java.g:917:4: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_superSuffix6943);
                    arguments552=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments552.getTree());


                    // AST REWRITE
                    // elements: arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 917:14: -> ( arguments )?
                    {
                        // jkit/java/Java.g:917:17: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            adaptor.addChild(root_0, stream_arguments.nextTree());

                        }
                        stream_arguments.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:918:6: '.' Identifier ( arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal553=(Token)match(input,121,FOLLOW_121_in_superSuffix6955); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal553_tree = (Object)adaptor.create(char_literal553);
                    adaptor.addChild(root_0, char_literal553_tree);
                    }
                    Identifier554=(Token)match(input,Identifier,FOLLOW_Identifier_in_superSuffix6957); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier554_tree = (Object)adaptor.create(Identifier554);
                    adaptor.addChild(root_0, Identifier554_tree);
                    }
                    // jkit/java/Java.g:918:21: ( arguments )?
                    int alt167=2;
                    alt167 = dfa167.predict(input);
                    switch (alt167) {
                        case 1 :
                            // jkit/java/Java.g:918:22: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_superSuffix6960);
                            arguments555=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments555.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, superSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "superSuffix"

    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selector"
    // jkit/java/Java.g:921:1: selector : ( '.' 'super' arguments -> ^( INVOKE 'super' ( arguments )? ) | '.' 'new' ( nonWildcardTypeArguments )? innerCreator -> ^( NEW innerCreator ) | '.' nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | '.' Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) ) | '[' expression ']' -> ^( ARRAYINDEX expression ) );
    public final JavaParser.selector_return selector() throws RecognitionException {
        JavaParser.selector_return retval = new JavaParser.selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal556=null;
        Token string_literal557=null;
        Token char_literal559=null;
        Token string_literal560=null;
        Token char_literal563=null;
        Token char_literal566=null;
        Token Identifier567=null;
        Token char_literal569=null;
        Token char_literal571=null;
        JavaParser.arguments_return arguments558 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments561 = null;

        JavaParser.innerCreator_return innerCreator562 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments564 = null;

        JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix565 = null;

        JavaParser.arguments_return arguments568 = null;

        JavaParser.expression_return expression570 = null;


        Object char_literal556_tree=null;
        Object string_literal557_tree=null;
        Object char_literal559_tree=null;
        Object string_literal560_tree=null;
        Object char_literal563_tree=null;
        Object char_literal566_tree=null;
        Object Identifier567_tree=null;
        Object char_literal569_tree=null;
        Object char_literal571_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_innerCreator=new RewriteRuleSubtreeStream(adaptor,"rule innerCreator");
        RewriteRuleSubtreeStream stream_explicitGenericInvocationSuffix=new RewriteRuleSubtreeStream(adaptor,"rule explicitGenericInvocationSuffix");
        RewriteRuleSubtreeStream stream_nonWildcardTypeArguments=new RewriteRuleSubtreeStream(adaptor,"rule nonWildcardTypeArguments");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // jkit/java/Java.g:922:2: ( '.' 'super' arguments -> ^( INVOKE 'super' ( arguments )? ) | '.' 'new' ( nonWildcardTypeArguments )? innerCreator -> ^( NEW innerCreator ) | '.' nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | '.' Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) ) | '[' expression ']' -> ^( ARRAYINDEX expression ) )
            int alt171=5;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==121) ) {
                switch ( input.LA(2) ) {
                case 157:
                    {
                    alt171=1;
                    }
                    break;
                case 200:
                    {
                    alt171=2;
                    }
                    break;
                case Identifier:
                    {
                    alt171=4;
                    }
                    break;
                case 126:
                    {
                    alt171=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA171_0==135) ) {
                alt171=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;
            }
            switch (alt171) {
                case 1 :
                    // jkit/java/Java.g:922:4: '.' 'super' arguments
                    {
                    char_literal556=(Token)match(input,121,FOLLOW_121_in_selector6974); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal556);

                    string_literal557=(Token)match(input,157,FOLLOW_157_in_selector6976); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(string_literal557);

                    pushFollow(FOLLOW_arguments_in_selector6978);
                    arguments558=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments558.getTree());


                    // AST REWRITE
                    // elements: 157, arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 922:26: -> ^( INVOKE 'super' ( arguments )? )
                    {
                        // jkit/java/Java.g:922:29: ^( INVOKE 'super' ( arguments )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                        adaptor.addChild(root_1, stream_157.nextNode());
                        // jkit/java/Java.g:922:46: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            adaptor.addChild(root_1, stream_arguments.nextTree());

                        }
                        stream_arguments.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:923:6: '.' 'new' ( nonWildcardTypeArguments )? innerCreator
                    {
                    char_literal559=(Token)match(input,121,FOLLOW_121_in_selector6996); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal559);

                    string_literal560=(Token)match(input,200,FOLLOW_200_in_selector6998); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_200.add(string_literal560);

                    // jkit/java/Java.g:923:16: ( nonWildcardTypeArguments )?
                    int alt169=2;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==126) ) {
                        alt169=1;
                    }
                    switch (alt169) {
                        case 1 :
                            // jkit/java/Java.g:923:17: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector7001);
                            nonWildcardTypeArguments561=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments561.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_innerCreator_in_selector7005);
                    innerCreator562=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_innerCreator.add(innerCreator562.getTree());


                    // AST REWRITE
                    // elements: innerCreator
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 923:57: -> ^( NEW innerCreator )
                    {
                        // jkit/java/Java.g:923:60: ^( NEW innerCreator )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                        adaptor.addChild(root_1, stream_innerCreator.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:924:5: '.' nonWildcardTypeArguments explicitGenericInvocationSuffix
                    {
                    char_literal563=(Token)match(input,121,FOLLOW_121_in_selector7020); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal563);

                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector7022);
                    nonWildcardTypeArguments564=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments564.getTree());
                    pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_selector7024);
                    explicitGenericInvocationSuffix565=explicitGenericInvocationSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicitGenericInvocationSuffix.add(explicitGenericInvocationSuffix565.getTree());


                    // AST REWRITE
                    // elements: nonWildcardTypeArguments, explicitGenericInvocationSuffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 924:66: -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                    {
                        // jkit/java/Java.g:924:69: ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                        // jkit/java/Java.g:924:78: ^( TYPE_PARAMETER nonWildcardTypeArguments )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETER, "TYPE_PARAMETER"), root_2);

                        adaptor.addChild(root_2, stream_nonWildcardTypeArguments.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_explicitGenericInvocationSuffix.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:925:4: '.' Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) )
                    {
                    char_literal566=(Token)match(input,121,FOLLOW_121_in_selector7043); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal566);

                    Identifier567=(Token)match(input,Identifier,FOLLOW_Identifier_in_selector7045); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier567);

                    // jkit/java/Java.g:926:3: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) )
                    int alt170=2;
                    alt170 = dfa170.predict(input);
                    switch (alt170) {
                        case 1 :
                            // jkit/java/Java.g:927:4: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector7055);
                            arguments568=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments568.getTree());


                            // AST REWRITE
                            // elements: Identifier, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 927:14: -> ^( INVOKE Identifier ( arguments )? )
                            {
                                // jkit/java/Java.g:927:17: ^( INVOKE Identifier ( arguments )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:927:37: ( arguments )?
                                if ( stream_arguments.hasNext() ) {
                                    adaptor.addChild(root_1, stream_arguments.nextTree());

                                }
                                stream_arguments.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:928:6: 
                            {

                            // AST REWRITE
                            // elements: Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 928:6: -> ^( DEREF Identifier )
                            {
                                // jkit/java/Java.g:928:9: ^( DEREF Identifier )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DEREF, "DEREF"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:930:6: '[' expression ']'
                    {
                    char_literal569=(Token)match(input,135,FOLLOW_135_in_selector7090); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal569);

                    pushFollow(FOLLOW_expression_in_selector7092);
                    expression570=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression570.getTree());
                    char_literal571=(Token)match(input,136,FOLLOW_136_in_selector7094); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal571);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 930:25: -> ^( ARRAYINDEX expression )
                    {
                        // jkit/java/Java.g:930:28: ^( ARRAYINDEX expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYINDEX, "ARRAYINDEX"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selector"

    public static class arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // jkit/java/Java.g:933:1: arguments : '(' ( expressionList )? ')' ;
    public final JavaParser.arguments_return arguments() throws RecognitionException {
        JavaParser.arguments_return retval = new JavaParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal572=null;
        Token char_literal574=null;
        JavaParser.expressionList_return expressionList573 = null;


        Object char_literal572_tree=null;
        Object char_literal574_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // jkit/java/Java.g:934:2: ( '(' ( expressionList )? ')' )
            // jkit/java/Java.g:934:4: '(' ( expressionList )? ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal572=(Token)match(input,158,FOLLOW_158_in_arguments7113); if (state.failed) return retval;
            // jkit/java/Java.g:934:9: ( expressionList )?
            int alt172=2;
            alt172 = dfa172.predict(input);
            switch (alt172) {
                case 1 :
                    // jkit/java/Java.g:0:0: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments7116);
                    expressionList573=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList573.getTree());

                    }
                    break;

            }

            char_literal574=(Token)match(input,159,FOLLOW_159_in_arguments7119); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred1_Java
    public final void synpred1_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:212:4: ( annotations )
        // jkit/java/Java.g:212:4: annotations
        {
        pushFollow(FOLLOW_annotations_in_synpred1_Java463);
        annotations();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_Java

    // $ANTLR start synpred36_Java
    public final void synpred36_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:302:4: ( 'static' block )
        // jkit/java/Java.g:302:4: 'static' block
        {
        match(input,120,FOLLOW_120_in_synpred36_Java1199); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred36_Java1201);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_Java

    // $ANTLR start synpred38_Java
    public final void synpred38_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:303:4: ( ( 'static' )? block )
        // jkit/java/Java.g:303:4: ( 'static' )? block
        {
        // jkit/java/Java.g:303:4: ( 'static' )?
        int alt175=2;
        int LA175_0 = input.LA(1);

        if ( (LA175_0==120) ) {
            alt175=1;
        }
        switch (alt175) {
            case 1 :
                // jkit/java/Java.g:0:0: 'static'
                {
                match(input,120,FOLLOW_120_in_synpred38_Java1214); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_block_in_synpred38_Java1217);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_Java

    // $ANTLR start synpred41_Java
    public final void synpred41_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:306:9: ( methodDeclaration )
        // jkit/java/Java.g:306:9: methodDeclaration
        {
        pushFollow(FOLLOW_methodDeclaration_in_synpred41_Java1262);
        methodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_Java

    // $ANTLR start synpred42_Java
    public final void synpred42_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:307:9: ( fieldDeclaration )
        // jkit/java/Java.g:307:9: fieldDeclaration
        {
        pushFollow(FOLLOW_fieldDeclaration_in_synpred42_Java1288);
        fieldDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred42_Java

    // $ANTLR start synpred50_Java
    public final void synpred50_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:336:3: ( constantDeclaration )
        // jkit/java/Java.g:336:3: constantDeclaration
        {
        pushFollow(FOLLOW_constantDeclaration_in_synpred50_Java1601);
        constantDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred50_Java

    // $ANTLR start synpred51_Java
    public final void synpred51_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:337:5: ( type Identifier interfaceMethodDeclaratorRest )
        // jkit/java/Java.g:337:5: type Identifier interfaceMethodDeclaratorRest
        {
        pushFollow(FOLLOW_type_in_synpred51_Java1623);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,Identifier,FOLLOW_Identifier_in_synpred51_Java1625); if (state.failed) return ;
        pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_synpred51_Java1627);
        interfaceMethodDeclaratorRest();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred51_Java

    // $ANTLR start synpred88_Java
    public final void synpred88_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:441:16: ( '.' Identifier )
        // jkit/java/Java.g:441:16: '.' Identifier
        {
        match(input,121,FOLLOW_121_in_synpred88_Java2546); if (state.failed) return ;
        match(input,Identifier,FOLLOW_Identifier_in_synpred88_Java2548); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred88_Java

    // $ANTLR start synpred106_Java
    public final void synpred106_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:485:4: ( ( 'extends' type )? )
        // jkit/java/Java.g:485:4: ( 'extends' type )?
        {
        // jkit/java/Java.g:485:4: ( 'extends' type )?
        int alt184=2;
        int LA184_0 = input.LA(1);

        if ( (LA184_0==124) ) {
            alt184=1;
        }
        switch (alt184) {
            case 1 :
                // jkit/java/Java.g:485:5: 'extends' type
                {
                match(input,124,FOLLOW_124_in_synpred106_Java2850); if (state.failed) return ;
                pushFollow(FOLLOW_type_in_synpred106_Java2852);
                type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred106_Java

    // $ANTLR start synpred122_Java
    public final void synpred122_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:537:4: ( annotation )
        // jkit/java/Java.g:537:4: annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred122_Java3296);
        annotation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_Java

    // $ANTLR start synpred139_Java
    public final void synpred139_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:585:6: ( interfaceDeclaration ( ';' )? )
        // jkit/java/Java.g:585:6: interfaceDeclaration ( ';' )?
        {
        pushFollow(FOLLOW_interfaceDeclaration_in_synpred139_Java3544);
        interfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;
        // jkit/java/Java.g:585:27: ( ';' )?
        int alt189=2;
        int LA189_0 = input.LA(1);

        if ( (LA189_0==118) ) {
            alt189=1;
        }
        switch (alt189) {
            case 1 :
                // jkit/java/Java.g:0:0: ';'
                {
                match(input,118,FOLLOW_118_in_synpred139_Java3546); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred139_Java

    // $ANTLR start synpred146_Java
    public final void synpred146_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:614:4: ( localVariableDeclaration )
        // jkit/java/Java.g:614:4: localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred146_Java3680);
        localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred146_Java

    // $ANTLR start synpred147_Java
    public final void synpred147_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:615:4: ( classOrInterfaceDeclaration )
        // jkit/java/Java.g:615:4: classOrInterfaceDeclaration
        {
        pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred147_Java3685);
        classOrInterfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred147_Java

    // $ANTLR start synpred152_Java
    public final void synpred152_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:626:55: ( 'else' statement )
        // jkit/java/Java.g:626:55: 'else' statement
        {
        match(input,169,FOLLOW_169_in_synpred152_Java3798); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred152_Java3800);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_Java

    // $ANTLR start synpred157_Java
    public final void synpred157_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:631:9: ( catches 'finally' block )
        // jkit/java/Java.g:631:9: catches 'finally' block
        {
        pushFollow(FOLLOW_catches_in_synpred157_Java3929);
        catches();

        state._fsp--;
        if (state.failed) return ;
        match(input,174,FOLLOW_174_in_synpred157_Java3933); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred157_Java3935);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred157_Java

    // $ANTLR start synpred158_Java
    public final void synpred158_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:632:9: ( catches )
        // jkit/java/Java.g:632:9: catches
        {
        pushFollow(FOLLOW_catches_in_synpred158_Java3963);
        catches();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred158_Java

    // $ANTLR start synpred175_Java
    public final void synpred175_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:667:4: ( 'case' constantExpression ':' )
        // jkit/java/Java.g:667:4: 'case' constantExpression ':'
        {
        match(input,181,FOLLOW_181_in_synpred175_Java4345); if (state.failed) return ;
        pushFollow(FOLLOW_constantExpression_in_synpred175_Java4347);
        constantExpression();

        state._fsp--;
        if (state.failed) return ;
        match(input,167,FOLLOW_167_in_synpred175_Java4349); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_Java

    // $ANTLR start synpred176_Java
    public final void synpred176_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:668:4: ( 'case' enumConstantName ':' )
        // jkit/java/Java.g:668:4: 'case' enumConstantName ':'
        {
        match(input,181,FOLLOW_181_in_synpred176_Java4365); if (state.failed) return ;
        pushFollow(FOLLOW_enumConstantName_in_synpred176_Java4367);
        enumConstantName();

        state._fsp--;
        if (state.failed) return ;
        match(input,167,FOLLOW_167_in_synpred176_Java4369); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_Java

    // $ANTLR start synpred178_Java
    public final void synpred178_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:678:4: ( forVarControl )
        // jkit/java/Java.g:678:4: forVarControl
        {
        pushFollow(FOLLOW_forVarControl_in_synpred178_Java4429);
        forVarControl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_Java

    // $ANTLR start synpred183_Java
    public final void synpred183_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:683:4: ( ( variableModifier )* type variableDeclarators )
        // jkit/java/Java.g:683:4: ( variableModifier )* type variableDeclarators
        {
        // jkit/java/Java.g:683:4: ( variableModifier )*
        loop197:
        do {
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==142||LA197_0==164) ) {
                alt197=1;
            }


            switch (alt197) {
        	case 1 :
        	    // jkit/java/Java.g:0:0: variableModifier
        	    {
        	    pushFollow(FOLLOW_variableModifier_in_synpred183_Java4491);
        	    variableModifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop197;
            }
        } while (true);

        pushFollow(FOLLOW_type_in_synpred183_Java4494);
        type();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_variableDeclarators_in_synpred183_Java4496);
        variableDeclarators();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_Java

    // $ANTLR start synpred186_Java
    public final void synpred186_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:716:4: ( '=' expression )
        // jkit/java/Java.g:716:4: '=' expression
        {
        match(input,137,FOLLOW_137_in_synpred186_Java4661); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred186_Java4663);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_Java

    // $ANTLR start synpred187_Java
    public final void synpred187_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:717:6: ( '+' '=' expression )
        // jkit/java/Java.g:717:6: '+' '=' expression
        {
        match(input,182,FOLLOW_182_in_synpred187_Java4682); if (state.failed) return ;
        match(input,137,FOLLOW_137_in_synpred187_Java4684); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred187_Java4686);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_Java

    // $ANTLR start synpred188_Java
    public final void synpred188_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:718:6: ( '-' '=' expression )
        // jkit/java/Java.g:718:6: '-' '=' expression
        {
        match(input,183,FOLLOW_183_in_synpred188_Java4714); if (state.failed) return ;
        match(input,137,FOLLOW_137_in_synpred188_Java4716); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred188_Java4718);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_Java

    // $ANTLR start synpred189_Java
    public final void synpred189_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:719:6: ( '*' '=' expression )
        // jkit/java/Java.g:719:6: '*' '=' expression
        {
        match(input,122,FOLLOW_122_in_synpred189_Java4746); if (state.failed) return ;
        match(input,137,FOLLOW_137_in_synpred189_Java4748); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred189_Java4750);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_Java

    // $ANTLR start synpred190_Java
    public final void synpred190_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:720:6: ( '/' '=' expression )
        // jkit/java/Java.g:720:6: '/' '=' expression
        {
        match(input,184,FOLLOW_184_in_synpred190_Java4778); if (state.failed) return ;
        match(input,137,FOLLOW_137_in_synpred190_Java4780); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred190_Java4782);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_Java

    // $ANTLR start synpred191_Java
    public final void synpred191_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:721:6: ( '&=' expression )
        // jkit/java/Java.g:721:6: '&=' expression
        {
        match(input,185,FOLLOW_185_in_synpred191_Java4811); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred191_Java4813);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_Java

    // $ANTLR start synpred192_Java
    public final void synpred192_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:722:6: ( '|=' expression )
        // jkit/java/Java.g:722:6: '|=' expression
        {
        match(input,186,FOLLOW_186_in_synpred192_Java4836); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred192_Java4838);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_Java

    // $ANTLR start synpred193_Java
    public final void synpred193_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:723:6: ( '^=' expression )
        // jkit/java/Java.g:723:6: '^=' expression
        {
        match(input,187,FOLLOW_187_in_synpred193_Java4861); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred193_Java4863);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_Java

    // $ANTLR start synpred194_Java
    public final void synpred194_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:724:6: ( '%' '=' expression )
        // jkit/java/Java.g:724:6: '%' '=' expression
        {
        match(input,188,FOLLOW_188_in_synpred194_Java4891); if (state.failed) return ;
        match(input,137,FOLLOW_137_in_synpred194_Java4893); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred194_Java4895);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred194_Java

    // $ANTLR start synpred195_Java
    public final void synpred195_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:725:6: ( '<' '<' '=' expression )
        // jkit/java/Java.g:725:6: '<' '<' '=' expression
        {
        match(input,126,FOLLOW_126_in_synpred195_Java4923); if (state.failed) return ;
        match(input,126,FOLLOW_126_in_synpred195_Java4925); if (state.failed) return ;
        match(input,137,FOLLOW_137_in_synpred195_Java4927); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred195_Java4929);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred195_Java

    // $ANTLR start synpred196_Java
    public final void synpred196_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:726:6: ( '>' '>' '=' expression )
        // jkit/java/Java.g:726:6: '>' '>' '=' expression
        {
        match(input,128,FOLLOW_128_in_synpred196_Java4957); if (state.failed) return ;
        match(input,128,FOLLOW_128_in_synpred196_Java4959); if (state.failed) return ;
        match(input,137,FOLLOW_137_in_synpred196_Java4961); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred196_Java4963);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred196_Java

    // $ANTLR start synpred197_Java
    public final void synpred197_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:727:6: ( '>' '>' '>' '=' expression )
        // jkit/java/Java.g:727:6: '>' '>' '>' '=' expression
        {
        match(input,128,FOLLOW_128_in_synpred197_Java4989); if (state.failed) return ;
        match(input,128,FOLLOW_128_in_synpred197_Java4991); if (state.failed) return ;
        match(input,128,FOLLOW_128_in_synpred197_Java4993); if (state.failed) return ;
        match(input,137,FOLLOW_137_in_synpred197_Java4995); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred197_Java4997);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred197_Java

    // $ANTLR start synpred208_Java
    public final void synpred208_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:801:8: ( ( '<' shiftExpression ) )
        // jkit/java/Java.g:801:8: ( '<' shiftExpression )
        {
        // jkit/java/Java.g:801:8: ( '<' shiftExpression )
        // jkit/java/Java.g:801:9: '<' shiftExpression
        {
        match(input,126,FOLLOW_126_in_synpred208_Java5634); if (state.failed) return ;
        pushFollow(FOLLOW_shiftExpression_in_synpred208_Java5636);
        shiftExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred208_Java

    // $ANTLR start synpred212_Java
    public final void synpred212_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:811:7: ( ( '<' '<' | '>' '>' ) additiveExpression )
        // jkit/java/Java.g:811:7: ( '<' '<' | '>' '>' ) additiveExpression
        {
        // jkit/java/Java.g:811:7: ( '<' '<' | '>' '>' )
        int alt198=2;
        int LA198_0 = input.LA(1);

        if ( (LA198_0==126) ) {
            alt198=1;
        }
        else if ( (LA198_0==128) ) {
            alt198=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 198, 0, input);

            throw nvae;
        }
        switch (alt198) {
            case 1 :
                // jkit/java/Java.g:811:8: '<' '<'
                {
                match(input,126,FOLLOW_126_in_synpred212_Java5748); if (state.failed) return ;
                match(input,126,FOLLOW_126_in_synpred212_Java5750); if (state.failed) return ;

                }
                break;
            case 2 :
                // jkit/java/Java.g:811:19: '>' '>'
                {
                match(input,128,FOLLOW_128_in_synpred212_Java5754); if (state.failed) return ;
                match(input,128,FOLLOW_128_in_synpred212_Java5756); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_additiveExpression_in_synpred212_Java5759);
        additiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred212_Java

    // $ANTLR start synpred213_Java
    public final void synpred213_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:811:6: ( ( ( '<' '<' | '>' '>' ) additiveExpression )+ )
        // jkit/java/Java.g:811:6: ( ( '<' '<' | '>' '>' ) additiveExpression )+
        {
        // jkit/java/Java.g:811:6: ( ( '<' '<' | '>' '>' ) additiveExpression )+
        int cnt200=0;
        loop200:
        do {
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==126||LA200_0==128) ) {
                alt200=1;
            }


            switch (alt200) {
        	case 1 :
        	    // jkit/java/Java.g:811:7: ( '<' '<' | '>' '>' ) additiveExpression
        	    {
        	    // jkit/java/Java.g:811:7: ( '<' '<' | '>' '>' )
        	    int alt199=2;
        	    int LA199_0 = input.LA(1);

        	    if ( (LA199_0==126) ) {
        	        alt199=1;
        	    }
        	    else if ( (LA199_0==128) ) {
        	        alt199=2;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        NoViableAltException nvae =
        	            new NoViableAltException("", 199, 0, input);

        	        throw nvae;
        	    }
        	    switch (alt199) {
        	        case 1 :
        	            // jkit/java/Java.g:811:8: '<' '<'
        	            {
        	            match(input,126,FOLLOW_126_in_synpred213_Java5748); if (state.failed) return ;
        	            match(input,126,FOLLOW_126_in_synpred213_Java5750); if (state.failed) return ;

        	            }
        	            break;
        	        case 2 :
        	            // jkit/java/Java.g:811:19: '>' '>'
        	            {
        	            match(input,128,FOLLOW_128_in_synpred213_Java5754); if (state.failed) return ;
        	            match(input,128,FOLLOW_128_in_synpred213_Java5756); if (state.failed) return ;

        	            }
        	            break;

        	    }

        	    pushFollow(FOLLOW_additiveExpression_in_synpred213_Java5759);
        	    additiveExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt200 >= 1 ) break loop200;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(200, input);
                    throw eee;
            }
            cnt200++;
        } while (true);


        }
    }
    // $ANTLR end synpred213_Java

    // $ANTLR start synpred214_Java
    public final void synpred214_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:813:9: ( '>' '>' '>' additiveExpression )
        // jkit/java/Java.g:813:9: '>' '>' '>' additiveExpression
        {
        match(input,128,FOLLOW_128_in_synpred214_Java5793); if (state.failed) return ;
        match(input,128,FOLLOW_128_in_synpred214_Java5795); if (state.failed) return ;
        match(input,128,FOLLOW_128_in_synpred214_Java5797); if (state.failed) return ;
        pushFollow(FOLLOW_additiveExpression_in_synpred214_Java5799);
        additiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred214_Java

    // $ANTLR start synpred215_Java
    public final void synpred215_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:813:8: ( ( '>' '>' '>' additiveExpression )+ )
        // jkit/java/Java.g:813:8: ( '>' '>' '>' additiveExpression )+
        {
        // jkit/java/Java.g:813:8: ( '>' '>' '>' additiveExpression )+
        int cnt201=0;
        loop201:
        do {
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==128) ) {
                alt201=1;
            }


            switch (alt201) {
        	case 1 :
        	    // jkit/java/Java.g:813:9: '>' '>' '>' additiveExpression
        	    {
        	    match(input,128,FOLLOW_128_in_synpred215_Java5793); if (state.failed) return ;
        	    match(input,128,FOLLOW_128_in_synpred215_Java5795); if (state.failed) return ;
        	    match(input,128,FOLLOW_128_in_synpred215_Java5797); if (state.failed) return ;
        	    pushFollow(FOLLOW_additiveExpression_in_synpred215_Java5799);
        	    additiveExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt201 >= 1 ) break loop201;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(201, input);
                    throw eee;
            }
            cnt201++;
        } while (true);


        }
    }
    // $ANTLR end synpred215_Java

    // $ANTLR start synpred229_Java
    public final void synpred229_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:845:9: ( castExpression )
        // jkit/java/Java.g:845:9: castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred229_Java6146);
        castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_Java

    // $ANTLR start synpred236_Java
    public final void synpred236_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:861:8: ( '(' primitiveType ')' unaryExpression )
        // jkit/java/Java.g:861:8: '(' primitiveType ')' unaryExpression
        {
        match(input,158,FOLLOW_158_in_synpred236_Java6296); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred236_Java6298);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;
        match(input,159,FOLLOW_159_in_synpred236_Java6300); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred236_Java6302);
        unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_Java

    // $ANTLR start synpred237_Java
    public final void synpred237_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:862:8: ( '(' type ')' unaryExpressionNotPlusMinus )
        // jkit/java/Java.g:862:8: '(' type ')' unaryExpressionNotPlusMinus
        {
        match(input,158,FOLLOW_158_in_synpred237_Java6325); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred237_Java6327);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,159,FOLLOW_159_in_synpred237_Java6329); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_synpred237_Java6331);
        unaryExpressionNotPlusMinus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_Java

    // $ANTLR start synpred242_Java
    public final void synpred242_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:872:8: ( '[' expression ']' )
        // jkit/java/Java.g:872:8: '[' expression ']'
        {
        match(input,135,FOLLOW_135_in_synpred242_Java6440); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred242_Java6442);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,136,FOLLOW_136_in_synpred242_Java6444); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred242_Java

    // $ANTLR start synpred246_Java
    public final void synpred246_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:870:9: ( 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer ) )
        // jkit/java/Java.g:870:9: 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer )
        {
        match(input,200,FOLLOW_200_in_synpred246_Java6419); if (state.failed) return ;
        // jkit/java/Java.g:870:15: ( nonWildcardTypeArguments )?
        int alt208=2;
        int LA208_0 = input.LA(1);

        if ( (LA208_0==126) ) {
            alt208=1;
        }
        switch (alt208) {
            case 1 :
                // jkit/java/Java.g:0:0: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred246_Java6421);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_primitiveType_in_synpred246_Java6424);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;
        // jkit/java/Java.g:871:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer )
        int alt212=2;
        alt212 = dfa212.predict(input);
        switch (alt212) {
            case 1 :
                // jkit/java/Java.g:872:7: ( '[' expression ']' )+ ( '[' ']' )*
                {
                // jkit/java/Java.g:872:7: ( '[' expression ']' )+
                int cnt209=0;
                loop209:
                do {
                    int alt209=2;
                    alt209 = dfa209.predict(input);
                    switch (alt209) {
                	case 1 :
                	    // jkit/java/Java.g:872:8: '[' expression ']'
                	    {
                	    match(input,135,FOLLOW_135_in_synpred246_Java6440); if (state.failed) return ;
                	    pushFollow(FOLLOW_expression_in_synpred246_Java6442);
                	    expression();

                	    state._fsp--;
                	    if (state.failed) return ;
                	    match(input,136,FOLLOW_136_in_synpred246_Java6444); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt209 >= 1 ) break loop209;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(209, input);
                            throw eee;
                    }
                    cnt209++;
                } while (true);

                // jkit/java/Java.g:872:29: ( '[' ']' )*
                loop210:
                do {
                    int alt210=2;
                    int LA210_0 = input.LA(1);

                    if ( (LA210_0==135) ) {
                        alt210=1;
                    }


                    switch (alt210) {
                	case 1 :
                	    // jkit/java/Java.g:872:30: '[' ']'
                	    {
                	    match(input,135,FOLLOW_135_in_synpred246_Java6449); if (state.failed) return ;
                	    match(input,136,FOLLOW_136_in_synpred246_Java6451); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop210;
                    }
                } while (true);


                }
                break;
            case 2 :
                // jkit/java/Java.g:873:9: ( '[' ']' )+ arrayInitializer
                {
                // jkit/java/Java.g:873:9: ( '[' ']' )+
                int cnt211=0;
                loop211:
                do {
                    int alt211=2;
                    int LA211_0 = input.LA(1);

                    if ( (LA211_0==135) ) {
                        alt211=1;
                    }


                    switch (alt211) {
                	case 1 :
                	    // jkit/java/Java.g:873:10: '[' ']'
                	    {
                	    match(input,135,FOLLOW_135_in_synpred246_Java6482); if (state.failed) return ;
                	    match(input,136,FOLLOW_136_in_synpred246_Java6484); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt211 >= 1 ) break loop211;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(211, input);
                            throw eee;
                    }
                    cnt211++;
                } while (true);

                pushFollow(FOLLOW_arrayInitializer_in_synpred246_Java6488);
                arrayInitializer();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred246_Java

    // $ANTLR start synpred249_Java
    public final void synpred249_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:877:8: ( '[' expression ']' )
        // jkit/java/Java.g:877:8: '[' expression ']'
        {
        match(input,135,FOLLOW_135_in_synpred249_Java6554); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred249_Java6556);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,136,FOLLOW_136_in_synpred249_Java6558); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_Java

    // $ANTLR start synpred254_Java
    public final void synpred254_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:875:9: ( 'new' ( nonWildcardTypeArguments )? ( refComponent ( '.' refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest ) )
        // jkit/java/Java.g:875:9: 'new' ( nonWildcardTypeArguments )? ( refComponent ( '.' refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest )
        {
        match(input,200,FOLLOW_200_in_synpred254_Java6520); if (state.failed) return ;
        // jkit/java/Java.g:875:15: ( nonWildcardTypeArguments )?
        int alt216=2;
        int LA216_0 = input.LA(1);

        if ( (LA216_0==126) ) {
            alt216=1;
        }
        switch (alt216) {
            case 1 :
                // jkit/java/Java.g:0:0: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred254_Java6522);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // jkit/java/Java.g:875:41: ( refComponent ( '.' refComponent )* )
        // jkit/java/Java.g:875:42: refComponent ( '.' refComponent )*
        {
        pushFollow(FOLLOW_refComponent_in_synpred254_Java6528);
        refComponent();

        state._fsp--;
        if (state.failed) return ;
        // jkit/java/Java.g:875:58: ( '.' refComponent )*
        loop217:
        do {
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==121) ) {
                alt217=1;
            }


            switch (alt217) {
        	case 1 :
        	    // jkit/java/Java.g:875:59: '.' refComponent
        	    {
        	    match(input,121,FOLLOW_121_in_synpred254_Java6531); if (state.failed) return ;
        	    pushFollow(FOLLOW_refComponent_in_synpred254_Java6535);
        	    refComponent();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop217;
            }
        } while (true);


        }

        // jkit/java/Java.g:876:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest )
        int alt221=3;
        alt221 = dfa221.predict(input);
        switch (alt221) {
            case 1 :
                // jkit/java/Java.g:877:7: ( '[' expression ']' )+ ( '[' ']' )*
                {
                // jkit/java/Java.g:877:7: ( '[' expression ']' )+
                int cnt218=0;
                loop218:
                do {
                    int alt218=2;
                    alt218 = dfa218.predict(input);
                    switch (alt218) {
                	case 1 :
                	    // jkit/java/Java.g:877:8: '[' expression ']'
                	    {
                	    match(input,135,FOLLOW_135_in_synpred254_Java6554); if (state.failed) return ;
                	    pushFollow(FOLLOW_expression_in_synpred254_Java6556);
                	    expression();

                	    state._fsp--;
                	    if (state.failed) return ;
                	    match(input,136,FOLLOW_136_in_synpred254_Java6558); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt218 >= 1 ) break loop218;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(218, input);
                            throw eee;
                    }
                    cnt218++;
                } while (true);

                // jkit/java/Java.g:877:29: ( '[' ']' )*
                loop219:
                do {
                    int alt219=2;
                    int LA219_0 = input.LA(1);

                    if ( (LA219_0==135) ) {
                        alt219=1;
                    }


                    switch (alt219) {
                	case 1 :
                	    // jkit/java/Java.g:877:30: '[' ']'
                	    {
                	    match(input,135,FOLLOW_135_in_synpred254_Java6563); if (state.failed) return ;
                	    match(input,136,FOLLOW_136_in_synpred254_Java6565); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop219;
                    }
                } while (true);


                }
                break;
            case 2 :
                // jkit/java/Java.g:878:9: ( '[' ']' )+ arrayInitializer
                {
                // jkit/java/Java.g:878:9: ( '[' ']' )+
                int cnt220=0;
                loop220:
                do {
                    int alt220=2;
                    int LA220_0 = input.LA(1);

                    if ( (LA220_0==135) ) {
                        alt220=1;
                    }


                    switch (alt220) {
                	case 1 :
                	    // jkit/java/Java.g:878:10: '[' ']'
                	    {
                	    match(input,135,FOLLOW_135_in_synpred254_Java6598); if (state.failed) return ;
                	    match(input,136,FOLLOW_136_in_synpred254_Java6600); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt220 >= 1 ) break loop220;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(220, input);
                            throw eee;
                    }
                    cnt220++;
                } while (true);

                pushFollow(FOLLOW_arrayInitializer_in_synpred254_Java6604);
                arrayInitializer();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // jkit/java/Java.g:879:9: classCreatorRest
                {
                pushFollow(FOLLOW_classCreatorRest_in_synpred254_Java6633);
                classCreatorRest();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred254_Java

    // $ANTLR start synpred255_Java
    public final void synpred255_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:881:9: ( type '.' 'class' )
        // jkit/java/Java.g:881:9: type '.' 'class'
        {
        pushFollow(FOLLOW_type_in_synpred255_Java6665);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,121,FOLLOW_121_in_synpred255_Java6667); if (state.failed) return ;
        match(input,123,FOLLOW_123_in_synpred255_Java6669); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_Java

    // Delegated rules

    public final boolean synpred195_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA10 dfa10 = new DFA10(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA68 dfa68 = new DFA68(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA97 dfa97 = new DFA97(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA115 dfa115 = new DFA115(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA150 dfa150 = new DFA150(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA162 dfa162 = new DFA162(this);
    protected DFA163 dfa163 = new DFA163(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA167 dfa167 = new DFA167(this);
    protected DFA170 dfa170 = new DFA170(this);
    protected DFA172 dfa172 = new DFA172(this);
    protected DFA212 dfa212 = new DFA212(this);
    protected DFA209 dfa209 = new DFA209(this);
    protected DFA221 dfa221 = new DFA221(this);
    protected DFA218 dfa218 = new DFA218(this);
    static final String DFA1_eotS =
        "\27\uffff";
    static final String DFA1_eofS =
        "\1\2\26\uffff";
    static final String DFA1_minS =
        "\1\12\1\142\23\uffff\1\0\1\uffff";
    static final String DFA1_maxS =
        "\1\u00a4\1\u0084\23\uffff\1\0\1\uffff";
    static final String DFA1_acceptS =
        "\2\uffff\1\2\23\uffff\1\1";
    static final String DFA1_specialS =
        "\25\uffff\1\0\1\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\2\152\uffff\4\2\2\uffff\1\2\10\uffff\1\2\5\uffff\12\2\20"+
            "\uffff\1\1",
            "\1\25\41\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "212:4: ( annotations )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA1_21 = input.LA(1);

                         
                        int index1_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Java()) ) {s = 22;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index1_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 1, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA2_eotS =
        "\24\uffff";
    static final String DFA2_eofS =
        "\1\2\23\uffff";
    static final String DFA2_minS =
        "\1\12\23\uffff";
    static final String DFA2_maxS =
        "\1\u00a4\23\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\1\1\2\21\uffff";
    static final String DFA2_specialS =
        "\24\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\2\152\uffff\1\1\3\2\2\uffff\1\2\10\uffff\1\2\5\uffff\12\2"+
            "\20\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "212:17: ( packageDeclaration )?";
        }
    }
    static final String DFA3_eotS =
        "\23\uffff";
    static final String DFA3_eofS =
        "\1\1\22\uffff";
    static final String DFA3_minS =
        "\1\12\22\uffff";
    static final String DFA3_maxS =
        "\1\u00a4\22\uffff";
    static final String DFA3_acceptS =
        "\1\uffff\1\2\20\uffff\1\1";
    static final String DFA3_specialS =
        "\23\uffff}>";
    static final String[] DFA3_transitionS = {
            "\1\1\153\uffff\1\1\1\22\1\1\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\1\20\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "()* loopback of 212:37: ( importDeclaration )*";
        }
    }
    static final String DFA4_eotS =
        "\22\uffff";
    static final String DFA4_eofS =
        "\1\1\21\uffff";
    static final String DFA4_minS =
        "\1\12\21\uffff";
    static final String DFA4_maxS =
        "\1\u00a4\21\uffff";
    static final String DFA4_acceptS =
        "\1\uffff\1\2\1\1\17\uffff";
    static final String DFA4_specialS =
        "\22\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\2\153\uffff\1\2\1\uffff\1\2\2\uffff\1\2\10\uffff\1\2\5\uffff"+
            "\12\2\20\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()* loopback of 212:56: ( typeDeclaration )*";
        }
    }
    static final String DFA10_eotS =
        "\21\uffff";
    static final String DFA10_eofS =
        "\21\uffff";
    static final String DFA10_minS =
        "\1\12\20\uffff";
    static final String DFA10_maxS =
        "\1\u00a4\20\uffff";
    static final String DFA10_acceptS =
        "\1\uffff\1\1\16\uffff\1\2";
    static final String DFA10_specialS =
        "\21\uffff}>";
    static final String[] DFA10_transitionS = {
            "\1\1\153\uffff\1\20\1\uffff\1\1\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\1\20\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA10_eot = DFA.unpackEncodedString(DFA10_eotS);
    static final short[] DFA10_eof = DFA.unpackEncodedString(DFA10_eofS);
    static final char[] DFA10_min = DFA.unpackEncodedStringToUnsignedChars(DFA10_minS);
    static final char[] DFA10_max = DFA.unpackEncodedStringToUnsignedChars(DFA10_maxS);
    static final short[] DFA10_accept = DFA.unpackEncodedString(DFA10_acceptS);
    static final short[] DFA10_special = DFA.unpackEncodedString(DFA10_specialS);
    static final short[][] DFA10_transition;

    static {
        int numStates = DFA10_transitionS.length;
        DFA10_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA10_transition[i] = DFA.unpackEncodedString(DFA10_transitionS[i]);
        }
    }

    class DFA10 extends DFA {

        public DFA10(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = DFA10_eot;
            this.eof = DFA10_eof;
            this.min = DFA10_min;
            this.max = DFA10_max;
            this.accept = DFA10_accept;
            this.special = DFA10_special;
            this.transition = DFA10_transition;
        }
        public String getDescription() {
            return "227:1: typeDeclaration : ( classOrInterfaceDeclaration | ';' );";
        }
    }
    static final String DFA11_eotS =
        "\22\uffff";
    static final String DFA11_eofS =
        "\22\uffff";
    static final String DFA11_minS =
        "\1\12\3\uffff\1\142\15\uffff";
    static final String DFA11_maxS =
        "\1\u00a4\3\uffff\1\u0084\15\uffff";
    static final String DFA11_acceptS =
        "\1\uffff\1\2\3\uffff\1\1\14\uffff";
    static final String DFA11_specialS =
        "\22\uffff}>";
    static final String[] DFA11_transitionS = {
            "\1\1\155\uffff\1\5\2\uffff\1\1\10\uffff\1\1\5\uffff\12\5\20"+
            "\uffff\1\4",
            "",
            "",
            "",
            "\1\5\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 233:4: ( modifier )*";
        }
    }
    static final String DFA27_eotS =
        "\30\uffff";
    static final String DFA27_eofS =
        "\1\1\27\uffff";
    static final String DFA27_minS =
        "\1\12\27\uffff";
    static final String DFA27_maxS =
        "\1\u00a4\27\uffff";
    static final String DFA27_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\24\uffff";
    static final String DFA27_specialS =
        "\30\uffff}>";
    static final String[] DFA27_transitionS = {
            "\1\3\127\uffff\1\3\23\uffff\1\3\1\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\3\3\uffff\1\3\1\1\2\3\4\uffff\22\3\10\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "()* loopback of 276:8: ( classBodyDeclaration )*";
        }
    }
    static final String DFA32_eotS =
        "\27\uffff";
    static final String DFA32_eofS =
        "\27\uffff";
    static final String DFA32_minS =
        "\1\12\26\uffff";
    static final String DFA32_maxS =
        "\1\u00a4\26\uffff";
    static final String DFA32_acceptS =
        "\1\uffff\1\2\1\1\24\uffff";
    static final String DFA32_specialS =
        "\27\uffff}>";
    static final String[] DFA32_transitionS = {
            "\1\2\127\uffff\1\2\23\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\1\2\2\4\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "()* loopback of 293:9: ( classBodyDeclaration )*";
        }
    }
    static final String DFA33_eotS =
        "\26\uffff";
    static final String DFA33_eofS =
        "\26\uffff";
    static final String DFA33_minS =
        "\1\12\25\uffff";
    static final String DFA33_maxS =
        "\1\u00a4\25\uffff";
    static final String DFA33_acceptS =
        "\1\uffff\1\2\1\1\23\uffff";
    static final String DFA33_specialS =
        "\26\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\2\127\uffff\1\2\23\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\1\2\2\4\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "()* loopback of 297:9: ( interfaceBodyDeclaration )*";
        }
    }
    static final String DFA37_eotS =
        "\53\uffff";
    static final String DFA37_eofS =
        "\53\uffff";
    static final String DFA37_minS =
        "\1\12\1\uffff\1\12\23\uffff\1\0\24\uffff";
    static final String DFA37_maxS =
        "\1\u00a4\1\uffff\1\u00a4\23\uffff\1\0\24\uffff";
    static final String DFA37_acceptS =
        "\1\uffff\1\1\1\uffff\1\3\1\4\45\uffff\1\2";
    static final String DFA37_specialS =
        "\26\uffff\1\0\24\uffff}>";
    static final String[] DFA37_transitionS = {
            "\1\4\127\uffff\1\4\23\uffff\1\1\1\uffff\1\2\2\uffff\1\4\2\uffff"+
            "\1\4\3\uffff\1\3\1\uffff\2\4\4\uffff\22\4\10\uffff\1\4",
            "",
            "\1\4\127\uffff\1\4\25\uffff\1\4\2\uffff\1\4\2\uffff\1\4\3\uffff"+
            "\1\26\1\uffff\2\4\4\uffff\22\4\10\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "300:1: classBodyDeclaration : ( ';' | 'static' block -> ^( STATIC block ) | ( 'static' )? block -> block | ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA37_22 = input.LA(1);

                         
                        int index37_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_Java()) ) {s = 42;}

                        else if ( (synpred38_Java()) ) {s = 3;}

                         
                        input.seek(index37_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 37, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA35_eotS =
        "\26\uffff";
    static final String DFA35_eofS =
        "\26\uffff";
    static final String DFA35_minS =
        "\1\12\5\uffff\1\142\17\uffff";
    static final String DFA35_maxS =
        "\1\u00a4\5\uffff\1\u0084\17\uffff";
    static final String DFA35_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\14\uffff";
    static final String DFA35_specialS =
        "\26\uffff}>";
    static final String[] DFA35_transitionS = {
            "\1\1\127\uffff\1\1\25\uffff\1\11\2\uffff\1\1\2\uffff\1\1\5\uffff"+
            "\2\1\4\uffff\12\11\10\1\10\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "\1\11\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "()* loopback of 304:4: ( modifier )*";
        }
    }
    static final String DFA36_eotS =
        "\22\uffff";
    static final String DFA36_eofS =
        "\22\uffff";
    static final String DFA36_minS =
        "\1\12\1\uffff\2\142\6\uffff\6\0\2\uffff";
    static final String DFA36_maxS =
        "\1\u00a4\1\uffff\1\u009e\1\u0087\6\uffff\6\0\2\uffff";
    static final String DFA36_acceptS =
        "\1\uffff\1\1\2\uffff\1\4\1\6\1\uffff\1\7\1\10\1\5\6\uffff\1\2\1"+
        "\3";
    static final String DFA36_specialS =
        "\12\uffff\1\0\1\1\1\2\1\3\1\4\1\5\2\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\10\127\uffff\1\2\30\uffff\1\7\2\uffff\1\1\5\uffff\1\5\1\4"+
            "\16\uffff\10\3\10\uffff\1\5",
            "",
            "\1\15\26\uffff\1\13\4\uffff\1\12\10\uffff\1\14\26\uffff\1\11",
            "\1\17\44\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "304:14: ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_10 = input.LA(1);

                         
                        int index36_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Java()) ) {s = 16;}

                        else if ( (synpred42_Java()) ) {s = 17;}

                         
                        input.seek(index36_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA36_11 = input.LA(1);

                         
                        int index36_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Java()) ) {s = 16;}

                        else if ( (synpred42_Java()) ) {s = 17;}

                         
                        input.seek(index36_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA36_12 = input.LA(1);

                         
                        int index36_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Java()) ) {s = 16;}

                        else if ( (synpred42_Java()) ) {s = 17;}

                         
                        input.seek(index36_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA36_13 = input.LA(1);

                         
                        int index36_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Java()) ) {s = 16;}

                        else if ( (synpred42_Java()) ) {s = 17;}

                         
                        input.seek(index36_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA36_14 = input.LA(1);

                         
                        int index36_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Java()) ) {s = 16;}

                        else if ( (synpred42_Java()) ) {s = 17;}

                         
                        input.seek(index36_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA36_15 = input.LA(1);

                         
                        int index36_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Java()) ) {s = 16;}

                        else if ( (synpred42_Java()) ) {s = 17;}

                         
                        input.seek(index36_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA41_eotS =
        "\25\uffff";
    static final String DFA41_eofS =
        "\25\uffff";
    static final String DFA41_minS =
        "\1\12\24\uffff";
    static final String DFA41_maxS =
        "\1\u00a4\24\uffff";
    static final String DFA41_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA41_specialS =
        "\25\uffff}>";
    static final String[] DFA41_transitionS = {
            "\1\1\127\uffff\1\1\23\uffff\1\24\1\uffff\1\1\2\uffff\1\1\2\uffff"+
            "\1\1\5\uffff\2\1\4\uffff\22\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "334:1: interfaceBodyDeclaration : ( ( modifier )* ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) ) | ';' );";
        }
    }
    static final String DFA39_eotS =
        "\26\uffff";
    static final String DFA39_eofS =
        "\26\uffff";
    static final String DFA39_minS =
        "\1\12\5\uffff\1\142\17\uffff";
    static final String DFA39_maxS =
        "\1\u00a4\5\uffff\1\u0084\17\uffff";
    static final String DFA39_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\14\uffff";
    static final String DFA39_specialS =
        "\26\uffff}>";
    static final String[] DFA39_transitionS = {
            "\1\1\127\uffff\1\1\25\uffff\1\11\2\uffff\1\1\2\uffff\1\1\5\uffff"+
            "\2\1\4\uffff\12\11\10\1\10\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "\1\11\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "()* loopback of 335:4: ( modifier )*";
        }
    }
    static final String DFA40_eotS =
        "\21\uffff";
    static final String DFA40_eofS =
        "\21\uffff";
    static final String DFA40_minS =
        "\1\12\2\142\6\uffff\6\0\2\uffff";
    static final String DFA40_maxS =
        "\1\u00a4\2\u0087\6\uffff\6\0\2\uffff";
    static final String DFA40_acceptS =
        "\3\uffff\1\3\1\4\1\5\1\uffff\1\6\1\7\6\uffff\1\1\1\2";
    static final String DFA40_specialS =
        "\11\uffff\1\0\1\1\1\2\1\3\1\4\1\5\2\uffff}>";
    static final String[] DFA40_transitionS = {
            "\1\10\127\uffff\1\1\30\uffff\1\7\2\uffff\1\3\5\uffff\1\5\1\4"+
            "\16\uffff\10\2\10\uffff\1\5",
            "\1\14\26\uffff\1\12\4\uffff\1\11\10\uffff\1\13",
            "\1\16\44\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "335:14: ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_9 = input.LA(1);

                         
                        int index40_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_Java()) ) {s = 15;}

                        else if ( (synpred51_Java()) ) {s = 16;}

                         
                        input.seek(index40_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA40_10 = input.LA(1);

                         
                        int index40_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_Java()) ) {s = 15;}

                        else if ( (synpred51_Java()) ) {s = 16;}

                         
                        input.seek(index40_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA40_11 = input.LA(1);

                         
                        int index40_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_Java()) ) {s = 15;}

                        else if ( (synpred51_Java()) ) {s = 16;}

                         
                        input.seek(index40_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA40_12 = input.LA(1);

                         
                        int index40_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_Java()) ) {s = 15;}

                        else if ( (synpred51_Java()) ) {s = 16;}

                         
                        input.seek(index40_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA40_13 = input.LA(1);

                         
                        int index40_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_Java()) ) {s = 15;}

                        else if ( (synpred51_Java()) ) {s = 16;}

                         
                        input.seek(index40_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA40_14 = input.LA(1);

                         
                        int index40_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_Java()) ) {s = 15;}

                        else if ( (synpred51_Java()) ) {s = 16;}

                         
                        input.seek(index40_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA57_eotS =
        "\25\uffff";
    static final String DFA57_eofS =
        "\25\uffff";
    static final String DFA57_minS =
        "\1\142\24\uffff";
    static final String DFA57_maxS =
        "\1\u00c8\24\uffff";
    static final String DFA57_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA57_specialS =
        "\25\uffff}>";
    static final String[] DFA57_transitionS = {
            "\7\2\25\uffff\1\2\3\uffff\1\1\2\uffff\1\2\16\uffff\10\2\1\uffff"+
            "\2\2\2\uffff\3\2\22\uffff\2\2\14\uffff\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "416:1: variableInitializer : ( arrayInitializer | expression );";
        }
    }
    static final String DFA60_eotS =
        "\26\uffff";
    static final String DFA60_eofS =
        "\26\uffff";
    static final String DFA60_minS =
        "\1\142\25\uffff";
    static final String DFA60_maxS =
        "\1\u00c8\25\uffff";
    static final String DFA60_acceptS =
        "\1\uffff\1\1\23\uffff\1\2";
    static final String DFA60_specialS =
        "\26\uffff}>";
    static final String[] DFA60_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\1\1\25\1\uffff\1\1\16\uffff\10\1"+
            "\1\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "422:8: ( variableInitializer ( ',' variableInitializer )* ( ',' )? )?";
        }
    }
    static final String DFA58_eotS =
        "\30\uffff";
    static final String DFA58_eofS =
        "\30\uffff";
    static final String DFA58_minS =
        "\1\177\1\142\26\uffff";
    static final String DFA58_maxS =
        "\1\u0083\1\u00c8\26\uffff";
    static final String DFA58_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\23\uffff";
    static final String DFA58_specialS =
        "\30\uffff}>";
    static final String[] DFA58_transitionS = {
            "\1\1\3\uffff\1\2",
            "\7\4\25\uffff\1\4\3\uffff\1\4\1\2\1\uffff\1\4\16\uffff\10\4"+
            "\1\uffff\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "()* loopback of 422:29: ( ',' variableInitializer )*";
        }
    }
    static final String DFA61_eotS =
        "\15\uffff";
    static final String DFA61_eofS =
        "\15\uffff";
    static final String DFA61_minS =
        "\1\170\14\uffff";
    static final String DFA61_maxS =
        "\1\u00a4\14\uffff";
    static final String DFA61_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA61_specialS =
        "\15\uffff}>";
    static final String[] DFA61_transitionS = {
            "\1\5\21\uffff\1\2\1\3\1\4\1\6\1\7\1\10\1\11\1\12\1\13\1\14\20"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "425:1: modifier : ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' );";
        }
    }
    static final String DFA64_eotS =
        "\43\uffff";
    static final String DFA64_eofS =
        "\1\1\42\uffff";
    static final String DFA64_minS =
        "\1\142\37\uffff\1\142\2\uffff";
    static final String DFA64_maxS =
        "\1\u00c2\37\uffff\1\173\2\uffff";
    static final String DFA64_acceptS =
        "\1\uffff\1\2\40\uffff\1\1";
    static final String DFA64_specialS =
        "\43\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\1\23\uffff\1\1\2\uffff\1\40\1\1\2\uffff\7\1\3\uffff\3\1\22"+
            "\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\42\30\uffff\1\1",
            "",
            ""
    };

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "()* loopback of 454:20: ( '.' i+= refComponent )*";
        }
    }
    static final String DFA65_eotS =
        "\41\uffff";
    static final String DFA65_eofS =
        "\1\1\40\uffff";
    static final String DFA65_minS =
        "\1\142\40\uffff";
    static final String DFA65_maxS =
        "\1\u00c2\40\uffff";
    static final String DFA65_acceptS =
        "\1\uffff\1\2\36\uffff\1\1";
    static final String DFA65_specialS =
        "\41\uffff}>";
    static final String[] DFA65_transitionS = {
            "\1\1\23\uffff\1\1\2\uffff\2\1\2\uffff\7\1\3\uffff\1\40\2\1\22"+
            "\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "()* loopback of 454:43: ( '[' ']' )*";
        }
    }
    static final String DFA66_eotS =
        "\41\uffff";
    static final String DFA66_eofS =
        "\1\1\40\uffff";
    static final String DFA66_minS =
        "\1\142\40\uffff";
    static final String DFA66_maxS =
        "\1\u00c2\40\uffff";
    static final String DFA66_acceptS =
        "\1\uffff\1\2\36\uffff\1\1";
    static final String DFA66_specialS =
        "\41\uffff}>";
    static final String[] DFA66_transitionS = {
            "\1\1\23\uffff\1\1\2\uffff\2\1\2\uffff\7\1\3\uffff\1\40\2\1\22"+
            "\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
    static final short[][] DFA66_transition;

    static {
        int numStates = DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
        }
    }

    class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }
        public String getDescription() {
            return "()* loopback of 455:18: ( '[' ']' )*";
        }
    }
    static final String DFA68_eotS =
        "\46\uffff";
    static final String DFA68_eofS =
        "\1\2\45\uffff";
    static final String DFA68_minS =
        "\2\142\44\uffff";
    static final String DFA68_maxS =
        "\1\u00c2\1\u009c\44\uffff";
    static final String DFA68_acceptS =
        "\2\uffff\1\2\40\uffff\1\1\2\uffff";
    static final String DFA68_specialS =
        "\46\uffff}>";
    static final String[] DFA68_transitionS = {
            "\1\2\23\uffff\1\2\2\uffff\2\2\2\uffff\1\2\1\1\5\2\3\uffff\3"+
            "\2\22\uffff\1\2\1\uffff\3\2\6\uffff\1\2\16\uffff\15\2",
            "\1\43\33\uffff\1\2\25\uffff\11\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_eotS);
    static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_eofS);
    static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_minS);
    static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_maxS);
    static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_acceptS);
    static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_specialS);
    static final short[][] DFA68_transition;

    static {
        int numStates = DFA68_transitionS.length;
        DFA68_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA68_transition[i] = DFA.unpackEncodedString(DFA68_transitionS[i]);
        }
    }

    class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;
        }
        public String getDescription() {
            return "459:18: ( typeArguments )?";
        }
    }
    static final String DFA73_eotS =
        "\52\uffff";
    static final String DFA73_eofS =
        "\1\4\51\uffff";
    static final String DFA73_minS =
        "\1\174\1\uffff\3\0\45\uffff";
    static final String DFA73_maxS =
        "\1\u009d\1\uffff\3\0\45\uffff";
    static final String DFA73_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\44\uffff";
    static final String DFA73_specialS =
        "\2\uffff\1\0\1\1\1\2\45\uffff}>";
    static final String[] DFA73_transitionS = {
            "\1\1\2\uffff\1\2\1\3\34\uffff\1\5",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "484:8: ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA73_2 = input.LA(1);

                         
                        int index73_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index73_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA73_3 = input.LA(1);

                         
                        int index73_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index73_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA73_4 = input.LA(1);

                         
                        int index73_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index73_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 73, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA82_eotS =
        "\30\uffff";
    static final String DFA82_eofS =
        "\1\1\27\uffff";
    static final String DFA82_minS =
        "\1\12\2\uffff\1\142\22\uffff\1\0\1\uffff";
    static final String DFA82_maxS =
        "\1\u00a4\2\uffff\1\u0084\22\uffff\1\0\1\uffff";
    static final String DFA82_acceptS =
        "\1\uffff\1\2\25\uffff\1\1";
    static final String DFA82_specialS =
        "\26\uffff\1\0\1\uffff}>";
    static final String[] DFA82_transitionS = {
            "\1\1\127\uffff\1\1\22\uffff\4\1\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\1\20\uffff\1\3",
            "",
            "",
            "\1\26\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "()+ loopback of 537:4: ( annotation )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA82_22 = input.LA(1);

                         
                        int index82_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_Java()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA84_eotS =
        "\34\uffff";
    static final String DFA84_eofS =
        "\1\2\33\uffff";
    static final String DFA84_minS =
        "\1\12\33\uffff";
    static final String DFA84_maxS =
        "\1\u00a4\33\uffff";
    static final String DFA84_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA84_specialS =
        "\34\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\2\127\uffff\1\2\22\uffff\4\2\2\uffff\1\2\2\uffff\2\2\3\uffff"+
            "\3\2\4\uffff\22\2\2\uffff\1\1\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "541:23: ( '(' ( elementValuePairs )? ')' )?";
        }
    }
    static final String DFA83_eotS =
        "\27\uffff";
    static final String DFA83_eofS =
        "\27\uffff";
    static final String DFA83_minS =
        "\1\142\26\uffff";
    static final String DFA83_maxS =
        "\1\u00c8\26\uffff";
    static final String DFA83_acceptS =
        "\1\uffff\1\1\24\uffff\1\2";
    static final String DFA83_specialS =
        "\27\uffff}>";
    static final String[] DFA83_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\1\2\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\1\26\1\uffff\4\1\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "541:28: ( elementValuePairs )?";
        }
    }
    static final String DFA85_eotS =
        "\35\uffff";
    static final String DFA85_eofS =
        "\1\1\34\uffff";
    static final String DFA85_minS =
        "\1\12\34\uffff";
    static final String DFA85_maxS =
        "\1\u00a4\34\uffff";
    static final String DFA85_acceptS =
        "\1\uffff\1\2\32\uffff\1\1";
    static final String DFA85_specialS =
        "\35\uffff}>";
    static final String[] DFA85_transitionS = {
            "\1\1\127\uffff\1\1\22\uffff\4\1\1\34\1\uffff\1\1\2\uffff\2\1"+
            "\3\uffff\3\1\4\uffff\22\1\2\uffff\2\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "()* loopback of 545:15: ( '.' Identifier )*";
        }
    }
    static final String DFA87_eotS =
        "\57\uffff";
    static final String DFA87_eofS =
        "\1\uffff\1\2\55\uffff";
    static final String DFA87_minS =
        "\1\142\1\171\55\uffff";
    static final String DFA87_maxS =
        "\1\u00c8\1\u00c5\55\uffff";
    static final String DFA87_acceptS =
        "\2\uffff\1\2\23\uffff\1\1\30\uffff";
    static final String DFA87_specialS =
        "\57\uffff}>";
    static final String[] DFA87_transitionS = {
            "\1\1\6\2\25\uffff\1\2\3\uffff\1\2\2\uffff\1\2\16\uffff\10\2"+
            "\1\uffff\2\2\2\uffff\4\2\21\uffff\2\2\14\uffff\5\2",
            "\2\2\3\uffff\4\2\5\uffff\1\2\1\uffff\1\26\22\uffff\1\2\1\uffff"+
            "\2\2\26\uffff\3\2\3\uffff\12\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "553:4: ( Identifier '=' )?";
        }
    }
    static final String DFA88_eotS =
        "\26\uffff";
    static final String DFA88_eofS =
        "\26\uffff";
    static final String DFA88_minS =
        "\1\142\25\uffff";
    static final String DFA88_maxS =
        "\1\u00c8\25\uffff";
    static final String DFA88_acceptS =
        "\1\uffff\1\1\22\uffff\1\2\1\3";
    static final String DFA88_specialS =
        "\26\uffff}>";
    static final String[] DFA88_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\25\2\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\2\uffff\3\1\1\24\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "556:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );";
        }
    }
    static final String DFA90_eotS =
        "\27\uffff";
    static final String DFA90_eofS =
        "\27\uffff";
    static final String DFA90_minS =
        "\1\142\26\uffff";
    static final String DFA90_maxS =
        "\1\u00c8\26\uffff";
    static final String DFA90_acceptS =
        "\1\uffff\1\1\24\uffff\1\2";
    static final String DFA90_specialS =
        "\27\uffff}>";
    static final String[] DFA90_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\1\1\26\1\uffff\1\1\16\uffff\10\1"+
            "\1\uffff\2\1\2\uffff\4\1\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA90_eot = DFA.unpackEncodedString(DFA90_eotS);
    static final short[] DFA90_eof = DFA.unpackEncodedString(DFA90_eofS);
    static final char[] DFA90_min = DFA.unpackEncodedStringToUnsignedChars(DFA90_minS);
    static final char[] DFA90_max = DFA.unpackEncodedStringToUnsignedChars(DFA90_maxS);
    static final short[] DFA90_accept = DFA.unpackEncodedString(DFA90_acceptS);
    static final short[] DFA90_special = DFA.unpackEncodedString(DFA90_specialS);
    static final short[][] DFA90_transition;

    static {
        int numStates = DFA90_transitionS.length;
        DFA90_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA90_transition[i] = DFA.unpackEncodedString(DFA90_transitionS[i]);
        }
    }

    class DFA90 extends DFA {

        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = DFA90_eot;
            this.eof = DFA90_eof;
            this.min = DFA90_min;
            this.max = DFA90_max;
            this.accept = DFA90_accept;
            this.special = DFA90_special;
            this.transition = DFA90_transition;
        }
        public String getDescription() {
            return "563:8: ( elementValue ( ',' elementValue )* )?";
        }
    }
    static final String DFA91_eotS =
        "\23\uffff";
    static final String DFA91_eofS =
        "\23\uffff";
    static final String DFA91_minS =
        "\1\12\22\uffff";
    static final String DFA91_maxS =
        "\1\u00a4\22\uffff";
    static final String DFA91_acceptS =
        "\1\uffff\1\1\20\uffff\1\2";
    static final String DFA91_specialS =
        "\23\uffff}>";
    static final String[] DFA91_transitionS = {
            "\1\1\127\uffff\1\1\25\uffff\1\1\2\uffff\1\1\7\uffff\1\22\1\1"+
            "\5\uffff\22\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA91_eot = DFA.unpackEncodedString(DFA91_eotS);
    static final short[] DFA91_eof = DFA.unpackEncodedString(DFA91_eofS);
    static final char[] DFA91_min = DFA.unpackEncodedStringToUnsignedChars(DFA91_minS);
    static final char[] DFA91_max = DFA.unpackEncodedStringToUnsignedChars(DFA91_maxS);
    static final short[] DFA91_accept = DFA.unpackEncodedString(DFA91_acceptS);
    static final short[] DFA91_special = DFA.unpackEncodedString(DFA91_specialS);
    static final short[][] DFA91_transition;

    static {
        int numStates = DFA91_transitionS.length;
        DFA91_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA91_transition[i] = DFA.unpackEncodedString(DFA91_transitionS[i]);
        }
    }

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = DFA91_eot;
            this.eof = DFA91_eof;
            this.min = DFA91_min;
            this.max = DFA91_max;
            this.accept = DFA91_accept;
            this.special = DFA91_special;
            this.transition = DFA91_transition;
        }
        public String getDescription() {
            return "571:8: ( annotationTypeElementDeclarations )?";
        }
    }
    static final String DFA92_eotS =
        "\24\uffff";
    static final String DFA92_eofS =
        "\1\1\23\uffff";
    static final String DFA92_minS =
        "\1\12\23\uffff";
    static final String DFA92_maxS =
        "\1\u00a4\23\uffff";
    static final String DFA92_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\20\uffff";
    static final String DFA92_specialS =
        "\24\uffff}>";
    static final String[] DFA92_transitionS = {
            "\1\3\127\uffff\1\3\25\uffff\1\3\2\uffff\1\3\7\uffff\1\1\1\3"+
            "\5\uffff\22\3\10\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "()* loopback of 575:39: ( annotationTypeElementDeclaration )*";
        }
    }
    static final String DFA93_eotS =
        "\24\uffff";
    static final String DFA93_eofS =
        "\24\uffff";
    static final String DFA93_minS =
        "\1\12\4\uffff\1\142\16\uffff";
    static final String DFA93_maxS =
        "\1\u00a4\4\uffff\1\u0084\16\uffff";
    static final String DFA93_acceptS =
        "\1\uffff\1\2\5\uffff\1\1\14\uffff";
    static final String DFA93_specialS =
        "\24\uffff}>";
    static final String[] DFA93_transitionS = {
            "\1\1\127\uffff\1\1\25\uffff\1\7\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\7\10\1\10\uffff\1\5",
            "",
            "",
            "",
            "",
            "\1\7\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "()* loopback of 579:4: ( modifier )*";
        }
    }
    static final String DFA94_eotS =
        "\25\uffff";
    static final String DFA94_eofS =
        "\1\2\24\uffff";
    static final String DFA94_minS =
        "\1\12\24\uffff";
    static final String DFA94_maxS =
        "\1\u00a4\24\uffff";
    static final String DFA94_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA94_specialS =
        "\25\uffff}>";
    static final String[] DFA94_transitionS = {
            "\1\2\127\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "584:23: ( ';' )?";
        }
    }
    static final String DFA95_eotS =
        "\25\uffff";
    static final String DFA95_eofS =
        "\1\2\24\uffff";
    static final String DFA95_minS =
        "\1\12\24\uffff";
    static final String DFA95_maxS =
        "\1\u00a4\24\uffff";
    static final String DFA95_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA95_specialS =
        "\25\uffff}>";
    static final String[] DFA95_transitionS = {
            "\1\2\127\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA95_eot = DFA.unpackEncodedString(DFA95_eotS);
    static final short[] DFA95_eof = DFA.unpackEncodedString(DFA95_eofS);
    static final char[] DFA95_min = DFA.unpackEncodedStringToUnsignedChars(DFA95_minS);
    static final char[] DFA95_max = DFA.unpackEncodedStringToUnsignedChars(DFA95_maxS);
    static final short[] DFA95_accept = DFA.unpackEncodedString(DFA95_acceptS);
    static final short[] DFA95_special = DFA.unpackEncodedString(DFA95_specialS);
    static final short[][] DFA95_transition;

    static {
        int numStates = DFA95_transitionS.length;
        DFA95_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA95_transition[i] = DFA.unpackEncodedString(DFA95_transitionS[i]);
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = DFA95_eot;
            this.eof = DFA95_eof;
            this.min = DFA95_min;
            this.max = DFA95_max;
            this.accept = DFA95_accept;
            this.special = DFA95_special;
            this.transition = DFA95_transition;
        }
        public String getDescription() {
            return "585:27: ( ';' )?";
        }
    }
    static final String DFA96_eotS =
        "\25\uffff";
    static final String DFA96_eofS =
        "\1\2\24\uffff";
    static final String DFA96_minS =
        "\1\12\24\uffff";
    static final String DFA96_maxS =
        "\1\u00a4\24\uffff";
    static final String DFA96_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA96_specialS =
        "\25\uffff}>";
    static final String[] DFA96_transitionS = {
            "\1\2\127\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "586:22: ( ';' )?";
        }
    }
    static final String DFA97_eotS =
        "\25\uffff";
    static final String DFA97_eofS =
        "\1\2\24\uffff";
    static final String DFA97_minS =
        "\1\12\24\uffff";
    static final String DFA97_maxS =
        "\1\u00a4\24\uffff";
    static final String DFA97_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA97_specialS =
        "\25\uffff}>";
    static final String[] DFA97_transitionS = {
            "\1\2\127\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA97_eot = DFA.unpackEncodedString(DFA97_eotS);
    static final short[] DFA97_eof = DFA.unpackEncodedString(DFA97_eofS);
    static final char[] DFA97_min = DFA.unpackEncodedStringToUnsignedChars(DFA97_minS);
    static final char[] DFA97_max = DFA.unpackEncodedStringToUnsignedChars(DFA97_maxS);
    static final short[] DFA97_accept = DFA.unpackEncodedString(DFA97_acceptS);
    static final short[] DFA97_special = DFA.unpackEncodedString(DFA97_specialS);
    static final short[][] DFA97_transition;

    static {
        int numStates = DFA97_transitionS.length;
        DFA97_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA97_transition[i] = DFA.unpackEncodedString(DFA97_transitionS[i]);
        }
    }

    class DFA97 extends DFA {

        public DFA97(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = DFA97_eot;
            this.eof = DFA97_eof;
            this.min = DFA97_min;
            this.max = DFA97_max;
            this.accept = DFA97_accept;
            this.special = DFA97_special;
            this.transition = DFA97_transition;
        }
        public String getDescription() {
            return "587:32: ( ';' )?";
        }
    }
    static final String DFA101_eotS =
        "\61\uffff";
    static final String DFA101_eofS =
        "\61\uffff";
    static final String DFA101_minS =
        "\1\12\60\uffff";
    static final String DFA101_maxS =
        "\1\u00c8\60\uffff";
    static final String DFA101_acceptS =
        "\1\uffff\1\2\1\1\56\uffff";
    static final String DFA101_specialS =
        "\61\uffff}>";
    static final String[] DFA101_transitionS = {
            "\1\2\127\uffff\7\2\15\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\1\2\2\4\uffff\22\2\1\uffff\2\2\2\uffff\4"+
            "\2\1\uffff\1\2\1\uffff\1\2\1\uffff\4\2\1\uffff\5\2\2\uffff\2"+
            "\2\14\uffff\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "()* loopback of 610:8: ( blockStatement )*";
        }
    }
    static final String DFA102_eotS =
        "\162\uffff";
    static final String DFA102_eofS =
        "\162\uffff";
    static final String DFA102_minS =
        "\2\12\3\142\6\uffff\1\12\46\uffff\2\0\16\uffff\1\0\1\uffff\3\0\30"+
        "\uffff\1\0\22\uffff";
    static final String DFA102_maxS =
        "\1\u00c8\1\u00a4\1\u0084\1\u00c5\1\u0087\6\uffff\1\u00a4\46\uffff"+
        "\2\0\16\uffff\1\0\1\uffff\3\0\30\uffff\1\0\22\uffff";
    static final String DFA102_acceptS =
        "\5\uffff\1\2\14\uffff\1\3\35\uffff\1\1\101\uffff";
    static final String DFA102_specialS =
        "\62\uffff\1\0\1\1\16\uffff\1\2\1\uffff\1\3\1\4\1\5\30\uffff\1\6"+
        "\22\uffff}>";
    static final String[] DFA102_transitionS = {
            "\1\5\127\uffff\1\3\6\22\15\uffff\1\22\1\uffff\1\5\2\uffff\1"+
            "\5\2\uffff\1\22\3\uffff\1\22\1\uffff\1\5\1\22\4\uffff\4\5\1"+
            "\1\1\5\1\13\3\5\10\4\1\uffff\2\22\2\uffff\3\22\1\2\1\uffff\1"+
            "\22\1\uffff\1\22\1\uffff\4\22\1\uffff\5\22\2\uffff\2\22\14\uffff"+
            "\5\22",
            "\1\5\127\uffff\1\60\25\uffff\1\5\2\uffff\1\5\10\uffff\1\5\5"+
            "\uffff\4\5\1\62\5\5\10\60\10\uffff\1\63",
            "\1\102\41\uffff\1\5",
            "\1\60\23\uffff\1\22\2\uffff\1\105\1\22\3\uffff\1\104\1\uffff"+
            "\2\22\5\uffff\1\106\1\uffff\1\22\22\uffff\1\22\1\uffff\1\22"+
            "\10\uffff\1\22\16\uffff\20\22",
            "\1\60\26\uffff\1\22\15\uffff\1\137",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\5\155\uffff\1\5\2\uffff\1\5\10\uffff\1\5\5\uffff\12\5\12"+
            "\uffff\1\22\5\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA102_eot = DFA.unpackEncodedString(DFA102_eotS);
    static final short[] DFA102_eof = DFA.unpackEncodedString(DFA102_eofS);
    static final char[] DFA102_min = DFA.unpackEncodedStringToUnsignedChars(DFA102_minS);
    static final char[] DFA102_max = DFA.unpackEncodedStringToUnsignedChars(DFA102_maxS);
    static final short[] DFA102_accept = DFA.unpackEncodedString(DFA102_acceptS);
    static final short[] DFA102_special = DFA.unpackEncodedString(DFA102_specialS);
    static final short[][] DFA102_transition;

    static {
        int numStates = DFA102_transitionS.length;
        DFA102_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA102_transition[i] = DFA.unpackEncodedString(DFA102_transitionS[i]);
        }
    }

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = DFA102_eot;
            this.eof = DFA102_eof;
            this.min = DFA102_min;
            this.max = DFA102_max;
            this.accept = DFA102_accept;
            this.special = DFA102_special;
            this.transition = DFA102_transition;
        }
        public String getDescription() {
            return "613:1: blockStatement : ( localVariableDeclaration | classOrInterfaceDeclaration | statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA102_50 = input.LA(1);

                         
                        int index102_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_Java()) ) {s = 48;}

                        else if ( (synpred147_Java()) ) {s = 5;}

                         
                        input.seek(index102_50);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA102_51 = input.LA(1);

                         
                        int index102_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_Java()) ) {s = 48;}

                        else if ( (synpred147_Java()) ) {s = 5;}

                         
                        input.seek(index102_51);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA102_66 = input.LA(1);

                         
                        int index102_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_Java()) ) {s = 48;}

                        else if ( (synpred147_Java()) ) {s = 5;}

                         
                        input.seek(index102_66);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA102_68 = input.LA(1);

                         
                        int index102_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index102_68);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA102_69 = input.LA(1);

                         
                        int index102_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index102_69);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA102_70 = input.LA(1);

                         
                        int index102_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index102_70);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA102_95 = input.LA(1);

                         
                        int index102_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index102_95);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 102, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA110_eotS =
        "\75\uffff";
    static final String DFA110_eofS =
        "\75\uffff";
    static final String DFA110_minS =
        "\1\142\35\uffff\1\166\36\uffff";
    static final String DFA110_maxS =
        "\1\u00c8\35\uffff\1\u00c5\36\uffff";
    static final String DFA110_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\22\uffff\1\20\32\uffff";
    static final String DFA110_specialS =
        "\75\uffff}>";
    static final String[] DFA110_transitionS = {
            "\1\36\6\17\15\uffff\1\16\7\uffff\1\17\3\uffff\1\1\2\uffff\1"+
            "\17\12\uffff\1\11\3\uffff\10\17\1\uffff\2\17\2\uffff\3\17\2"+
            "\uffff\1\2\1\uffff\1\3\1\uffff\1\4\1\5\1\6\1\7\1\uffff\1\10"+
            "\1\12\1\13\1\14\1\15\2\uffff\2\17\14\uffff\5\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\17\2\uffff\2\17\3\uffff\1\17\1\uffff\2\17\5\uffff\1\17\1"+
            "\uffff\1\17\22\uffff\1\17\1\uffff\1\17\10\uffff\1\42\16\uffff"+
            "\20\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "623:1: statement : ( block | lc= 'assert' expression ( ':' expression )? ';' -> ^( ASSERT[$lc] expression ( expression )? ) | lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> ^( IF[$lc] parExpression statement ( statement )? ) | lc= 'for' '(' forControl ')' statement -> ^( FOR[$lc] forControl statement ) | lc= 'while' parExpression statement -> ^( WHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'do' statement 'while' parExpression ';' -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) ) | lc= 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups ) | lc= 'synchronized' parExpression block -> ^( SYNCHRONIZED[$lc] parExpression block ) | lc= 'return' ( expression )? ';' -> ^( RETURN[$lc] ( expression )? ) | lc= 'throw' expression ';' -> ^( THROW[$lc] expression ) | lc= 'break' ( Identifier )? ';' -> ^( BREAK[$lc] ( Identifier )? ) | lc= 'continue' ( Identifier )? ';' -> ^( CONTINUE[$lc] ( Identifier )? ) | ';' -> ^( BLOCK ) | statementExpression ';' -> statementExpression | lc= Identifier ':' statement -> ^( LABEL[$lc] Identifier statement ) );";
        }
    }
    static final String DFA107_eotS =
        "\25\uffff";
    static final String DFA107_eofS =
        "\25\uffff";
    static final String DFA107_minS =
        "\1\142\24\uffff";
    static final String DFA107_maxS =
        "\1\u00c8\24\uffff";
    static final String DFA107_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA107_specialS =
        "\25\uffff}>";
    static final String[] DFA107_transitionS = {
            "\7\1\15\uffff\1\24\7\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "637:19: ( expression )?";
        }
    }
    static final String DFA111_eotS =
        "\67\uffff";
    static final String DFA111_eofS =
        "\1\1\66\uffff";
    static final String DFA111_minS =
        "\1\12\66\uffff";
    static final String DFA111_maxS =
        "\1\u00c8\66\uffff";
    static final String DFA111_acceptS =
        "\1\uffff\1\2\64\uffff\1\1";
    static final String DFA111_specialS =
        "\67\uffff}>";
    static final String[] DFA111_transitionS = {
            "\1\1\127\uffff\7\1\15\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff"+
            "\1\1\3\uffff\4\1\4\uffff\22\1\1\uffff\2\1\2\uffff\6\1\1\uffff"+
            "\14\1\1\66\3\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "()* loopback of 647:16: ( catchClause )*";
        }
    }
    static final String DFA114_eotS =
        "\64\uffff";
    static final String DFA114_eofS =
        "\1\1\63\uffff";
    static final String DFA114_minS =
        "\1\12\63\uffff";
    static final String DFA114_maxS =
        "\1\u00c8\63\uffff";
    static final String DFA114_acceptS =
        "\1\uffff\1\2\3\uffff\1\1\56\uffff";
    static final String DFA114_specialS =
        "\64\uffff}>";
    static final String[] DFA114_transitionS = {
            "\1\5\127\uffff\7\5\15\uffff\1\5\1\uffff\1\5\2\uffff\1\5\2\uffff"+
            "\1\5\3\uffff\1\5\1\1\2\5\4\uffff\22\5\1\uffff\2\5\2\uffff\4"+
            "\5\1\1\1\5\1\uffff\1\5\1\uffff\4\5\1\uffff\5\5\1\uffff\1\1\2"+
            "\5\14\uffff\5\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_eotS);
    static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_eofS);
    static final char[] DFA114_min = DFA.unpackEncodedStringToUnsignedChars(DFA114_minS);
    static final char[] DFA114_max = DFA.unpackEncodedStringToUnsignedChars(DFA114_maxS);
    static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_acceptS);
    static final short[] DFA114_special = DFA.unpackEncodedString(DFA114_specialS);
    static final short[][] DFA114_transition;

    static {
        int numStates = DFA114_transitionS.length;
        DFA114_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA114_transition[i] = DFA.unpackEncodedString(DFA114_transitionS[i]);
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = DFA114_eot;
            this.eof = DFA114_eof;
            this.min = DFA114_min;
            this.max = DFA114_max;
            this.accept = DFA114_accept;
            this.special = DFA114_special;
            this.transition = DFA114_transition;
        }
        public String getDescription() {
            return "()* loopback of 663:16: ( blockStatement )*";
        }
    }
    static final String DFA115_eotS =
        "\27\uffff";
    static final String DFA115_eofS =
        "\27\uffff";
    static final String DFA115_minS =
        "\1\u00a5\1\142\1\uffff\1\0\23\uffff";
    static final String DFA115_maxS =
        "\1\u00b5\1\u00c8\1\uffff\1\0\23\uffff";
    static final String DFA115_acceptS =
        "\2\uffff\1\3\1\uffff\1\1\21\uffff\1\2";
    static final String DFA115_specialS =
        "\3\uffff\1\0\23\uffff}>";
    static final String[] DFA115_transitionS = {
            "\1\2\17\uffff\1\1",
            "\1\3\6\4\25\uffff\1\4\6\uffff\1\4\16\uffff\10\4\1\uffff\2\4"+
            "\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_eotS);
    static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_eofS);
    static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_minS);
    static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_maxS);
    static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_acceptS);
    static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_specialS);
    static final short[][] DFA115_transition;

    static {
        int numStates = DFA115_transitionS.length;
        DFA115_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA115_transition[i] = DFA.unpackEncodedString(DFA115_transitionS[i]);
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;
        }
        public String getDescription() {
            return "666:1: switchLabel : (lc= 'case' constantExpression ':' -> ^( CASE[$lc] constantExpression ) | lc= 'case' enumConstantName ':' -> ^( CASE[$lc] enumConstantName ) | lc= 'default' ':' -> ^( DEFAULT ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA115_3 = input.LA(1);

                         
                        int index115_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 4;}

                        else if ( (synpred176_Java()) ) {s = 22;}

                         
                        input.seek(index115_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 115, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA120_eotS =
        "\u0085\uffff";
    static final String DFA120_eofS =
        "\u0085\uffff";
    static final String DFA120_minS =
        "\5\142\22\uffff\10\142\1\166\30\uffff\1\u0088\1\uffff\1\166\21\0"+
        "\2\uffff\3\0\23\uffff\1\0\1\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA120_maxS =
        "\1\u00c8\1\u00a4\1\142\1\u00c5\1\u0087\22\uffff\2\u0087\1\u00a4"+
        "\1\142\1\u00a4\3\u00c8\1\u00a7\30\uffff\1\u0088\1\uffff\1\u00a7"+
        "\21\0\2\uffff\3\0\23\uffff\1\0\1\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA120_acceptS =
        "\5\uffff\1\2\164\uffff\1\1\12\uffff";
    static final String DFA120_specialS =
        "\73\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\2\uffff\1\21\1\22\1\23\23\uffff\1\24\1\uffff"+
        "\1\25\30\uffff\1\26\5\uffff}>";
    static final String[] DFA120_transitionS = {
            "\1\3\6\5\15\uffff\1\5\7\uffff\1\5\6\uffff\1\5\10\uffff\1\1\5"+
            "\uffff\10\4\1\uffff\2\5\2\uffff\3\5\1\2\21\uffff\2\5\14\uffff"+
            "\5\5",
            "\1\27\53\uffff\1\31\5\uffff\10\30\10\uffff\1\32",
            "\1\33",
            "\1\37\23\uffff\1\5\2\uffff\1\35\1\5\3\uffff\1\34\3\5\5\uffff"+
            "\1\36\1\uffff\1\5\22\uffff\1\5\1\uffff\1\5\27\uffff\20\5",
            "\1\72\26\uffff\1\5\15\uffff\1\70",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\76\26\uffff\1\74\4\uffff\1\73\10\uffff\1\75",
            "\1\100\44\uffff\1\77",
            "\1\101\53\uffff\1\103\5\uffff\10\102\10\uffff\1\104",
            "\1\105",
            "\1\110\26\uffff\1\106\24\uffff\1\112\5\uffff\10\111\2\uffff"+
            "\1\107\5\uffff\1\113",
            "\1\116\6\5\25\uffff\1\5\6\uffff\1\5\3\uffff\1\5\12\uffff\10"+
            "\117\1\120\2\5\2\uffff\3\5\22\uffff\2\5\14\uffff\5\5",
            "\1\144\30\uffff\1\5\2\uffff\1\5\36\uffff\1\5\52\uffff\1\5",
            "\7\5\25\uffff\1\5\6\uffff\1\5\2\uffff\1\146\13\uffff\10\5\1"+
            "\uffff\2\5\2\uffff\3\5\22\uffff\2\5\14\uffff\5\5",
            "\1\5\10\uffff\1\5\7\uffff\1\5\1\uffff\1\5\35\uffff\1\172",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\177",
            "",
            "\1\5\10\uffff\1\5\7\uffff\1\5\1\uffff\1\5\35\uffff\1\172",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA120_eot = DFA.unpackEncodedString(DFA120_eotS);
    static final short[] DFA120_eof = DFA.unpackEncodedString(DFA120_eofS);
    static final char[] DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_minS);
    static final char[] DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_maxS);
    static final short[] DFA120_accept = DFA.unpackEncodedString(DFA120_acceptS);
    static final short[] DFA120_special = DFA.unpackEncodedString(DFA120_specialS);
    static final short[][] DFA120_transition;

    static {
        int numStates = DFA120_transitionS.length;
        DFA120_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA120_transition[i] = DFA.unpackEncodedString(DFA120_transitionS[i]);
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;
        }
        public String getDescription() {
            return "676:1: forControl options {k=3; } : ( forVarControl -> ^( FOREACH forVarControl ) | ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )? -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA120_59 = input.LA(1);

                         
                        int index120_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_59);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA120_60 = input.LA(1);

                         
                        int index120_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_60);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA120_61 = input.LA(1);

                         
                        int index120_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_61);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA120_62 = input.LA(1);

                         
                        int index120_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_62);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA120_63 = input.LA(1);

                         
                        int index120_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_63);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA120_64 = input.LA(1);

                         
                        int index120_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_64);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA120_65 = input.LA(1);

                         
                        int index120_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_65);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA120_66 = input.LA(1);

                         
                        int index120_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_66);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA120_67 = input.LA(1);

                         
                        int index120_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_67);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA120_68 = input.LA(1);

                         
                        int index120_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_68);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA120_69 = input.LA(1);

                         
                        int index120_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_69);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA120_70 = input.LA(1);

                         
                        int index120_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_70);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA120_71 = input.LA(1);

                         
                        int index120_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_71);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA120_72 = input.LA(1);

                         
                        int index120_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_72);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA120_73 = input.LA(1);

                         
                        int index120_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_73);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA120_74 = input.LA(1);

                         
                        int index120_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_74);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA120_75 = input.LA(1);

                         
                        int index120_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_75);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA120_78 = input.LA(1);

                         
                        int index120_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_78);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA120_79 = input.LA(1);

                         
                        int index120_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_79);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA120_80 = input.LA(1);

                         
                        int index120_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_80);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA120_100 = input.LA(1);

                         
                        int index120_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_100);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA120_102 = input.LA(1);

                         
                        int index120_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_102);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA120_127 = input.LA(1);

                         
                        int index120_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index120_127);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 120, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA117_eotS =
        "\27\uffff";
    static final String DFA117_eofS =
        "\27\uffff";
    static final String DFA117_minS =
        "\1\142\26\uffff";
    static final String DFA117_maxS =
        "\1\u00c8\26\uffff";
    static final String DFA117_acceptS =
        "\1\uffff\1\1\24\uffff\1\2";
    static final String DFA117_specialS =
        "\27\uffff}>";
    static final String[] DFA117_transitionS = {
            "\7\1\15\uffff\1\26\7\uffff\1\1\6\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\10\1\1\uffff\2\1\2\uffff\4\1\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "679:4: ( forInit )?";
        }
    }
    static final String DFA118_eotS =
        "\25\uffff";
    static final String DFA118_eofS =
        "\25\uffff";
    static final String DFA118_minS =
        "\1\142\24\uffff";
    static final String DFA118_maxS =
        "\1\u00c8\24\uffff";
    static final String DFA118_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA118_specialS =
        "\25\uffff}>";
    static final String[] DFA118_transitionS = {
            "\7\1\15\uffff\1\24\7\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "679:19: (fc= expression )?";
        }
    }
    static final String DFA119_eotS =
        "\25\uffff";
    static final String DFA119_eofS =
        "\25\uffff";
    static final String DFA119_minS =
        "\1\142\24\uffff";
    static final String DFA119_maxS =
        "\1\u00c8\24\uffff";
    static final String DFA119_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA119_specialS =
        "\25\uffff}>";
    static final String[] DFA119_transitionS = {
            "\7\1\25\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff\2\1\1\24"+
            "\1\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "679:38: (fu= forUpdate )?";
        }
    }
    static final String DFA122_eotS =
        "\66\uffff";
    static final String DFA122_eofS =
        "\3\uffff\1\5\62\uffff";
    static final String DFA122_minS =
        "\1\142\2\uffff\2\142\21\uffff\3\0\32\uffff\1\0\2\uffff";
    static final String DFA122_maxS =
        "\1\u00c8\2\uffff\1\u00c5\1\u0087\21\uffff\3\0\32\uffff\1\0\2\uffff";
    static final String DFA122_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\60\uffff";
    static final String DFA122_specialS =
        "\26\uffff\1\0\1\1\1\2\32\uffff\1\3\2\uffff}>";
    static final String[] DFA122_transitionS = {
            "\1\3\6\5\25\uffff\1\5\6\uffff\1\5\10\uffff\1\1\5\uffff\10\4"+
            "\1\uffff\2\5\2\uffff\3\5\1\1\21\uffff\2\5\14\uffff\5\5",
            "",
            "",
            "\1\1\23\uffff\1\5\2\uffff\1\27\1\5\3\uffff\1\26\3\5\5\uffff"+
            "\1\30\1\uffff\1\5\22\uffff\1\5\1\uffff\1\5\27\uffff\20\5",
            "\1\1\26\uffff\1\5\15\uffff\1\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "682:1: forInit : ( ( variableModifier )* type variableDeclarators -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) | expressionList );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA122_22 = input.LA(1);

                         
                        int index122_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index122_22);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA122_23 = input.LA(1);

                         
                        int index122_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index122_23);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA122_24 = input.LA(1);

                         
                        int index122_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index122_24);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA122_51 = input.LA(1);

                         
                        int index122_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index122_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA125_eotS =
        "\162\uffff";
    static final String DFA125_eofS =
        "\1\14\161\uffff";
    static final String DFA125_minS =
        "\1\166\13\0\146\uffff";
    static final String DFA125_maxS =
        "\1\u00bc\13\0\146\uffff";
    static final String DFA125_acceptS =
        "\14\uffff\1\15\31\uffff\1\1\1\uffff\1\2\1\uffff\1\3\1\uffff\1\4"+
        "\1\uffff\1\5\23\uffff\1\6\23\uffff\1\7\23\uffff\1\10\1\uffff\1\11"+
        "\1\uffff\1\12\1\uffff\1\13\1\14";
    static final String DFA125_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\146\uffff}>";
    static final String[] DFA125_transitionS = {
            "\1\14\3\uffff\1\4\3\uffff\1\12\1\14\1\13\2\uffff\1\14\4\uffff"+
            "\1\14\1\1\25\uffff\1\14\7\uffff\1\14\16\uffff\1\2\1\3\1\5\1"+
            "\6\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "715:3: ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA125_1 = input.LA(1);

                         
                        int index125_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_Java()) ) {s = 38;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index125_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA125_2 = input.LA(1);

                         
                        int index125_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_Java()) ) {s = 40;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index125_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA125_3 = input.LA(1);

                         
                        int index125_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Java()) ) {s = 42;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index125_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA125_4 = input.LA(1);

                         
                        int index125_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_Java()) ) {s = 44;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index125_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA125_5 = input.LA(1);

                         
                        int index125_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred190_Java()) ) {s = 46;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index125_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA125_6 = input.LA(1);

                         
                        int index125_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index125_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA125_7 = input.LA(1);

                         
                        int index125_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred192_Java()) ) {s = 86;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index125_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA125_8 = input.LA(1);

                         
                        int index125_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_Java()) ) {s = 106;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index125_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA125_9 = input.LA(1);

                         
                        int index125_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_Java()) ) {s = 108;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index125_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA125_10 = input.LA(1);

                         
                        int index125_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195_Java()) ) {s = 110;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index125_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA125_11 = input.LA(1);

                         
                        int index125_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred196_Java()) ) {s = 112;}

                        else if ( (synpred197_Java()) ) {s = 113;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index125_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 125, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA126_eotS =
        "\24\uffff";
    static final String DFA126_eofS =
        "\1\2\23\uffff";
    static final String DFA126_minS =
        "\1\166\23\uffff";
    static final String DFA126_maxS =
        "\1\u00bc\23\uffff";
    static final String DFA126_acceptS =
        "\1\uffff\1\1\1\2\21\uffff";
    static final String DFA126_specialS =
        "\24\uffff}>";
    static final String[] DFA126_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\1\2\uffff\1\2\7\uffff\1\2\16\uffff\7\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "734:6: ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression )";
        }
    }
    static final String DFA127_eotS =
        "\25\uffff";
    static final String DFA127_eofS =
        "\1\2\24\uffff";
    static final String DFA127_minS =
        "\1\166\24\uffff";
    static final String DFA127_maxS =
        "\1\u00bd\24\uffff";
    static final String DFA127_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA127_specialS =
        "\25\uffff}>";
    static final String[] DFA127_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\7\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "742:6: ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression )";
        }
    }
    static final String DFA128_eotS =
        "\26\uffff";
    static final String DFA128_eofS =
        "\1\2\25\uffff";
    static final String DFA128_minS =
        "\1\166\25\uffff";
    static final String DFA128_maxS =
        "\1\u00be\25\uffff";
    static final String DFA128_acceptS =
        "\1\uffff\1\1\1\2\23\uffff";
    static final String DFA128_specialS =
        "\26\uffff}>";
    static final String[] DFA128_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\10\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "750:6: ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression )";
        }
    }
    static final String DFA129_eotS =
        "\27\uffff";
    static final String DFA129_eofS =
        "\1\2\26\uffff";
    static final String DFA129_minS =
        "\1\166\26\uffff";
    static final String DFA129_maxS =
        "\1\u00bf\26\uffff";
    static final String DFA129_acceptS =
        "\1\uffff\1\1\1\2\24\uffff";
    static final String DFA129_specialS =
        "\27\uffff}>";
    static final String[] DFA129_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\11\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "758:9: ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression )";
        }
    }
    static final String DFA130_eotS =
        "\30\uffff";
    static final String DFA130_eofS =
        "\1\2\27\uffff";
    static final String DFA130_minS =
        "\1\166\27\uffff";
    static final String DFA130_maxS =
        "\1\u00c0\27\uffff";
    static final String DFA130_acceptS =
        "\1\uffff\1\1\1\2\25\uffff";
    static final String DFA130_specialS =
        "\30\uffff}>";
    static final String[] DFA130_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\12\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "766:5: ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression )";
        }
    }
    static final String DFA131_eotS =
        "\31\uffff";
    static final String DFA131_eofS =
        "\1\2\30\uffff";
    static final String DFA131_minS =
        "\1\166\30\uffff";
    static final String DFA131_maxS =
        "\1\u00c0\30\uffff";
    static final String DFA131_acceptS =
        "\1\uffff\1\1\1\2\26\uffff";
    static final String DFA131_specialS =
        "\31\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\1\1\1\uffff\1\2\4\uffff\2\2\22"+
            "\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\13\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "774:5: ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression )";
        }
    }
    static final String DFA132_eotS =
        "\33\uffff";
    static final String DFA132_eofS =
        "\1\3\32\uffff";
    static final String DFA132_minS =
        "\1\166\32\uffff";
    static final String DFA132_maxS =
        "\1\u00c2\32\uffff";
    static final String DFA132_acceptS =
        "\1\uffff\1\1\1\2\1\3\27\uffff";
    static final String DFA132_specialS =
        "\33\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\4\3\1\uffff\1\3\4\uffff\2\3\22\uffff"+
            "\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\13\3\1\1\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "782:5: ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression )";
        }
    }
    static final String DFA133_eotS =
        "\34\uffff";
    static final String DFA133_eofS =
        "\1\2\33\uffff";
    static final String DFA133_minS =
        "\1\166\33\uffff";
    static final String DFA133_maxS =
        "\1\u00c3\33\uffff";
    static final String DFA133_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA133_specialS =
        "\34\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\4\2\1\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\15\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "791:5: ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression )";
        }
    }
    static final String DFA134_eotS =
        "\105\uffff";
    static final String DFA134_eofS =
        "\1\3\104\uffff";
    static final String DFA134_minS =
        "\1\166\2\142\32\uffff\1\0\47\uffff";
    static final String DFA134_maxS =
        "\1\u00c3\2\u00c8\32\uffff\1\0\47\uffff";
    static final String DFA134_acceptS =
        "\3\uffff\1\5\30\uffff\1\1\1\uffff\1\2\21\uffff\1\3\1\uffff\1\4\22"+
        "\uffff";
    static final String DFA134_specialS =
        "\35\uffff\1\0\47\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\4\uffff"+
            "\2\3\22\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3",
            "\7\36\25\uffff\1\35\6\uffff\1\36\3\uffff\1\34\12\uffff\10\36"+
            "\1\uffff\2\36\2\uffff\3\36\22\uffff\2\36\14\uffff\5\36",
            "\7\62\25\uffff\1\62\1\uffff\1\3\4\uffff\1\62\3\uffff\1\60\12"+
            "\uffff\10\62\1\uffff\2\62\2\uffff\3\62\22\uffff\2\62\14\uffff"+
            "\5\62",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "799:5: ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA134_29 = input.LA(1);

                         
                        int index134_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_Java()) ) {s = 30;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index134_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA138_eotS =
        "\107\uffff";
    static final String DFA138_eofS =
        "\1\3\106\uffff";
    static final String DFA138_minS =
        "\1\166\2\142\31\uffff\1\0\23\uffff\1\0\26\uffff";
    static final String DFA138_maxS =
        "\1\u00c3\2\u00c8\31\uffff\1\0\23\uffff\1\0\26\uffff";
    static final String DFA138_acceptS =
        "\3\uffff\1\3\101\uffff\1\1\1\2";
    static final String DFA138_specialS =
        "\34\uffff\1\0\23\uffff\1\1\26\uffff}>";
    static final String[] DFA138_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\4\uffff"+
            "\2\3\22\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3",
            "\7\3\25\uffff\1\34\6\uffff\1\3\3\uffff\1\3\12\uffff\10\3\1"+
            "\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "\7\3\25\uffff\1\3\1\uffff\1\60\4\uffff\1\3\3\uffff\1\3\12\uffff"+
            "\10\3\1\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "810:5: ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA138_28 = input.LA(1);

                         
                        int index138_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred213_Java()) ) {s = 69;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index138_28);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA138_48 = input.LA(1);

                         
                        int index138_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred213_Java()) ) {s = 69;}

                        else if ( (synpred215_Java()) ) {s = 70;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index138_48);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 138, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA136_eotS =
        "\106\uffff";
    static final String DFA136_eofS =
        "\1\3\105\uffff";
    static final String DFA136_minS =
        "\1\166\2\142\32\uffff\1\0\23\uffff\1\0\24\uffff";
    static final String DFA136_maxS =
        "\1\u00c3\2\u00c8\32\uffff\1\0\23\uffff\1\0\24\uffff";
    static final String DFA136_acceptS =
        "\3\uffff\1\2\101\uffff\1\1";
    static final String DFA136_specialS =
        "\35\uffff\1\0\23\uffff\1\1\24\uffff}>";
    static final String[] DFA136_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\4\uffff"+
            "\2\3\22\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3",
            "\7\3\25\uffff\1\35\6\uffff\1\3\3\uffff\1\3\12\uffff\10\3\1"+
            "\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "\7\3\25\uffff\1\3\1\uffff\1\61\4\uffff\1\3\3\uffff\1\3\12\uffff"+
            "\10\3\1\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "()+ loopback of 811:6: ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA136_29 = input.LA(1);

                         
                        int index136_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred212_Java()) ) {s = 69;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index136_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA136_49 = input.LA(1);

                         
                        int index136_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred212_Java()) ) {s = 69;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index136_49);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA137_eotS =
        "\62\uffff";
    static final String DFA137_eofS =
        "\1\1\61\uffff";
    static final String DFA137_minS =
        "\1\166\1\uffff\1\142\32\uffff\1\0\24\uffff";
    static final String DFA137_maxS =
        "\1\u00c3\1\uffff\1\u00c8\32\uffff\1\0\24\uffff";
    static final String DFA137_acceptS =
        "\1\uffff\1\2\57\uffff\1\1";
    static final String DFA137_specialS =
        "\35\uffff\1\0\24\uffff}>";
    static final String[] DFA137_transitionS = {
            "\1\1\3\uffff\1\1\3\uffff\2\1\1\2\1\1\1\uffff\1\1\4\uffff\2\1"+
            "\22\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\16\1",
            "",
            "\7\1\25\uffff\1\1\1\uffff\1\35\4\uffff\1\1\3\uffff\1\1\12\uffff"+
            "\10\1\1\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "()+ loopback of 813:8: ( '>' '>' '>' additiveExpression )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA137_29 = input.LA(1);

                         
                        int index137_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred214_Java()) ) {s = 49;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index137_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA141_eotS =
        "\104\uffff";
    static final String DFA141_eofS =
        "\1\3\103\uffff";
    static final String DFA141_minS =
        "\1\166\2\142\101\uffff";
    static final String DFA141_maxS =
        "\1\u00c3\2\u00c8\101\uffff";
    static final String DFA141_acceptS =
        "\3\uffff\1\2\31\uffff\1\1\46\uffff";
    static final String DFA141_specialS =
        "\104\uffff}>";
    static final String[] DFA141_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\4\3\1\uffff\1\3\4\uffff\2\3\22\uffff"+
            "\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\1\1\1\2\14\3",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\3\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\3\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "820:5: ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression )";
        }
    }
    static final String DFA140_eotS =
        "\104\uffff";
    static final String DFA140_eofS =
        "\1\1\103\uffff";
    static final String DFA140_minS =
        "\1\166\21\uffff\2\142\60\uffff";
    static final String DFA140_maxS =
        "\1\u00c3\21\uffff\2\u00c8\60\uffff";
    static final String DFA140_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\46\uffff";
    static final String DFA140_specialS =
        "\104\uffff}>";
    static final String[] DFA140_transitionS = {
            "\1\1\3\uffff\1\1\3\uffff\4\1\1\uffff\1\1\4\uffff\2\1\22\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\1\22\1\23\14\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "()+ loopback of 821:6: ( (i+= '+' | i+= '-' ) multiplicativeExpression )+";
        }
    }
    static final String DFA144_eotS =
        "\130\uffff";
    static final String DFA144_eofS =
        "\1\4\127\uffff";
    static final String DFA144_minS =
        "\1\166\3\142\124\uffff";
    static final String DFA144_maxS =
        "\1\u00c3\3\u00c8\124\uffff";
    static final String DFA144_acceptS =
        "\4\uffff\1\2\30\uffff\1\1\72\uffff";
    static final String DFA144_specialS =
        "\130\uffff}>";
    static final String[] DFA144_transitionS = {
            "\1\4\3\uffff\1\1\3\uffff\4\4\1\uffff\1\4\4\uffff\2\4\22\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\16\uffff\2\4\1\2\3\4\1\3\7\4",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\4\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\4\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\4\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "828:5: ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression )";
        }
    }
    static final String DFA143_eotS =
        "\130\uffff";
    static final String DFA143_eofS =
        "\1\1\127\uffff";
    static final String DFA143_minS =
        "\1\166\23\uffff\2\142\3\uffff\1\142\76\uffff";
    static final String DFA143_maxS =
        "\1\u00c3\23\uffff\2\u00c8\3\uffff\1\u00c8\76\uffff";
    static final String DFA143_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\72\uffff";
    static final String DFA143_specialS =
        "\130\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\1\3\uffff\1\24\3\uffff\4\1\1\uffff\1\1\4\uffff\2\1\22\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\2\1\1\25\3\1\1\31\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "()+ loopback of 829:6: ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+";
        }
    }
    static final String DFA145_eotS =
        "\24\uffff";
    static final String DFA145_eofS =
        "\24\uffff";
    static final String DFA145_minS =
        "\1\142\23\uffff";
    static final String DFA145_maxS =
        "\1\u00c8\23\uffff";
    static final String DFA145_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\16\uffff";
    static final String DFA145_specialS =
        "\24\uffff}>";
    static final String[] DFA145_transitionS = {
            "\7\5\25\uffff\1\5\6\uffff\1\5\16\uffff\10\5\1\uffff\2\5\2\uffff"+
            "\3\5\22\uffff\1\1\1\2\14\uffff\1\3\1\4\3\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "834:1: unaryExpression : ( '+' unaryExpression -> unaryExpression | '-' unaryExpression -> ^( NEG unaryExpression ) | '++' unaryExpression -> ^( PREINC unaryExpression ) | '--' unaryExpression -> ^( PREDEC unaryExpression ) | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus );";
        }
    }
    static final String DFA149_eotS =
        "\44\uffff";
    static final String DFA149_eofS =
        "\44\uffff";
    static final String DFA149_minS =
        "\1\142\2\uffff\1\142\14\uffff\23\0\1\uffff";
    static final String DFA149_maxS =
        "\1\u00c8\2\uffff\1\u00c8\14\uffff\23\0\1\uffff";
    static final String DFA149_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\36\uffff\1\3";
    static final String DFA149_specialS =
        "\20\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff}>";
    static final String[] DFA149_transitionS = {
            "\7\4\25\uffff\1\4\6\uffff\1\4\16\uffff\10\4\1\uffff\1\4\1\3"+
            "\2\uffff\3\4\42\uffff\1\1\1\2\1\4",
            "",
            "",
            "\1\40\1\32\1\33\1\34\3\31\25\uffff\1\30\6\uffff\1\41\16\uffff"+
            "\10\20\1\uffff\1\42\1\27\2\uffff\1\36\2\35\22\uffff\1\21\1\22"+
            "\14\uffff\1\23\1\24\1\25\1\26\1\37",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "842:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression -> ^( INV unaryExpression ) | '!' unaryExpression -> ^( NOT unaryExpression ) | castExpression | primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_16 = input.LA(1);

                         
                        int index149_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA149_17 = input.LA(1);

                         
                        int index149_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA149_18 = input.LA(1);

                         
                        int index149_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA149_19 = input.LA(1);

                         
                        int index149_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA149_20 = input.LA(1);

                         
                        int index149_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA149_21 = input.LA(1);

                         
                        int index149_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_21);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA149_22 = input.LA(1);

                         
                        int index149_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_22);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA149_23 = input.LA(1);

                         
                        int index149_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_23);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA149_24 = input.LA(1);

                         
                        int index149_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_24);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA149_25 = input.LA(1);

                         
                        int index149_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_25);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA149_26 = input.LA(1);

                         
                        int index149_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_26);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA149_27 = input.LA(1);

                         
                        int index149_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_27);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA149_28 = input.LA(1);

                         
                        int index149_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_28);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA149_29 = input.LA(1);

                         
                        int index149_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_29);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA149_30 = input.LA(1);

                         
                        int index149_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_30);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA149_31 = input.LA(1);

                         
                        int index149_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_31);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA149_32 = input.LA(1);

                         
                        int index149_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_32);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA149_33 = input.LA(1);

                         
                        int index149_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_33);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA149_34 = input.LA(1);

                         
                        int index149_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA148_eotS =
        "\40\uffff";
    static final String DFA148_eofS =
        "\1\5\37\uffff";
    static final String DFA148_minS =
        "\1\166\37\uffff";
    static final String DFA148_maxS =
        "\1\u00c5\37\uffff";
    static final String DFA148_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\32\uffff";
    static final String DFA148_specialS =
        "\40\uffff}>";
    static final String[] DFA148_transitionS = {
            "\1\5\2\uffff\1\1\1\5\3\uffff\4\5\1\uffff\1\5\3\uffff\1\1\2\5"+
            "\22\uffff\1\5\2\uffff\1\5\7\uffff\1\5\16\uffff\16\5\1\3\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "847:3: ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary )";
        }
    }
    static final String DFA146_eotS =
        "\40\uffff";
    static final String DFA146_eofS =
        "\1\1\37\uffff";
    static final String DFA146_minS =
        "\1\166\37\uffff";
    static final String DFA146_maxS =
        "\1\u00c5\37\uffff";
    static final String DFA146_acceptS =
        "\1\uffff\1\2\34\uffff\1\1\1\uffff";
    static final String DFA146_specialS =
        "\40\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\1\2\uffff\1\36\1\1\3\uffff\4\1\1\uffff\1\1\3\uffff\1\36\2"+
            "\1\22\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\20\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "()+ loopback of 848:4: ( selector )+";
        }
    }
    static final String DFA147_eotS =
        "\36\uffff";
    static final String DFA147_eofS =
        "\1\3\35\uffff";
    static final String DFA147_minS =
        "\1\166\35\uffff";
    static final String DFA147_maxS =
        "\1\u00c5\35\uffff";
    static final String DFA147_acceptS =
        "\1\uffff\1\1\1\2\1\3\32\uffff";
    static final String DFA147_specialS =
        "\36\uffff}>";
    static final String[] DFA147_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\4\3\1\uffff\1\3\4\uffff\2\3\22\uffff"+
            "\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3\1\1\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_eotS);
    static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_eofS);
    static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_minS);
    static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_maxS);
    static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_acceptS);
    static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_specialS);
    static final short[][] DFA147_transition;

    static {
        int numStates = DFA147_transitionS.length;
        DFA147_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA147_transition[i] = DFA.unpackEncodedString(DFA147_transitionS[i]);
        }
    }

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;
        }
        public String getDescription() {
            return "849:4: ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) )";
        }
    }
    static final String DFA150_eotS =
        "\27\uffff";
    static final String DFA150_eofS =
        "\27\uffff";
    static final String DFA150_minS =
        "\1\u009e\1\142\17\uffff\2\0\4\uffff";
    static final String DFA150_maxS =
        "\1\u009e\1\u00c8\17\uffff\2\0\4\uffff";
    static final String DFA150_acceptS =
        "\2\uffff\1\3\22\uffff\1\2\1\1";
    static final String DFA150_specialS =
        "\21\uffff\1\0\1\1\4\uffff}>";
    static final String[] DFA150_transitionS = {
            "\1\1",
            "\1\21\6\2\25\uffff\1\2\6\uffff\1\2\16\uffff\10\22\1\uffff\2"+
            "\2\2\uffff\3\2\22\uffff\2\2\14\uffff\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_eotS);
    static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_eofS);
    static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_minS);
    static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_maxS);
    static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_acceptS);
    static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_specialS);
    static final short[][] DFA150_transition;

    static {
        int numStates = DFA150_transitionS.length;
        DFA150_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA150_transition[i] = DFA.unpackEncodedString(DFA150_transitionS[i]);
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;
        }
        public String getDescription() {
            return "860:1: castExpression : ( '(' primitiveType ')' unaryExpression -> ^( CAST ^( TYPE primitiveType ) unaryExpression ) | '(' type ')' unaryExpressionNotPlusMinus -> ^( CAST type unaryExpressionNotPlusMinus ) | '(' expression ')' unaryExpressionNotPlusMinus ->);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA150_17 = input.LA(1);

                         
                        int index150_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_17);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA150_18 = input.LA(1);

                         
                        int index150_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_Java()) ) {s = 22;}

                        else if ( (synpred237_Java()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 150, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA164_eotS =
        "\61\uffff";
    static final String DFA164_eofS =
        "\12\uffff\1\24\46\uffff";
    static final String DFA164_minS =
        "\1\142\10\uffff\1\142\1\166\3\uffff\1\0\2\uffff\3\0\35\uffff";
    static final String DFA164_maxS =
        "\1\u00c8\10\uffff\1\u009b\1\u00c5\3\uffff\1\0\2\uffff\3\0\35\uffff";
    static final String DFA164_acceptS =
        "\1\uffff\1\1\1\2\1\3\7\uffff\1\6\1\7\1\10\1\uffff\1\5\1\4\3\uffff"+
        "\1\11\34\uffff";
    static final String DFA164_specialS =
        "\16\uffff\1\0\2\uffff\1\1\1\2\1\3\35\uffff}>";
    static final String[] DFA164_transitionS = {
            "\1\12\6\3\25\uffff\1\2\6\uffff\1\14\16\uffff\10\13\1\uffff\1"+
            "\15\1\1\2\uffff\3\3\44\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\17\33\uffff\1\16\25\uffff\10\20",
            "\1\24\2\uffff\1\22\1\24\3\uffff\1\21\3\24\1\uffff\1\24\3\uffff"+
            "\1\23\2\24\22\uffff\1\24\1\uffff\2\24\7\uffff\1\24\16\uffff"+
            "\20\24",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "866:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | literal | 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) ) | 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) ) | type '.' 'class' -> ^( GETCLASS type ) | 'void' '.' 'class' -> ^( GETCLASS ^( TYPE VOID ) ) | 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) ) | Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA164_14 = input.LA(1);

                         
                        int index164_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_Java()) ) {s = 16;}

                        else if ( (synpred254_Java()) ) {s = 15;}

                         
                        input.seek(index164_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA164_17 = input.LA(1);

                         
                        int index164_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_Java()) ) {s = 11;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index164_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA164_18 = input.LA(1);

                         
                        int index164_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_Java()) ) {s = 11;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index164_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA164_19 = input.LA(1);

                         
                        int index164_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_Java()) ) {s = 11;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index164_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 164, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA155_eotS =
        "\26\uffff";
    static final String DFA155_eofS =
        "\26\uffff";
    static final String DFA155_minS =
        "\1\u0087\1\142\24\uffff";
    static final String DFA155_maxS =
        "\1\u0087\1\u00c8\24\uffff";
    static final String DFA155_acceptS =
        "\2\uffff\1\2\1\1\22\uffff";
    static final String DFA155_specialS =
        "\26\uffff}>";
    static final String[] DFA155_transitionS = {
            "\1\1",
            "\7\3\25\uffff\1\3\6\uffff\1\3\2\uffff\1\2\13\uffff\10\3\1\uffff"+
            "\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "871:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) )";
        }
    }
    static final String DFA152_eotS =
        "\65\uffff";
    static final String DFA152_eofS =
        "\1\2\64\uffff";
    static final String DFA152_minS =
        "\1\166\1\142\37\uffff\23\0\1\uffff";
    static final String DFA152_maxS =
        "\1\u00c5\1\u00c8\37\uffff\23\0\1\uffff";
    static final String DFA152_acceptS =
        "\2\uffff\1\2\61\uffff\1\1";
    static final String DFA152_specialS =
        "\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff}>";
    static final String[] DFA152_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\1\1\2\2\22"+
            "\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\20\2",
            "\1\60\1\52\1\53\1\54\3\51\25\uffff\1\50\6\uffff\1\62\2\uffff"+
            "\1\2\13\uffff\10\61\1\uffff\1\63\1\47\2\uffff\1\56\2\55\22\uffff"+
            "\1\41\1\42\14\uffff\1\43\1\44\1\45\1\46\1\57",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "()+ loopback of 872:7: ( '[' expression ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA152_33 = input.LA(1);

                         
                        int index152_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_33);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA152_34 = input.LA(1);

                         
                        int index152_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_34);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA152_35 = input.LA(1);

                         
                        int index152_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_35);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA152_36 = input.LA(1);

                         
                        int index152_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_36);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA152_37 = input.LA(1);

                         
                        int index152_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_37);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA152_38 = input.LA(1);

                         
                        int index152_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_38);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA152_39 = input.LA(1);

                         
                        int index152_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_39);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA152_40 = input.LA(1);

                         
                        int index152_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_40);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA152_41 = input.LA(1);

                         
                        int index152_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_41);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA152_42 = input.LA(1);

                         
                        int index152_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_42);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA152_43 = input.LA(1);

                         
                        int index152_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_43);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA152_44 = input.LA(1);

                         
                        int index152_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_44);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA152_45 = input.LA(1);

                         
                        int index152_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_45);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA152_46 = input.LA(1);

                         
                        int index152_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_46);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA152_47 = input.LA(1);

                         
                        int index152_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_47);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA152_48 = input.LA(1);

                         
                        int index152_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_48);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA152_49 = input.LA(1);

                         
                        int index152_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_49);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA152_50 = input.LA(1);

                         
                        int index152_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_50);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA152_51 = input.LA(1);

                         
                        int index152_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index152_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 152, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA153_eotS =
        "\64\uffff";
    static final String DFA153_eofS =
        "\1\1\63\uffff";
    static final String DFA153_minS =
        "\1\166\1\uffff\1\142\61\uffff";
    static final String DFA153_maxS =
        "\1\u00c5\1\uffff\1\u00c8\61\uffff";
    static final String DFA153_acceptS =
        "\1\uffff\1\2\36\uffff\1\1\23\uffff";
    static final String DFA153_specialS =
        "\64\uffff}>";
    static final String[] DFA153_transitionS = {
            "\1\1\2\uffff\2\1\3\uffff\4\1\1\uffff\1\1\3\uffff\1\2\2\1\22"+
            "\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\20\1",
            "",
            "\7\1\25\uffff\1\1\6\uffff\1\1\2\uffff\1\40\13\uffff\10\1\1"+
            "\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "()* loopback of 872:29: ( '[' ']' )*";
        }
    }
    static final String DFA161_eotS =
        "\27\uffff";
    static final String DFA161_eofS =
        "\27\uffff";
    static final String DFA161_minS =
        "\1\u0087\1\142\25\uffff";
    static final String DFA161_maxS =
        "\1\u009e\1\u00c8\25\uffff";
    static final String DFA161_acceptS =
        "\2\uffff\1\3\1\2\1\1\22\uffff";
    static final String DFA161_specialS =
        "\27\uffff}>";
    static final String[] DFA161_transitionS = {
            "\1\1\26\uffff\1\2",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\3\13\uffff\10\4\1\uffff"+
            "\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "876:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) )";
        }
    }
    static final String DFA158_eotS =
        "\65\uffff";
    static final String DFA158_eofS =
        "\1\2\64\uffff";
    static final String DFA158_minS =
        "\1\166\1\142\37\uffff\23\0\1\uffff";
    static final String DFA158_maxS =
        "\1\u00c5\1\u00c8\37\uffff\23\0\1\uffff";
    static final String DFA158_acceptS =
        "\2\uffff\1\2\61\uffff\1\1";
    static final String DFA158_specialS =
        "\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff}>";
    static final String[] DFA158_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\1\1\2\2\22"+
            "\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\20\2",
            "\1\60\1\52\1\53\1\54\3\51\25\uffff\1\50\6\uffff\1\62\2\uffff"+
            "\1\2\13\uffff\10\61\1\uffff\1\63\1\47\2\uffff\1\56\2\55\22\uffff"+
            "\1\41\1\42\14\uffff\1\43\1\44\1\45\1\46\1\57",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "()+ loopback of 877:7: ( '[' expression ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA158_33 = input.LA(1);

                         
                        int index158_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_33);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA158_34 = input.LA(1);

                         
                        int index158_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_34);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA158_35 = input.LA(1);

                         
                        int index158_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_35);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA158_36 = input.LA(1);

                         
                        int index158_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_36);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA158_37 = input.LA(1);

                         
                        int index158_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_37);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA158_38 = input.LA(1);

                         
                        int index158_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_38);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA158_39 = input.LA(1);

                         
                        int index158_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_39);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA158_40 = input.LA(1);

                         
                        int index158_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_40);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA158_41 = input.LA(1);

                         
                        int index158_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_41);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA158_42 = input.LA(1);

                         
                        int index158_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_42);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA158_43 = input.LA(1);

                         
                        int index158_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_43);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA158_44 = input.LA(1);

                         
                        int index158_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_44);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA158_45 = input.LA(1);

                         
                        int index158_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_45);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA158_46 = input.LA(1);

                         
                        int index158_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_46);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA158_47 = input.LA(1);

                         
                        int index158_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_47);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA158_48 = input.LA(1);

                         
                        int index158_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_48);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA158_49 = input.LA(1);

                         
                        int index158_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_49);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA158_50 = input.LA(1);

                         
                        int index158_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_50);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA158_51 = input.LA(1);

                         
                        int index158_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 158, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA159_eotS =
        "\64\uffff";
    static final String DFA159_eofS =
        "\1\1\63\uffff";
    static final String DFA159_minS =
        "\1\166\1\uffff\1\142\61\uffff";
    static final String DFA159_maxS =
        "\1\u00c5\1\uffff\1\u00c8\61\uffff";
    static final String DFA159_acceptS =
        "\1\uffff\1\2\36\uffff\1\1\23\uffff";
    static final String DFA159_specialS =
        "\64\uffff}>";
    static final String[] DFA159_transitionS = {
            "\1\1\2\uffff\2\1\3\uffff\4\1\1\uffff\1\1\3\uffff\1\2\2\1\22"+
            "\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\20\1",
            "",
            "\7\1\25\uffff\1\1\6\uffff\1\1\2\uffff\1\40\13\uffff\10\1\1"+
            "\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "()* loopback of 877:29: ( '[' ']' )*";
        }
    }
    static final String DFA162_eotS =
        "\41\uffff";
    static final String DFA162_eofS =
        "\1\2\40\uffff";
    static final String DFA162_minS =
        "\1\166\40\uffff";
    static final String DFA162_maxS =
        "\1\u00c5\40\uffff";
    static final String DFA162_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA162_specialS =
        "\41\uffff}>";
    static final String[] DFA162_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA162_eot = DFA.unpackEncodedString(DFA162_eotS);
    static final short[] DFA162_eof = DFA.unpackEncodedString(DFA162_eofS);
    static final char[] DFA162_min = DFA.unpackEncodedStringToUnsignedChars(DFA162_minS);
    static final char[] DFA162_max = DFA.unpackEncodedStringToUnsignedChars(DFA162_maxS);
    static final short[] DFA162_accept = DFA.unpackEncodedString(DFA162_acceptS);
    static final short[] DFA162_special = DFA.unpackEncodedString(DFA162_specialS);
    static final short[][] DFA162_transition;

    static {
        int numStates = DFA162_transitionS.length;
        DFA162_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA162_transition[i] = DFA.unpackEncodedString(DFA162_transitionS[i]);
        }
    }

    class DFA162 extends DFA {

        public DFA162(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = DFA162_eot;
            this.eof = DFA162_eof;
            this.min = DFA162_min;
            this.max = DFA162_max;
            this.accept = DFA162_accept;
            this.special = DFA162_special;
            this.transition = DFA162_transition;
        }
        public String getDescription() {
            return "884:3: ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) )";
        }
    }
    static final String DFA163_eotS =
        "\41\uffff";
    static final String DFA163_eofS =
        "\1\2\40\uffff";
    static final String DFA163_minS =
        "\1\166\40\uffff";
    static final String DFA163_maxS =
        "\1\u00c5\40\uffff";
    static final String DFA163_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA163_specialS =
        "\41\uffff}>";
    static final String[] DFA163_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA163_eot = DFA.unpackEncodedString(DFA163_eotS);
    static final short[] DFA163_eof = DFA.unpackEncodedString(DFA163_eofS);
    static final char[] DFA163_min = DFA.unpackEncodedStringToUnsignedChars(DFA163_minS);
    static final char[] DFA163_max = DFA.unpackEncodedStringToUnsignedChars(DFA163_maxS);
    static final short[] DFA163_accept = DFA.unpackEncodedString(DFA163_acceptS);
    static final short[] DFA163_special = DFA.unpackEncodedString(DFA163_specialS);
    static final short[][] DFA163_transition;

    static {
        int numStates = DFA163_transitionS.length;
        DFA163_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA163_transition[i] = DFA.unpackEncodedString(DFA163_transitionS[i]);
        }
    }

    class DFA163 extends DFA {

        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = DFA163_eot;
            this.eof = DFA163_eof;
            this.min = DFA163_min;
            this.max = DFA163_max;
            this.accept = DFA163_accept;
            this.special = DFA163_special;
            this.transition = DFA163_transition;
        }
        public String getDescription() {
            return "889:6: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) )";
        }
    }
    static final String DFA165_eotS =
        "\41\uffff";
    static final String DFA165_eofS =
        "\1\2\40\uffff";
    static final String DFA165_minS =
        "\1\166\40\uffff";
    static final String DFA165_maxS =
        "\1\u00c5\40\uffff";
    static final String DFA165_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA165_specialS =
        "\41\uffff}>";
    static final String[] DFA165_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\1\1\2\3\uffff\3\2\22\uffff\1"+
            "\2\2\uffff\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "900:14: ( classBody )?";
        }
    }
    static final String DFA167_eotS =
        "\41\uffff";
    static final String DFA167_eofS =
        "\1\2\40\uffff";
    static final String DFA167_minS =
        "\1\166\40\uffff";
    static final String DFA167_maxS =
        "\1\u00c5\40\uffff";
    static final String DFA167_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA167_specialS =
        "\41\uffff}>";
    static final String[] DFA167_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA167_eot = DFA.unpackEncodedString(DFA167_eotS);
    static final short[] DFA167_eof = DFA.unpackEncodedString(DFA167_eofS);
    static final char[] DFA167_min = DFA.unpackEncodedStringToUnsignedChars(DFA167_minS);
    static final char[] DFA167_max = DFA.unpackEncodedStringToUnsignedChars(DFA167_maxS);
    static final short[] DFA167_accept = DFA.unpackEncodedString(DFA167_acceptS);
    static final short[] DFA167_special = DFA.unpackEncodedString(DFA167_specialS);
    static final short[][] DFA167_transition;

    static {
        int numStates = DFA167_transitionS.length;
        DFA167_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA167_transition[i] = DFA.unpackEncodedString(DFA167_transitionS[i]);
        }
    }

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = DFA167_eot;
            this.eof = DFA167_eof;
            this.min = DFA167_min;
            this.max = DFA167_max;
            this.accept = DFA167_accept;
            this.special = DFA167_special;
            this.transition = DFA167_transition;
        }
        public String getDescription() {
            return "918:21: ( arguments )?";
        }
    }
    static final String DFA170_eotS =
        "\41\uffff";
    static final String DFA170_eofS =
        "\1\2\40\uffff";
    static final String DFA170_minS =
        "\1\166\40\uffff";
    static final String DFA170_maxS =
        "\1\u00c5\40\uffff";
    static final String DFA170_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA170_specialS =
        "\41\uffff}>";
    static final String[] DFA170_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_eotS);
    static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_eofS);
    static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_minS);
    static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_maxS);
    static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_acceptS);
    static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_specialS);
    static final short[][] DFA170_transition;

    static {
        int numStates = DFA170_transitionS.length;
        DFA170_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA170_transition[i] = DFA.unpackEncodedString(DFA170_transitionS[i]);
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = DFA170_eot;
            this.eof = DFA170_eof;
            this.min = DFA170_min;
            this.max = DFA170_max;
            this.accept = DFA170_accept;
            this.special = DFA170_special;
            this.transition = DFA170_transition;
        }
        public String getDescription() {
            return "926:3: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) )";
        }
    }
    static final String DFA172_eotS =
        "\25\uffff";
    static final String DFA172_eofS =
        "\25\uffff";
    static final String DFA172_minS =
        "\1\142\24\uffff";
    static final String DFA172_maxS =
        "\1\u00c8\24\uffff";
    static final String DFA172_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA172_specialS =
        "\25\uffff}>";
    static final String[] DFA172_transitionS = {
            "\7\1\25\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff\2\1\1\24"+
            "\1\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA172_eot = DFA.unpackEncodedString(DFA172_eotS);
    static final short[] DFA172_eof = DFA.unpackEncodedString(DFA172_eofS);
    static final char[] DFA172_min = DFA.unpackEncodedStringToUnsignedChars(DFA172_minS);
    static final char[] DFA172_max = DFA.unpackEncodedStringToUnsignedChars(DFA172_maxS);
    static final short[] DFA172_accept = DFA.unpackEncodedString(DFA172_acceptS);
    static final short[] DFA172_special = DFA.unpackEncodedString(DFA172_specialS);
    static final short[][] DFA172_transition;

    static {
        int numStates = DFA172_transitionS.length;
        DFA172_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA172_transition[i] = DFA.unpackEncodedString(DFA172_transitionS[i]);
        }
    }

    class DFA172 extends DFA {

        public DFA172(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 172;
            this.eot = DFA172_eot;
            this.eof = DFA172_eof;
            this.min = DFA172_min;
            this.max = DFA172_max;
            this.accept = DFA172_accept;
            this.special = DFA172_special;
            this.transition = DFA172_transition;
        }
        public String getDescription() {
            return "934:9: ( expressionList )?";
        }
    }
    static final String DFA212_eotS =
        "\26\uffff";
    static final String DFA212_eofS =
        "\26\uffff";
    static final String DFA212_minS =
        "\1\u0087\1\142\24\uffff";
    static final String DFA212_maxS =
        "\1\u0087\1\u00c8\24\uffff";
    static final String DFA212_acceptS =
        "\2\uffff\1\2\1\1\22\uffff";
    static final String DFA212_specialS =
        "\26\uffff}>";
    static final String[] DFA212_transitionS = {
            "\1\1",
            "\7\3\25\uffff\1\3\6\uffff\1\3\2\uffff\1\2\13\uffff\10\3\1\uffff"+
            "\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA212_eot = DFA.unpackEncodedString(DFA212_eotS);
    static final short[] DFA212_eof = DFA.unpackEncodedString(DFA212_eofS);
    static final char[] DFA212_min = DFA.unpackEncodedStringToUnsignedChars(DFA212_minS);
    static final char[] DFA212_max = DFA.unpackEncodedStringToUnsignedChars(DFA212_maxS);
    static final short[] DFA212_accept = DFA.unpackEncodedString(DFA212_acceptS);
    static final short[] DFA212_special = DFA.unpackEncodedString(DFA212_specialS);
    static final short[][] DFA212_transition;

    static {
        int numStates = DFA212_transitionS.length;
        DFA212_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA212_transition[i] = DFA.unpackEncodedString(DFA212_transitionS[i]);
        }
    }

    class DFA212 extends DFA {

        public DFA212(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 212;
            this.eot = DFA212_eot;
            this.eof = DFA212_eof;
            this.min = DFA212_min;
            this.max = DFA212_max;
            this.accept = DFA212_accept;
            this.special = DFA212_special;
            this.transition = DFA212_transition;
        }
        public String getDescription() {
            return "871:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer )";
        }
    }
    static final String DFA209_eotS =
        "\27\uffff";
    static final String DFA209_eofS =
        "\1\2\26\uffff";
    static final String DFA209_minS =
        "\1\u0087\1\142\25\uffff";
    static final String DFA209_maxS =
        "\1\u0087\1\u00c8\25\uffff";
    static final String DFA209_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\22\uffff";
    static final String DFA209_specialS =
        "\27\uffff}>";
    static final String[] DFA209_transitionS = {
            "\1\1",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\2\13\uffff\10\4\1\uffff"+
            "\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA209_eot = DFA.unpackEncodedString(DFA209_eotS);
    static final short[] DFA209_eof = DFA.unpackEncodedString(DFA209_eofS);
    static final char[] DFA209_min = DFA.unpackEncodedStringToUnsignedChars(DFA209_minS);
    static final char[] DFA209_max = DFA.unpackEncodedStringToUnsignedChars(DFA209_maxS);
    static final short[] DFA209_accept = DFA.unpackEncodedString(DFA209_acceptS);
    static final short[] DFA209_special = DFA.unpackEncodedString(DFA209_specialS);
    static final short[][] DFA209_transition;

    static {
        int numStates = DFA209_transitionS.length;
        DFA209_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA209_transition[i] = DFA.unpackEncodedString(DFA209_transitionS[i]);
        }
    }

    class DFA209 extends DFA {

        public DFA209(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 209;
            this.eot = DFA209_eot;
            this.eof = DFA209_eof;
            this.min = DFA209_min;
            this.max = DFA209_max;
            this.accept = DFA209_accept;
            this.special = DFA209_special;
            this.transition = DFA209_transition;
        }
        public String getDescription() {
            return "()+ loopback of 872:7: ( '[' expression ']' )+";
        }
    }
    static final String DFA221_eotS =
        "\27\uffff";
    static final String DFA221_eofS =
        "\27\uffff";
    static final String DFA221_minS =
        "\1\u0087\1\142\25\uffff";
    static final String DFA221_maxS =
        "\1\u009e\1\u00c8\25\uffff";
    static final String DFA221_acceptS =
        "\2\uffff\1\3\1\2\1\1\22\uffff";
    static final String DFA221_specialS =
        "\27\uffff}>";
    static final String[] DFA221_transitionS = {
            "\1\1\26\uffff\1\2",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\3\13\uffff\10\4\1\uffff"+
            "\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA221_eot = DFA.unpackEncodedString(DFA221_eotS);
    static final short[] DFA221_eof = DFA.unpackEncodedString(DFA221_eofS);
    static final char[] DFA221_min = DFA.unpackEncodedStringToUnsignedChars(DFA221_minS);
    static final char[] DFA221_max = DFA.unpackEncodedStringToUnsignedChars(DFA221_maxS);
    static final short[] DFA221_accept = DFA.unpackEncodedString(DFA221_acceptS);
    static final short[] DFA221_special = DFA.unpackEncodedString(DFA221_specialS);
    static final short[][] DFA221_transition;

    static {
        int numStates = DFA221_transitionS.length;
        DFA221_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA221_transition[i] = DFA.unpackEncodedString(DFA221_transitionS[i]);
        }
    }

    class DFA221 extends DFA {

        public DFA221(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 221;
            this.eot = DFA221_eot;
            this.eof = DFA221_eof;
            this.min = DFA221_min;
            this.max = DFA221_max;
            this.accept = DFA221_accept;
            this.special = DFA221_special;
            this.transition = DFA221_transition;
        }
        public String getDescription() {
            return "876:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest )";
        }
    }
    static final String DFA218_eotS =
        "\27\uffff";
    static final String DFA218_eofS =
        "\1\2\26\uffff";
    static final String DFA218_minS =
        "\1\u0087\1\142\25\uffff";
    static final String DFA218_maxS =
        "\1\u0087\1\u00c8\25\uffff";
    static final String DFA218_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\22\uffff";
    static final String DFA218_specialS =
        "\27\uffff}>";
    static final String[] DFA218_transitionS = {
            "\1\1",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\2\13\uffff\10\4\1\uffff"+
            "\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA218_eot = DFA.unpackEncodedString(DFA218_eotS);
    static final short[] DFA218_eof = DFA.unpackEncodedString(DFA218_eofS);
    static final char[] DFA218_min = DFA.unpackEncodedStringToUnsignedChars(DFA218_minS);
    static final char[] DFA218_max = DFA.unpackEncodedStringToUnsignedChars(DFA218_maxS);
    static final short[] DFA218_accept = DFA.unpackEncodedString(DFA218_acceptS);
    static final short[] DFA218_special = DFA.unpackEncodedString(DFA218_specialS);
    static final short[][] DFA218_transition;

    static {
        int numStates = DFA218_transitionS.length;
        DFA218_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA218_transition[i] = DFA.unpackEncodedString(DFA218_transitionS[i]);
        }
    }

    class DFA218 extends DFA {

        public DFA218(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 218;
            this.eot = DFA218_eot;
            this.eof = DFA218_eof;
            this.min = DFA218_min;
            this.max = DFA218_max;
            this.accept = DFA218_accept;
            this.special = DFA218_special;
            this.transition = DFA218_transition;
        }
        public String getDescription() {
            return "()+ loopback of 877:7: ( '[' expression ']' )+";
        }
    }
 

    public static final BitSet FOLLOW_annotations_in_compilationUnit463 = new BitSet(new long[]{0x0000000000000402L,0x09E0000000000000L,0x00000010000FFC10L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit466 = new BitSet(new long[]{0x0000000000000402L,0x09C0000000000000L,0x00000010000FFC10L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit469 = new BitSet(new long[]{0x0000000000000402L,0x09C0000000000000L,0x00000010000FFC10L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit472 = new BitSet(new long[]{0x0000000000000402L,0x0940000000000000L,0x00000010000FFC10L});
    public static final BitSet FOLLOW_117_in_packageDeclaration506 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_qualifiedName_in_packageDeclaration508 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_packageDeclaration510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_importDeclaration530 = new BitSet(new long[]{0x0000000000000000L,0x0100000400000000L});
    public static final BitSet FOLLOW_120_in_importDeclaration537 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration541 = new BitSet(new long[]{0x0000000000000000L,0x0240000000000000L});
    public static final BitSet FOLLOW_121_in_importDeclaration544 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration548 = new BitSet(new long[]{0x0000000000000000L,0x0240000000000000L});
    public static final BitSet FOLLOW_121_in_importDeclaration553 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_importDeclaration557 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_importDeclaration561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration580 = new BitSet(new long[]{0x0000000000000000L,0x0240000000000000L});
    public static final BitSet FOLLOW_121_in_importDeclaration583 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration587 = new BitSet(new long[]{0x0000000000000000L,0x0240000000000000L});
    public static final BitSet FOLLOW_121_in_importDeclaration592 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_importDeclaration596 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_importDeclaration600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_typeDeclaration637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_classOrInterfaceDeclaration649 = new BitSet(new long[]{0x0000000000000400L,0x0900000000000000L,0x00000010000FFC10L});
    public static final BitSet FOLLOW_classDeclaration_in_classOrInterfaceDeclaration656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classOrInterfaceDeclaration678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_classDeclaration733 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_classDeclaration735 = new BitSet(new long[]{0x0000000000000000L,0x7000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_typeParameters_in_classDeclaration738 = new BitSet(new long[]{0x0000000000000000L,0x7000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_124_in_classDeclaration751 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_type_in_classDeclaration753 = new BitSet(new long[]{0x0000000000000000L,0x7000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_125_in_classDeclaration767 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_typeList_in_classDeclaration769 = new BitSet(new long[]{0x0000000000000000L,0x7000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classBody_in_classDeclaration781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_typeParameters818 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters822 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_127_in_typeParameters825 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters829 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_typeParameters833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeParameter850 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_typeParameter853 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_bound_in_typeParameter855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_bound889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_bound892 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_type_in_bound896 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_in_enumDeclaration915 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_enumDeclaration917 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_125_in_enumDeclaration920 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_typeList_in_enumDeclaration922 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_enumBody_in_enumDeclaration926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_enumBody952 = new BitSet(new long[]{0x0000000000000000L,0x8040000400000000L,0x0000001000000008L});
    public static final BitSet FOLLOW_enumConstants_in_enumBody954 = new BitSet(new long[]{0x0000000000000000L,0x8040000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_127_in_enumBody957 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_enumBodyDeclarations_in_enumBody960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_enumBody963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants982 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_enumConstants985 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants987 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_annotations_in_enumConstant1006 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_enumConstant1009 = new BitSet(new long[]{0x0000000000000002L,0x7000000000000000L,0x0000000040000004L});
    public static final BitSet FOLLOW_arguments_in_enumConstant1012 = new BitSet(new long[]{0x0000000000000002L,0x7000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classBody_in_enumConstant1017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_enumBodyDeclarations1052 = new BitSet(new long[]{0x0000000000000402L,0x4940000400000000L,0x000000100FFFFC34L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_enumBodyDeclarations1055 = new BitSet(new long[]{0x0000000000000402L,0x4940000400000000L,0x000000100FFFFC34L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration1074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration1079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_normalInterfaceDeclaration1091 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_normalInterfaceDeclaration1093 = new BitSet(new long[]{0x0000000000000000L,0x5000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_typeParameters_in_normalInterfaceDeclaration1095 = new BitSet(new long[]{0x0000000000000000L,0x5000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_124_in_normalInterfaceDeclaration1099 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_typeList_in_normalInterfaceDeclaration1101 = new BitSet(new long[]{0x0000000000000000L,0x5000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_interfaceBody_in_normalInterfaceDeclaration1105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList1136 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_typeList1139 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_type_in_typeList1142 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_130_in_classBody1156 = new BitSet(new long[]{0x0000000000000400L,0x4940000400000000L,0x000000100FFFFC3CL});
    public static final BitSet FOLLOW_classBodyDeclaration_in_classBody1159 = new BitSet(new long[]{0x0000000000000400L,0x4940000400000000L,0x000000100FFFFC3CL});
    public static final BitSet FOLLOW_131_in_classBody1162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_interfaceBody1175 = new BitSet(new long[]{0x0000000000000400L,0x4940000400000000L,0x000000100FFFFC3CL});
    public static final BitSet FOLLOW_interfaceBodyDeclaration_in_interfaceBody1178 = new BitSet(new long[]{0x0000000000000400L,0x4940000400000000L,0x000000100FFFFC3CL});
    public static final BitSet FOLLOW_131_in_interfaceBody1181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_classBodyDeclaration1193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_classBodyDeclaration1199 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration1201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_classBodyDeclaration1214 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration1217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_classBodyDeclaration1226 = new BitSet(new long[]{0x0000000000000400L,0x4940000400000000L,0x000000100FFFFC34L});
    public static final BitSet FOLLOW_genericMethodOrConstructorDecl_in_classBodyDeclaration1236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_classBodyDeclaration1262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_classBodyDeclaration1288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_classBodyDeclaration1313 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_classBodyDeclaration1315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_classBodyDeclaration1317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_classBodyDeclaration1351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_classBodyDeclaration1353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classBodyDeclaration1384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_classBodyDeclaration1409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classBodyDeclaration1436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_genericMethodOrConstructorDecl1470 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00020L});
    public static final BitSet FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl1472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericMethodOrConstructorRest1484 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_genericMethodOrConstructorRest1502 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest1526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_methodDeclaration1547 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_methodDeclaration1549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_methodDeclaration1551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_fieldDeclaration1571 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_fieldDeclaration1573 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_fieldDeclaration1575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_interfaceBodyDeclaration1594 = new BitSet(new long[]{0x0000000000000400L,0x4940000400000000L,0x000000100FFFFC34L});
    public static final BitSet FOLLOW_constantDeclaration_in_interfaceBodyDeclaration1601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceBodyDeclaration1623 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceBodyDeclaration1625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceGenericMethodDecl_in_interfaceBodyDeclaration1654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_interfaceBodyDeclaration1676 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceBodyDeclaration1678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_interfaceBodyDeclaration1711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_interfaceBodyDeclaration1734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_interfaceBodyDeclaration1761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_interfaceBodyDeclaration1786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaratorRest1800 = new BitSet(new long[]{0x0000000000000000L,0x0140000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_134_in_methodDeclaratorRest1812 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_typeList_in_methodDeclaratorRest1814 = new BitSet(new long[]{0x0000000000000000L,0x0140000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_methodBody_in_methodDeclaratorRest1830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_methodDeclaratorRest1858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidMethodDeclaratorRest1892 = new BitSet(new long[]{0x0000000000000000L,0x0140000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_134_in_voidMethodDeclaratorRest1895 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_typeList_in_voidMethodDeclaratorRest1897 = new BitSet(new long[]{0x0000000000000000L,0x0140000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_methodBody_in_voidMethodDeclaratorRest1913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_voidMethodDeclaratorRest1941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest1975 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_interfaceMethodDeclaratorRest1978 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_typeList_in_interfaceMethodDeclaratorRest1980 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_interfaceMethodDeclaratorRest1984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceGenericMethodDecl2008 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00020L});
    public static final BitSet FOLLOW_type_in_interfaceGenericMethodDecl2014 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceGenericMethodDecl2016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl2018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_interfaceGenericMethodDecl2034 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceGenericMethodDecl2036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl2038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest2068 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_voidInterfaceMethodDeclaratorRest2071 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_typeList_in_voidInterfaceMethodDeclaratorRest2073 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_voidInterfaceMethodDeclaratorRest2077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_constructorDeclaratorRest2101 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_134_in_constructorDeclaratorRest2104 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_typeList_in_constructorDeclaratorRest2106 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_methodBody_in_constructorDeclaratorRest2110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators2139 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_variableDeclarators2142 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators2146 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclarator2165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_variableDeclaratorRest_in_variableDeclarator2167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_variableDeclaratorRest2189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_variableDeclaratorRest2191 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_137_in_variableDeclaratorRest2196 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0000E6FF00024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest2198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_variableDeclaratorRest2213 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0000E6FF00024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest2215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_constantDeclaration2233 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_constantDeclarators_in_constantDeclaration2235 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_constantDeclaration2237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_constantDeclarator2254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclarator2256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclarator_in_constantDeclarators2279 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_constantDeclarators2282 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_constantDeclarator_in_constantDeclarators2286 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_135_in_constantDeclaratorRest2307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_constantDeclaratorRest2309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_137_in_constantDeclaratorRest2313 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0000E6FF00024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_variableInitializer_in_constantDeclaratorRest2315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaratorId2334 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_variableDeclaratorId2337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_variableDeclaratorId2339 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer2352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer2362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_arrayInitializer2374 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0000E6FF0002CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer2377 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_127_in_arrayInitializer2380 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0000E6FF00024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer2382 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_127_in_arrayInitializer2387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_arrayInitializer2394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_modifier2419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_modifier2429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_modifier2439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_modifier2449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_modifier2459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_modifier2469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_modifier2479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_modifier2489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_modifier2499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_modifier2509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_modifier2519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_modifier2529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_packageOrTypeName2543 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_packageOrTypeName2546 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_packageOrTypeName2548 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_Identifier_in_enumConstantName2566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeName2582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_packageOrTypeName_in_typeName2592 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_typeName2594 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_typeName2596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_refComponent_in_type2609 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_121_in_type2612 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_refComponent_in_type2616 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_type2621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_type2623 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_primitiveType_in_type2645 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_type2648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_type2650 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_Identifier_in_refComponent2679 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeArguments_in_refComponent2682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_primitiveType0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_variableModifier2782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_variableModifier2792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_typeArguments2803 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000001FF00000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments2807 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_127_in_typeArguments2810 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000001FF00000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments2814 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_typeArguments2818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument2836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_typeArgument2841 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_124_in_typeArgument2850 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_type_in_typeArgument2852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_typeArgument2885 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_type_in_typeArgument2887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList2929 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_qualifiedNameList2932 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList2935 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_158_in_formalParameters2949 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000108FF04000L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameters2951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_formalParameters2954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameterDecls2971 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls2974 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDecls2986 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_formalParameterDecls2989 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameterDecls2991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_formalParameterDecls3025 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDecls3027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_methodBody3070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName3088 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_qualifiedName3091 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName3095 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_integerLiteral_in_literal3118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FloatingPointLiteral_in_literal3136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CharacterLiteral_in_literal3154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal3172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal3190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_literal3208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_integerLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_booleanLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotations3296 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_164_in_annotation3308 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_annotationName_in_annotation3310 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_annotation3313 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001EEFF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_elementValuePairs_in_annotation3315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_annotation3318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationName3340 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_annotationName3343 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_annotationName3345 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs3359 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_elementValuePairs3362 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs3364 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_Identifier_in_elementValuePair3379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_elementValuePair3381 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair3385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue3397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue3404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue3411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_elementValueArrayInitializer3423 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF0402CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer3426 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_127_in_elementValueArrayInitializer3429 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer3431 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_elementValueArrayInitializer3438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_annotationTypeDeclaration3450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_annotationTypeDeclaration3452 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_annotationTypeDeclaration3454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_annotationTypeBody_in_annotationTypeDeclaration3456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_annotationTypeBody3468 = new BitSet(new long[]{0x0000000000000400L,0x4940000400000000L,0x000000100FFFFC3CL});
    public static final BitSet FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody3471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_annotationTypeBody3475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3488 = new BitSet(new long[]{0x0000000000000402L,0x4940000400000000L,0x000000100FFFFC34L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3492 = new BitSet(new long[]{0x0000000000000402L,0x4940000400000000L,0x000000100FFFFC34L});
    public static final BitSet FOLLOW_modifier_in_annotationTypeElementDeclaration3507 = new BitSet(new long[]{0x0000000000000400L,0x4940000400000000L,0x000000100FFFFC34L});
    public static final BitSet FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration3511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_annotationTypeElementRest3523 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest3525 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_annotationTypeElementRest3527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_annotationTypeElementRest3534 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_annotationTypeElementRest3536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_annotationTypeElementRest3544 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_annotationTypeElementRest3546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_annotationTypeElementRest3554 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_annotationTypeElementRest3556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest3564 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_annotationTypeElementRest3566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest3579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest3586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationMethodRest3599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_annotationMethodRest3601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_annotationMethodRest3603 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_defaultValue_in_annotationMethodRest3606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarators_in_annotationConstantRest3623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_defaultValue3638 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_elementValue_in_defaultValue3640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_block3654 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_blockStatement_in_block3656 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_131_in_block3659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_blockStatement3680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_blockStatement3685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement3693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_localVariableDeclaration3705 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration3708 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_localVariableDeclaration3710 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_localVariableDeclaration3712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement3741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_statement3751 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0000E6FF00024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_statement3753 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_statement3756 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0000E6FF00024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_statement3758 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_statement3762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_statement3784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_parExpression_in_statement3786 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_statement_in_statement3788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_169_in_statement3798 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_statement_in_statement3800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_statement3826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_statement3828 = new BitSet(new long[]{0x0000000000000000L,0x404001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_forControl_in_statement3830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_statement3832 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_statement_in_statement3834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_statement3855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_parExpression_in_statement3857 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_statement_in_statement3859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_statement3884 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_statement_in_statement3886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_171_in_statement3888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_parExpression_in_statement3890 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_statement3892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_statement3917 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_block_in_statement3919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010400000000000L});
    public static final BitSet FOLLOW_catches_in_statement3929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_174_in_statement3933 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_block_in_statement3935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_statement3963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_statement3986 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_block_in_statement3988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_statement4022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_parExpression_in_statement4024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_statement4026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020002000000008L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_statement4028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_statement4030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_statement4051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_parExpression_in_statement4053 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_block_in_statement4055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_statement4076 = new BitSet(new long[]{0x0000000000000000L,0x404001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_statement4078 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_statement4081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_statement4101 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_statement4103 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_statement4105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_statement4124 = new BitSet(new long[]{0x0000000000000000L,0x0040000400000000L});
    public static final BitSet FOLLOW_Identifier_in_statement4126 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_statement4129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_statement4149 = new BitSet(new long[]{0x0000000000000000L,0x0040000400000000L});
    public static final BitSet FOLLOW_Identifier_in_statement4151 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_statement4154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_statement4172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementExpression_in_statement4187 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_statement4189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_statement4203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_statement4205 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_statement_in_statement4207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches4229 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_catchClause_in_catches4232 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_180_in_catchClause4248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_catchClause4250 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_formalParameter_in_catchClause4252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_catchClause4254 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_block_in_catchClause4256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameter4282 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_formalParameter4285 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameter4287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups4301 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020002000000000L});
    public static final BitSet FOLLOW_switchLabel_in_switchBlockStatementGroup4315 = new BitSet(new long[]{0x0000000000000402L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_blockStatement_in_switchBlockStatementGroup4317 = new BitSet(new long[]{0x0000000000000402L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_181_in_switchLabel4345 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_constantExpression_in_switchLabel4347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_switchLabel4349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_switchLabel4365 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_enumConstantName_in_switchLabel4367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_switchLabel4369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_switchLabel4385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_switchLabel4387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_moreStatementExpressions4406 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_statementExpression_in_moreStatementExpressions4408 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_forVarControl_in_forControl4429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_forControl4442 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_forControl4445 = new BitSet(new long[]{0x0000000000000000L,0x404001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_forControl4449 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_forControl4452 = new BitSet(new long[]{0x0000000000000002L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_forUpdate_in_forControl4456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forInit4491 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_forInit4494 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_forInit4496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit4518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forVarControl4530 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_forVarControl4533 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_forVarControl4535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_forVarControl4537 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_forVarControl4539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdate4569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_parExpression4582 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_parExpression4585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_parExpression4587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList4605 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_expressionList4608 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expressionList4611 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_expression_in_statementExpression4627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constantExpression4639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression4651 = new BitSet(new long[]{0x0000000000000002L,0x4400000000000000L,0x1FC0000000000201L});
    public static final BitSet FOLLOW_137_in_expression4661 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_expression4682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_expression4684 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_expression4714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_expression4716 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_expression4746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_expression4748 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_expression4778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_expression4780 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_expression4811 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_expression4836 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_expression4861 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_expression4891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_expression4893 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_expression4923 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_expression4925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_expression4927 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_expression4957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_expression4959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_expression4961 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_expression4989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_expression4991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_expression4993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_expression4995 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression5044 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_156_in_conditionalExpression5061 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression5063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_conditionalExpression5065 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression5067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5114 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_189_in_conditionalOrExpression5132 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalOrExpression5134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5180 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_conditionalAndExpression5198 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalAndExpression5200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5252 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_191_in_inclusiveOrExpression5274 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_inclusiveOrExpression5276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression5323 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_192_in_exclusiveOrExpression5339 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_exclusiveOrExpression5341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression5385 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_andExpression5401 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_andExpression_in_andExpression5403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5447 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_193_in_equalityExpression5463 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_equalityExpression5486 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression5532 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_195_in_instanceOfExpression5547 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression5549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5593 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_126_in_relationalExpression5609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_relationalExpression5611 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_relationalExpression5634 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_relationalExpression5657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_relationalExpression5659 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_relationalExpression5682 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5729 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_126_in_shiftExpression5748 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_shiftExpression5750 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_128_in_shiftExpression5754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_shiftExpression5756 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5759 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_shiftExpression5793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_shiftExpression5795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_shiftExpression5797 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5799 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5842 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00C0000000000000L});
    public static final BitSet FOLLOW_182_in_additiveExpression5861 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_183_in_additiveExpression5865 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5868 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00C0000000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5919 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L,0x1100000000000000L});
    public static final BitSet FOLLOW_122_in_multiplicativeExpression5939 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_184_in_multiplicativeExpression5943 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_188_in_multiplicativeExpression5947 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5950 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L,0x1100000000000000L});
    public static final BitSet FOLLOW_182_in_unaryExpression6002 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_unaryExpression6016 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_unaryExpression6036 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_unaryExpression6056 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression6076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_unaryExpressionNotPlusMinus6107 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_unaryExpressionNotPlusMinus6126 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus6146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus6153 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000000000000080L,0x0000000000000030L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus6163 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000000000000080L,0x0000000000000030L});
    public static final BitSet FOLLOW_196_in_unaryExpressionNotPlusMinus6176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_unaryExpressionNotPlusMinus6198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_unaryExpressionNotPlusMinus6242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_unaryExpressionNotPlusMinus6257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_castExpression6296 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression6298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_castExpression6300 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression6302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_castExpression6325 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_castExpression6327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_castExpression6329 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_castExpression6350 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_castExpression6352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_castExpression6354 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary6376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6383 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_primary6385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary6409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_primary6419 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6421 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_primitiveType_in_primary6424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_primary6440 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_primary6442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_primary6444 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_primary6449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_primary6451 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_primary6482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_primary6484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000084L});
    public static final BitSet FOLLOW_arrayInitializer_in_primary6488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_primary6520 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6522 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L});
    public static final BitSet FOLLOW_refComponent_in_primary6528 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_121_in_primary6531 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L});
    public static final BitSet FOLLOW_refComponent_in_primary6535 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_135_in_primary6554 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_primary6556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_primary6558 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_primary6563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_primary6565 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_primary6598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_primary6600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000084L});
    public static final BitSet FOLLOW_arrayInitializer_in_primary6604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_primary6633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_primary6665 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_primary6667 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_primary6669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_primary6691 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_primary6693 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_primary6695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_primary6716 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_arguments_in_primary6726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_primary6764 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_arguments_in_primary6780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_innerCreator6825 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator6827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest6849 = new BitSet(new long[]{0x0000000000000002L,0x7000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classBody_in_classCreatorRest6851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation6872 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_explicitGenericInvocation6874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_nonWildcardTypeArguments6886 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments6888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_nonWildcardTypeArguments6890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_explicitGenericInvocationSuffix6906 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_superSuffix_in_explicitGenericInvocationSuffix6908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_explicitGenericInvocationSuffix6922 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocationSuffix6924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix6943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_superSuffix6955 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_superSuffix6957 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_arguments_in_superSuffix6960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_selector6974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_157_in_selector6976 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_arguments_in_selector6978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_selector6996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_200_in_selector6998 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector7001 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L});
    public static final BitSet FOLLOW_innerCreator_in_selector7005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_selector7020 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector7022 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_selector7024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_selector7043 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_selector7045 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_arguments_in_selector7055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_selector7090 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_selector7092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_selector7094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_arguments7113 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001EEFF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expressionList_in_arguments7116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_arguments7119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_synpred1_Java463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_synpred36_Java1199 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_block_in_synpred36_Java1201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_synpred38_Java1214 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_block_in_synpred38_Java1217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_synpred41_Java1262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_synpred42_Java1288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaration_in_synpred50_Java1601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred51_Java1623 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_synpred51_Java1625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_synpred51_Java1627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_synpred88_Java2546 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_synpred88_Java2548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_synpred106_Java2850 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_synpred106_Java2852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred122_Java3296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_synpred139_Java3544 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_synpred139_Java3546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred146_Java3680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred147_Java3685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_synpred152_Java3798 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_statement_in_synpred152_Java3800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred157_Java3929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_174_in_synpred157_Java3933 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_block_in_synpred157_Java3935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred158_Java3963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_synpred175_Java4345 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_constantExpression_in_synpred175_Java4347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_synpred175_Java4349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_synpred176_Java4365 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_enumConstantName_in_synpred176_Java4367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_synpred176_Java4369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forVarControl_in_synpred178_Java4429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_synpred183_Java4491 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_synpred183_Java4494 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_synpred183_Java4496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_synpred186_Java4661 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred186_Java4663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_synpred187_Java4682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_synpred187_Java4684 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred187_Java4686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_synpred188_Java4714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_synpred188_Java4716 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred188_Java4718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_synpred189_Java4746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_synpred189_Java4748 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred189_Java4750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_synpred190_Java4778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_synpred190_Java4780 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred190_Java4782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_synpred191_Java4811 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred191_Java4813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_synpred192_Java4836 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred192_Java4838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_synpred193_Java4861 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred193_Java4863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_synpred194_Java4891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_synpred194_Java4893 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred194_Java4895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_synpred195_Java4923 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_synpred195_Java4925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_synpred195_Java4927 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred195_Java4929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_synpred196_Java4957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred196_Java4959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_synpred196_Java4961 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred196_Java4963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_synpred197_Java4989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred197_Java4991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred197_Java4993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_synpred197_Java4995 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred197_Java4997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_synpred208_Java5634 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_shiftExpression_in_synpred208_Java5636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_synpred212_Java5748 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_synpred212_Java5750 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_128_in_synpred212_Java5754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred212_Java5756 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred212_Java5759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_synpred213_Java5748 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_synpred213_Java5750 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_128_in_synpred213_Java5754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred213_Java5756 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred213_Java5759 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred214_Java5793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred214_Java5795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred214_Java5797 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred214_Java5799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_synpred215_Java5793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred215_Java5795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred215_Java5797 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred215_Java5799 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_castExpression_in_synpred229_Java6146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_synpred236_Java6296 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_primitiveType_in_synpred236_Java6298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_synpred236_Java6300 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred236_Java6302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_synpred237_Java6325 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_synpred237_Java6327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_synpred237_Java6329 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_synpred237_Java6331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_synpred242_Java6440 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred242_Java6442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred242_Java6444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_synpred246_Java6419 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred246_Java6421 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_primitiveType_in_synpred246_Java6424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred246_Java6440 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred246_Java6442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred246_Java6444 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred246_Java6449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred246_Java6451 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred246_Java6482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred246_Java6484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000084L});
    public static final BitSet FOLLOW_arrayInitializer_in_synpred246_Java6488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_synpred249_Java6554 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred249_Java6556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred249_Java6558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_synpred254_Java6520 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred254_Java6522 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L});
    public static final BitSet FOLLOW_refComponent_in_synpred254_Java6528 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_121_in_synpred254_Java6531 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L});
    public static final BitSet FOLLOW_refComponent_in_synpred254_Java6535 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_135_in_synpred254_Java6554 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred254_Java6556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred254_Java6558 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred254_Java6563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred254_Java6565 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred254_Java6598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred254_Java6600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000084L});
    public static final BitSet FOLLOW_arrayInitializer_in_synpred254_Java6604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_synpred254_Java6633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred255_Java6665 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_synpred255_Java6667 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_synpred255_Java6669 = new BitSet(new long[]{0x0000000000000002L});

}