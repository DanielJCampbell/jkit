// $ANTLR 3.1 jkit/java/Java.g 2008-12-02 15:08:29

package jkit.java;
import jkit.compiler.SyntaxError;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g 
 *  and got two errors that are ok (for now):
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created 
 *          elementValuePair and elementValuePairs rules, then used them in the 
 *          annotation rule.  Allows it to recognize annotation references with 
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the Identifier portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which 
 *          has the Identifier portion in it, the parser would fail on constants in 
 *          annotation definitions because it expected two identifiers.  
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to 
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing 
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *          Again, JLS doesn't seem to allow this, but java.lang.Class has an example of
 *          of this construct.
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 * 		
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *	Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *	and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *	--a[i].foo didn't work. Fixed unaryExpression
 */
public class JavaParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "UNIT", "PACKAGE", "IMPORT", "STATIC_IMPORT", "CLASS", "INTERFACE", "ENUM", "MODIFIERS", "EXTENDS", "IMPLEMENTS", "FIELD", "METHOD", "PARAMETER", "VARARGS", "TYPE", "VOID", "TYPE_PARAMETER", "THROWS", "ANNOTATION", "SUPER", "INTVAL", "FLOATVAL", "DOUBLEVAL", "CHARVAL", "STRINGVAL", "BOOLVAL", "NULLVAL", "BLOCK", "VARDEF", "ASSERT", "IF", "FOR", "WHILE", "DOWHILE", "RETURN", "THROW", "BREAK", "CONTINUE", "ASSIGN", "VAR", "LOR", "OR", "LAND", "AND", "XOR", "EQ", "NEQ", "INSTANCEOF", "LTEQ", "GTEQ", "LT", "GT", "SHL", "SHR", "USHR", "ADD", "SUB", "DIV", "MUL", "MOD", "DEREF", "NEG", "POSTINC", "PREINC", "PREDEC", "POSTDEC", "NOT", "INV", "CAST", "SELECTOR", "INVOKE", "ARRAYINDEX", "NEW", "GETCLASS", "SYNCHRONIZED", "INIT", "TEST", "STEP", "LABEL", "FOREACH", "TRY", "CATCH", "FINALLY", "CONDEXPR", "ARRAYVAL", "SWITCH", "CASE", "DEFAULT", "ARRAYINIT", "ARGUMENTS", "LABINOP", "NONE", "STATIC", "ENUM_CONSTANT", "Identifier", "FloatingPointLiteral", "CharacterLiteral", "StringLiteral", "HexLiteral", "OctalLiteral", "DecimalLiteral", "HexDigit", "IntegerTypeSuffix", "Exponent", "FloatTypeSuffix", "EscapeSequence", "UnicodeEscape", "OctalEscape", "Letter", "JavaIDDigit", "WS", "COMMENT", "LINE_COMMENT", "'package'", "';'", "'import'", "'static'", "'.'", "'*'", "'class'", "'extends'", "'implements'", "'<'", "','", "'>'", "'&'", "'{'", "'}'", "'interface'", "'void'", "'throws'", "'['", "']'", "'='", "'public'", "'protected'", "'private'", "'abstract'", "'final'", "'native'", "'synchronized'", "'transient'", "'volatile'", "'strictfp'", "'boolean'", "'char'", "'byte'", "'short'", "'int'", "'long'", "'float'", "'double'", "'?'", "'super'", "'('", "')'", "'...'", "'null'", "'true'", "'false'", "'@'", "'default'", "'assert'", "':'", "'if'", "'else'", "'for'", "'while'", "'do'", "'try'", "'finally'", "'switch'", "'return'", "'throw'", "'break'", "'continue'", "'catch'", "'case'", "'+'", "'-'", "'/'", "'&='", "'|='", "'^='", "'%'", "'||'", "'&&'", "'|'", "'^'", "'=='", "'!='", "'instanceof'", "'++'", "'--'", "'~'", "'!'", "'new'"
    };
    public static final int T__197=197;
    public static final int T__139=139;
    public static final int SYNCHRONIZED=78;
    public static final int T__174=174;
    public static final int HexDigit=105;
    public static final int T__196=196;
    public static final int T__144=144;
    public static final int T__122=122;
    public static final int METHOD=15;
    public static final int T__137=137;
    public static final int T__140=140;
    public static final int IMPORT=6;
    public static final int PACKAGE=5;
    public static final int CONTINUE=41;
    public static final int Letter=112;
    public static final int T__138=138;
    public static final int T__173=173;
    public static final int T__119=119;
    public static final int ASSERT=33;
    public static final int T__198=198;
    public static final int T__142=142;
    public static final int T__176=176;
    public static final int FloatTypeSuffix=108;
    public static final int T__118=118;
    public static final int T__135=135;
    public static final int EXTENDS=12;
    public static final int POSTDEC=69;
    public static final int ARRAYVAL=88;
    public static final int SUPER=23;
    public static final int IntegerTypeSuffix=106;
    public static final int ARGUMENTS=93;
    public static final int T__156=156;
    public static final int WS=114;
    public static final int NONE=95;
    public static final int T__159=159;
    public static final int T__177=177;
    public static final int T__158=158;
    public static final int FIELD=14;
    public static final int POSTINC=66;
    public static final int LAND=46;
    public static final int CATCH=85;
    public static final int STATIC=96;
    public static final int MUL=62;
    public static final int UnicodeEscape=110;
    public static final int T__157=157;
    public static final int MODIFIERS=11;
    public static final int CONDEXPR=87;
    public static final int T__143=143;
    public static final int T__193=193;
    public static final int XOR=48;
    public static final int T__141=141;
    public static final int ADD=59;
    public static final int FOREACH=83;
    public static final int TYPE=18;
    public static final int SHL=56;
    public static final int LOR=44;
    public static final int OctalLiteral=103;
    public static final int T__167=167;
    public static final int SELECTOR=73;
    public static final int T__194=194;
    public static final int CAST=72;
    public static final int THROWS=21;
    public static final int LABEL=82;
    public static final int MOD=63;
    public static final int T__191=191;
    public static final int DOWHILE=37;
    public static final int OR=45;
    public static final int BLOCK=31;
    public static final int T__192=192;
    public static final int EscapeSequence=109;
    public static final int INSTANCEOF=51;
    public static final int FloatingPointLiteral=99;
    public static final int NEQ=50;
    public static final int T__175=175;
    public static final int T__117=117;
    public static final int WHILE=36;
    public static final int COMMENT=115;
    public static final int INVOKE=74;
    public static final int T__199=199;
    public static final int T__172=172;
    public static final int GTEQ=53;
    public static final int LABINOP=94;
    public static final int UNIT=4;
    public static final int JavaIDDigit=113;
    public static final int T__170=170;
    public static final int T__136=136;
    public static final int RETURN=38;
    public static final int IF=34;
    public static final int T__171=171;
    public static final int GETCLASS=77;
    public static final int FOR=35;
    public static final int T__189=189;
    public static final int DEFAULT=91;
    public static final int OctalEscape=111;
    public static final int STRINGVAL=28;
    public static final int T__134=134;
    public static final int T__195=195;
    public static final int NEG=65;
    public static final int DEREF=64;
    public static final int SUB=60;
    public static final int NOT=70;
    public static final int TRY=84;
    public static final int T__162=162;
    public static final int T__160=160;
    public static final int T__123=123;
    public static final int STEP=81;
    public static final int T__145=145;
    public static final int T__187=187;
    public static final int INTVAL=24;
    public static final int SHR=57;
    public static final int PREDEC=68;
    public static final int ARRAYINIT=92;
    public static final int STATIC_IMPORT=7;
    public static final int T__186=186;
    public static final int AND=47;
    public static final int T__181=181;
    public static final int T__128=128;
    public static final int NULLVAL=30;
    public static final int PREINC=67;
    public static final int T__161=161;
    public static final int FINALLY=86;
    public static final int T__168=168;
    public static final int T__150=150;
    public static final int Identifier=98;
    public static final int ENUM_CONSTANT=97;
    public static final int T__182=182;
    public static final int EQ=49;
    public static final int NEW=76;
    public static final int BOOLVAL=29;
    public static final int LT=54;
    public static final int T__165=165;
    public static final int T__130=130;
    public static final int T__151=151;
    public static final int LINE_COMMENT=116;
    public static final int CASE=90;
    public static final int INTERFACE=9;
    public static final int CHARVAL=27;
    public static final int HexLiteral=102;
    public static final int INV=71;
    public static final int T__125=125;
    public static final int T__149=149;
    public static final int LTEQ=52;
    public static final int DecimalLiteral=104;
    public static final int T__166=166;
    public static final int BREAK=40;
    public static final int T__132=132;
    public static final int ANNOTATION=22;
    public static final int DIV=61;
    public static final int T__190=190;
    public static final int T__131=131;
    public static final int T__124=124;
    public static final int T__169=169;
    public static final int THROW=39;
    public static final int T__126=126;
    public static final int T__148=148;
    public static final int INIT=79;
    public static final int T__188=188;
    public static final int T__200=200;
    public static final int VARDEF=32;
    public static final int DOUBLEVAL=26;
    public static final int TYPE_PARAMETER=20;
    public static final int ARRAYINDEX=75;
    public static final int ASSIGN=42;
    public static final int T__127=127;
    public static final int VOID=19;
    public static final int T__183=183;
    public static final int T__133=133;
    public static final int FLOATVAL=25;
    public static final int VARARGS=17;
    public static final int T__164=164;
    public static final int T__120=120;
    public static final int USHR=58;
    public static final int ENUM=10;
    public static final int T__163=163;
    public static final int Exponent=107;
    public static final int T__153=153;
    public static final int IMPLEMENTS=13;
    public static final int SWITCH=89;
    public static final int T__185=185;
    public static final int CharacterLiteral=100;
    public static final int T__178=178;
    public static final int GT=55;
    public static final int StringLiteral=101;
    public static final int T__129=129;
    public static final int T__180=180;
    public static final int T__152=152;
    public static final int T__121=121;
    public static final int VAR=43;
    public static final int CLASS=8;
    public static final int T__147=147;
    public static final int T__179=179;
    public static final int EOF=-1;
    public static final int T__154=154;
    public static final int T__184=184;
    public static final int PARAMETER=16;
    public static final int T__155=155;
    public static final int TEST=80;
    public static final int T__146=146;

    // delegates
    // delegators


        public JavaParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public JavaParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[388+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return JavaParser.tokenNames; }
    public String getGrammarFileName() { return "jkit/java/Java.g"; }


    public static class compilationUnit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // jkit/java/Java.g:204:1: compilationUnit : ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ -> ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ ) ;
    public final JavaParser.compilationUnit_return compilationUnit() throws RecognitionException {
        JavaParser.compilationUnit_return retval = new JavaParser.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotations_return annotations1 = null;

        JavaParser.packageDeclaration_return packageDeclaration2 = null;

        JavaParser.importDeclaration_return importDeclaration3 = null;

        JavaParser.typeDeclaration_return typeDeclaration4 = null;


        RewriteRuleSubtreeStream stream_importDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule importDeclaration");
        RewriteRuleSubtreeStream stream_packageDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule packageDeclaration");
        RewriteRuleSubtreeStream stream_annotations=new RewriteRuleSubtreeStream(adaptor,"rule annotations");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // jkit/java/Java.g:205:2: ( ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ -> ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ ) )
            // jkit/java/Java.g:205:4: ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+
            {
            // jkit/java/Java.g:205:4: ( annotations )?
            int alt1=2;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // jkit/java/Java.g:0:0: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_compilationUnit457);
                    annotations1=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotations.add(annotations1.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:205:17: ( packageDeclaration )?
            int alt2=2;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    // jkit/java/Java.g:0:0: packageDeclaration
                    {
                    pushFollow(FOLLOW_packageDeclaration_in_compilationUnit460);
                    packageDeclaration2=packageDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_packageDeclaration.add(packageDeclaration2.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:205:37: ( importDeclaration )*
            loop3:
            do {
                int alt3=2;
                alt3 = dfa3.predict(input);
                switch (alt3) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit463);
            	    importDeclaration3=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_importDeclaration.add(importDeclaration3.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);

            // jkit/java/Java.g:205:56: ( typeDeclaration )+
            int cnt4=0;
            loop4:
            do {
                int alt4=2;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: typeDeclaration
            	    {
            	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit466);
            	    typeDeclaration4=typeDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration4.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);



            // AST REWRITE
            // elements: importDeclaration, packageDeclaration, typeDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 206:3: -> ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ )
            {
                // jkit/java/Java.g:206:6: ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNIT, "UNIT"), root_1);

                // jkit/java/Java.g:206:13: ( packageDeclaration )?
                if ( stream_packageDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_packageDeclaration.nextTree());

                }
                stream_packageDeclaration.reset();
                // jkit/java/Java.g:206:33: ( importDeclaration )*
                while ( stream_importDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_importDeclaration.nextTree());

                }
                stream_importDeclaration.reset();
                if ( !(stream_typeDeclaration.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeDeclaration.nextTree());

                }
                stream_typeDeclaration.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // jkit/java/Java.g:209:1: packageDeclaration : 'package' qualifiedName ';' -> ^( PACKAGE qualifiedName ) ;
    public final JavaParser.packageDeclaration_return packageDeclaration() throws RecognitionException {
        JavaParser.packageDeclaration_return retval = new JavaParser.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal5=null;
        Token char_literal7=null;
        JavaParser.qualifiedName_return qualifiedName6 = null;


        Object string_literal5_tree=null;
        Object char_literal7_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleSubtreeStream stream_qualifiedName=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // jkit/java/Java.g:210:2: ( 'package' qualifiedName ';' -> ^( PACKAGE qualifiedName ) )
            // jkit/java/Java.g:210:4: 'package' qualifiedName ';'
            {
            string_literal5=(Token)match(input,117,FOLLOW_117_in_packageDeclaration500); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(string_literal5);

            pushFollow(FOLLOW_qualifiedName_in_packageDeclaration502);
            qualifiedName6=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedName.add(qualifiedName6.getTree());
            char_literal7=(Token)match(input,118,FOLLOW_118_in_packageDeclaration504); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal7);



            // AST REWRITE
            // elements: qualifiedName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 210:32: -> ^( PACKAGE qualifiedName )
            {
                // jkit/java/Java.g:210:35: ^( PACKAGE qualifiedName )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PACKAGE, "PACKAGE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // jkit/java/Java.g:213:1: importDeclaration : 'import' ( 'static' i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( STATIC_IMPORT ( $i)+ ) | i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( IMPORT ( $i)+ ) ) ;
    public final JavaParser.importDeclaration_return importDeclaration() throws RecognitionException {
        JavaParser.importDeclaration_return retval = new JavaParser.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal8=null;
        Token string_literal9=null;
        Token char_literal10=null;
        Token char_literal11=null;
        Token char_literal12=null;
        Token char_literal13=null;
        Token char_literal14=null;
        Token char_literal15=null;
        Token i=null;
        List list_i=null;

        Object string_literal8_tree=null;
        Object string_literal9_tree=null;
        Object char_literal10_tree=null;
        Object char_literal11_tree=null;
        Object char_literal12_tree=null;
        Object char_literal13_tree=null;
        Object char_literal14_tree=null;
        Object char_literal15_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // jkit/java/Java.g:214:2: ( 'import' ( 'static' i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( STATIC_IMPORT ( $i)+ ) | i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( IMPORT ( $i)+ ) ) )
            // jkit/java/Java.g:214:4: 'import' ( 'static' i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( STATIC_IMPORT ( $i)+ ) | i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( IMPORT ( $i)+ ) )
            {
            string_literal8=(Token)match(input,119,FOLLOW_119_in_importDeclaration524); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal8);

            // jkit/java/Java.g:214:13: ( 'static' i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( STATIC_IMPORT ( $i)+ ) | i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( IMPORT ( $i)+ ) )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==120) ) {
                alt9=1;
            }
            else if ( (LA9_0==Identifier) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // jkit/java/Java.g:215:4: 'static' i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';'
                    {
                    string_literal9=(Token)match(input,120,FOLLOW_120_in_importDeclaration531); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(string_literal9);

                    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration535); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    // jkit/java/Java.g:215:27: ( '.' i+= Identifier )*
                    loop5:
                    do {
                        int alt5=2;
                        int LA5_0 = input.LA(1);

                        if ( (LA5_0==121) ) {
                            int LA5_1 = input.LA(2);

                            if ( (LA5_1==Identifier) ) {
                                alt5=1;
                            }


                        }


                        switch (alt5) {
                    	case 1 :
                    	    // jkit/java/Java.g:215:28: '.' i+= Identifier
                    	    {
                    	    char_literal10=(Token)match(input,121,FOLLOW_121_in_importDeclaration538); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_121.add(char_literal10);

                    	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration542); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_Identifier.add(i);

                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i);


                    	    }
                    	    break;

                    	default :
                    	    break loop5;
                        }
                    } while (true);

                    // jkit/java/Java.g:215:48: ( '.' i+= '*' )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==121) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // jkit/java/Java.g:215:49: '.' i+= '*'
                            {
                            char_literal11=(Token)match(input,121,FOLLOW_121_in_importDeclaration547); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_121.add(char_literal11);

                            i=(Token)match(input,122,FOLLOW_122_in_importDeclaration551); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_122.add(i);

                            if (list_i==null) list_i=new ArrayList();
                            list_i.add(i);


                            }
                            break;

                    }

                    char_literal12=(Token)match(input,118,FOLLOW_118_in_importDeclaration555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal12);



                    // AST REWRITE
                    // elements: i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 215:66: -> ^( STATIC_IMPORT ( $i)+ )
                    {
                        // jkit/java/Java.g:215:69: ^( STATIC_IMPORT ( $i)+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STATIC_IMPORT, "STATIC_IMPORT"), root_1);

                        if ( !(stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:216:6: i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';'
                    {
                    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    // jkit/java/Java.g:216:20: ( '.' i+= Identifier )*
                    loop7:
                    do {
                        int alt7=2;
                        int LA7_0 = input.LA(1);

                        if ( (LA7_0==121) ) {
                            int LA7_1 = input.LA(2);

                            if ( (LA7_1==Identifier) ) {
                                alt7=1;
                            }


                        }


                        switch (alt7) {
                    	case 1 :
                    	    // jkit/java/Java.g:216:21: '.' i+= Identifier
                    	    {
                    	    char_literal13=(Token)match(input,121,FOLLOW_121_in_importDeclaration577); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_121.add(char_literal13);

                    	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration581); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_Identifier.add(i);

                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i);


                    	    }
                    	    break;

                    	default :
                    	    break loop7;
                        }
                    } while (true);

                    // jkit/java/Java.g:216:41: ( '.' i+= '*' )?
                    int alt8=2;
                    int LA8_0 = input.LA(1);

                    if ( (LA8_0==121) ) {
                        alt8=1;
                    }
                    switch (alt8) {
                        case 1 :
                            // jkit/java/Java.g:216:42: '.' i+= '*'
                            {
                            char_literal14=(Token)match(input,121,FOLLOW_121_in_importDeclaration586); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_121.add(char_literal14);

                            i=(Token)match(input,122,FOLLOW_122_in_importDeclaration590); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_122.add(i);

                            if (list_i==null) list_i=new ArrayList();
                            list_i.add(i);


                            }
                            break;

                    }

                    char_literal15=(Token)match(input,118,FOLLOW_118_in_importDeclaration594); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal15);



                    // AST REWRITE
                    // elements: i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 216:59: -> ^( IMPORT ( $i)+ )
                    {
                        // jkit/java/Java.g:216:62: ^( IMPORT ( $i)+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPORT, "IMPORT"), root_1);

                        if ( !(stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDeclaration"
    // jkit/java/Java.g:220:1: typeDeclaration : ( classOrInterfaceDeclaration | ';' );
    public final JavaParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
        JavaParser.typeDeclaration_return retval = new JavaParser.typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal17=null;
        JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration16 = null;


        Object char_literal17_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // jkit/java/Java.g:221:2: ( classOrInterfaceDeclaration | ';' )
            int alt10=2;
            alt10 = dfa10.predict(input);
            switch (alt10) {
                case 1 :
                    // jkit/java/Java.g:221:4: classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration621);
                    classOrInterfaceDeclaration16=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceDeclaration16.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:222:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal17=(Token)match(input,118,FOLLOW_118_in_typeDeclaration631); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal17_tree = (Object)adaptor.create(char_literal17);
                    adaptor.addChild(root_0, char_literal17_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"

    public static class classOrInterfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceDeclaration"
    // jkit/java/Java.g:225:1: classOrInterfaceDeclaration : ( modifier )* ( classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) ) ;
    public final JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration() throws RecognitionException {
        JavaParser.classOrInterfaceDeclaration_return retval = new JavaParser.classOrInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int classOrInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.modifier_return modifier18 = null;

        JavaParser.classDeclaration_return classDeclaration19 = null;

        JavaParser.enumDeclaration_return enumDeclaration20 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration21 = null;


        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_enumDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule enumDeclaration");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        RewriteRuleSubtreeStream stream_interfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // jkit/java/Java.g:226:2: ( ( modifier )* ( classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) ) )
            // jkit/java/Java.g:226:4: ( modifier )* ( classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) )
            {
            // jkit/java/Java.g:226:4: ( modifier )*
            loop11:
            do {
                int alt11=2;
                alt11 = dfa11.predict(input);
                switch (alt11) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_classOrInterfaceDeclaration643);
            	    modifier18=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_modifier.add(modifier18.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            // jkit/java/Java.g:226:14: ( classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) )
            int alt12=3;
            switch ( input.LA(1) ) {
            case 123:
                {
                alt12=1;
                }
                break;
            case ENUM:
                {
                alt12=2;
                }
                break;
            case 132:
            case 164:
                {
                alt12=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // jkit/java/Java.g:227:3: classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_classOrInterfaceDeclaration650);
                    classDeclaration19=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classDeclaration.add(classDeclaration19.getTree());


                    // AST REWRITE
                    // elements: modifier, classDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 227:20: -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                    {
                        // jkit/java/Java.g:227:23: ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CLASS, "CLASS"), root_1);

                        // jkit/java/Java.g:227:31: ( ^( MODIFIERS ( modifier )* ) )?
                        if ( stream_modifier.hasNext() ) {
                            // jkit/java/Java.g:227:31: ^( MODIFIERS ( modifier )* )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                            // jkit/java/Java.g:227:43: ( modifier )*
                            while ( stream_modifier.hasNext() ) {
                                adaptor.addChild(root_2, stream_modifier.nextTree());

                            }
                            stream_modifier.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_modifier.reset();
                        adaptor.addChild(root_1, stream_classDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:228:5: enumDeclaration
                    {
                    pushFollow(FOLLOW_enumDeclaration_in_classOrInterfaceDeclaration672);
                    enumDeclaration20=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumDeclaration.add(enumDeclaration20.getTree());


                    // AST REWRITE
                    // elements: modifier, enumDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 228:21: -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                    {
                        // jkit/java/Java.g:228:24: ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ENUM, "ENUM"), root_1);

                        // jkit/java/Java.g:228:31: ( ^( MODIFIERS ( modifier )* ) )?
                        if ( stream_modifier.hasNext() ) {
                            // jkit/java/Java.g:228:31: ^( MODIFIERS ( modifier )* )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                            // jkit/java/Java.g:228:43: ( modifier )*
                            while ( stream_modifier.hasNext() ) {
                                adaptor.addChild(root_2, stream_modifier.nextTree());

                            }
                            stream_modifier.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_modifier.reset();
                        adaptor.addChild(root_1, stream_enumDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:229:5: interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration694);
                    interfaceDeclaration21=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceDeclaration.add(interfaceDeclaration21.getTree());


                    // AST REWRITE
                    // elements: modifier, interfaceDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 229:26: -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                    {
                        // jkit/java/Java.g:229:29: ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                        // jkit/java/Java.g:229:41: ( ^( MODIFIERS ( modifier )* ) )?
                        if ( stream_modifier.hasNext() ) {
                            // jkit/java/Java.g:229:41: ^( MODIFIERS ( modifier )* )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                            // jkit/java/Java.g:229:53: ( modifier )*
                            while ( stream_modifier.hasNext() ) {
                                adaptor.addChild(root_2, stream_modifier.nextTree());

                            }
                            stream_modifier.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_modifier.reset();
                        adaptor.addChild(root_1, stream_interfaceDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, classOrInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceDeclaration"

    public static class classDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classDeclaration"
    // jkit/java/Java.g:233:1: classDeclaration : 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody -> ^( Identifier ( typeParameters )? ) ( ^( EXTENDS type ) )? ( ^( IMPLEMENTS typeList ) )? ( classBody )? ;
    public final JavaParser.classDeclaration_return classDeclaration() throws RecognitionException {
        JavaParser.classDeclaration_return retval = new JavaParser.classDeclaration_return();
        retval.start = input.LT(1);
        int classDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal22=null;
        Token Identifier23=null;
        Token string_literal25=null;
        Token string_literal27=null;
        JavaParser.typeParameters_return typeParameters24 = null;

        JavaParser.type_return type26 = null;

        JavaParser.typeList_return typeList28 = null;

        JavaParser.classBody_return classBody29 = null;


        Object string_literal22_tree=null;
        Object Identifier23_tree=null;
        Object string_literal25_tree=null;
        Object string_literal27_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // jkit/java/Java.g:234:2: ( 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody -> ^( Identifier ( typeParameters )? ) ( ^( EXTENDS type ) )? ( ^( IMPLEMENTS typeList ) )? ( classBody )? )
            // jkit/java/Java.g:234:4: 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody
            {
            string_literal22=(Token)match(input,123,FOLLOW_123_in_classDeclaration727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_123.add(string_literal22);

            Identifier23=(Token)match(input,Identifier,FOLLOW_Identifier_in_classDeclaration729); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier23);

            // jkit/java/Java.g:234:23: ( typeParameters )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==126) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // jkit/java/Java.g:234:24: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_classDeclaration732);
                    typeParameters24=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters24.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:235:9: ( 'extends' type )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==124) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // jkit/java/Java.g:235:10: 'extends' type
                    {
                    string_literal25=(Token)match(input,124,FOLLOW_124_in_classDeclaration745); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(string_literal25);

                    pushFollow(FOLLOW_type_in_classDeclaration747);
                    type26=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type26.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:236:9: ( 'implements' typeList )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==125) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // jkit/java/Java.g:236:10: 'implements' typeList
                    {
                    string_literal27=(Token)match(input,125,FOLLOW_125_in_classDeclaration761); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_125.add(string_literal27);

                    pushFollow(FOLLOW_typeList_in_classDeclaration763);
                    typeList28=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList28.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_classDeclaration775);
            classBody29=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classBody.add(classBody29.getTree());


            // AST REWRITE
            // elements: type, typeParameters, classBody, Identifier, typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 237:19: -> ^( Identifier ( typeParameters )? ) ( ^( EXTENDS type ) )? ( ^( IMPLEMENTS typeList ) )? ( classBody )?
            {
                // jkit/java/Java.g:237:22: ^( Identifier ( typeParameters )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/Java.g:237:35: ( typeParameters )?
                if ( stream_typeParameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeParameters.nextTree());

                }
                stream_typeParameters.reset();

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/Java.g:237:52: ( ^( EXTENDS type ) )?
                if ( stream_type.hasNext() ) {
                    // jkit/java/Java.g:237:52: ^( EXTENDS type )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXTENDS, "EXTENDS"), root_1);

                    adaptor.addChild(root_1, stream_type.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_type.reset();
                // jkit/java/Java.g:237:69: ( ^( IMPLEMENTS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:237:69: ^( IMPLEMENTS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPLEMENTS, "IMPLEMENTS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();
                // jkit/java/Java.g:237:93: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_classBody.nextTree());

                }
                stream_classBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, classDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classDeclaration"

    public static class typeParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameters"
    // jkit/java/Java.g:240:1: typeParameters : '<' t+= typeParameter ( ',' t+= typeParameter )* '>' -> ( $t)* ;
    public final JavaParser.typeParameters_return typeParameters() throws RecognitionException {
        JavaParser.typeParameters_return retval = new JavaParser.typeParameters_return();
        retval.start = input.LT(1);
        int typeParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal30=null;
        Token char_literal31=null;
        Token char_literal32=null;
        List list_t=null;
        JavaParser.typeParameter_return t = null;
        Object char_literal30_tree=null;
        Object char_literal31_tree=null;
        Object char_literal32_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_typeParameter=new RewriteRuleSubtreeStream(adaptor,"rule typeParameter");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // jkit/java/Java.g:241:2: ( '<' t+= typeParameter ( ',' t+= typeParameter )* '>' -> ( $t)* )
            // jkit/java/Java.g:241:4: '<' t+= typeParameter ( ',' t+= typeParameter )* '>'
            {
            char_literal30=(Token)match(input,126,FOLLOW_126_in_typeParameters812); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal30);

            pushFollow(FOLLOW_typeParameter_in_typeParameters816);
            t=typeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeParameter.add(t.getTree());
            if (list_t==null) list_t=new ArrayList();
            list_t.add(t.getTree());

            // jkit/java/Java.g:241:25: ( ',' t+= typeParameter )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==127) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // jkit/java/Java.g:241:26: ',' t+= typeParameter
            	    {
            	    char_literal31=(Token)match(input,127,FOLLOW_127_in_typeParameters819); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal31);

            	    pushFollow(FOLLOW_typeParameter_in_typeParameters823);
            	    t=typeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeParameter.add(t.getTree());
            	    if (list_t==null) list_t=new ArrayList();
            	    list_t.add(t.getTree());


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            char_literal32=(Token)match(input,128,FOLLOW_128_in_typeParameters827); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal32);



            // AST REWRITE
            // elements: t
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: t
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
            root_0 = (Object)adaptor.nil();
            // 241:53: -> ( $t)*
            {
                // jkit/java/Java.g:241:56: ( $t)*
                while ( stream_t.hasNext() ) {
                    adaptor.addChild(root_0, stream_t.nextTree());

                }
                stream_t.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, typeParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameters"

    public static class typeParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameter"
    // jkit/java/Java.g:244:1: typeParameter : Identifier ( 'extends' bound )? -> ^( TYPE_PARAMETER ^( Identifier ( ^( EXTENDS bound ) )? ) ) ;
    public final JavaParser.typeParameter_return typeParameter() throws RecognitionException {
        JavaParser.typeParameter_return retval = new JavaParser.typeParameter_return();
        retval.start = input.LT(1);
        int typeParameter_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier33=null;
        Token string_literal34=null;
        JavaParser.bound_return bound35 = null;


        Object Identifier33_tree=null;
        Object string_literal34_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_bound=new RewriteRuleSubtreeStream(adaptor,"rule bound");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // jkit/java/Java.g:245:2: ( Identifier ( 'extends' bound )? -> ^( TYPE_PARAMETER ^( Identifier ( ^( EXTENDS bound ) )? ) ) )
            // jkit/java/Java.g:245:4: Identifier ( 'extends' bound )?
            {
            Identifier33=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeParameter844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier33);

            // jkit/java/Java.g:245:15: ( 'extends' bound )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==124) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // jkit/java/Java.g:245:16: 'extends' bound
                    {
                    string_literal34=(Token)match(input,124,FOLLOW_124_in_typeParameter847); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(string_literal34);

                    pushFollow(FOLLOW_bound_in_typeParameter849);
                    bound35=bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound.add(bound35.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bound, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 245:34: -> ^( TYPE_PARAMETER ^( Identifier ( ^( EXTENDS bound ) )? ) )
            {
                // jkit/java/Java.g:245:37: ^( TYPE_PARAMETER ^( Identifier ( ^( EXTENDS bound ) )? ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETER, "TYPE_PARAMETER"), root_1);

                // jkit/java/Java.g:245:54: ^( Identifier ( ^( EXTENDS bound ) )? )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_2);

                // jkit/java/Java.g:245:67: ( ^( EXTENDS bound ) )?
                if ( stream_bound.hasNext() ) {
                    // jkit/java/Java.g:245:67: ^( EXTENDS bound )
                    {
                    Object root_3 = (Object)adaptor.nil();
                    root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXTENDS, "EXTENDS"), root_3);

                    adaptor.addChild(root_3, stream_bound.nextTree());

                    adaptor.addChild(root_2, root_3);
                    }

                }
                stream_bound.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, typeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameter"

    public static class bound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bound"
    // jkit/java/Java.g:248:1: bound : t+= type ( '&' t+= type )* -> ( $t)* ;
    public final JavaParser.bound_return bound() throws RecognitionException {
        JavaParser.bound_return retval = new JavaParser.bound_return();
        retval.start = input.LT(1);
        int bound_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal36=null;
        List list_t=null;
        JavaParser.type_return t = null;
        Object char_literal36_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // jkit/java/Java.g:249:2: (t+= type ( '&' t+= type )* -> ( $t)* )
            // jkit/java/Java.g:249:4: t+= type ( '&' t+= type )*
            {
            pushFollow(FOLLOW_type_in_bound883);
            t=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(t.getTree());
            if (list_t==null) list_t=new ArrayList();
            list_t.add(t.getTree());

            // jkit/java/Java.g:249:12: ( '&' t+= type )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==129) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // jkit/java/Java.g:249:13: '&' t+= type
            	    {
            	    char_literal36=(Token)match(input,129,FOLLOW_129_in_bound886); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_129.add(char_literal36);

            	    pushFollow(FOLLOW_type_in_bound890);
            	    t=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type.add(t.getTree());
            	    if (list_t==null) list_t=new ArrayList();
            	    list_t.add(t.getTree());


            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);



            // AST REWRITE
            // elements: t
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: t
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
            root_0 = (Object)adaptor.nil();
            // 249:27: -> ( $t)*
            {
                // jkit/java/Java.g:249:30: ( $t)*
                while ( stream_t.hasNext() ) {
                    adaptor.addChild(root_0, stream_t.nextTree());

                }
                stream_t.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, bound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bound"

    public static class enumDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumDeclaration"
    // jkit/java/Java.g:252:1: enumDeclaration : ENUM Identifier ( 'implements' typeList )? enumBody -> Identifier ( ^( IMPLEMENTS typeList ) )? ( enumBody )? ;
    public final JavaParser.enumDeclaration_return enumDeclaration() throws RecognitionException {
        JavaParser.enumDeclaration_return retval = new JavaParser.enumDeclaration_return();
        retval.start = input.LT(1);
        int enumDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token ENUM37=null;
        Token Identifier38=null;
        Token string_literal39=null;
        JavaParser.typeList_return typeList40 = null;

        JavaParser.enumBody_return enumBody41 = null;


        Object ENUM37_tree=null;
        Object Identifier38_tree=null;
        Object string_literal39_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_ENUM=new RewriteRuleTokenStream(adaptor,"token ENUM");
        RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // jkit/java/Java.g:253:2: ( ENUM Identifier ( 'implements' typeList )? enumBody -> Identifier ( ^( IMPLEMENTS typeList ) )? ( enumBody )? )
            // jkit/java/Java.g:253:4: ENUM Identifier ( 'implements' typeList )? enumBody
            {
            ENUM37=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumDeclaration909); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ENUM.add(ENUM37);

            Identifier38=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumDeclaration911); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier38);

            // jkit/java/Java.g:253:20: ( 'implements' typeList )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==125) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // jkit/java/Java.g:253:21: 'implements' typeList
                    {
                    string_literal39=(Token)match(input,125,FOLLOW_125_in_enumDeclaration914); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_125.add(string_literal39);

                    pushFollow(FOLLOW_typeList_in_enumDeclaration916);
                    typeList40=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList40.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumDeclaration920);
            enumBody41=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumBody.add(enumBody41.getTree());


            // AST REWRITE
            // elements: typeList, enumBody, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 253:54: -> Identifier ( ^( IMPLEMENTS typeList ) )? ( enumBody )?
            {
                adaptor.addChild(root_0, stream_Identifier.nextNode());
                // jkit/java/Java.g:253:68: ( ^( IMPLEMENTS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:253:68: ^( IMPLEMENTS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPLEMENTS, "IMPLEMENTS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();
                // jkit/java/Java.g:253:92: ( enumBody )?
                if ( stream_enumBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumBody.nextTree());

                }
                stream_enumBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, enumDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBody"
    // jkit/java/Java.g:256:1: enumBody : '{' ( enumConstants )? ( enumBodyDeclarations )? '}' -> ( enumConstants )? ( enumBodyDeclarations )? ;
    public final JavaParser.enumBody_return enumBody() throws RecognitionException {
        JavaParser.enumBody_return retval = new JavaParser.enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal42=null;
        Token char_literal45=null;
        JavaParser.enumConstants_return enumConstants43 = null;

        JavaParser.enumBodyDeclarations_return enumBodyDeclarations44 = null;


        Object char_literal42_tree=null;
        Object char_literal45_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_enumConstants=new RewriteRuleSubtreeStream(adaptor,"rule enumConstants");
        RewriteRuleSubtreeStream stream_enumBodyDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule enumBodyDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // jkit/java/Java.g:257:2: ( '{' ( enumConstants )? ( enumBodyDeclarations )? '}' -> ( enumConstants )? ( enumBodyDeclarations )? )
            // jkit/java/Java.g:257:4: '{' ( enumConstants )? ( enumBodyDeclarations )? '}'
            {
            char_literal42=(Token)match(input,130,FOLLOW_130_in_enumBody946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal42);

            // jkit/java/Java.g:257:8: ( enumConstants )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==Identifier||LA20_0==164) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // jkit/java/Java.g:0:0: enumConstants
                    {
                    pushFollow(FOLLOW_enumConstants_in_enumBody948);
                    enumConstants43=enumConstants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumConstants.add(enumConstants43.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:257:23: ( enumBodyDeclarations )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==118) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // jkit/java/Java.g:0:0: enumBodyDeclarations
                    {
                    pushFollow(FOLLOW_enumBodyDeclarations_in_enumBody951);
                    enumBodyDeclarations44=enumBodyDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumBodyDeclarations.add(enumBodyDeclarations44.getTree());

                    }
                    break;

            }

            char_literal45=(Token)match(input,131,FOLLOW_131_in_enumBody954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(char_literal45);



            // AST REWRITE
            // elements: enumConstants, enumBodyDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 257:49: -> ( enumConstants )? ( enumBodyDeclarations )?
            {
                // jkit/java/Java.g:257:52: ( enumConstants )?
                if ( stream_enumConstants.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumConstants.nextTree());

                }
                stream_enumConstants.reset();
                // jkit/java/Java.g:257:67: ( enumBodyDeclarations )?
                if ( stream_enumBodyDeclarations.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumBodyDeclarations.nextTree());

                }
                stream_enumBodyDeclarations.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumConstants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstants"
    // jkit/java/Java.g:260:1: enumConstants : enumConstant ( ',' enumConstant )* -> ( enumConstant )+ ;
    public final JavaParser.enumConstants_return enumConstants() throws RecognitionException {
        JavaParser.enumConstants_return retval = new JavaParser.enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal47=null;
        JavaParser.enumConstant_return enumConstant46 = null;

        JavaParser.enumConstant_return enumConstant48 = null;


        Object char_literal47_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_enumConstant=new RewriteRuleSubtreeStream(adaptor,"rule enumConstant");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // jkit/java/Java.g:261:2: ( enumConstant ( ',' enumConstant )* -> ( enumConstant )+ )
            // jkit/java/Java.g:261:4: enumConstant ( ',' enumConstant )*
            {
            pushFollow(FOLLOW_enumConstant_in_enumConstants973);
            enumConstant46=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumConstant.add(enumConstant46.getTree());
            // jkit/java/Java.g:261:17: ( ',' enumConstant )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==127) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // jkit/java/Java.g:261:18: ',' enumConstant
            	    {
            	    char_literal47=(Token)match(input,127,FOLLOW_127_in_enumConstants976); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal47);

            	    pushFollow(FOLLOW_enumConstant_in_enumConstants978);
            	    enumConstant48=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_enumConstant.add(enumConstant48.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);



            // AST REWRITE
            // elements: enumConstant
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 261:37: -> ( enumConstant )+
            {
                if ( !(stream_enumConstant.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_enumConstant.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumConstant.nextTree());

                }
                stream_enumConstant.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstant"
    // jkit/java/Java.g:264:1: enumConstant : ( annotations )? Identifier ( arguments )? ( classBody )? -> ^( ENUM_CONSTANT ( annotations )? Identifier ( arguments )? ( classBody )? ) ;
    public final JavaParser.enumConstant_return enumConstant() throws RecognitionException {
        JavaParser.enumConstant_return retval = new JavaParser.enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier50=null;
        JavaParser.annotations_return annotations49 = null;

        JavaParser.arguments_return arguments51 = null;

        JavaParser.classBody_return classBody52 = null;


        Object Identifier50_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_annotations=new RewriteRuleSubtreeStream(adaptor,"rule annotations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // jkit/java/Java.g:265:2: ( ( annotations )? Identifier ( arguments )? ( classBody )? -> ^( ENUM_CONSTANT ( annotations )? Identifier ( arguments )? ( classBody )? ) )
            // jkit/java/Java.g:265:4: ( annotations )? Identifier ( arguments )? ( classBody )?
            {
            // jkit/java/Java.g:265:4: ( annotations )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==164) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // jkit/java/Java.g:0:0: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_enumConstant997);
                    annotations49=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotations.add(annotations49.getTree());

                    }
                    break;

            }

            Identifier50=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumConstant1000); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier50);

            // jkit/java/Java.g:265:28: ( arguments )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==158) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // jkit/java/Java.g:265:29: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant1003);
                    arguments51=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments51.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:265:41: ( classBody )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==130) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // jkit/java/Java.g:265:42: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant1008);
                    classBody52=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody52.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: Identifier, classBody, arguments, annotations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 265:54: -> ^( ENUM_CONSTANT ( annotations )? Identifier ( arguments )? ( classBody )? )
            {
                // jkit/java/Java.g:265:57: ^( ENUM_CONSTANT ( annotations )? Identifier ( arguments )? ( classBody )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ENUM_CONSTANT, "ENUM_CONSTANT"), root_1);

                // jkit/java/Java.g:265:73: ( annotations )?
                if ( stream_annotations.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotations.nextTree());

                }
                stream_annotations.reset();
                adaptor.addChild(root_1, stream_Identifier.nextNode());
                // jkit/java/Java.g:265:97: ( arguments )?
                if ( stream_arguments.hasNext() ) {
                    adaptor.addChild(root_1, stream_arguments.nextTree());

                }
                stream_arguments.reset();
                // jkit/java/Java.g:265:110: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_1, stream_classBody.nextTree());

                }
                stream_classBody.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class enumBodyDeclarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBodyDeclarations"
    // jkit/java/Java.g:268:1: enumBodyDeclarations : ';' ( classBodyDeclaration )* -> ( classBodyDeclaration )* ;
    public final JavaParser.enumBodyDeclarations_return enumBodyDeclarations() throws RecognitionException {
        JavaParser.enumBodyDeclarations_return retval = new JavaParser.enumBodyDeclarations_return();
        retval.start = input.LT(1);
        int enumBodyDeclarations_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal53=null;
        JavaParser.classBodyDeclaration_return classBodyDeclaration54 = null;


        Object char_literal53_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleSubtreeStream stream_classBodyDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classBodyDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // jkit/java/Java.g:269:2: ( ';' ( classBodyDeclaration )* -> ( classBodyDeclaration )* )
            // jkit/java/Java.g:269:4: ';' ( classBodyDeclaration )*
            {
            char_literal53=(Token)match(input,118,FOLLOW_118_in_enumBodyDeclarations1043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal53);

            // jkit/java/Java.g:269:8: ( classBodyDeclaration )*
            loop26:
            do {
                int alt26=2;
                alt26 = dfa26.predict(input);
                switch (alt26) {
            	case 1 :
            	    // jkit/java/Java.g:269:9: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations1046);
            	    classBodyDeclaration54=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classBodyDeclaration.add(classBodyDeclaration54.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);



            // AST REWRITE
            // elements: classBodyDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 269:32: -> ( classBodyDeclaration )*
            {
                // jkit/java/Java.g:269:35: ( classBodyDeclaration )*
                while ( stream_classBodyDeclaration.hasNext() ) {
                    adaptor.addChild(root_0, stream_classBodyDeclaration.nextTree());

                }
                stream_classBodyDeclaration.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, enumBodyDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBodyDeclarations"

    public static class interfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceDeclaration"
    // jkit/java/Java.g:272:1: interfaceDeclaration : ( normalInterfaceDeclaration | annotationTypeDeclaration );
    public final JavaParser.interfaceDeclaration_return interfaceDeclaration() throws RecognitionException {
        JavaParser.interfaceDeclaration_return retval = new JavaParser.interfaceDeclaration_return();
        retval.start = input.LT(1);
        int interfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.normalInterfaceDeclaration_return normalInterfaceDeclaration55 = null;

        JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration56 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // jkit/java/Java.g:273:2: ( normalInterfaceDeclaration | annotationTypeDeclaration )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==132) ) {
                alt27=1;
            }
            else if ( (LA27_0==164) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // jkit/java/Java.g:273:4: normalInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration1065);
                    normalInterfaceDeclaration55=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalInterfaceDeclaration55.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:274:4: annotationTypeDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration1070);
                    annotationTypeDeclaration56=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration56.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, interfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceDeclaration"

    public static class normalInterfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalInterfaceDeclaration"
    // jkit/java/Java.g:277:1: normalInterfaceDeclaration : 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody -> ^( Identifier ( typeParameters )? ) ( ^( IMPLEMENTS typeList ) )? ( interfaceBody )? ;
    public final JavaParser.normalInterfaceDeclaration_return normalInterfaceDeclaration() throws RecognitionException {
        JavaParser.normalInterfaceDeclaration_return retval = new JavaParser.normalInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int normalInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal57=null;
        Token Identifier58=null;
        Token string_literal60=null;
        JavaParser.typeParameters_return typeParameters59 = null;

        JavaParser.typeList_return typeList61 = null;

        JavaParser.interfaceBody_return interfaceBody62 = null;


        Object string_literal57_tree=null;
        Object Identifier58_tree=null;
        Object string_literal60_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // jkit/java/Java.g:278:2: ( 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody -> ^( Identifier ( typeParameters )? ) ( ^( IMPLEMENTS typeList ) )? ( interfaceBody )? )
            // jkit/java/Java.g:278:4: 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody
            {
            string_literal57=(Token)match(input,132,FOLLOW_132_in_normalInterfaceDeclaration1082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_132.add(string_literal57);

            Identifier58=(Token)match(input,Identifier,FOLLOW_Identifier_in_normalInterfaceDeclaration1084); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier58);

            // jkit/java/Java.g:278:27: ( typeParameters )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==126) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // jkit/java/Java.g:0:0: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration1086);
                    typeParameters59=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters59.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:278:43: ( 'extends' typeList )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==124) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // jkit/java/Java.g:278:44: 'extends' typeList
                    {
                    string_literal60=(Token)match(input,124,FOLLOW_124_in_normalInterfaceDeclaration1090); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(string_literal60);

                    pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration1092);
                    typeList61=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList61.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_normalInterfaceDeclaration1096);
            interfaceBody62=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceBody.add(interfaceBody62.getTree());


            // AST REWRITE
            // elements: Identifier, typeParameters, interfaceBody, typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 278:79: -> ^( Identifier ( typeParameters )? ) ( ^( IMPLEMENTS typeList ) )? ( interfaceBody )?
            {
                // jkit/java/Java.g:278:82: ^( Identifier ( typeParameters )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/Java.g:278:95: ( typeParameters )?
                if ( stream_typeParameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeParameters.nextTree());

                }
                stream_typeParameters.reset();

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/Java.g:278:112: ( ^( IMPLEMENTS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:278:112: ^( IMPLEMENTS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPLEMENTS, "IMPLEMENTS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();
                // jkit/java/Java.g:278:136: ( interfaceBody )?
                if ( stream_interfaceBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_interfaceBody.nextTree());

                }
                stream_interfaceBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, normalInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalInterfaceDeclaration"

    public static class typeList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // jkit/java/Java.g:281:1: typeList : type ( ',' type )* ;
    public final JavaParser.typeList_return typeList() throws RecognitionException {
        JavaParser.typeList_return retval = new JavaParser.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal64=null;
        JavaParser.type_return type63 = null;

        JavaParser.type_return type65 = null;


        Object char_literal64_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // jkit/java/Java.g:282:2: ( type ( ',' type )* )
            // jkit/java/Java.g:282:4: type ( ',' type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList1127);
            type63=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type63.getTree());
            // jkit/java/Java.g:282:9: ( ',' type )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==127) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // jkit/java/Java.g:282:10: ',' type
            	    {
            	    char_literal64=(Token)match(input,127,FOLLOW_127_in_typeList1130); if (state.failed) return retval;
            	    pushFollow(FOLLOW_type_in_typeList1133);
            	    type65=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type65.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class classBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // jkit/java/Java.g:285:1: classBody : '{' ( classBodyDeclaration )* '}' ;
    public final JavaParser.classBody_return classBody() throws RecognitionException {
        JavaParser.classBody_return retval = new JavaParser.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal66=null;
        Token char_literal68=null;
        JavaParser.classBodyDeclaration_return classBodyDeclaration67 = null;


        Object char_literal66_tree=null;
        Object char_literal68_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // jkit/java/Java.g:286:2: ( '{' ( classBodyDeclaration )* '}' )
            // jkit/java/Java.g:286:4: '{' ( classBodyDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal66=(Token)match(input,130,FOLLOW_130_in_classBody1147); if (state.failed) return retval;
            // jkit/java/Java.g:286:9: ( classBodyDeclaration )*
            loop31:
            do {
                int alt31=2;
                alt31 = dfa31.predict(input);
                switch (alt31) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_classBody1150);
            	    classBodyDeclaration67=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBodyDeclaration67.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);

            char_literal68=(Token)match(input,131,FOLLOW_131_in_classBody1153); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // jkit/java/Java.g:289:1: interfaceBody : '{' ( interfaceBodyDeclaration )* '}' ;
    public final JavaParser.interfaceBody_return interfaceBody() throws RecognitionException {
        JavaParser.interfaceBody_return retval = new JavaParser.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal69=null;
        Token char_literal71=null;
        JavaParser.interfaceBodyDeclaration_return interfaceBodyDeclaration70 = null;


        Object char_literal69_tree=null;
        Object char_literal71_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // jkit/java/Java.g:290:2: ( '{' ( interfaceBodyDeclaration )* '}' )
            // jkit/java/Java.g:290:4: '{' ( interfaceBodyDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal69=(Token)match(input,130,FOLLOW_130_in_interfaceBody1166); if (state.failed) return retval;
            // jkit/java/Java.g:290:9: ( interfaceBodyDeclaration )*
            loop32:
            do {
                int alt32=2;
                alt32 = dfa32.predict(input);
                switch (alt32) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: interfaceBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody1169);
            	    interfaceBodyDeclaration70=interfaceBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceBodyDeclaration70.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);

            char_literal71=(Token)match(input,131,FOLLOW_131_in_interfaceBody1172); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class classBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBodyDeclaration"
    // jkit/java/Java.g:293:1: classBodyDeclaration : ( ';' | 'static' block -> ^( STATIC block ) | ( 'static' )? block -> block | ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) ) );
    public final JavaParser.classBodyDeclaration_return classBodyDeclaration() throws RecognitionException {
        JavaParser.classBodyDeclaration_return retval = new JavaParser.classBodyDeclaration_return();
        retval.start = input.LT(1);
        int classBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal72=null;
        Token string_literal73=null;
        Token string_literal75=null;
        Token string_literal81=null;
        Token Identifier82=null;
        Token Identifier84=null;
        JavaParser.block_return block74 = null;

        JavaParser.block_return block76 = null;

        JavaParser.modifier_return modifier77 = null;

        JavaParser.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl78 = null;

        JavaParser.methodDeclaration_return methodDeclaration79 = null;

        JavaParser.fieldDeclaration_return fieldDeclaration80 = null;

        JavaParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest83 = null;

        JavaParser.constructorDeclaratorRest_return constructorDeclaratorRest85 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration86 = null;

        JavaParser.classDeclaration_return classDeclaration87 = null;

        JavaParser.enumDeclaration_return enumDeclaration88 = null;


        Object char_literal72_tree=null;
        Object string_literal73_tree=null;
        Object string_literal75_tree=null;
        Object string_literal81_tree=null;
        Object Identifier82_tree=null;
        Object Identifier84_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_constructorDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constructorDeclaratorRest");
        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_fieldDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule fieldDeclaration");
        RewriteRuleSubtreeStream stream_enumDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule enumDeclaration");
        RewriteRuleSubtreeStream stream_genericMethodOrConstructorDecl=new RewriteRuleSubtreeStream(adaptor,"rule genericMethodOrConstructorDecl");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        RewriteRuleSubtreeStream stream_voidMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule voidMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_methodDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaration");
        RewriteRuleSubtreeStream stream_interfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDeclaration");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // jkit/java/Java.g:294:2: ( ';' | 'static' block -> ^( STATIC block ) | ( 'static' )? block -> block | ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) ) )
            int alt36=4;
            alt36 = dfa36.predict(input);
            switch (alt36) {
                case 1 :
                    // jkit/java/Java.g:294:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal72=(Token)match(input,118,FOLLOW_118_in_classBodyDeclaration1184); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:295:4: 'static' block
                    {
                    string_literal73=(Token)match(input,120,FOLLOW_120_in_classBodyDeclaration1190); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(string_literal73);

                    pushFollow(FOLLOW_block_in_classBodyDeclaration1192);
                    block74=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block74.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 295:19: -> ^( STATIC block )
                    {
                        // jkit/java/Java.g:295:22: ^( STATIC block )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STATIC, "STATIC"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:296:4: ( 'static' )? block
                    {
                    // jkit/java/Java.g:296:4: ( 'static' )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==120) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // jkit/java/Java.g:0:0: 'static'
                            {
                            string_literal75=(Token)match(input,120,FOLLOW_120_in_classBodyDeclaration1205); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_120.add(string_literal75);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_classBodyDeclaration1208);
                    block76=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block76.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 296:20: -> block
                    {
                        adaptor.addChild(root_0, stream_block.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:297:4: ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) )
                    {
                    // jkit/java/Java.g:297:4: ( modifier )*
                    loop34:
                    do {
                        int alt34=2;
                        alt34 = dfa34.predict(input);
                        switch (alt34) {
                    	case 1 :
                    	    // jkit/java/Java.g:0:0: modifier
                    	    {
                    	    pushFollow(FOLLOW_modifier_in_classBodyDeclaration1217);
                    	    modifier77=modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_modifier.add(modifier77.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop34;
                        }
                    } while (true);

                    // jkit/java/Java.g:297:14: ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) )
                    int alt35=8;
                    alt35 = dfa35.predict(input);
                    switch (alt35) {
                        case 1 :
                            // jkit/java/Java.g:298:6: genericMethodOrConstructorDecl
                            {
                            pushFollow(FOLLOW_genericMethodOrConstructorDecl_in_classBodyDeclaration1227);
                            genericMethodOrConstructorDecl78=genericMethodOrConstructorDecl();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericMethodOrConstructorDecl.add(genericMethodOrConstructorDecl78.getTree());


                            // AST REWRITE
                            // elements: genericMethodOrConstructorDecl, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 298:37: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl )
                            {
                                // jkit/java/Java.g:298:40: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:298:49: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:298:49: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:298:61: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_genericMethodOrConstructorDecl.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:299:9: methodDeclaration
                            {
                            pushFollow(FOLLOW_methodDeclaration_in_classBodyDeclaration1253);
                            methodDeclaration79=methodDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_methodDeclaration.add(methodDeclaration79.getTree());


                            // AST REWRITE
                            // elements: methodDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 299:27: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration )
                            {
                                // jkit/java/Java.g:299:30: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:299:39: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:299:39: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:299:51: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_methodDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:300:9: fieldDeclaration
                            {
                            pushFollow(FOLLOW_fieldDeclaration_in_classBodyDeclaration1279);
                            fieldDeclaration80=fieldDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldDeclaration.add(fieldDeclaration80.getTree());


                            // AST REWRITE
                            // elements: modifier, fieldDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 300:26: -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration )
                            {
                                // jkit/java/Java.g:300:29: ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FIELD, "FIELD"), root_1);

                                // jkit/java/Java.g:300:37: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:300:37: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:300:49: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_fieldDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // jkit/java/Java.g:301:8: 'void' Identifier voidMethodDeclaratorRest
                            {
                            string_literal81=(Token)match(input,133,FOLLOW_133_in_classBodyDeclaration1304); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_133.add(string_literal81);

                            Identifier82=(Token)match(input,Identifier,FOLLOW_Identifier_in_classBodyDeclaration1306); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier82);

                            pushFollow(FOLLOW_voidMethodDeclaratorRest_in_classBodyDeclaration1308);
                            voidMethodDeclaratorRest83=voidMethodDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_voidMethodDeclaratorRest.add(voidMethodDeclaratorRest83.getTree());


                            // AST REWRITE
                            // elements: Identifier, voidMethodDeclaratorRest, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 301:51: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? )
                            {
                                // jkit/java/Java.g:301:54: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:301:63: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:301:63: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:301:75: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:301:98: ^( TYPE VOID )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, (Object)adaptor.create(VOID, "VOID"));

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:301:111: ( voidMethodDeclaratorRest )?
                                if ( stream_voidMethodDeclaratorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_voidMethodDeclaratorRest.nextTree());

                                }
                                stream_voidMethodDeclaratorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // jkit/java/Java.g:302:8: Identifier constructorDeclaratorRest
                            {
                            Identifier84=(Token)match(input,Identifier,FOLLOW_Identifier_in_classBodyDeclaration1342); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier84);

                            pushFollow(FOLLOW_constructorDeclaratorRest_in_classBodyDeclaration1344);
                            constructorDeclaratorRest85=constructorDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constructorDeclaratorRest.add(constructorDeclaratorRest85.getTree());


                            // AST REWRITE
                            // elements: constructorDeclaratorRest, modifier, Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 302:45: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest )
                            {
                                // jkit/java/Java.g:302:48: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:302:57: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:302:57: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:302:69: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:302:92: ^( NONE )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(NONE, "NONE"), root_2);

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_constructorDeclaratorRest.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 6 :
                            // jkit/java/Java.g:303:8: interfaceDeclaration
                            {
                            pushFollow(FOLLOW_interfaceDeclaration_in_classBodyDeclaration1375);
                            interfaceDeclaration86=interfaceDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceDeclaration.add(interfaceDeclaration86.getTree());


                            // AST REWRITE
                            // elements: interfaceDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 303:29: -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                            {
                                // jkit/java/Java.g:303:32: ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                                // jkit/java/Java.g:303:44: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:303:44: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:303:56: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_interfaceDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 7 :
                            // jkit/java/Java.g:304:8: classDeclaration
                            {
                            pushFollow(FOLLOW_classDeclaration_in_classBodyDeclaration1400);
                            classDeclaration87=classDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classDeclaration.add(classDeclaration87.getTree());


                            // AST REWRITE
                            // elements: classDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 304:25: -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                            {
                                // jkit/java/Java.g:304:28: ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CLASS, "CLASS"), root_1);

                                // jkit/java/Java.g:304:36: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:304:36: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:304:48: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_classDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 8 :
                            // jkit/java/Java.g:305:10: enumDeclaration
                            {
                            pushFollow(FOLLOW_enumDeclaration_in_classBodyDeclaration1427);
                            enumDeclaration88=enumDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_enumDeclaration.add(enumDeclaration88.getTree());


                            // AST REWRITE
                            // elements: modifier, enumDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 305:26: -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                            {
                                // jkit/java/Java.g:305:29: ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ENUM, "ENUM"), root_1);

                                // jkit/java/Java.g:305:36: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:305:36: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:305:48: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_enumDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, classBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBodyDeclaration"

    public static class genericMethodOrConstructorDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorDecl"
    // jkit/java/Java.g:309:1: genericMethodOrConstructorDecl : typeParameters genericMethodOrConstructorRest ;
    public final JavaParser.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl() throws RecognitionException {
        JavaParser.genericMethodOrConstructorDecl_return retval = new JavaParser.genericMethodOrConstructorDecl_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorDecl_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.typeParameters_return typeParameters89 = null;

        JavaParser.genericMethodOrConstructorRest_return genericMethodOrConstructorRest90 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // jkit/java/Java.g:310:2: ( typeParameters genericMethodOrConstructorRest )
            // jkit/java/Java.g:310:4: typeParameters genericMethodOrConstructorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeParameters_in_genericMethodOrConstructorDecl1461);
            typeParameters89=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameters89.getTree());
            pushFollow(FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl1463);
            genericMethodOrConstructorRest90=genericMethodOrConstructorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, genericMethodOrConstructorRest90.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, genericMethodOrConstructorDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorDecl"

    public static class genericMethodOrConstructorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorRest"
    // jkit/java/Java.g:313:1: genericMethodOrConstructorRest : ( type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? | 'void' Identifier methodDeclaratorRest -> Identifier ^( TYPE VOID ) ( methodDeclaratorRest )? | Identifier constructorDeclaratorRest -> Identifier ^( NONE ) constructorDeclaratorRest );
    public final JavaParser.genericMethodOrConstructorRest_return genericMethodOrConstructorRest() throws RecognitionException {
        JavaParser.genericMethodOrConstructorRest_return retval = new JavaParser.genericMethodOrConstructorRest_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorRest_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier92=null;
        Token string_literal94=null;
        Token Identifier95=null;
        Token Identifier97=null;
        JavaParser.type_return type91 = null;

        JavaParser.methodDeclaratorRest_return methodDeclaratorRest93 = null;

        JavaParser.methodDeclaratorRest_return methodDeclaratorRest96 = null;

        JavaParser.constructorDeclaratorRest_return constructorDeclaratorRest98 = null;


        Object Identifier92_tree=null;
        Object string_literal94_tree=null;
        Object Identifier95_tree=null;
        Object Identifier97_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_constructorDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constructorDeclaratorRest");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_methodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // jkit/java/Java.g:314:2: ( type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? | 'void' Identifier methodDeclaratorRest -> Identifier ^( TYPE VOID ) ( methodDeclaratorRest )? | Identifier constructorDeclaratorRest -> Identifier ^( NONE ) constructorDeclaratorRest )
            int alt37=3;
            switch ( input.LA(1) ) {
            case Identifier:
                {
                int LA37_1 = input.LA(2);

                if ( (LA37_1==Identifier||LA37_1==121||LA37_1==126||LA37_1==135) ) {
                    alt37=1;
                }
                else if ( (LA37_1==158) ) {
                    alt37=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 1, input);

                    throw nvae;
                }
                }
                break;
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
                {
                alt37=1;
                }
                break;
            case 133:
                {
                alt37=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }

            switch (alt37) {
                case 1 :
                    // jkit/java/Java.g:314:4: type Identifier methodDeclaratorRest
                    {
                    pushFollow(FOLLOW_type_in_genericMethodOrConstructorRest1475);
                    type91=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type91.getTree());
                    Identifier92=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1477); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier92);

                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1479);
                    methodDeclaratorRest93=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest93.getTree());


                    // AST REWRITE
                    // elements: Identifier, methodDeclaratorRest, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 314:41: -> Identifier type ( methodDeclaratorRest )?
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        adaptor.addChild(root_0, stream_type.nextTree());
                        // jkit/java/Java.g:314:60: ( methodDeclaratorRest )?
                        if ( stream_methodDeclaratorRest.hasNext() ) {
                            adaptor.addChild(root_0, stream_methodDeclaratorRest.nextTree());

                        }
                        stream_methodDeclaratorRest.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:315:4: 'void' Identifier methodDeclaratorRest
                    {
                    string_literal94=(Token)match(input,133,FOLLOW_133_in_genericMethodOrConstructorRest1493); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(string_literal94);

                    Identifier95=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1495); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier95);

                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1497);
                    methodDeclaratorRest96=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest96.getTree());


                    // AST REWRITE
                    // elements: methodDeclaratorRest, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 315:43: -> Identifier ^( TYPE VOID ) ( methodDeclaratorRest )?
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/Java.g:315:57: ^( TYPE VOID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(VOID, "VOID"));

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/Java.g:315:70: ( methodDeclaratorRest )?
                        if ( stream_methodDeclaratorRest.hasNext() ) {
                            adaptor.addChild(root_0, stream_methodDeclaratorRest.nextTree());

                        }
                        stream_methodDeclaratorRest.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:316:4: Identifier constructorDeclaratorRest
                    {
                    Identifier97=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1515); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier97);

                    pushFollow(FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest1517);
                    constructorDeclaratorRest98=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constructorDeclaratorRest.add(constructorDeclaratorRest98.getTree());


                    // AST REWRITE
                    // elements: Identifier, constructorDeclaratorRest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 316:41: -> Identifier ^( NONE ) constructorDeclaratorRest
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/Java.g:316:55: ^( NONE )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NONE, "NONE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_constructorDeclaratorRest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, genericMethodOrConstructorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorRest"

    public static class methodDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaration"
    // jkit/java/Java.g:319:1: methodDeclaration : type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? ;
    public final JavaParser.methodDeclaration_return methodDeclaration() throws RecognitionException {
        JavaParser.methodDeclaration_return retval = new JavaParser.methodDeclaration_return();
        retval.start = input.LT(1);
        int methodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier100=null;
        JavaParser.type_return type99 = null;

        JavaParser.methodDeclaratorRest_return methodDeclaratorRest101 = null;


        Object Identifier100_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_methodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // jkit/java/Java.g:320:2: ( type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? )
            // jkit/java/Java.g:320:4: type Identifier methodDeclaratorRest
            {
            pushFollow(FOLLOW_type_in_methodDeclaration1538);
            type99=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type99.getTree());
            Identifier100=(Token)match(input,Identifier,FOLLOW_Identifier_in_methodDeclaration1540); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier100);

            pushFollow(FOLLOW_methodDeclaratorRest_in_methodDeclaration1542);
            methodDeclaratorRest101=methodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest101.getTree());


            // AST REWRITE
            // elements: type, Identifier, methodDeclaratorRest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 320:41: -> Identifier type ( methodDeclaratorRest )?
            {
                adaptor.addChild(root_0, stream_Identifier.nextNode());
                adaptor.addChild(root_0, stream_type.nextTree());
                // jkit/java/Java.g:320:60: ( methodDeclaratorRest )?
                if ( stream_methodDeclaratorRest.hasNext() ) {
                    adaptor.addChild(root_0, stream_methodDeclaratorRest.nextTree());

                }
                stream_methodDeclaratorRest.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, methodDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodDeclaration"

    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fieldDeclaration"
    // jkit/java/Java.g:323:1: fieldDeclaration : type variableDeclarators ';' -> type variableDeclarators ;
    public final JavaParser.fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        JavaParser.fieldDeclaration_return retval = new JavaParser.fieldDeclaration_return();
        retval.start = input.LT(1);
        int fieldDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal104=null;
        JavaParser.type_return type102 = null;

        JavaParser.variableDeclarators_return variableDeclarators103 = null;


        Object char_literal104_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // jkit/java/Java.g:324:2: ( type variableDeclarators ';' -> type variableDeclarators )
            // jkit/java/Java.g:324:4: type variableDeclarators ';'
            {
            pushFollow(FOLLOW_type_in_fieldDeclaration1562);
            type102=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type102.getTree());
            pushFollow(FOLLOW_variableDeclarators_in_fieldDeclaration1564);
            variableDeclarators103=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarators.add(variableDeclarators103.getTree());
            char_literal104=(Token)match(input,118,FOLLOW_118_in_fieldDeclaration1566); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal104);



            // AST REWRITE
            // elements: variableDeclarators, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 324:33: -> type variableDeclarators
            {
                adaptor.addChild(root_0, stream_type.nextTree());
                adaptor.addChild(root_0, stream_variableDeclarators.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, fieldDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fieldDeclaration"

    public static class interfaceBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBodyDeclaration"
    // jkit/java/Java.g:327:1: interfaceBodyDeclaration : ( ( modifier )* ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) ) | ';' );
    public final JavaParser.interfaceBodyDeclaration_return interfaceBodyDeclaration() throws RecognitionException {
        JavaParser.interfaceBodyDeclaration_return retval = new JavaParser.interfaceBodyDeclaration_return();
        retval.start = input.LT(1);
        int interfaceBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier108=null;
        Token string_literal111=null;
        Token Identifier112=null;
        Token char_literal117=null;
        JavaParser.modifier_return modifier105 = null;

        JavaParser.constantDeclaration_return constantDeclaration106 = null;

        JavaParser.type_return type107 = null;

        JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest109 = null;

        JavaParser.interfaceGenericMethodDecl_return interfaceGenericMethodDecl110 = null;

        JavaParser.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest113 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration114 = null;

        JavaParser.classDeclaration_return classDeclaration115 = null;

        JavaParser.enumDeclaration_return enumDeclaration116 = null;


        Object Identifier108_tree=null;
        Object string_literal111_tree=null;
        Object Identifier112_tree=null;
        Object char_literal117_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_interfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule interfaceMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_voidInterfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule voidInterfaceMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_constantDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclaration");
        RewriteRuleSubtreeStream stream_interfaceGenericMethodDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceGenericMethodDecl");
        RewriteRuleSubtreeStream stream_enumDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule enumDeclaration");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        RewriteRuleSubtreeStream stream_interfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // jkit/java/Java.g:328:2: ( ( modifier )* ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) ) | ';' )
            int alt40=2;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    // jkit/java/Java.g:328:4: ( modifier )* ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) )
                    {
                    // jkit/java/Java.g:328:4: ( modifier )*
                    loop38:
                    do {
                        int alt38=2;
                        alt38 = dfa38.predict(input);
                        switch (alt38) {
                    	case 1 :
                    	    // jkit/java/Java.g:0:0: modifier
                    	    {
                    	    pushFollow(FOLLOW_modifier_in_interfaceBodyDeclaration1585);
                    	    modifier105=modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_modifier.add(modifier105.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);

                    // jkit/java/Java.g:328:14: ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) )
                    int alt39=7;
                    alt39 = dfa39.predict(input);
                    switch (alt39) {
                        case 1 :
                            // jkit/java/Java.g:329:3: constantDeclaration
                            {
                            pushFollow(FOLLOW_constantDeclaration_in_interfaceBodyDeclaration1592);
                            constantDeclaration106=constantDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constantDeclaration.add(constantDeclaration106.getTree());


                            // AST REWRITE
                            // elements: constantDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 329:23: -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration )
                            {
                                // jkit/java/Java.g:329:26: ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FIELD, "FIELD"), root_1);

                                // jkit/java/Java.g:329:34: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:329:34: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:329:46: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_constantDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:330:5: type Identifier interfaceMethodDeclaratorRest
                            {
                            pushFollow(FOLLOW_type_in_interfaceBodyDeclaration1614);
                            type107=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type107.getTree());
                            Identifier108=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceBodyDeclaration1616); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier108);

                            pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1618);
                            interfaceMethodDeclaratorRest109=interfaceMethodDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest109.getTree());


                            // AST REWRITE
                            // elements: modifier, type, Identifier, interfaceMethodDeclaratorRest
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 330:51: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? )
                            {
                                // jkit/java/Java.g:330:54: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:330:63: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:330:63: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:330:75: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                // jkit/java/Java.g:330:103: ( interfaceMethodDeclaratorRest )?
                                if ( stream_interfaceMethodDeclaratorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_interfaceMethodDeclaratorRest.nextTree());

                                }
                                stream_interfaceMethodDeclaratorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:331:5: interfaceGenericMethodDecl
                            {
                            pushFollow(FOLLOW_interfaceGenericMethodDecl_in_interfaceBodyDeclaration1645);
                            interfaceGenericMethodDecl110=interfaceGenericMethodDecl();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceGenericMethodDecl.add(interfaceGenericMethodDecl110.getTree());


                            // AST REWRITE
                            // elements: interfaceGenericMethodDecl, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 331:32: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl )
                            {
                                // jkit/java/Java.g:331:35: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:331:44: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:331:44: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:331:56: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_interfaceGenericMethodDecl.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // jkit/java/Java.g:332:5: 'void' Identifier voidInterfaceMethodDeclaratorRest
                            {
                            string_literal111=(Token)match(input,133,FOLLOW_133_in_interfaceBodyDeclaration1667); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_133.add(string_literal111);

                            Identifier112=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceBodyDeclaration1669); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier112);

                            pushFollow(FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1671);
                            voidInterfaceMethodDeclaratorRest113=voidInterfaceMethodDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_voidInterfaceMethodDeclaratorRest.add(voidInterfaceMethodDeclaratorRest113.getTree());


                            // AST REWRITE
                            // elements: Identifier, voidInterfaceMethodDeclaratorRest, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 332:57: -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? )
                            {
                                // jkit/java/Java.g:332:60: ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/Java.g:332:69: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:332:69: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:332:81: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:332:104: ^( TYPE VOID )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, (Object)adaptor.create(VOID, "VOID"));

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:332:117: ( voidInterfaceMethodDeclaratorRest )?
                                if ( stream_voidInterfaceMethodDeclaratorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_voidInterfaceMethodDeclaratorRest.nextTree());

                                }
                                stream_voidInterfaceMethodDeclaratorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // jkit/java/Java.g:333:5: interfaceDeclaration
                            {
                            pushFollow(FOLLOW_interfaceDeclaration_in_interfaceBodyDeclaration1702);
                            interfaceDeclaration114=interfaceDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceDeclaration.add(interfaceDeclaration114.getTree());


                            // AST REWRITE
                            // elements: modifier, interfaceDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 333:26: -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                            {
                                // jkit/java/Java.g:333:29: ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                                // jkit/java/Java.g:333:41: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:333:41: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:333:53: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_interfaceDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 6 :
                            // jkit/java/Java.g:334:5: classDeclaration
                            {
                            pushFollow(FOLLOW_classDeclaration_in_interfaceBodyDeclaration1725);
                            classDeclaration115=classDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classDeclaration.add(classDeclaration115.getTree());


                            // AST REWRITE
                            // elements: modifier, classDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 334:22: -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                            {
                                // jkit/java/Java.g:334:25: ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CLASS, "CLASS"), root_1);

                                // jkit/java/Java.g:334:33: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:334:33: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:334:45: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_classDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 7 :
                            // jkit/java/Java.g:335:10: enumDeclaration
                            {
                            pushFollow(FOLLOW_enumDeclaration_in_interfaceBodyDeclaration1752);
                            enumDeclaration116=enumDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_enumDeclaration.add(enumDeclaration116.getTree());


                            // AST REWRITE
                            // elements: enumDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 335:26: -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                            {
                                // jkit/java/Java.g:335:29: ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ENUM, "ENUM"), root_1);

                                // jkit/java/Java.g:335:36: ( ^( MODIFIERS ( modifier )* ) )?
                                if ( stream_modifier.hasNext() ) {
                                    // jkit/java/Java.g:335:36: ^( MODIFIERS ( modifier )* )
                                    {
                                    Object root_2 = (Object)adaptor.nil();
                                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                    // jkit/java/Java.g:335:48: ( modifier )*
                                    while ( stream_modifier.hasNext() ) {
                                        adaptor.addChild(root_2, stream_modifier.nextTree());

                                    }
                                    stream_modifier.reset();

                                    adaptor.addChild(root_1, root_2);
                                    }

                                }
                                stream_modifier.reset();
                                adaptor.addChild(root_1, stream_enumDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:337:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal117=(Token)match(input,118,FOLLOW_118_in_interfaceBodyDeclaration1777); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, interfaceBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBodyDeclaration"

    public static class methodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaratorRest"
    // jkit/java/Java.g:340:1: methodDeclaratorRest : formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ) ;
    public final JavaParser.methodDeclaratorRest_return methodDeclaratorRest() throws RecognitionException {
        JavaParser.methodDeclaratorRest_return retval = new JavaParser.methodDeclaratorRest_return();
        retval.start = input.LT(1);
        int methodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal119=null;
        Token char_literal122=null;
        JavaParser.formalParameters_return formalParameters118 = null;

        JavaParser.typeList_return typeList120 = null;

        JavaParser.methodBody_return methodBody121 = null;


        Object string_literal119_tree=null;
        Object char_literal122_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // jkit/java/Java.g:341:2: ( formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ) )
            // jkit/java/Java.g:341:4: formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            {
            pushFollow(FOLLOW_formalParameters_in_methodDeclaratorRest1791);
            formalParameters118=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters118.getTree());
            // jkit/java/Java.g:342:9: ( 'throws' typeList )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==134) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // jkit/java/Java.g:342:10: 'throws' typeList
                    {
                    string_literal119=(Token)match(input,134,FOLLOW_134_in_methodDeclaratorRest1803); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(string_literal119);

                    pushFollow(FOLLOW_typeList_in_methodDeclaratorRest1805);
                    typeList120=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList120.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:343:9: ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==130) ) {
                alt42=1;
            }
            else if ( (LA42_0==118) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    // jkit/java/Java.g:343:13: methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_methodDeclaratorRest1821);
                    methodBody121=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodBody.add(methodBody121.getTree());


                    // AST REWRITE
                    // elements: formalParameters, methodBody, typeList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 343:24: -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody
                    {
                        // jkit/java/Java.g:343:27: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();
                        // jkit/java/Java.g:343:45: ( ^( THROWS typeList ) )?
                        if ( stream_typeList.hasNext() ) {
                            // jkit/java/Java.g:343:45: ^( THROWS typeList )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                            adaptor.addChild(root_1, stream_typeList.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_typeList.reset();
                        adaptor.addChild(root_0, stream_methodBody.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:344:13: ';'
                    {
                    char_literal122=(Token)match(input,118,FOLLOW_118_in_methodDeclaratorRest1849); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal122);



                    // AST REWRITE
                    // elements: typeList, formalParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 344:17: -> ( formalParameters )? ( ^( THROWS typeList ) )?
                    {
                        // jkit/java/Java.g:344:20: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();
                        // jkit/java/Java.g:344:38: ( ^( THROWS typeList ) )?
                        if ( stream_typeList.hasNext() ) {
                            // jkit/java/Java.g:344:38: ^( THROWS typeList )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                            adaptor.addChild(root_1, stream_typeList.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_typeList.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, methodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodDeclaratorRest"

    public static class voidMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidMethodDeclaratorRest"
    // jkit/java/Java.g:348:1: voidMethodDeclaratorRest : formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ) ;
    public final JavaParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest() throws RecognitionException {
        JavaParser.voidMethodDeclaratorRest_return retval = new JavaParser.voidMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal124=null;
        Token char_literal127=null;
        JavaParser.formalParameters_return formalParameters123 = null;

        JavaParser.typeList_return typeList125 = null;

        JavaParser.methodBody_return methodBody126 = null;


        Object string_literal124_tree=null;
        Object char_literal127_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // jkit/java/Java.g:349:2: ( formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ) )
            // jkit/java/Java.g:349:4: formalParameters ( 'throws' typeList )? ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            {
            pushFollow(FOLLOW_formalParameters_in_voidMethodDeclaratorRest1883);
            formalParameters123=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters123.getTree());
            // jkit/java/Java.g:349:21: ( 'throws' typeList )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==134) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // jkit/java/Java.g:349:22: 'throws' typeList
                    {
                    string_literal124=(Token)match(input,134,FOLLOW_134_in_voidMethodDeclaratorRest1886); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(string_literal124);

                    pushFollow(FOLLOW_typeList_in_voidMethodDeclaratorRest1888);
                    typeList125=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList125.getTree());

                    }
                    break;

            }

            // jkit/java/Java.g:350:9: ( methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody | ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==130) ) {
                alt44=1;
            }
            else if ( (LA44_0==118) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // jkit/java/Java.g:350:13: methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_voidMethodDeclaratorRest1904);
                    methodBody126=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodBody.add(methodBody126.getTree());


                    // AST REWRITE
                    // elements: formalParameters, methodBody, typeList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 350:24: -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody
                    {
                        // jkit/java/Java.g:350:27: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();
                        // jkit/java/Java.g:350:45: ( ^( THROWS typeList ) )?
                        if ( stream_typeList.hasNext() ) {
                            // jkit/java/Java.g:350:45: ^( THROWS typeList )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                            adaptor.addChild(root_1, stream_typeList.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_typeList.reset();
                        adaptor.addChild(root_0, stream_methodBody.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:351:13: ';'
                    {
                    char_literal127=(Token)match(input,118,FOLLOW_118_in_voidMethodDeclaratorRest1932); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal127);



                    // AST REWRITE
                    // elements: formalParameters, typeList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 351:17: -> ( formalParameters )? ( ^( THROWS typeList ) )?
                    {
                        // jkit/java/Java.g:351:20: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();
                        // jkit/java/Java.g:351:38: ( ^( THROWS typeList ) )?
                        if ( stream_typeList.hasNext() ) {
                            // jkit/java/Java.g:351:38: ^( THROWS typeList )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                            adaptor.addChild(root_1, stream_typeList.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_typeList.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, voidMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidMethodDeclaratorRest"

    public static class interfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodDeclaratorRest"
    // jkit/java/Java.g:355:1: interfaceMethodDeclaratorRest : formalParameters ( 'throws' typeList )? ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ;
    public final JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest() throws RecognitionException {
        JavaParser.interfaceMethodDeclaratorRest_return retval = new JavaParser.interfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int interfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal129=null;
        Token char_literal131=null;
        JavaParser.formalParameters_return formalParameters128 = null;

        JavaParser.typeList_return typeList130 = null;


        Object string_literal129_tree=null;
        Object char_literal131_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // jkit/java/Java.g:356:2: ( formalParameters ( 'throws' typeList )? ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            // jkit/java/Java.g:356:4: formalParameters ( 'throws' typeList )? ';'
            {
            pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest1966);
            formalParameters128=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters128.getTree());
            // jkit/java/Java.g:356:21: ( 'throws' typeList )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==134) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // jkit/java/Java.g:356:22: 'throws' typeList
                    {
                    string_literal129=(Token)match(input,134,FOLLOW_134_in_interfaceMethodDeclaratorRest1969); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(string_literal129);

                    pushFollow(FOLLOW_typeList_in_interfaceMethodDeclaratorRest1971);
                    typeList130=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList130.getTree());

                    }
                    break;

            }

            char_literal131=(Token)match(input,118,FOLLOW_118_in_interfaceMethodDeclaratorRest1975); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal131);



            // AST REWRITE
            // elements: typeList, formalParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 356:46: -> ( formalParameters )? ( ^( THROWS typeList ) )?
            {
                // jkit/java/Java.g:356:49: ( formalParameters )?
                if ( stream_formalParameters.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameters.nextTree());

                }
                stream_formalParameters.reset();
                // jkit/java/Java.g:356:67: ( ^( THROWS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:356:67: ^( THROWS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, interfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodDeclaratorRest"

    public static class interfaceGenericMethodDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceGenericMethodDecl"
    // jkit/java/Java.g:359:1: interfaceGenericMethodDecl : typeParameters ( type Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier type interfaceMethodDeclaratorRest | 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest ) ;
    public final JavaParser.interfaceGenericMethodDecl_return interfaceGenericMethodDecl() throws RecognitionException {
        JavaParser.interfaceGenericMethodDecl_return retval = new JavaParser.interfaceGenericMethodDecl_return();
        retval.start = input.LT(1);
        int interfaceGenericMethodDecl_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier134=null;
        Token string_literal136=null;
        Token Identifier137=null;
        JavaParser.typeParameters_return typeParameters132 = null;

        JavaParser.type_return type133 = null;

        JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest135 = null;

        JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest138 = null;


        Object Identifier134_tree=null;
        Object string_literal136_tree=null;
        Object Identifier137_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_interfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule interfaceMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // jkit/java/Java.g:360:2: ( typeParameters ( type Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier type interfaceMethodDeclaratorRest | 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest ) )
            // jkit/java/Java.g:360:4: typeParameters ( type Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier type interfaceMethodDeclaratorRest | 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest )
            {
            pushFollow(FOLLOW_typeParameters_in_interfaceGenericMethodDecl1999);
            typeParameters132=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters132.getTree());
            // jkit/java/Java.g:361:3: ( type Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier type interfaceMethodDeclaratorRest | 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==Identifier||(LA46_0>=148 && LA46_0<=155)) ) {
                alt46=1;
            }
            else if ( (LA46_0==133) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // jkit/java/Java.g:361:4: type Identifier interfaceMethodDeclaratorRest
                    {
                    pushFollow(FOLLOW_type_in_interfaceGenericMethodDecl2005);
                    type133=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type133.getTree());
                    Identifier134=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceGenericMethodDecl2007); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier134);

                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl2009);
                    interfaceMethodDeclaratorRest135=interfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest135.getTree());


                    // AST REWRITE
                    // elements: interfaceMethodDeclaratorRest, Identifier, type, typeParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 361:50: -> typeParameters Identifier type interfaceMethodDeclaratorRest
                    {
                        adaptor.addChild(root_0, stream_typeParameters.nextTree());
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        adaptor.addChild(root_0, stream_type.nextTree());
                        adaptor.addChild(root_0, stream_interfaceMethodDeclaratorRest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:362:5: 'void' Identifier interfaceMethodDeclaratorRest
                    {
                    string_literal136=(Token)match(input,133,FOLLOW_133_in_interfaceGenericMethodDecl2025); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(string_literal136);

                    Identifier137=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceGenericMethodDecl2027); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier137);

                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl2029);
                    interfaceMethodDeclaratorRest138=interfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest138.getTree());


                    // AST REWRITE
                    // elements: typeParameters, interfaceMethodDeclaratorRest, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 362:53: -> typeParameters Identifier ^( TYPE VOID ) interfaceMethodDeclaratorRest
                    {
                        adaptor.addChild(root_0, stream_typeParameters.nextTree());
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/Java.g:362:82: ^( TYPE VOID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(VOID, "VOID"));

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_interfaceMethodDeclaratorRest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, interfaceGenericMethodDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceGenericMethodDecl"

    public static class voidInterfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidInterfaceMethodDeclaratorRest"
    // jkit/java/Java.g:366:1: voidInterfaceMethodDeclaratorRest : formalParameters ( 'throws' typeList )? ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? ;
    public final JavaParser.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest() throws RecognitionException {
        JavaParser.voidInterfaceMethodDeclaratorRest_return retval = new JavaParser.voidInterfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidInterfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal140=null;
        Token char_literal142=null;
        JavaParser.formalParameters_return formalParameters139 = null;

        JavaParser.typeList_return typeList141 = null;


        Object string_literal140_tree=null;
        Object char_literal142_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // jkit/java/Java.g:367:2: ( formalParameters ( 'throws' typeList )? ';' -> ( formalParameters )? ( ^( THROWS typeList ) )? )
            // jkit/java/Java.g:367:4: formalParameters ( 'throws' typeList )? ';'
            {
            pushFollow(FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest2059);
            formalParameters139=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters139.getTree());
            // jkit/java/Java.g:367:21: ( 'throws' typeList )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==134) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // jkit/java/Java.g:367:22: 'throws' typeList
                    {
                    string_literal140=(Token)match(input,134,FOLLOW_134_in_voidInterfaceMethodDeclaratorRest2062); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(string_literal140);

                    pushFollow(FOLLOW_typeList_in_voidInterfaceMethodDeclaratorRest2064);
                    typeList141=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList141.getTree());

                    }
                    break;

            }

            char_literal142=(Token)match(input,118,FOLLOW_118_in_voidInterfaceMethodDeclaratorRest2068); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal142);



            // AST REWRITE
            // elements: formalParameters, typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:46: -> ( formalParameters )? ( ^( THROWS typeList ) )?
            {
                // jkit/java/Java.g:367:49: ( formalParameters )?
                if ( stream_formalParameters.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameters.nextTree());

                }
                stream_formalParameters.reset();
                // jkit/java/Java.g:367:67: ( ^( THROWS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:367:67: ^( THROWS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, voidInterfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidInterfaceMethodDeclaratorRest"

    public static class constructorDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorDeclaratorRest"
    // jkit/java/Java.g:370:1: constructorDeclaratorRest : formalParameters ( 'throws' typeList )? methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody ;
    public final JavaParser.constructorDeclaratorRest_return constructorDeclaratorRest() throws RecognitionException {
        JavaParser.constructorDeclaratorRest_return retval = new JavaParser.constructorDeclaratorRest_return();
        retval.start = input.LT(1);
        int constructorDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal144=null;
        JavaParser.formalParameters_return formalParameters143 = null;

        JavaParser.typeList_return typeList145 = null;

        JavaParser.methodBody_return methodBody146 = null;


        Object string_literal144_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // jkit/java/Java.g:371:2: ( formalParameters ( 'throws' typeList )? methodBody -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody )
            // jkit/java/Java.g:371:4: formalParameters ( 'throws' typeList )? methodBody
            {
            pushFollow(FOLLOW_formalParameters_in_constructorDeclaratorRest2092);
            formalParameters143=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters143.getTree());
            // jkit/java/Java.g:371:21: ( 'throws' typeList )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==134) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // jkit/java/Java.g:371:22: 'throws' typeList
                    {
                    string_literal144=(Token)match(input,134,FOLLOW_134_in_constructorDeclaratorRest2095); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(string_literal144);

                    pushFollow(FOLLOW_typeList_in_constructorDeclaratorRest2097);
                    typeList145=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList145.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_methodBody_in_constructorDeclaratorRest2101);
            methodBody146=methodBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_methodBody.add(methodBody146.getTree());


            // AST REWRITE
            // elements: methodBody, formalParameters, typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 371:53: -> ( formalParameters )? ( ^( THROWS typeList ) )? methodBody
            {
                // jkit/java/Java.g:371:56: ( formalParameters )?
                if ( stream_formalParameters.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameters.nextTree());

                }
                stream_formalParameters.reset();
                // jkit/java/Java.g:371:74: ( ^( THROWS typeList ) )?
                if ( stream_typeList.hasNext() ) {
                    // jkit/java/Java.g:371:74: ^( THROWS typeList )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                    adaptor.addChild(root_1, stream_typeList.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_typeList.reset();
                adaptor.addChild(root_0, stream_methodBody.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, constructorDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructorDeclaratorRest"

    public static class variableDeclarators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarators"
    // jkit/java/Java.g:375:1: variableDeclarators : i+= variableDeclarator ( ',' i+= variableDeclarator )* -> ( $i)+ ;
    public final JavaParser.variableDeclarators_return variableDeclarators() throws RecognitionException {
        JavaParser.variableDeclarators_return retval = new JavaParser.variableDeclarators_return();
        retval.start = input.LT(1);
        int variableDeclarators_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal147=null;
        List list_i=null;
        JavaParser.variableDeclarator_return i = null;
        Object char_literal147_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_variableDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // jkit/java/Java.g:376:2: (i+= variableDeclarator ( ',' i+= variableDeclarator )* -> ( $i)+ )
            // jkit/java/Java.g:376:4: i+= variableDeclarator ( ',' i+= variableDeclarator )*
            {
            pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators2130);
            i=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarator.add(i.getTree());
            if (list_i==null) list_i=new ArrayList();
            list_i.add(i.getTree());

            // jkit/java/Java.g:376:26: ( ',' i+= variableDeclarator )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==127) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // jkit/java/Java.g:376:27: ',' i+= variableDeclarator
            	    {
            	    char_literal147=(Token)match(input,127,FOLLOW_127_in_variableDeclarators2133); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal147);

            	    pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators2137);
            	    i=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableDeclarator.add(i.getTree());
            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i.getTree());


            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: i
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
            root_0 = (Object)adaptor.nil();
            // 376:55: -> ( $i)+
            {
                if ( !(stream_i.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_0, stream_i.nextTree());

                }
                stream_i.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, variableDeclarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarators"

    public static class variableDeclarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarator"
    // jkit/java/Java.g:379:1: variableDeclarator : Identifier variableDeclaratorRest -> ^( Identifier ( variableDeclaratorRest )? ) ;
    public final JavaParser.variableDeclarator_return variableDeclarator() throws RecognitionException {
        JavaParser.variableDeclarator_return retval = new JavaParser.variableDeclarator_return();
        retval.start = input.LT(1);
        int variableDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier148=null;
        JavaParser.variableDeclaratorRest_return variableDeclaratorRest149 = null;


        Object Identifier148_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_variableDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // jkit/java/Java.g:380:2: ( Identifier variableDeclaratorRest -> ^( Identifier ( variableDeclaratorRest )? ) )
            // jkit/java/Java.g:380:4: Identifier variableDeclaratorRest
            {
            Identifier148=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclarator2156); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier148);

            pushFollow(FOLLOW_variableDeclaratorRest_in_variableDeclarator2158);
            variableDeclaratorRest149=variableDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorRest.add(variableDeclaratorRest149.getTree());


            // AST REWRITE
            // elements: variableDeclaratorRest, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 380:38: -> ^( Identifier ( variableDeclaratorRest )? )
            {
                // jkit/java/Java.g:380:41: ^( Identifier ( variableDeclaratorRest )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/Java.g:380:54: ( variableDeclaratorRest )?
                if ( stream_variableDeclaratorRest.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableDeclaratorRest.nextTree());

                }
                stream_variableDeclaratorRest.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, variableDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarator"

    public static class variableDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorRest"
    // jkit/java/Java.g:383:1: variableDeclaratorRest : ( ( '[' ']' )+ ( '=' variableInitializer )? -> ( '[' )+ ( variableInitializer )? | '=' variableInitializer -> variableInitializer | );
    public final JavaParser.variableDeclaratorRest_return variableDeclaratorRest() throws RecognitionException {
        JavaParser.variableDeclaratorRest_return retval = new JavaParser.variableDeclaratorRest_return();
        retval.start = input.LT(1);
        int variableDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal150=null;
        Token char_literal151=null;
        Token char_literal152=null;
        Token char_literal154=null;
        JavaParser.variableInitializer_return variableInitializer153 = null;

        JavaParser.variableInitializer_return variableInitializer155 = null;


        Object char_literal150_tree=null;
        Object char_literal151_tree=null;
        Object char_literal152_tree=null;
        Object char_literal154_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // jkit/java/Java.g:384:2: ( ( '[' ']' )+ ( '=' variableInitializer )? -> ( '[' )+ ( variableInitializer )? | '=' variableInitializer -> variableInitializer | )
            int alt52=3;
            switch ( input.LA(1) ) {
            case 135:
                {
                alt52=1;
                }
                break;
            case 137:
                {
                alt52=2;
                }
                break;
            case EOF:
            case 118:
            case 127:
                {
                alt52=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }

            switch (alt52) {
                case 1 :
                    // jkit/java/Java.g:384:4: ( '[' ']' )+ ( '=' variableInitializer )?
                    {
                    // jkit/java/Java.g:384:4: ( '[' ']' )+
                    int cnt50=0;
                    loop50:
                    do {
                        int alt50=2;
                        int LA50_0 = input.LA(1);

                        if ( (LA50_0==135) ) {
                            alt50=1;
                        }


                        switch (alt50) {
                    	case 1 :
                    	    // jkit/java/Java.g:384:5: '[' ']'
                    	    {
                    	    char_literal150=(Token)match(input,135,FOLLOW_135_in_variableDeclaratorRest2180); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_135.add(char_literal150);

                    	    char_literal151=(Token)match(input,136,FOLLOW_136_in_variableDeclaratorRest2182); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_136.add(char_literal151);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt50 >= 1 ) break loop50;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(50, input);
                                throw eee;
                        }
                        cnt50++;
                    } while (true);

                    // jkit/java/Java.g:384:15: ( '=' variableInitializer )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==137) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // jkit/java/Java.g:384:16: '=' variableInitializer
                            {
                            char_literal152=(Token)match(input,137,FOLLOW_137_in_variableDeclaratorRest2187); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_137.add(char_literal152);

                            pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest2189);
                            variableInitializer153=variableInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer153.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: 135, variableInitializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 384:42: -> ( '[' )+ ( variableInitializer )?
                    {
                        if ( !(stream_135.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_135.hasNext() ) {
                            adaptor.addChild(root_0, stream_135.nextNode());

                        }
                        stream_135.reset();
                        // jkit/java/Java.g:384:50: ( variableInitializer )?
                        if ( stream_variableInitializer.hasNext() ) {
                            adaptor.addChild(root_0, stream_variableInitializer.nextTree());

                        }
                        stream_variableInitializer.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:385:4: '=' variableInitializer
                    {
                    char_literal154=(Token)match(input,137,FOLLOW_137_in_variableDeclaratorRest2204); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal154);

                    pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest2206);
                    variableInitializer155=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer155.getTree());


                    // AST REWRITE
                    // elements: variableInitializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 385:28: -> variableInitializer
                    {
                        adaptor.addChild(root_0, stream_variableInitializer.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:387:2: 
                    {
                    root_0 = (Object)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, variableDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorRest"

    public static class constantDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclaration"
    // jkit/java/Java.g:389:1: constantDeclaration : type constantDeclarators ';' -> type constantDeclarators ;
    public final JavaParser.constantDeclaration_return constantDeclaration() throws RecognitionException {
        JavaParser.constantDeclaration_return retval = new JavaParser.constantDeclaration_return();
        retval.start = input.LT(1);
        int constantDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal158=null;
        JavaParser.type_return type156 = null;

        JavaParser.constantDeclarators_return constantDeclarators157 = null;


        Object char_literal158_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_constantDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // jkit/java/Java.g:390:2: ( type constantDeclarators ';' -> type constantDeclarators )
            // jkit/java/Java.g:390:4: type constantDeclarators ';'
            {
            pushFollow(FOLLOW_type_in_constantDeclaration2224);
            type156=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type156.getTree());
            pushFollow(FOLLOW_constantDeclarators_in_constantDeclaration2226);
            constantDeclarators157=constantDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constantDeclarators.add(constantDeclarators157.getTree());
            char_literal158=(Token)match(input,118,FOLLOW_118_in_constantDeclaration2228); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal158);



            // AST REWRITE
            // elements: constantDeclarators, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 390:33: -> type constantDeclarators
            {
                adaptor.addChild(root_0, stream_type.nextTree());
                adaptor.addChild(root_0, stream_constantDeclarators.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, constantDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclaration"

    public static class constantDeclarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarator"
    // jkit/java/Java.g:393:1: constantDeclarator : Identifier constantDeclaratorRest -> ^( Identifier constantDeclaratorRest ) ;
    public final JavaParser.constantDeclarator_return constantDeclarator() throws RecognitionException {
        JavaParser.constantDeclarator_return retval = new JavaParser.constantDeclarator_return();
        retval.start = input.LT(1);
        int constantDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier159=null;
        JavaParser.constantDeclaratorRest_return constantDeclaratorRest160 = null;


        Object Identifier159_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_constantDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // jkit/java/Java.g:394:2: ( Identifier constantDeclaratorRest -> ^( Identifier constantDeclaratorRest ) )
            // jkit/java/Java.g:394:4: Identifier constantDeclaratorRest
            {
            Identifier159=(Token)match(input,Identifier,FOLLOW_Identifier_in_constantDeclarator2245); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier159);

            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclarator2247);
            constantDeclaratorRest160=constantDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constantDeclaratorRest.add(constantDeclaratorRest160.getTree());


            // AST REWRITE
            // elements: constantDeclaratorRest, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 394:38: -> ^( Identifier constantDeclaratorRest )
            {
                // jkit/java/Java.g:394:41: ^( Identifier constantDeclaratorRest )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                adaptor.addChild(root_1, stream_constantDeclaratorRest.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, constantDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarator"

    public static class constantDeclarators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarators"
    // jkit/java/Java.g:397:1: constantDeclarators : i+= constantDeclarator ( ',' i+= constantDeclarator )* -> ( $i)+ ;
    public final JavaParser.constantDeclarators_return constantDeclarators() throws RecognitionException {
        JavaParser.constantDeclarators_return retval = new JavaParser.constantDeclarators_return();
        retval.start = input.LT(1);
        int constantDeclarators_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal161=null;
        List list_i=null;
        JavaParser.constantDeclarator_return i = null;
        Object char_literal161_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_constantDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // jkit/java/Java.g:398:2: (i+= constantDeclarator ( ',' i+= constantDeclarator )* -> ( $i)+ )
            // jkit/java/Java.g:398:4: i+= constantDeclarator ( ',' i+= constantDeclarator )*
            {
            pushFollow(FOLLOW_constantDeclarator_in_constantDeclarators2270);
            i=constantDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constantDeclarator.add(i.getTree());
            if (list_i==null) list_i=new ArrayList();
            list_i.add(i.getTree());

            // jkit/java/Java.g:398:26: ( ',' i+= constantDeclarator )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==127) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // jkit/java/Java.g:398:27: ',' i+= constantDeclarator
            	    {
            	    char_literal161=(Token)match(input,127,FOLLOW_127_in_constantDeclarators2273); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal161);

            	    pushFollow(FOLLOW_constantDeclarator_in_constantDeclarators2277);
            	    i=constantDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_constantDeclarator.add(i.getTree());
            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i.getTree());


            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: i
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
            root_0 = (Object)adaptor.nil();
            // 398:55: -> ( $i)+
            {
                if ( !(stream_i.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_0, stream_i.nextTree());

                }
                stream_i.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, constantDeclarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarators"

    public static class constantDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclaratorRest"
    // jkit/java/Java.g:401:1: constantDeclaratorRest : ( '[' ']' )* '=' variableInitializer -> ( '[' )* variableInitializer ;
    public final JavaParser.constantDeclaratorRest_return constantDeclaratorRest() throws RecognitionException {
        JavaParser.constantDeclaratorRest_return retval = new JavaParser.constantDeclaratorRest_return();
        retval.start = input.LT(1);
        int constantDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal162=null;
        Token char_literal163=null;
        Token char_literal164=null;
        JavaParser.variableInitializer_return variableInitializer165 = null;


        Object char_literal162_tree=null;
        Object char_literal163_tree=null;
        Object char_literal164_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // jkit/java/Java.g:402:2: ( ( '[' ']' )* '=' variableInitializer -> ( '[' )* variableInitializer )
            // jkit/java/Java.g:402:4: ( '[' ']' )* '=' variableInitializer
            {
            // jkit/java/Java.g:402:4: ( '[' ']' )*
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==135) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // jkit/java/Java.g:402:5: '[' ']'
            	    {
            	    char_literal162=(Token)match(input,135,FOLLOW_135_in_constantDeclaratorRest2298); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_135.add(char_literal162);

            	    char_literal163=(Token)match(input,136,FOLLOW_136_in_constantDeclaratorRest2300); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_136.add(char_literal163);


            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);

            char_literal164=(Token)match(input,137,FOLLOW_137_in_constantDeclaratorRest2304); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(char_literal164);

            pushFollow(FOLLOW_variableInitializer_in_constantDeclaratorRest2306);
            variableInitializer165=variableInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer165.getTree());


            // AST REWRITE
            // elements: variableInitializer, 135
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 402:39: -> ( '[' )* variableInitializer
            {
                // jkit/java/Java.g:402:42: ( '[' )*
                while ( stream_135.hasNext() ) {
                    adaptor.addChild(root_0, stream_135.nextNode());

                }
                stream_135.reset();
                adaptor.addChild(root_0, stream_variableInitializer.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, constantDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclaratorRest"

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorId"
    // jkit/java/Java.g:405:1: variableDeclaratorId : Identifier ( '[' ']' )* ;
    public final JavaParser.variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
        JavaParser.variableDeclaratorId_return retval = new JavaParser.variableDeclaratorId_return();
        retval.start = input.LT(1);
        int variableDeclaratorId_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier166=null;
        Token char_literal167=null;
        Token char_literal168=null;

        Object Identifier166_tree=null;
        Object char_literal167_tree=null;
        Object char_literal168_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // jkit/java/Java.g:406:2: ( Identifier ( '[' ']' )* )
            // jkit/java/Java.g:406:4: Identifier ( '[' ']' )*
            {
            root_0 = (Object)adaptor.nil();

            Identifier166=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaratorId2325); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier166_tree = (Object)adaptor.create(Identifier166);
            adaptor.addChild(root_0, Identifier166_tree);
            }
            // jkit/java/Java.g:406:15: ( '[' ']' )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==135) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // jkit/java/Java.g:406:16: '[' ']'
            	    {
            	    char_literal167=(Token)match(input,135,FOLLOW_135_in_variableDeclaratorId2328); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal167_tree = (Object)adaptor.create(char_literal167);
            	    adaptor.addChild(root_0, char_literal167_tree);
            	    }
            	    char_literal168=(Token)match(input,136,FOLLOW_136_in_variableDeclaratorId2330); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal168_tree = (Object)adaptor.create(char_literal168);
            	    adaptor.addChild(root_0, char_literal168_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, variableDeclaratorId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorId"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // jkit/java/Java.g:409:1: variableInitializer : ( arrayInitializer | expression );
    public final JavaParser.variableInitializer_return variableInitializer() throws RecognitionException {
        JavaParser.variableInitializer_return retval = new JavaParser.variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.arrayInitializer_return arrayInitializer169 = null;

        JavaParser.expression_return expression170 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // jkit/java/Java.g:410:2: ( arrayInitializer | expression )
            int alt56=2;
            alt56 = dfa56.predict(input);
            switch (alt56) {
                case 1 :
                    // jkit/java/Java.g:410:4: arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer2343);
                    arrayInitializer169=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer169.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:411:9: expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer2353);
                    expression170=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression170.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // jkit/java/Java.g:414:1: arrayInitializer : '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}' -> ^( ARRAYVAL ( variableInitializer )* ) ;
    public final JavaParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
        JavaParser.arrayInitializer_return retval = new JavaParser.arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal171=null;
        Token char_literal173=null;
        Token char_literal175=null;
        Token char_literal176=null;
        JavaParser.variableInitializer_return variableInitializer172 = null;

        JavaParser.variableInitializer_return variableInitializer174 = null;


        Object char_literal171_tree=null;
        Object char_literal173_tree=null;
        Object char_literal175_tree=null;
        Object char_literal176_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // jkit/java/Java.g:415:2: ( '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}' -> ^( ARRAYVAL ( variableInitializer )* ) )
            // jkit/java/Java.g:415:4: '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}'
            {
            char_literal171=(Token)match(input,130,FOLLOW_130_in_arrayInitializer2365); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal171);

            // jkit/java/Java.g:415:8: ( variableInitializer ( ',' variableInitializer )* ( ',' )? )?
            int alt59=2;
            alt59 = dfa59.predict(input);
            switch (alt59) {
                case 1 :
                    // jkit/java/Java.g:415:9: variableInitializer ( ',' variableInitializer )* ( ',' )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer2368);
                    variableInitializer172=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer172.getTree());
                    // jkit/java/Java.g:415:29: ( ',' variableInitializer )*
                    loop57:
                    do {
                        int alt57=2;
                        alt57 = dfa57.predict(input);
                        switch (alt57) {
                    	case 1 :
                    	    // jkit/java/Java.g:415:30: ',' variableInitializer
                    	    {
                    	    char_literal173=(Token)match(input,127,FOLLOW_127_in_arrayInitializer2371); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_127.add(char_literal173);

                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer2373);
                    	    variableInitializer174=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer174.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop57;
                        }
                    } while (true);

                    // jkit/java/Java.g:415:56: ( ',' )?
                    int alt58=2;
                    int LA58_0 = input.LA(1);

                    if ( (LA58_0==127) ) {
                        alt58=1;
                    }
                    switch (alt58) {
                        case 1 :
                            // jkit/java/Java.g:415:57: ','
                            {
                            char_literal175=(Token)match(input,127,FOLLOW_127_in_arrayInitializer2378); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_127.add(char_literal175);


                            }
                            break;

                    }


                    }
                    break;

            }

            char_literal176=(Token)match(input,131,FOLLOW_131_in_arrayInitializer2385); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(char_literal176);



            // AST REWRITE
            // elements: variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 415:70: -> ^( ARRAYVAL ( variableInitializer )* )
            {
                // jkit/java/Java.g:415:73: ^( ARRAYVAL ( variableInitializer )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYVAL, "ARRAYVAL"), root_1);

                // jkit/java/Java.g:415:84: ( variableInitializer )*
                while ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifier"
    // jkit/java/Java.g:418:1: modifier : ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' );
    public final JavaParser.modifier_return modifier() throws RecognitionException {
        JavaParser.modifier_return retval = new JavaParser.modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal178=null;
        Token string_literal179=null;
        Token string_literal180=null;
        Token string_literal181=null;
        Token string_literal182=null;
        Token string_literal183=null;
        Token string_literal184=null;
        Token string_literal185=null;
        Token string_literal186=null;
        Token string_literal187=null;
        Token string_literal188=null;
        JavaParser.annotation_return annotation177 = null;


        Object string_literal178_tree=null;
        Object string_literal179_tree=null;
        Object string_literal180_tree=null;
        Object string_literal181_tree=null;
        Object string_literal182_tree=null;
        Object string_literal183_tree=null;
        Object string_literal184_tree=null;
        Object string_literal185_tree=null;
        Object string_literal186_tree=null;
        Object string_literal187_tree=null;
        Object string_literal188_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // jkit/java/Java.g:419:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )
            int alt60=12;
            alt60 = dfa60.predict(input);
            switch (alt60) {
                case 1 :
                    // jkit/java/Java.g:419:9: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_modifier2410);
                    annotation177=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation177.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:420:9: 'public'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal178=(Token)match(input,138,FOLLOW_138_in_modifier2420); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal178_tree = (Object)adaptor.create(string_literal178);
                    adaptor.addChild(root_0, string_literal178_tree);
                    }

                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:421:9: 'protected'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal179=(Token)match(input,139,FOLLOW_139_in_modifier2430); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal179_tree = (Object)adaptor.create(string_literal179);
                    adaptor.addChild(root_0, string_literal179_tree);
                    }

                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:422:9: 'private'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal180=(Token)match(input,140,FOLLOW_140_in_modifier2440); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal180_tree = (Object)adaptor.create(string_literal180);
                    adaptor.addChild(root_0, string_literal180_tree);
                    }

                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:423:9: 'static'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal181=(Token)match(input,120,FOLLOW_120_in_modifier2450); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal181_tree = (Object)adaptor.create(string_literal181);
                    adaptor.addChild(root_0, string_literal181_tree);
                    }

                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:424:9: 'abstract'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal182=(Token)match(input,141,FOLLOW_141_in_modifier2460); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal182_tree = (Object)adaptor.create(string_literal182);
                    adaptor.addChild(root_0, string_literal182_tree);
                    }

                    }
                    break;
                case 7 :
                    // jkit/java/Java.g:425:9: 'final'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal183=(Token)match(input,142,FOLLOW_142_in_modifier2470); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal183_tree = (Object)adaptor.create(string_literal183);
                    adaptor.addChild(root_0, string_literal183_tree);
                    }

                    }
                    break;
                case 8 :
                    // jkit/java/Java.g:426:9: 'native'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal184=(Token)match(input,143,FOLLOW_143_in_modifier2480); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal184_tree = (Object)adaptor.create(string_literal184);
                    adaptor.addChild(root_0, string_literal184_tree);
                    }

                    }
                    break;
                case 9 :
                    // jkit/java/Java.g:427:9: 'synchronized'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal185=(Token)match(input,144,FOLLOW_144_in_modifier2490); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal185_tree = (Object)adaptor.create(string_literal185);
                    adaptor.addChild(root_0, string_literal185_tree);
                    }

                    }
                    break;
                case 10 :
                    // jkit/java/Java.g:428:9: 'transient'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal186=(Token)match(input,145,FOLLOW_145_in_modifier2500); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal186_tree = (Object)adaptor.create(string_literal186);
                    adaptor.addChild(root_0, string_literal186_tree);
                    }

                    }
                    break;
                case 11 :
                    // jkit/java/Java.g:429:9: 'volatile'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal187=(Token)match(input,146,FOLLOW_146_in_modifier2510); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal187_tree = (Object)adaptor.create(string_literal187);
                    adaptor.addChild(root_0, string_literal187_tree);
                    }

                    }
                    break;
                case 12 :
                    // jkit/java/Java.g:430:9: 'strictfp'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal188=(Token)match(input,147,FOLLOW_147_in_modifier2520); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal188_tree = (Object)adaptor.create(string_literal188);
                    adaptor.addChild(root_0, string_literal188_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public static class packageOrTypeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageOrTypeName"
    // jkit/java/Java.g:433:1: packageOrTypeName : Identifier ( '.' Identifier )* ;
    public final JavaParser.packageOrTypeName_return packageOrTypeName() throws RecognitionException {
        JavaParser.packageOrTypeName_return retval = new JavaParser.packageOrTypeName_return();
        retval.start = input.LT(1);
        int packageOrTypeName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier189=null;
        Token char_literal190=null;
        Token Identifier191=null;

        Object Identifier189_tree=null;
        Object char_literal190_tree=null;
        Object Identifier191_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // jkit/java/Java.g:434:2: ( Identifier ( '.' Identifier )* )
            // jkit/java/Java.g:434:4: Identifier ( '.' Identifier )*
            {
            root_0 = (Object)adaptor.nil();

            Identifier189=(Token)match(input,Identifier,FOLLOW_Identifier_in_packageOrTypeName2534); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier189_tree = (Object)adaptor.create(Identifier189);
            adaptor.addChild(root_0, Identifier189_tree);
            }
            // jkit/java/Java.g:434:15: ( '.' Identifier )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==121) ) {
                    int LA61_1 = input.LA(2);

                    if ( (LA61_1==Identifier) ) {
                        int LA61_2 = input.LA(3);

                        if ( (synpred87_Java()) ) {
                            alt61=1;
                        }


                    }


                }


                switch (alt61) {
            	case 1 :
            	    // jkit/java/Java.g:434:16: '.' Identifier
            	    {
            	    char_literal190=(Token)match(input,121,FOLLOW_121_in_packageOrTypeName2537); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal190_tree = (Object)adaptor.create(char_literal190);
            	    adaptor.addChild(root_0, char_literal190_tree);
            	    }
            	    Identifier191=(Token)match(input,Identifier,FOLLOW_Identifier_in_packageOrTypeName2539); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    Identifier191_tree = (Object)adaptor.create(Identifier191);
            	    adaptor.addChild(root_0, Identifier191_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, packageOrTypeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageOrTypeName"

    public static class enumConstantName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstantName"
    // jkit/java/Java.g:437:1: enumConstantName : Identifier ;
    public final JavaParser.enumConstantName_return enumConstantName() throws RecognitionException {
        JavaParser.enumConstantName_return retval = new JavaParser.enumConstantName_return();
        retval.start = input.LT(1);
        int enumConstantName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier192=null;

        Object Identifier192_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // jkit/java/Java.g:438:5: ( Identifier )
            // jkit/java/Java.g:438:9: Identifier
            {
            root_0 = (Object)adaptor.nil();

            Identifier192=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumConstantName2557); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier192_tree = (Object)adaptor.create(Identifier192);
            adaptor.addChild(root_0, Identifier192_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, enumConstantName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstantName"

    public static class typeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // jkit/java/Java.g:441:1: typeName : ( Identifier | packageOrTypeName '.' Identifier );
    public final JavaParser.typeName_return typeName() throws RecognitionException {
        JavaParser.typeName_return retval = new JavaParser.typeName_return();
        retval.start = input.LT(1);
        int typeName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier193=null;
        Token char_literal195=null;
        Token Identifier196=null;
        JavaParser.packageOrTypeName_return packageOrTypeName194 = null;


        Object Identifier193_tree=null;
        Object char_literal195_tree=null;
        Object Identifier196_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // jkit/java/Java.g:442:2: ( Identifier | packageOrTypeName '.' Identifier )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==Identifier) ) {
                int LA62_1 = input.LA(2);

                if ( (LA62_1==EOF) ) {
                    alt62=1;
                }
                else if ( (LA62_1==121) ) {
                    alt62=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 62, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    // jkit/java/Java.g:442:6: Identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    Identifier193=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeName2573); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier193_tree = (Object)adaptor.create(Identifier193);
                    adaptor.addChild(root_0, Identifier193_tree);
                    }

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:443:9: packageOrTypeName '.' Identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_packageOrTypeName_in_typeName2583);
                    packageOrTypeName194=packageOrTypeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, packageOrTypeName194.getTree());
                    char_literal195=(Token)match(input,121,FOLLOW_121_in_typeName2585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal195_tree = (Object)adaptor.create(char_literal195);
                    adaptor.addChild(root_0, char_literal195_tree);
                    }
                    Identifier196=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeName2587); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier196_tree = (Object)adaptor.create(Identifier196);
                    adaptor.addChild(root_0, Identifier196_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, typeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // jkit/java/Java.g:446:1: type : (i+= refComponent ( '.' i+= refComponent )* ( '[' ']' )* -> ^( TYPE ( $i)+ ( '[' )* ) | primitiveType ( '[' ']' )* -> ^( TYPE primitiveType ( '[' )* ) );
    public final JavaParser.type_return type() throws RecognitionException {
        JavaParser.type_return retval = new JavaParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal197=null;
        Token char_literal198=null;
        Token char_literal199=null;
        Token char_literal201=null;
        Token char_literal202=null;
        List list_i=null;
        JavaParser.primitiveType_return primitiveType200 = null;

        JavaParser.refComponent_return i = null;
        Object char_literal197_tree=null;
        Object char_literal198_tree=null;
        Object char_literal199_tree=null;
        Object char_literal201_tree=null;
        Object char_literal202_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleSubtreeStream stream_refComponent=new RewriteRuleSubtreeStream(adaptor,"rule refComponent");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // jkit/java/Java.g:447:2: (i+= refComponent ( '.' i+= refComponent )* ( '[' ']' )* -> ^( TYPE ( $i)+ ( '[' )* ) | primitiveType ( '[' ']' )* -> ^( TYPE primitiveType ( '[' )* ) )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==Identifier) ) {
                alt66=1;
            }
            else if ( ((LA66_0>=148 && LA66_0<=155)) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // jkit/java/Java.g:447:4: i+= refComponent ( '.' i+= refComponent )* ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_refComponent_in_type2600);
                    i=refComponent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i.getTree());

                    // jkit/java/Java.g:447:20: ( '.' i+= refComponent )*
                    loop63:
                    do {
                        int alt63=2;
                        alt63 = dfa63.predict(input);
                        switch (alt63) {
                    	case 1 :
                    	    // jkit/java/Java.g:447:21: '.' i+= refComponent
                    	    {
                    	    char_literal197=(Token)match(input,121,FOLLOW_121_in_type2603); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_121.add(char_literal197);

                    	    pushFollow(FOLLOW_refComponent_in_type2607);
                    	    i=refComponent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop63;
                        }
                    } while (true);

                    // jkit/java/Java.g:447:43: ( '[' ']' )*
                    loop64:
                    do {
                        int alt64=2;
                        alt64 = dfa64.predict(input);
                        switch (alt64) {
                    	case 1 :
                    	    // jkit/java/Java.g:447:44: '[' ']'
                    	    {
                    	    char_literal198=(Token)match(input,135,FOLLOW_135_in_type2612); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_135.add(char_literal198);

                    	    char_literal199=(Token)match(input,136,FOLLOW_136_in_type2614); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_136.add(char_literal199);


                    	    }
                    	    break;

                    	default :
                    	    break loop64;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: i, 135
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: i
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                    root_0 = (Object)adaptor.nil();
                    // 447:54: -> ^( TYPE ( $i)+ ( '[' )* )
                    {
                        // jkit/java/Java.g:447:57: ^( TYPE ( $i)+ ( '[' )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        if ( !(stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextTree());

                        }
                        stream_i.reset();
                        // jkit/java/Java.g:447:68: ( '[' )*
                        while ( stream_135.hasNext() ) {
                            adaptor.addChild(root_1, stream_135.nextNode());

                        }
                        stream_135.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:448:4: primitiveType ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_primitiveType_in_type2636);
                    primitiveType200=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType200.getTree());
                    // jkit/java/Java.g:448:18: ( '[' ']' )*
                    loop65:
                    do {
                        int alt65=2;
                        alt65 = dfa65.predict(input);
                        switch (alt65) {
                    	case 1 :
                    	    // jkit/java/Java.g:448:19: '[' ']'
                    	    {
                    	    char_literal201=(Token)match(input,135,FOLLOW_135_in_type2639); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_135.add(char_literal201);

                    	    char_literal202=(Token)match(input,136,FOLLOW_136_in_type2641); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_136.add(char_literal202);


                    	    }
                    	    break;

                    	default :
                    	    break loop65;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: primitiveType, 135
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 448:29: -> ^( TYPE primitiveType ( '[' )* )
                    {
                        // jkit/java/Java.g:448:32: ^( TYPE primitiveType ( '[' )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, stream_primitiveType.nextTree());
                        // jkit/java/Java.g:448:53: ( '[' )*
                        while ( stream_135.hasNext() ) {
                            adaptor.addChild(root_1, stream_135.nextNode());

                        }
                        stream_135.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class refComponent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "refComponent"
    // jkit/java/Java.g:451:1: refComponent : Identifier ( typeArguments )? -> ^( Identifier ( typeArguments )? ) ;
    public final JavaParser.refComponent_return refComponent() throws RecognitionException {
        JavaParser.refComponent_return retval = new JavaParser.refComponent_return();
        retval.start = input.LT(1);
        int refComponent_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier203=null;
        JavaParser.typeArguments_return typeArguments204 = null;


        Object Identifier203_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_typeArguments=new RewriteRuleSubtreeStream(adaptor,"rule typeArguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // jkit/java/Java.g:452:5: ( Identifier ( typeArguments )? -> ^( Identifier ( typeArguments )? ) )
            // jkit/java/Java.g:452:7: Identifier ( typeArguments )?
            {
            Identifier203=(Token)match(input,Identifier,FOLLOW_Identifier_in_refComponent2670); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier203);

            // jkit/java/Java.g:452:18: ( typeArguments )?
            int alt67=2;
            alt67 = dfa67.predict(input);
            switch (alt67) {
                case 1 :
                    // jkit/java/Java.g:452:19: typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_refComponent2673);
                    typeArguments204=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeArguments.add(typeArguments204.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: Identifier, typeArguments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 452:35: -> ^( Identifier ( typeArguments )? )
            {
                // jkit/java/Java.g:452:38: ^( Identifier ( typeArguments )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/Java.g:452:51: ( typeArguments )?
                if ( stream_typeArguments.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeArguments.nextTree());

                }
                stream_typeArguments.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, refComponent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "refComponent"

    public static class primitiveType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // jkit/java/Java.g:455:1: primitiveType : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
    public final JavaParser.primitiveType_return primitiveType() throws RecognitionException {
        JavaParser.primitiveType_return retval = new JavaParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        Object root_0 = null;

        Token set205=null;

        Object set205_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // jkit/java/Java.g:456:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
            // jkit/java/Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set205=(Token)input.LT(1);
            if ( (input.LA(1)>=148 && input.LA(1)<=155) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set205));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class variableModifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableModifier"
    // jkit/java/Java.g:466:1: variableModifier : ( 'final' | annotation );
    public final JavaParser.variableModifier_return variableModifier() throws RecognitionException {
        JavaParser.variableModifier_return retval = new JavaParser.variableModifier_return();
        retval.start = input.LT(1);
        int variableModifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal206=null;
        JavaParser.annotation_return annotation207 = null;


        Object string_literal206_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // jkit/java/Java.g:467:2: ( 'final' | annotation )
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==142) ) {
                alt68=1;
            }
            else if ( (LA68_0==164) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    // jkit/java/Java.g:467:4: 'final'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal206=(Token)match(input,142,FOLLOW_142_in_variableModifier2773); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal206_tree = (Object)adaptor.create(string_literal206);
                    adaptor.addChild(root_0, string_literal206_tree);
                    }

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:468:9: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_variableModifier2783);
                    annotation207=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation207.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, variableModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableModifier"

    public static class typeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArguments"
    // jkit/java/Java.g:471:1: typeArguments : '<' t+= typeArgument ( ',' t+= typeArgument )* '>' -> ( $t)+ ;
    public final JavaParser.typeArguments_return typeArguments() throws RecognitionException {
        JavaParser.typeArguments_return retval = new JavaParser.typeArguments_return();
        retval.start = input.LT(1);
        int typeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal208=null;
        Token char_literal209=null;
        Token char_literal210=null;
        List list_t=null;
        JavaParser.typeArgument_return t = null;
        Object char_literal208_tree=null;
        Object char_literal209_tree=null;
        Object char_literal210_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_typeArgument=new RewriteRuleSubtreeStream(adaptor,"rule typeArgument");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // jkit/java/Java.g:472:2: ( '<' t+= typeArgument ( ',' t+= typeArgument )* '>' -> ( $t)+ )
            // jkit/java/Java.g:472:4: '<' t+= typeArgument ( ',' t+= typeArgument )* '>'
            {
            char_literal208=(Token)match(input,126,FOLLOW_126_in_typeArguments2794); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal208);

            pushFollow(FOLLOW_typeArgument_in_typeArguments2798);
            t=typeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeArgument.add(t.getTree());
            if (list_t==null) list_t=new ArrayList();
            list_t.add(t.getTree());

            // jkit/java/Java.g:472:24: ( ',' t+= typeArgument )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==127) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // jkit/java/Java.g:472:25: ',' t+= typeArgument
            	    {
            	    char_literal209=(Token)match(input,127,FOLLOW_127_in_typeArguments2801); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal209);

            	    pushFollow(FOLLOW_typeArgument_in_typeArguments2805);
            	    t=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeArgument.add(t.getTree());
            	    if (list_t==null) list_t=new ArrayList();
            	    list_t.add(t.getTree());


            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);

            char_literal210=(Token)match(input,128,FOLLOW_128_in_typeArguments2809); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal210);



            // AST REWRITE
            // elements: t
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: t
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
            root_0 = (Object)adaptor.nil();
            // 472:51: -> ( $t)+
            {
                if ( !(stream_t.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_t.hasNext() ) {
                    adaptor.addChild(root_0, stream_t.nextTree());

                }
                stream_t.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, typeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArguments"

    public static class typeArgument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArgument"
    // jkit/java/Java.g:475:1: typeArgument : ( type | '?' ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) ) );
    public final JavaParser.typeArgument_return typeArgument() throws RecognitionException {
        JavaParser.typeArgument_return retval = new JavaParser.typeArgument_return();
        retval.start = input.LT(1);
        int typeArgument_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal212=null;
        Token string_literal213=null;
        Token string_literal215=null;
        JavaParser.type_return type211 = null;

        JavaParser.type_return type214 = null;

        JavaParser.type_return type216 = null;


        Object char_literal212_tree=null;
        Object string_literal213_tree=null;
        Object string_literal215_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // jkit/java/Java.g:476:2: ( type | '?' ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) ) )
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==Identifier||(LA73_0>=148 && LA73_0<=155)) ) {
                alt73=1;
            }
            else if ( (LA73_0==156) ) {
                alt73=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }
            switch (alt73) {
                case 1 :
                    // jkit/java/Java.g:476:4: type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_typeArgument2827);
                    type211=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type211.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:477:4: '?' ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) )
                    {
                    char_literal212=(Token)match(input,156,FOLLOW_156_in_typeArgument2832); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_156.add(char_literal212);

                    // jkit/java/Java.g:477:8: ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) )
                    int alt72=2;
                    alt72 = dfa72.predict(input);
                    switch (alt72) {
                        case 1 :
                            // jkit/java/Java.g:478:4: ( 'extends' type )?
                            {
                            // jkit/java/Java.g:478:4: ( 'extends' type )?
                            int alt70=2;
                            int LA70_0 = input.LA(1);

                            if ( (LA70_0==124) ) {
                                alt70=1;
                            }
                            switch (alt70) {
                                case 1 :
                                    // jkit/java/Java.g:478:5: 'extends' type
                                    {
                                    string_literal213=(Token)match(input,124,FOLLOW_124_in_typeArgument2841); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_124.add(string_literal213);

                                    pushFollow(FOLLOW_type_in_typeArgument2843);
                                    type214=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type214.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: 156, type
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 478:22: -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) )
                            {
                                // jkit/java/Java.g:478:25: ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                                // jkit/java/Java.g:478:32: ^( '?' ( ^( EXTENDS type ) )? )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_2);

                                // jkit/java/Java.g:478:38: ( ^( EXTENDS type ) )?
                                if ( stream_type.hasNext() ) {
                                    // jkit/java/Java.g:478:38: ^( EXTENDS type )
                                    {
                                    Object root_3 = (Object)adaptor.nil();
                                    root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXTENDS, "EXTENDS"), root_3);

                                    adaptor.addChild(root_3, stream_type.nextTree());

                                    adaptor.addChild(root_2, root_3);
                                    }

                                }
                                stream_type.reset();

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:479:12: ( 'super' type )?
                            {
                            // jkit/java/Java.g:479:12: ( 'super' type )?
                            int alt71=2;
                            int LA71_0 = input.LA(1);

                            if ( (LA71_0==157) ) {
                                alt71=1;
                            }
                            switch (alt71) {
                                case 1 :
                                    // jkit/java/Java.g:479:13: 'super' type
                                    {
                                    string_literal215=(Token)match(input,157,FOLLOW_157_in_typeArgument2876); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_157.add(string_literal215);

                                    pushFollow(FOLLOW_type_in_typeArgument2878);
                                    type216=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type216.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: type, 156
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 479:28: -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) )
                            {
                                // jkit/java/Java.g:479:31: ^( TYPE ^( '?' ( ^( SUPER type ) )? ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                                // jkit/java/Java.g:479:38: ^( '?' ( ^( SUPER type ) )? )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_2);

                                // jkit/java/Java.g:479:44: ( ^( SUPER type ) )?
                                if ( stream_type.hasNext() ) {
                                    // jkit/java/Java.g:479:44: ^( SUPER type )
                                    {
                                    Object root_3 = (Object)adaptor.nil();
                                    root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(SUPER, "SUPER"), root_3);

                                    adaptor.addChild(root_3, stream_type.nextTree());

                                    adaptor.addChild(root_2, root_3);
                                    }

                                }
                                stream_type.reset();

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, typeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArgument"

    public static class qualifiedNameList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedNameList"
    // jkit/java/Java.g:483:1: qualifiedNameList : qualifiedName ( ',' qualifiedName )* ;
    public final JavaParser.qualifiedNameList_return qualifiedNameList() throws RecognitionException {
        JavaParser.qualifiedNameList_return retval = new JavaParser.qualifiedNameList_return();
        retval.start = input.LT(1);
        int qualifiedNameList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal218=null;
        JavaParser.qualifiedName_return qualifiedName217 = null;

        JavaParser.qualifiedName_return qualifiedName219 = null;


        Object char_literal218_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // jkit/java/Java.g:484:2: ( qualifiedName ( ',' qualifiedName )* )
            // jkit/java/Java.g:484:4: qualifiedName ( ',' qualifiedName )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList2920);
            qualifiedName217=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName217.getTree());
            // jkit/java/Java.g:484:18: ( ',' qualifiedName )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==127) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // jkit/java/Java.g:484:19: ',' qualifiedName
            	    {
            	    char_literal218=(Token)match(input,127,FOLLOW_127_in_qualifiedNameList2923); if (state.failed) return retval;
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList2926);
            	    qualifiedName219=qualifiedName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName219.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, qualifiedNameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList"

    public static class formalParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameters"
    // jkit/java/Java.g:487:1: formalParameters : '(' ( formalParameterDecls )? ')' -> ( formalParameterDecls )? ;
    public final JavaParser.formalParameters_return formalParameters() throws RecognitionException {
        JavaParser.formalParameters_return retval = new JavaParser.formalParameters_return();
        retval.start = input.LT(1);
        int formalParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal220=null;
        Token char_literal222=null;
        JavaParser.formalParameterDecls_return formalParameterDecls221 = null;


        Object char_literal220_tree=null;
        Object char_literal222_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_formalParameterDecls=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterDecls");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // jkit/java/Java.g:488:2: ( '(' ( formalParameterDecls )? ')' -> ( formalParameterDecls )? )
            // jkit/java/Java.g:488:4: '(' ( formalParameterDecls )? ')'
            {
            char_literal220=(Token)match(input,158,FOLLOW_158_in_formalParameters2940); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(char_literal220);

            // jkit/java/Java.g:488:8: ( formalParameterDecls )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==Identifier||LA75_0==142||(LA75_0>=148 && LA75_0<=155)||LA75_0==164) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // jkit/java/Java.g:0:0: formalParameterDecls
                    {
                    pushFollow(FOLLOW_formalParameterDecls_in_formalParameters2942);
                    formalParameterDecls221=formalParameterDecls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterDecls.add(formalParameterDecls221.getTree());

                    }
                    break;

            }

            char_literal222=(Token)match(input,159,FOLLOW_159_in_formalParameters2945); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(char_literal222);



            // AST REWRITE
            // elements: formalParameterDecls
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 488:34: -> ( formalParameterDecls )?
            {
                // jkit/java/Java.g:488:37: ( formalParameterDecls )?
                if ( stream_formalParameterDecls.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameterDecls.nextTree());

                }
                stream_formalParameterDecls.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, formalParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameters"

    public static class formalParameterDecls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterDecls"
    // jkit/java/Java.g:491:1: formalParameterDecls : ( variableModifier )* type ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ) ;
    public final JavaParser.formalParameterDecls_return formalParameterDecls() throws RecognitionException {
        JavaParser.formalParameterDecls_return retval = new JavaParser.formalParameterDecls_return();
        retval.start = input.LT(1);
        int formalParameterDecls_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal226=null;
        Token string_literal228=null;
        JavaParser.variableModifier_return variableModifier223 = null;

        JavaParser.type_return type224 = null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId225 = null;

        JavaParser.formalParameterDecls_return formalParameterDecls227 = null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId229 = null;


        Object char_literal226_tree=null;
        Object string_literal228_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_formalParameterDecls=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterDecls");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // jkit/java/Java.g:492:2: ( ( variableModifier )* type ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ) )
            // jkit/java/Java.g:492:4: ( variableModifier )* type ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) )
            {
            // jkit/java/Java.g:492:4: ( variableModifier )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==142||LA76_0==164) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameterDecls2962);
            	    variableModifier223=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier223.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameterDecls2965);
            type224=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type224.getTree());
            // jkit/java/Java.g:492:27: ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==Identifier) ) {
                alt78=1;
            }
            else if ( (LA78_0==160) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    // jkit/java/Java.g:493:9: variableDeclaratorId ( ',' formalParameterDecls )?
                    {
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDecls2977);
                    variableDeclaratorId225=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId225.getTree());
                    // jkit/java/Java.g:493:30: ( ',' formalParameterDecls )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==127) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // jkit/java/Java.g:493:31: ',' formalParameterDecls
                            {
                            char_literal226=(Token)match(input,127,FOLLOW_127_in_formalParameterDecls2980); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_127.add(char_literal226);

                            pushFollow(FOLLOW_formalParameterDecls_in_formalParameterDecls2982);
                            formalParameterDecls227=formalParameterDecls();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_formalParameterDecls.add(formalParameterDecls227.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: formalParameterDecls, variableDeclaratorId, type, variableModifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 493:58: -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )?
                    {
                        // jkit/java/Java.g:493:61: ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETER, "PARAMETER"), root_1);

                        // jkit/java/Java.g:493:73: ^( MODIFIERS ( variableModifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/Java.g:493:85: ( variableModifier )*
                        while ( stream_variableModifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_variableModifier.nextTree());

                        }
                        stream_variableModifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/Java.g:493:131: ( formalParameterDecls )?
                        if ( stream_formalParameterDecls.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameterDecls.nextTree());

                        }
                        stream_formalParameterDecls.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:494:11: '...' variableDeclaratorId
                    {
                    string_literal228=(Token)match(input,160,FOLLOW_160_in_formalParameterDecls3016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_160.add(string_literal228);

                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDecls3018);
                    variableDeclaratorId229=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId229.getTree());


                    // AST REWRITE
                    // elements: type, variableDeclaratorId, variableModifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 494:38: -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId )
                    {
                        // jkit/java/Java.g:494:41: ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARARGS, "VARARGS"), root_1);

                        // jkit/java/Java.g:494:51: ^( MODIFIERS ( variableModifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/Java.g:494:63: ( variableModifier )*
                        while ( stream_variableModifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_variableModifier.nextTree());

                        }
                        stream_variableModifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, formalParameterDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterDecls"

    public static class methodBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodBody"
    // jkit/java/Java.g:499:1: methodBody : block -> block ;
    public final JavaParser.methodBody_return methodBody() throws RecognitionException {
        JavaParser.methodBody_return retval = new JavaParser.methodBody_return();
        retval.start = input.LT(1);
        int methodBody_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.block_return block230 = null;


        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // jkit/java/Java.g:500:2: ( block -> block )
            // jkit/java/Java.g:500:4: block
            {
            pushFollow(FOLLOW_block_in_methodBody3061);
            block230=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block230.getTree());


            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 500:10: -> block
            {
                adaptor.addChild(root_0, stream_block.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, methodBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodBody"

    public static class qualifiedName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName"
    // jkit/java/Java.g:503:1: qualifiedName : i+= Identifier ( '.' i+= Identifier )* -> ( $i)+ ;
    public final JavaParser.qualifiedName_return qualifiedName() throws RecognitionException {
        JavaParser.qualifiedName_return retval = new JavaParser.qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal231=null;
        Token i=null;
        List list_i=null;

        Object char_literal231_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // jkit/java/Java.g:504:2: (i+= Identifier ( '.' i+= Identifier )* -> ( $i)+ )
            // jkit/java/Java.g:504:4: i+= Identifier ( '.' i+= Identifier )*
            {
            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName3079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(i);

            if (list_i==null) list_i=new ArrayList();
            list_i.add(i);

            // jkit/java/Java.g:504:18: ( '.' i+= Identifier )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==121) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // jkit/java/Java.g:504:19: '.' i+= Identifier
            	    {
            	    char_literal231=(Token)match(input,121,FOLLOW_121_in_qualifiedName3082); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_121.add(char_literal231);

            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName3086); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Identifier.add(i);

            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i);


            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: i
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 504:39: -> ( $i)+
            {
                if ( !(stream_i.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_0, stream_i.nextNode());

                }
                stream_i.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // jkit/java/Java.g:507:1: literal : ( integerLiteral -> ^( INTVAL integerLiteral ) | FloatingPointLiteral -> ^( FLOATVAL FloatingPointLiteral ) | CharacterLiteral -> ^( CHARVAL CharacterLiteral ) | StringLiteral -> ^( STRINGVAL StringLiteral ) | booleanLiteral -> ^( BOOLVAL booleanLiteral ) | 'null' -> ^( NULLVAL ) );
    public final JavaParser.literal_return literal() throws RecognitionException {
        JavaParser.literal_return retval = new JavaParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        Object root_0 = null;

        Token FloatingPointLiteral233=null;
        Token CharacterLiteral234=null;
        Token StringLiteral235=null;
        Token string_literal237=null;
        JavaParser.integerLiteral_return integerLiteral232 = null;

        JavaParser.booleanLiteral_return booleanLiteral236 = null;


        Object FloatingPointLiteral233_tree=null;
        Object CharacterLiteral234_tree=null;
        Object StringLiteral235_tree=null;
        Object string_literal237_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_FloatingPointLiteral=new RewriteRuleTokenStream(adaptor,"token FloatingPointLiteral");
        RewriteRuleTokenStream stream_CharacterLiteral=new RewriteRuleTokenStream(adaptor,"token CharacterLiteral");
        RewriteRuleSubtreeStream stream_booleanLiteral=new RewriteRuleSubtreeStream(adaptor,"rule booleanLiteral");
        RewriteRuleSubtreeStream stream_integerLiteral=new RewriteRuleSubtreeStream(adaptor,"rule integerLiteral");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // jkit/java/Java.g:508:2: ( integerLiteral -> ^( INTVAL integerLiteral ) | FloatingPointLiteral -> ^( FLOATVAL FloatingPointLiteral ) | CharacterLiteral -> ^( CHARVAL CharacterLiteral ) | StringLiteral -> ^( STRINGVAL StringLiteral ) | booleanLiteral -> ^( BOOLVAL booleanLiteral ) | 'null' -> ^( NULLVAL ) )
            int alt80=6;
            switch ( input.LA(1) ) {
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
                {
                alt80=1;
                }
                break;
            case FloatingPointLiteral:
                {
                alt80=2;
                }
                break;
            case CharacterLiteral:
                {
                alt80=3;
                }
                break;
            case StringLiteral:
                {
                alt80=4;
                }
                break;
            case 162:
            case 163:
                {
                alt80=5;
                }
                break;
            case 161:
                {
                alt80=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;
            }

            switch (alt80) {
                case 1 :
                    // jkit/java/Java.g:508:6: integerLiteral
                    {
                    pushFollow(FOLLOW_integerLiteral_in_literal3109);
                    integerLiteral232=integerLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_integerLiteral.add(integerLiteral232.getTree());


                    // AST REWRITE
                    // elements: integerLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 508:21: -> ^( INTVAL integerLiteral )
                    {
                        // jkit/java/Java.g:508:24: ^( INTVAL integerLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTVAL, "INTVAL"), root_1);

                        adaptor.addChild(root_1, stream_integerLiteral.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:509:9: FloatingPointLiteral
                    {
                    FloatingPointLiteral233=(Token)match(input,FloatingPointLiteral,FOLLOW_FloatingPointLiteral_in_literal3127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FloatingPointLiteral.add(FloatingPointLiteral233);



                    // AST REWRITE
                    // elements: FloatingPointLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 509:30: -> ^( FLOATVAL FloatingPointLiteral )
                    {
                        // jkit/java/Java.g:509:33: ^( FLOATVAL FloatingPointLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FLOATVAL, "FLOATVAL"), root_1);

                        adaptor.addChild(root_1, stream_FloatingPointLiteral.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:510:9: CharacterLiteral
                    {
                    CharacterLiteral234=(Token)match(input,CharacterLiteral,FOLLOW_CharacterLiteral_in_literal3145); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CharacterLiteral.add(CharacterLiteral234);



                    // AST REWRITE
                    // elements: CharacterLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 510:26: -> ^( CHARVAL CharacterLiteral )
                    {
                        // jkit/java/Java.g:510:29: ^( CHARVAL CharacterLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CHARVAL, "CHARVAL"), root_1);

                        adaptor.addChild(root_1, stream_CharacterLiteral.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:511:9: StringLiteral
                    {
                    StringLiteral235=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_literal3163); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral235);



                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 511:23: -> ^( STRINGVAL StringLiteral )
                    {
                        // jkit/java/Java.g:511:26: ^( STRINGVAL StringLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STRINGVAL, "STRINGVAL"), root_1);

                        adaptor.addChild(root_1, stream_StringLiteral.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:512:9: booleanLiteral
                    {
                    pushFollow(FOLLOW_booleanLiteral_in_literal3181);
                    booleanLiteral236=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_booleanLiteral.add(booleanLiteral236.getTree());


                    // AST REWRITE
                    // elements: booleanLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 512:24: -> ^( BOOLVAL booleanLiteral )
                    {
                        // jkit/java/Java.g:512:27: ^( BOOLVAL booleanLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BOOLVAL, "BOOLVAL"), root_1);

                        adaptor.addChild(root_1, stream_booleanLiteral.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:513:9: 'null'
                    {
                    string_literal237=(Token)match(input,161,FOLLOW_161_in_literal3199); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_161.add(string_literal237);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 513:16: -> ^( NULLVAL )
                    {
                        // jkit/java/Java.g:513:19: ^( NULLVAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NULLVAL, "NULLVAL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class integerLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integerLiteral"
    // jkit/java/Java.g:516:1: integerLiteral : ( HexLiteral | OctalLiteral | DecimalLiteral );
    public final JavaParser.integerLiteral_return integerLiteral() throws RecognitionException {
        JavaParser.integerLiteral_return retval = new JavaParser.integerLiteral_return();
        retval.start = input.LT(1);
        int integerLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token set238=null;

        Object set238_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // jkit/java/Java.g:517:5: ( HexLiteral | OctalLiteral | DecimalLiteral )
            // jkit/java/Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set238=(Token)input.LT(1);
            if ( (input.LA(1)>=HexLiteral && input.LA(1)<=DecimalLiteral) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set238));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, integerLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integerLiteral"

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "booleanLiteral"
    // jkit/java/Java.g:522:1: booleanLiteral : ( 'true' | 'false' );
    public final JavaParser.booleanLiteral_return booleanLiteral() throws RecognitionException {
        JavaParser.booleanLiteral_return retval = new JavaParser.booleanLiteral_return();
        retval.start = input.LT(1);
        int booleanLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token set239=null;

        Object set239_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // jkit/java/Java.g:523:5: ( 'true' | 'false' )
            // jkit/java/Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set239=(Token)input.LT(1);
            if ( (input.LA(1)>=162 && input.LA(1)<=163) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set239));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, booleanLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"

    public static class annotations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotations"
    // jkit/java/Java.g:529:1: annotations : ( annotation )+ ;
    public final JavaParser.annotations_return annotations() throws RecognitionException {
        JavaParser.annotations_return retval = new JavaParser.annotations_return();
        retval.start = input.LT(1);
        int annotations_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotation_return annotation240 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // jkit/java/Java.g:530:2: ( ( annotation )+ )
            // jkit/java/Java.g:530:4: ( annotation )+
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:530:4: ( annotation )+
            int cnt81=0;
            loop81:
            do {
                int alt81=2;
                alt81 = dfa81.predict(input);
                switch (alt81) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations3287);
            	    annotation240=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation240.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt81 >= 1 ) break loop81;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(81, input);
                        throw eee;
                }
                cnt81++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, annotations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotations"

    public static class annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // jkit/java/Java.g:533:1: annotation : '@' annotationName ( '(' ( elementValuePairs )? ')' )? -> ^( ANNOTATION annotationName ) ;
    public final JavaParser.annotation_return annotation() throws RecognitionException {
        JavaParser.annotation_return retval = new JavaParser.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal241=null;
        Token char_literal243=null;
        Token char_literal245=null;
        JavaParser.annotationName_return annotationName242 = null;

        JavaParser.elementValuePairs_return elementValuePairs244 = null;


        Object char_literal241_tree=null;
        Object char_literal243_tree=null;
        Object char_literal245_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_annotationName=new RewriteRuleSubtreeStream(adaptor,"rule annotationName");
        RewriteRuleSubtreeStream stream_elementValuePairs=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairs");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // jkit/java/Java.g:534:2: ( '@' annotationName ( '(' ( elementValuePairs )? ')' )? -> ^( ANNOTATION annotationName ) )
            // jkit/java/Java.g:534:4: '@' annotationName ( '(' ( elementValuePairs )? ')' )?
            {
            char_literal241=(Token)match(input,164,FOLLOW_164_in_annotation3299); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(char_literal241);

            pushFollow(FOLLOW_annotationName_in_annotation3301);
            annotationName242=annotationName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationName.add(annotationName242.getTree());
            // jkit/java/Java.g:534:23: ( '(' ( elementValuePairs )? ')' )?
            int alt83=2;
            alt83 = dfa83.predict(input);
            switch (alt83) {
                case 1 :
                    // jkit/java/Java.g:534:24: '(' ( elementValuePairs )? ')'
                    {
                    char_literal243=(Token)match(input,158,FOLLOW_158_in_annotation3304); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_158.add(char_literal243);

                    // jkit/java/Java.g:534:28: ( elementValuePairs )?
                    int alt82=2;
                    alt82 = dfa82.predict(input);
                    switch (alt82) {
                        case 1 :
                            // jkit/java/Java.g:0:0: elementValuePairs
                            {
                            pushFollow(FOLLOW_elementValuePairs_in_annotation3306);
                            elementValuePairs244=elementValuePairs();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairs.add(elementValuePairs244.getTree());

                            }
                            break;

                    }

                    char_literal245=(Token)match(input,159,FOLLOW_159_in_annotation3309); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_159.add(char_literal245);


                    }
                    break;

            }



            // AST REWRITE
            // elements: annotationName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 534:53: -> ^( ANNOTATION annotationName )
            {
                // jkit/java/Java.g:534:56: ^( ANNOTATION annotationName )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_annotationName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationName"
    // jkit/java/Java.g:537:1: annotationName : Identifier ( '.' Identifier )* ;
    public final JavaParser.annotationName_return annotationName() throws RecognitionException {
        JavaParser.annotationName_return retval = new JavaParser.annotationName_return();
        retval.start = input.LT(1);
        int annotationName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier246=null;
        Token char_literal247=null;
        Token Identifier248=null;

        Object Identifier246_tree=null;
        Object char_literal247_tree=null;
        Object Identifier248_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // jkit/java/Java.g:538:2: ( Identifier ( '.' Identifier )* )
            // jkit/java/Java.g:538:4: Identifier ( '.' Identifier )*
            {
            root_0 = (Object)adaptor.nil();

            Identifier246=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationName3331); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier246_tree = (Object)adaptor.create(Identifier246);
            adaptor.addChild(root_0, Identifier246_tree);
            }
            // jkit/java/Java.g:538:15: ( '.' Identifier )*
            loop84:
            do {
                int alt84=2;
                alt84 = dfa84.predict(input);
                switch (alt84) {
            	case 1 :
            	    // jkit/java/Java.g:538:16: '.' Identifier
            	    {
            	    char_literal247=(Token)match(input,121,FOLLOW_121_in_annotationName3334); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal247_tree = (Object)adaptor.create(char_literal247);
            	    adaptor.addChild(root_0, char_literal247_tree);
            	    }
            	    Identifier248=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationName3336); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    Identifier248_tree = (Object)adaptor.create(Identifier248);
            	    adaptor.addChild(root_0, Identifier248_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, annotationName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationName"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairs"
    // jkit/java/Java.g:541:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
    public final JavaParser.elementValuePairs_return elementValuePairs() throws RecognitionException {
        JavaParser.elementValuePairs_return retval = new JavaParser.elementValuePairs_return();
        retval.start = input.LT(1);
        int elementValuePairs_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal250=null;
        JavaParser.elementValuePair_return elementValuePair249 = null;

        JavaParser.elementValuePair_return elementValuePair251 = null;


        Object char_literal250_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // jkit/java/Java.g:542:2: ( elementValuePair ( ',' elementValuePair )* )
            // jkit/java/Java.g:542:4: elementValuePair ( ',' elementValuePair )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs3350);
            elementValuePair249=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair249.getTree());
            // jkit/java/Java.g:542:21: ( ',' elementValuePair )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==127) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // jkit/java/Java.g:542:22: ',' elementValuePair
            	    {
            	    char_literal250=(Token)match(input,127,FOLLOW_127_in_elementValuePairs3353); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal250_tree = (Object)adaptor.create(char_literal250);
            	    adaptor.addChild(root_0, char_literal250_tree);
            	    }
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs3355);
            	    elementValuePair251=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair251.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, elementValuePairs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePair"
    // jkit/java/Java.g:545:1: elementValuePair : ( Identifier '=' )? elementValue ;
    public final JavaParser.elementValuePair_return elementValuePair() throws RecognitionException {
        JavaParser.elementValuePair_return retval = new JavaParser.elementValuePair_return();
        retval.start = input.LT(1);
        int elementValuePair_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier252=null;
        Token char_literal253=null;
        JavaParser.elementValue_return elementValue254 = null;


        Object Identifier252_tree=null;
        Object char_literal253_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // jkit/java/Java.g:546:2: ( ( Identifier '=' )? elementValue )
            // jkit/java/Java.g:546:4: ( Identifier '=' )? elementValue
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:546:4: ( Identifier '=' )?
            int alt86=2;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    // jkit/java/Java.g:546:5: Identifier '='
                    {
                    Identifier252=(Token)match(input,Identifier,FOLLOW_Identifier_in_elementValuePair3370); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier252_tree = (Object)adaptor.create(Identifier252);
                    adaptor.addChild(root_0, Identifier252_tree);
                    }
                    char_literal253=(Token)match(input,137,FOLLOW_137_in_elementValuePair3372); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal253_tree = (Object)adaptor.create(char_literal253);
                    adaptor.addChild(root_0, char_literal253_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_elementValue_in_elementValuePair3376);
            elementValue254=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue254.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, elementValuePair_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValue"
    // jkit/java/Java.g:549:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );
    public final JavaParser.elementValue_return elementValue() throws RecognitionException {
        JavaParser.elementValue_return retval = new JavaParser.elementValue_return();
        retval.start = input.LT(1);
        int elementValue_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.conditionalExpression_return conditionalExpression255 = null;

        JavaParser.annotation_return annotation256 = null;

        JavaParser.elementValueArrayInitializer_return elementValueArrayInitializer257 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // jkit/java/Java.g:550:2: ( conditionalExpression | annotation | elementValueArrayInitializer )
            int alt87=3;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // jkit/java/Java.g:550:4: conditionalExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_conditionalExpression_in_elementValue3388);
                    conditionalExpression255=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression255.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:551:6: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_elementValue3395);
                    annotation256=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation256.getTree());

                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:552:6: elementValueArrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue3402);
                    elementValueArrayInitializer257=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValueArrayInitializer257.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, elementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // jkit/java/Java.g:555:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? '}' ;
    public final JavaParser.elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        JavaParser.elementValueArrayInitializer_return retval = new JavaParser.elementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int elementValueArrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal258=null;
        Token char_literal260=null;
        Token char_literal262=null;
        JavaParser.elementValue_return elementValue259 = null;

        JavaParser.elementValue_return elementValue261 = null;


        Object char_literal258_tree=null;
        Object char_literal260_tree=null;
        Object char_literal262_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // jkit/java/Java.g:556:2: ( '{' ( elementValue ( ',' elementValue )* )? '}' )
            // jkit/java/Java.g:556:4: '{' ( elementValue ( ',' elementValue )* )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal258=(Token)match(input,130,FOLLOW_130_in_elementValueArrayInitializer3414); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal258_tree = (Object)adaptor.create(char_literal258);
            adaptor.addChild(root_0, char_literal258_tree);
            }
            // jkit/java/Java.g:556:8: ( elementValue ( ',' elementValue )* )?
            int alt89=2;
            alt89 = dfa89.predict(input);
            switch (alt89) {
                case 1 :
                    // jkit/java/Java.g:556:9: elementValue ( ',' elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer3417);
                    elementValue259=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue259.getTree());
                    // jkit/java/Java.g:556:22: ( ',' elementValue )*
                    loop88:
                    do {
                        int alt88=2;
                        int LA88_0 = input.LA(1);

                        if ( (LA88_0==127) ) {
                            alt88=1;
                        }


                        switch (alt88) {
                    	case 1 :
                    	    // jkit/java/Java.g:556:23: ',' elementValue
                    	    {
                    	    char_literal260=(Token)match(input,127,FOLLOW_127_in_elementValueArrayInitializer3420); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal260_tree = (Object)adaptor.create(char_literal260);
                    	    adaptor.addChild(root_0, char_literal260_tree);
                    	    }
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer3422);
                    	    elementValue261=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue261.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop88;
                        }
                    } while (true);


                    }
                    break;

            }

            char_literal262=(Token)match(input,131,FOLLOW_131_in_elementValueArrayInitializer3429); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal262_tree = (Object)adaptor.create(char_literal262);
            adaptor.addChild(root_0, char_literal262_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, elementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // jkit/java/Java.g:559:1: annotationTypeDeclaration : '@' 'interface' Identifier annotationTypeBody ;
    public final JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration() throws RecognitionException {
        JavaParser.annotationTypeDeclaration_return retval = new JavaParser.annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal263=null;
        Token string_literal264=null;
        Token Identifier265=null;
        JavaParser.annotationTypeBody_return annotationTypeBody266 = null;


        Object char_literal263_tree=null;
        Object string_literal264_tree=null;
        Object Identifier265_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // jkit/java/Java.g:560:2: ( '@' 'interface' Identifier annotationTypeBody )
            // jkit/java/Java.g:560:4: '@' 'interface' Identifier annotationTypeBody
            {
            root_0 = (Object)adaptor.nil();

            char_literal263=(Token)match(input,164,FOLLOW_164_in_annotationTypeDeclaration3441); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal263_tree = (Object)adaptor.create(char_literal263);
            adaptor.addChild(root_0, char_literal263_tree);
            }
            string_literal264=(Token)match(input,132,FOLLOW_132_in_annotationTypeDeclaration3443); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal264_tree = (Object)adaptor.create(string_literal264);
            adaptor.addChild(root_0, string_literal264_tree);
            }
            Identifier265=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationTypeDeclaration3445); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier265_tree = (Object)adaptor.create(Identifier265);
            adaptor.addChild(root_0, Identifier265_tree);
            }
            pushFollow(FOLLOW_annotationTypeBody_in_annotationTypeDeclaration3447);
            annotationTypeBody266=annotationTypeBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeBody266.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationTypeBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeBody"
    // jkit/java/Java.g:563:1: annotationTypeBody : '{' ( annotationTypeElementDeclarations )? '}' ;
    public final JavaParser.annotationTypeBody_return annotationTypeBody() throws RecognitionException {
        JavaParser.annotationTypeBody_return retval = new JavaParser.annotationTypeBody_return();
        retval.start = input.LT(1);
        int annotationTypeBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal267=null;
        Token char_literal269=null;
        JavaParser.annotationTypeElementDeclarations_return annotationTypeElementDeclarations268 = null;


        Object char_literal267_tree=null;
        Object char_literal269_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // jkit/java/Java.g:564:2: ( '{' ( annotationTypeElementDeclarations )? '}' )
            // jkit/java/Java.g:564:4: '{' ( annotationTypeElementDeclarations )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal267=(Token)match(input,130,FOLLOW_130_in_annotationTypeBody3459); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal267_tree = (Object)adaptor.create(char_literal267);
            adaptor.addChild(root_0, char_literal267_tree);
            }
            // jkit/java/Java.g:564:8: ( annotationTypeElementDeclarations )?
            int alt90=2;
            alt90 = dfa90.predict(input);
            switch (alt90) {
                case 1 :
                    // jkit/java/Java.g:564:9: annotationTypeElementDeclarations
                    {
                    pushFollow(FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody3462);
                    annotationTypeElementDeclarations268=annotationTypeElementDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclarations268.getTree());

                    }
                    break;

            }

            char_literal269=(Token)match(input,131,FOLLOW_131_in_annotationTypeBody3466); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal269_tree = (Object)adaptor.create(char_literal269);
            adaptor.addChild(root_0, char_literal269_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, annotationTypeBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeBody"

    public static class annotationTypeElementDeclarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclarations"
    // jkit/java/Java.g:567:1: annotationTypeElementDeclarations : ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )* ;
    public final JavaParser.annotationTypeElementDeclarations_return annotationTypeElementDeclarations() throws RecognitionException {
        JavaParser.annotationTypeElementDeclarations_return retval = new JavaParser.annotationTypeElementDeclarations_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclarations_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration270 = null;

        JavaParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration271 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // jkit/java/Java.g:568:2: ( ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )* )
            // jkit/java/Java.g:568:4: ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )*
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:568:4: ( annotationTypeElementDeclaration )
            // jkit/java/Java.g:568:5: annotationTypeElementDeclaration
            {
            pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3479);
            annotationTypeElementDeclaration270=annotationTypeElementDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclaration270.getTree());

            }

            // jkit/java/Java.g:568:39: ( annotationTypeElementDeclaration )*
            loop91:
            do {
                int alt91=2;
                alt91 = dfa91.predict(input);
                switch (alt91) {
            	case 1 :
            	    // jkit/java/Java.g:568:40: annotationTypeElementDeclaration
            	    {
            	    pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3483);
            	    annotationTypeElementDeclaration271=annotationTypeElementDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclaration271.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, annotationTypeElementDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclarations"

    public static class annotationTypeElementDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclaration"
    // jkit/java/Java.g:571:1: annotationTypeElementDeclaration : ( modifier )* annotationTypeElementRest ;
    public final JavaParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration() throws RecognitionException {
        JavaParser.annotationTypeElementDeclaration_return retval = new JavaParser.annotationTypeElementDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclaration_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.modifier_return modifier272 = null;

        JavaParser.annotationTypeElementRest_return annotationTypeElementRest273 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // jkit/java/Java.g:572:2: ( ( modifier )* annotationTypeElementRest )
            // jkit/java/Java.g:572:4: ( modifier )* annotationTypeElementRest
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:572:4: ( modifier )*
            loop92:
            do {
                int alt92=2;
                alt92 = dfa92.predict(input);
                switch (alt92) {
            	case 1 :
            	    // jkit/java/Java.g:572:5: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_annotationTypeElementDeclaration3498);
            	    modifier272=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier272.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);

            pushFollow(FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration3502);
            annotationTypeElementRest273=annotationTypeElementRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementRest273.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, annotationTypeElementDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclaration"

    public static class annotationTypeElementRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementRest"
    // jkit/java/Java.g:575:1: annotationTypeElementRest : ( type annotationMethodOrConstantRest ';' | classDeclaration ( ';' )? | interfaceDeclaration ( ';' )? | enumDeclaration ( ';' )? | annotationTypeDeclaration ( ';' )? );
    public final JavaParser.annotationTypeElementRest_return annotationTypeElementRest() throws RecognitionException {
        JavaParser.annotationTypeElementRest_return retval = new JavaParser.annotationTypeElementRest_return();
        retval.start = input.LT(1);
        int annotationTypeElementRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal276=null;
        Token char_literal278=null;
        Token char_literal280=null;
        Token char_literal282=null;
        Token char_literal284=null;
        JavaParser.type_return type274 = null;

        JavaParser.annotationMethodOrConstantRest_return annotationMethodOrConstantRest275 = null;

        JavaParser.classDeclaration_return classDeclaration277 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration279 = null;

        JavaParser.enumDeclaration_return enumDeclaration281 = null;

        JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration283 = null;


        Object char_literal276_tree=null;
        Object char_literal278_tree=null;
        Object char_literal280_tree=null;
        Object char_literal282_tree=null;
        Object char_literal284_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // jkit/java/Java.g:576:2: ( type annotationMethodOrConstantRest ';' | classDeclaration ( ';' )? | interfaceDeclaration ( ';' )? | enumDeclaration ( ';' )? | annotationTypeDeclaration ( ';' )? )
            int alt97=5;
            switch ( input.LA(1) ) {
            case Identifier:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
                {
                alt97=1;
                }
                break;
            case 123:
                {
                alt97=2;
                }
                break;
            case 132:
                {
                alt97=3;
                }
                break;
            case 164:
                {
                int LA97_5 = input.LA(2);

                if ( (LA97_5==132) ) {
                    int LA97_7 = input.LA(3);

                    if ( (synpred138_Java()) ) {
                        alt97=3;
                    }
                    else if ( (true) ) {
                        alt97=5;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 97, 7, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 5, input);

                    throw nvae;
                }
                }
                break;
            case ENUM:
                {
                alt97=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;
            }

            switch (alt97) {
                case 1 :
                    // jkit/java/Java.g:576:4: type annotationMethodOrConstantRest ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_annotationTypeElementRest3514);
                    type274=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type274.getTree());
                    pushFollow(FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest3516);
                    annotationMethodOrConstantRest275=annotationMethodOrConstantRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationMethodOrConstantRest275.getTree());
                    char_literal276=(Token)match(input,118,FOLLOW_118_in_annotationTypeElementRest3518); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal276_tree = (Object)adaptor.create(char_literal276);
                    adaptor.addChild(root_0, char_literal276_tree);
                    }

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:577:6: classDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_annotationTypeElementRest3525);
                    classDeclaration277=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration277.getTree());
                    // jkit/java/Java.g:577:23: ( ';' )?
                    int alt93=2;
                    alt93 = dfa93.predict(input);
                    switch (alt93) {
                        case 1 :
                            // jkit/java/Java.g:0:0: ';'
                            {
                            char_literal278=(Token)match(input,118,FOLLOW_118_in_annotationTypeElementRest3527); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal278_tree = (Object)adaptor.create(char_literal278);
                            adaptor.addChild(root_0, char_literal278_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:578:6: interfaceDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_annotationTypeElementRest3535);
                    interfaceDeclaration279=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration279.getTree());
                    // jkit/java/Java.g:578:27: ( ';' )?
                    int alt94=2;
                    alt94 = dfa94.predict(input);
                    switch (alt94) {
                        case 1 :
                            // jkit/java/Java.g:0:0: ';'
                            {
                            char_literal280=(Token)match(input,118,FOLLOW_118_in_annotationTypeElementRest3537); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal280_tree = (Object)adaptor.create(char_literal280);
                            adaptor.addChild(root_0, char_literal280_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:579:6: enumDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enumDeclaration_in_annotationTypeElementRest3545);
                    enumDeclaration281=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDeclaration281.getTree());
                    // jkit/java/Java.g:579:22: ( ';' )?
                    int alt95=2;
                    alt95 = dfa95.predict(input);
                    switch (alt95) {
                        case 1 :
                            // jkit/java/Java.g:0:0: ';'
                            {
                            char_literal282=(Token)match(input,118,FOLLOW_118_in_annotationTypeElementRest3547); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal282_tree = (Object)adaptor.create(char_literal282);
                            adaptor.addChild(root_0, char_literal282_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:580:6: annotationTypeDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest3555);
                    annotationTypeDeclaration283=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration283.getTree());
                    // jkit/java/Java.g:580:32: ( ';' )?
                    int alt96=2;
                    alt96 = dfa96.predict(input);
                    switch (alt96) {
                        case 1 :
                            // jkit/java/Java.g:0:0: ';'
                            {
                            char_literal284=(Token)match(input,118,FOLLOW_118_in_annotationTypeElementRest3557); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal284_tree = (Object)adaptor.create(char_literal284);
                            adaptor.addChild(root_0, char_literal284_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, annotationTypeElementRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementRest"

    public static class annotationMethodOrConstantRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodOrConstantRest"
    // jkit/java/Java.g:583:1: annotationMethodOrConstantRest : ( annotationMethodRest | annotationConstantRest );
    public final JavaParser.annotationMethodOrConstantRest_return annotationMethodOrConstantRest() throws RecognitionException {
        JavaParser.annotationMethodOrConstantRest_return retval = new JavaParser.annotationMethodOrConstantRest_return();
        retval.start = input.LT(1);
        int annotationMethodOrConstantRest_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotationMethodRest_return annotationMethodRest285 = null;

        JavaParser.annotationConstantRest_return annotationConstantRest286 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // jkit/java/Java.g:584:2: ( annotationMethodRest | annotationConstantRest )
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==Identifier) ) {
                int LA98_1 = input.LA(2);

                if ( (LA98_1==158) ) {
                    alt98=1;
                }
                else if ( (LA98_1==118||LA98_1==127||LA98_1==135||LA98_1==137) ) {
                    alt98=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    // jkit/java/Java.g:584:4: annotationMethodRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest3570);
                    annotationMethodRest285=annotationMethodRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationMethodRest285.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:585:6: annotationConstantRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest3577);
                    annotationConstantRest286=annotationConstantRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationConstantRest286.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, annotationMethodOrConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodOrConstantRest"

    public static class annotationMethodRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodRest"
    // jkit/java/Java.g:588:1: annotationMethodRest : Identifier '(' ')' ( defaultValue )? ;
    public final JavaParser.annotationMethodRest_return annotationMethodRest() throws RecognitionException {
        JavaParser.annotationMethodRest_return retval = new JavaParser.annotationMethodRest_return();
        retval.start = input.LT(1);
        int annotationMethodRest_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier287=null;
        Token char_literal288=null;
        Token char_literal289=null;
        JavaParser.defaultValue_return defaultValue290 = null;


        Object Identifier287_tree=null;
        Object char_literal288_tree=null;
        Object char_literal289_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // jkit/java/Java.g:589:3: ( Identifier '(' ')' ( defaultValue )? )
            // jkit/java/Java.g:589:5: Identifier '(' ')' ( defaultValue )?
            {
            root_0 = (Object)adaptor.nil();

            Identifier287=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationMethodRest3590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier287_tree = (Object)adaptor.create(Identifier287);
            adaptor.addChild(root_0, Identifier287_tree);
            }
            char_literal288=(Token)match(input,158,FOLLOW_158_in_annotationMethodRest3592); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal288_tree = (Object)adaptor.create(char_literal288);
            adaptor.addChild(root_0, char_literal288_tree);
            }
            char_literal289=(Token)match(input,159,FOLLOW_159_in_annotationMethodRest3594); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal289_tree = (Object)adaptor.create(char_literal289);
            adaptor.addChild(root_0, char_literal289_tree);
            }
            // jkit/java/Java.g:589:24: ( defaultValue )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==165) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // jkit/java/Java.g:589:25: defaultValue
                    {
                    pushFollow(FOLLOW_defaultValue_in_annotationMethodRest3597);
                    defaultValue290=defaultValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defaultValue290.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, annotationMethodRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodRest"

    public static class annotationConstantRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationConstantRest"
    // jkit/java/Java.g:592:1: annotationConstantRest : variableDeclarators ;
    public final JavaParser.annotationConstantRest_return annotationConstantRest() throws RecognitionException {
        JavaParser.annotationConstantRest_return retval = new JavaParser.annotationConstantRest_return();
        retval.start = input.LT(1);
        int annotationConstantRest_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.variableDeclarators_return variableDeclarators291 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // jkit/java/Java.g:593:3: ( variableDeclarators )
            // jkit/java/Java.g:593:5: variableDeclarators
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclarators_in_annotationConstantRest3614);
            variableDeclarators291=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarators291.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, annotationConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationConstantRest"

    public static class defaultValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultValue"
    // jkit/java/Java.g:596:1: defaultValue : 'default' elementValue ;
    public final JavaParser.defaultValue_return defaultValue() throws RecognitionException {
        JavaParser.defaultValue_return retval = new JavaParser.defaultValue_return();
        retval.start = input.LT(1);
        int defaultValue_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal292=null;
        JavaParser.elementValue_return elementValue293 = null;


        Object string_literal292_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // jkit/java/Java.g:597:3: ( 'default' elementValue )
            // jkit/java/Java.g:597:5: 'default' elementValue
            {
            root_0 = (Object)adaptor.nil();

            string_literal292=(Token)match(input,165,FOLLOW_165_in_defaultValue3629); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal292_tree = (Object)adaptor.create(string_literal292);
            adaptor.addChild(root_0, string_literal292_tree);
            }
            pushFollow(FOLLOW_elementValue_in_defaultValue3631);
            elementValue293=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue293.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, defaultValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "defaultValue"

    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // jkit/java/Java.g:602:1: block : '{' ( blockStatement )* '}' -> ^( BLOCK ( blockStatement )* ) ;
    public final JavaParser.block_return block() throws RecognitionException {
        JavaParser.block_return retval = new JavaParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal294=null;
        Token char_literal296=null;
        JavaParser.blockStatement_return blockStatement295 = null;


        Object char_literal294_tree=null;
        Object char_literal296_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // jkit/java/Java.g:603:2: ( '{' ( blockStatement )* '}' -> ^( BLOCK ( blockStatement )* ) )
            // jkit/java/Java.g:603:4: '{' ( blockStatement )* '}'
            {
            char_literal294=(Token)match(input,130,FOLLOW_130_in_block3645); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal294);

            // jkit/java/Java.g:603:8: ( blockStatement )*
            loop100:
            do {
                int alt100=2;
                alt100 = dfa100.predict(input);
                switch (alt100) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block3647);
            	    blockStatement295=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement295.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);

            char_literal296=(Token)match(input,131,FOLLOW_131_in_block3650); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(char_literal296);



            // AST REWRITE
            // elements: blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 603:28: -> ^( BLOCK ( blockStatement )* )
            {
                // jkit/java/Java.g:603:31: ^( BLOCK ( blockStatement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, "BLOCK"), root_1);

                // jkit/java/Java.g:603:39: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // jkit/java/Java.g:606:1: blockStatement : ( localVariableDeclaration | classOrInterfaceDeclaration | statement );
    public final JavaParser.blockStatement_return blockStatement() throws RecognitionException {
        JavaParser.blockStatement_return retval = new JavaParser.blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.localVariableDeclaration_return localVariableDeclaration297 = null;

        JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration298 = null;

        JavaParser.statement_return statement299 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // jkit/java/Java.g:607:2: ( localVariableDeclaration | classOrInterfaceDeclaration | statement )
            int alt101=3;
            alt101 = dfa101.predict(input);
            switch (alt101) {
                case 1 :
                    // jkit/java/Java.g:607:4: localVariableDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_blockStatement3671);
                    localVariableDeclaration297=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration297.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:608:4: classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_blockStatement3676);
                    classOrInterfaceDeclaration298=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceDeclaration298.getTree());

                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:609:7: statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_blockStatement3684);
                    statement299=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement299.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclaration"
    // jkit/java/Java.g:612:1: localVariableDeclaration : ( variableModifier )* type variableDeclarators ';' -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) ;
    public final JavaParser.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        JavaParser.localVariableDeclaration_return retval = new JavaParser.localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal303=null;
        JavaParser.variableModifier_return variableModifier300 = null;

        JavaParser.type_return type301 = null;

        JavaParser.variableDeclarators_return variableDeclarators302 = null;


        Object char_literal303_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // jkit/java/Java.g:613:2: ( ( variableModifier )* type variableDeclarators ';' -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) )
            // jkit/java/Java.g:613:4: ( variableModifier )* type variableDeclarators ';'
            {
            // jkit/java/Java.g:613:4: ( variableModifier )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==142||LA102_0==164) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_localVariableDeclaration3696);
            	    variableModifier300=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier300.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_localVariableDeclaration3699);
            type301=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type301.getTree());
            pushFollow(FOLLOW_variableDeclarators_in_localVariableDeclaration3701);
            variableDeclarators302=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarators.add(variableDeclarators302.getTree());
            char_literal303=(Token)match(input,118,FOLLOW_118_in_localVariableDeclaration3703); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal303);



            // AST REWRITE
            // elements: variableDeclarators, type, variableModifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 613:51: -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
            {
                // jkit/java/Java.g:613:54: ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARDEF, "VARDEF"), root_1);

                // jkit/java/Java.g:613:63: ^( MODIFIERS ( variableModifier )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                // jkit/java/Java.g:613:75: ( variableModifier )*
                while ( stream_variableModifier.hasNext() ) {
                    adaptor.addChild(root_2, stream_variableModifier.nextTree());

                }
                stream_variableModifier.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_variableDeclarators.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // jkit/java/Java.g:616:1: statement : ( block | lc= 'assert' expression ( ':' expression )? ';' -> ^( ASSERT[$lc] expression ( expression )? ) | lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> ^( IF[$lc] parExpression statement ( statement )? ) | lc= 'for' '(' forControl ')' statement -> ^( FOR[$lc] forControl statement ) | lc= 'while' parExpression statement -> ^( WHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'do' statement 'while' parExpression ';' -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) ) | lc= 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups ) | lc= 'synchronized' parExpression block -> ^( SYNCHRONIZED[$lc] parExpression block ) | lc= 'return' ( expression )? ';' -> ^( RETURN[$lc] ( expression )? ) | lc= 'throw' expression ';' -> ^( THROW[$lc] expression ) | lc= 'break' ( Identifier )? ';' -> ^( BREAK[$lc] ( Identifier )? ) | lc= 'continue' ( Identifier )? ';' -> ^( CONTINUE[$lc] ( Identifier )? ) | ';' -> ^( BLOCK ) | statementExpression ';' -> statementExpression | lc= Identifier ':' statement -> ^( LABEL[$lc] Identifier statement ) );
    public final JavaParser.statement_return statement() throws RecognitionException {
        JavaParser.statement_return retval = new JavaParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token fc=null;
        Token char_literal306=null;
        Token char_literal308=null;
        Token string_literal311=null;
        Token char_literal313=null;
        Token char_literal315=null;
        Token string_literal320=null;
        Token char_literal322=null;
        Token char_literal329=null;
        Token char_literal331=null;
        Token char_literal335=null;
        Token char_literal337=null;
        Token Identifier338=null;
        Token char_literal339=null;
        Token Identifier340=null;
        Token char_literal341=null;
        Token char_literal342=null;
        Token char_literal344=null;
        Token char_literal345=null;
        JavaParser.block_return block304 = null;

        JavaParser.expression_return expression305 = null;

        JavaParser.expression_return expression307 = null;

        JavaParser.parExpression_return parExpression309 = null;

        JavaParser.statement_return statement310 = null;

        JavaParser.statement_return statement312 = null;

        JavaParser.forControl_return forControl314 = null;

        JavaParser.statement_return statement316 = null;

        JavaParser.parExpression_return parExpression317 = null;

        JavaParser.statement_return statement318 = null;

        JavaParser.statement_return statement319 = null;

        JavaParser.parExpression_return parExpression321 = null;

        JavaParser.block_return block323 = null;

        JavaParser.catches_return catches324 = null;

        JavaParser.block_return block325 = null;

        JavaParser.catches_return catches326 = null;

        JavaParser.block_return block327 = null;

        JavaParser.parExpression_return parExpression328 = null;

        JavaParser.switchBlockStatementGroups_return switchBlockStatementGroups330 = null;

        JavaParser.parExpression_return parExpression332 = null;

        JavaParser.block_return block333 = null;

        JavaParser.expression_return expression334 = null;

        JavaParser.expression_return expression336 = null;

        JavaParser.statementExpression_return statementExpression343 = null;

        JavaParser.statement_return statement346 = null;


        Object lc_tree=null;
        Object fc_tree=null;
        Object char_literal306_tree=null;
        Object char_literal308_tree=null;
        Object string_literal311_tree=null;
        Object char_literal313_tree=null;
        Object char_literal315_tree=null;
        Object string_literal320_tree=null;
        Object char_literal322_tree=null;
        Object char_literal329_tree=null;
        Object char_literal331_tree=null;
        Object char_literal335_tree=null;
        Object char_literal337_tree=null;
        Object Identifier338_tree=null;
        Object char_literal339_tree=null;
        Object Identifier340_tree=null;
        Object char_literal341_tree=null;
        Object char_literal342_tree=null;
        Object char_literal344_tree=null;
        Object char_literal345_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_parExpression=new RewriteRuleSubtreeStream(adaptor,"rule parExpression");
        RewriteRuleSubtreeStream stream_statementExpression=new RewriteRuleSubtreeStream(adaptor,"rule statementExpression");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
        RewriteRuleSubtreeStream stream_switchBlockStatementGroups=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockStatementGroups");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_forControl=new RewriteRuleSubtreeStream(adaptor,"rule forControl");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // jkit/java/Java.g:617:2: ( block | lc= 'assert' expression ( ':' expression )? ';' -> ^( ASSERT[$lc] expression ( expression )? ) | lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> ^( IF[$lc] parExpression statement ( statement )? ) | lc= 'for' '(' forControl ')' statement -> ^( FOR[$lc] forControl statement ) | lc= 'while' parExpression statement -> ^( WHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'do' statement 'while' parExpression ';' -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) ) | lc= 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups ) | lc= 'synchronized' parExpression block -> ^( SYNCHRONIZED[$lc] parExpression block ) | lc= 'return' ( expression )? ';' -> ^( RETURN[$lc] ( expression )? ) | lc= 'throw' expression ';' -> ^( THROW[$lc] expression ) | lc= 'break' ( Identifier )? ';' -> ^( BREAK[$lc] ( Identifier )? ) | lc= 'continue' ( Identifier )? ';' -> ^( CONTINUE[$lc] ( Identifier )? ) | ';' -> ^( BLOCK ) | statementExpression ';' -> statementExpression | lc= Identifier ':' statement -> ^( LABEL[$lc] Identifier statement ) )
            int alt109=16;
            alt109 = dfa109.predict(input);
            switch (alt109) {
                case 1 :
                    // jkit/java/Java.g:617:4: block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_block_in_statement3732);
                    block304=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block304.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:618:7: lc= 'assert' expression ( ':' expression )? ';'
                    {
                    lc=(Token)match(input,166,FOLLOW_166_in_statement3742); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_166.add(lc);

                    pushFollow(FOLLOW_expression_in_statement3744);
                    expression305=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression305.getTree());
                    // jkit/java/Java.g:618:30: ( ':' expression )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==167) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // jkit/java/Java.g:618:31: ':' expression
                            {
                            char_literal306=(Token)match(input,167,FOLLOW_167_in_statement3747); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_167.add(char_literal306);

                            pushFollow(FOLLOW_expression_in_statement3749);
                            expression307=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression307.getTree());

                            }
                            break;

                    }

                    char_literal308=(Token)match(input,118,FOLLOW_118_in_statement3753); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal308);



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 618:52: -> ^( ASSERT[$lc] expression ( expression )? )
                    {
                        // jkit/java/Java.g:618:55: ^( ASSERT[$lc] expression ( expression )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSERT, lc), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        // jkit/java/Java.g:618:80: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:619:7: lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )?
                    {
                    lc=(Token)match(input,168,FOLLOW_168_in_statement3775); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_168.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement3777);
                    parExpression309=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression309.getTree());
                    pushFollow(FOLLOW_statement_in_statement3779);
                    statement310=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement310.getTree());
                    // jkit/java/Java.g:619:39: ( options {k=1; } : 'else' statement )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==169) ) {
                        int LA104_1 = input.LA(2);

                        if ( (synpred151_Java()) ) {
                            alt104=1;
                        }
                    }
                    switch (alt104) {
                        case 1 :
                            // jkit/java/Java.g:619:55: 'else' statement
                            {
                            string_literal311=(Token)match(input,169,FOLLOW_169_in_statement3789); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_169.add(string_literal311);

                            pushFollow(FOLLOW_statement_in_statement3791);
                            statement312=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement312.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: parExpression, statement, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 619:74: -> ^( IF[$lc] parExpression statement ( statement )? )
                    {
                        // jkit/java/Java.g:619:77: ^( IF[$lc] parExpression statement ( statement )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IF, lc), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());
                        // jkit/java/Java.g:619:111: ( statement )?
                        if ( stream_statement.hasNext() ) {
                            adaptor.addChild(root_1, stream_statement.nextTree());

                        }
                        stream_statement.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:620:7: lc= 'for' '(' forControl ')' statement
                    {
                    lc=(Token)match(input,170,FOLLOW_170_in_statement3817); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(lc);

                    char_literal313=(Token)match(input,158,FOLLOW_158_in_statement3819); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_158.add(char_literal313);

                    pushFollow(FOLLOW_forControl_in_statement3821);
                    forControl314=forControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_forControl.add(forControl314.getTree());
                    char_literal315=(Token)match(input,159,FOLLOW_159_in_statement3823); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_159.add(char_literal315);

                    pushFollow(FOLLOW_statement_in_statement3825);
                    statement316=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement316.getTree());


                    // AST REWRITE
                    // elements: forControl, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 620:45: -> ^( FOR[$lc] forControl statement )
                    {
                        // jkit/java/Java.g:620:48: ^( FOR[$lc] forControl statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FOR, lc), root_1);

                        adaptor.addChild(root_1, stream_forControl.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:621:7: lc= 'while' parExpression statement
                    {
                    lc=(Token)match(input,171,FOLLOW_171_in_statement3846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement3848);
                    parExpression317=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression317.getTree());
                    pushFollow(FOLLOW_statement_in_statement3850);
                    statement318=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement318.getTree());


                    // AST REWRITE
                    // elements: parExpression, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 621:42: -> ^( WHILE[$lc] ^( TEST parExpression ) statement )
                    {
                        // jkit/java/Java.g:621:45: ^( WHILE[$lc] ^( TEST parExpression ) statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(WHILE, lc), root_1);

                        // jkit/java/Java.g:621:58: ^( TEST parExpression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TEST, "TEST"), root_2);

                        adaptor.addChild(root_2, stream_parExpression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:622:7: lc= 'do' statement 'while' parExpression ';'
                    {
                    lc=(Token)match(input,172,FOLLOW_172_in_statement3875); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_172.add(lc);

                    pushFollow(FOLLOW_statement_in_statement3877);
                    statement319=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement319.getTree());
                    string_literal320=(Token)match(input,171,FOLLOW_171_in_statement3879); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(string_literal320);

                    pushFollow(FOLLOW_parExpression_in_statement3881);
                    parExpression321=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression321.getTree());
                    char_literal322=(Token)match(input,118,FOLLOW_118_in_statement3883); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal322);



                    // AST REWRITE
                    // elements: parExpression, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 622:51: -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement )
                    {
                        // jkit/java/Java.g:622:54: ^( DOWHILE[$lc] ^( TEST parExpression ) statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DOWHILE, lc), root_1);

                        // jkit/java/Java.g:622:69: ^( TEST parExpression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TEST, "TEST"), root_2);

                        adaptor.addChild(root_2, stream_parExpression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // jkit/java/Java.g:623:7: lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) )
                    {
                    lc=(Token)match(input,173,FOLLOW_173_in_statement3908); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_173.add(lc);

                    pushFollow(FOLLOW_block_in_statement3910);
                    block323=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block323.getTree());
                    // jkit/java/Java.g:624:7: ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) )
                    int alt105=3;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==180) ) {
                        int LA105_1 = input.LA(2);

                        if ( (LA105_1==158) ) {
                            int LA105_3 = input.LA(3);

                            if ( (synpred156_Java()) ) {
                                alt105=1;
                            }
                            else if ( (synpred157_Java()) ) {
                                alt105=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 105, 3, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 105, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA105_0==174) ) {
                        alt105=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 105, 0, input);

                        throw nvae;
                    }
                    switch (alt105) {
                        case 1 :
                            // jkit/java/Java.g:624:9: catches fc= 'finally' block
                            {
                            pushFollow(FOLLOW_catches_in_statement3920);
                            catches324=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_catches.add(catches324.getTree());
                            fc=(Token)match(input,174,FOLLOW_174_in_statement3924); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_174.add(fc);

                            pushFollow(FOLLOW_block_in_statement3926);
                            block325=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_block.add(block325.getTree());


                            // AST REWRITE
                            // elements: block, block, catches
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 624:36: -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) )
                            {
                                // jkit/java/Java.g:624:39: ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TRY, lc), root_1);

                                adaptor.addChild(root_1, stream_block.nextTree());
                                adaptor.addChild(root_1, stream_catches.nextTree());
                                // jkit/java/Java.g:624:64: ^( FINALLY[$fc] block )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(FINALLY, fc), root_2);

                                adaptor.addChild(root_2, stream_block.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:625:9: catches
                            {
                            pushFollow(FOLLOW_catches_in_statement3954);
                            catches326=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_catches.add(catches326.getTree());


                            // AST REWRITE
                            // elements: block, catches
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 625:17: -> ^( TRY[$lc] block catches )
                            {
                                // jkit/java/Java.g:625:20: ^( TRY[$lc] block catches )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TRY, lc), root_1);

                                adaptor.addChild(root_1, stream_block.nextTree());
                                adaptor.addChild(root_1, stream_catches.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:626:9: fc= 'finally' block
                            {
                            fc=(Token)match(input,174,FOLLOW_174_in_statement3977); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_174.add(fc);

                            pushFollow(FOLLOW_block_in_statement3979);
                            block327=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_block.add(block327.getTree());


                            // AST REWRITE
                            // elements: block, block
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 626:28: -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) )
                            {
                                // jkit/java/Java.g:626:31: ^( TRY[$lc] block ^( FINALLY[$fc] block ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TRY, lc), root_1);

                                adaptor.addChild(root_1, stream_block.nextTree());
                                // jkit/java/Java.g:626:48: ^( FINALLY[$fc] block )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(FINALLY, fc), root_2);

                                adaptor.addChild(root_2, stream_block.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 8 :
                    // jkit/java/Java.g:628:7: lc= 'switch' parExpression '{' switchBlockStatementGroups '}'
                    {
                    lc=(Token)match(input,175,FOLLOW_175_in_statement4013); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_175.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement4015);
                    parExpression328=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression328.getTree());
                    char_literal329=(Token)match(input,130,FOLLOW_130_in_statement4017); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_130.add(char_literal329);

                    pushFollow(FOLLOW_switchBlockStatementGroups_in_statement4019);
                    switchBlockStatementGroups330=switchBlockStatementGroups();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchBlockStatementGroups.add(switchBlockStatementGroups330.getTree());
                    char_literal331=(Token)match(input,131,FOLLOW_131_in_statement4021); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_131.add(char_literal331);



                    // AST REWRITE
                    // elements: switchBlockStatementGroups, parExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 628:68: -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups )
                    {
                        // jkit/java/Java.g:628:71: ^( SWITCH[$lc] parExpression switchBlockStatementGroups )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SWITCH, lc), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_switchBlockStatementGroups.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // jkit/java/Java.g:629:7: lc= 'synchronized' parExpression block
                    {
                    lc=(Token)match(input,144,FOLLOW_144_in_statement4042); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_144.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement4044);
                    parExpression332=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression332.getTree());
                    pushFollow(FOLLOW_block_in_statement4046);
                    block333=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block333.getTree());


                    // AST REWRITE
                    // elements: parExpression, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 629:45: -> ^( SYNCHRONIZED[$lc] parExpression block )
                    {
                        // jkit/java/Java.g:629:48: ^( SYNCHRONIZED[$lc] parExpression block )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SYNCHRONIZED, lc), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // jkit/java/Java.g:630:7: lc= 'return' ( expression )? ';'
                    {
                    lc=(Token)match(input,176,FOLLOW_176_in_statement4067); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_176.add(lc);

                    // jkit/java/Java.g:630:19: ( expression )?
                    int alt106=2;
                    alt106 = dfa106.predict(input);
                    switch (alt106) {
                        case 1 :
                            // jkit/java/Java.g:0:0: expression
                            {
                            pushFollow(FOLLOW_expression_in_statement4069);
                            expression334=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression334.getTree());

                            }
                            break;

                    }

                    char_literal335=(Token)match(input,118,FOLLOW_118_in_statement4072); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal335);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 630:35: -> ^( RETURN[$lc] ( expression )? )
                    {
                        // jkit/java/Java.g:630:38: ^( RETURN[$lc] ( expression )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RETURN, lc), root_1);

                        // jkit/java/Java.g:630:52: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // jkit/java/Java.g:631:7: lc= 'throw' expression ';'
                    {
                    lc=(Token)match(input,177,FOLLOW_177_in_statement4092); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_177.add(lc);

                    pushFollow(FOLLOW_expression_in_statement4094);
                    expression336=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression336.getTree());
                    char_literal337=(Token)match(input,118,FOLLOW_118_in_statement4096); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal337);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 631:33: -> ^( THROW[$lc] expression )
                    {
                        // jkit/java/Java.g:631:36: ^( THROW[$lc] expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROW, lc), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // jkit/java/Java.g:632:7: lc= 'break' ( Identifier )? ';'
                    {
                    lc=(Token)match(input,178,FOLLOW_178_in_statement4115); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(lc);

                    // jkit/java/Java.g:632:18: ( Identifier )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==Identifier) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // jkit/java/Java.g:0:0: Identifier
                            {
                            Identifier338=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement4117); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier338);


                            }
                            break;

                    }

                    char_literal339=(Token)match(input,118,FOLLOW_118_in_statement4120); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal339);



                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 632:34: -> ^( BREAK[$lc] ( Identifier )? )
                    {
                        // jkit/java/Java.g:632:37: ^( BREAK[$lc] ( Identifier )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BREAK, lc), root_1);

                        // jkit/java/Java.g:632:50: ( Identifier )?
                        if ( stream_Identifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_Identifier.nextNode());

                        }
                        stream_Identifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // jkit/java/Java.g:633:7: lc= 'continue' ( Identifier )? ';'
                    {
                    lc=(Token)match(input,179,FOLLOW_179_in_statement4140); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_179.add(lc);

                    // jkit/java/Java.g:633:21: ( Identifier )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==Identifier) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // jkit/java/Java.g:0:0: Identifier
                            {
                            Identifier340=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement4142); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier340);


                            }
                            break;

                    }

                    char_literal341=(Token)match(input,118,FOLLOW_118_in_statement4145); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal341);



                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 633:37: -> ^( CONTINUE[$lc] ( Identifier )? )
                    {
                        // jkit/java/Java.g:633:40: ^( CONTINUE[$lc] ( Identifier )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CONTINUE, lc), root_1);

                        // jkit/java/Java.g:633:56: ( Identifier )?
                        if ( stream_Identifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_Identifier.nextNode());

                        }
                        stream_Identifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // jkit/java/Java.g:634:7: ';'
                    {
                    char_literal342=(Token)match(input,118,FOLLOW_118_in_statement4163); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal342);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 634:11: -> ^( BLOCK )
                    {
                        // jkit/java/Java.g:634:14: ^( BLOCK )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, "BLOCK"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    // jkit/java/Java.g:635:7: statementExpression ';'
                    {
                    pushFollow(FOLLOW_statementExpression_in_statement4178);
                    statementExpression343=statementExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statementExpression.add(statementExpression343.getTree());
                    char_literal344=(Token)match(input,118,FOLLOW_118_in_statement4180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal344);



                    // AST REWRITE
                    // elements: statementExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 635:31: -> statementExpression
                    {
                        adaptor.addChild(root_0, stream_statementExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 16 :
                    // jkit/java/Java.g:636:7: lc= Identifier ':' statement
                    {
                    lc=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement4194); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(lc);

                    char_literal345=(Token)match(input,167,FOLLOW_167_in_statement4196); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(char_literal345);

                    pushFollow(FOLLOW_statement_in_statement4198);
                    statement346=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement346.getTree());


                    // AST REWRITE
                    // elements: Identifier, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 636:35: -> ^( LABEL[$lc] Identifier statement )
                    {
                        // jkit/java/Java.g:636:38: ^( LABEL[$lc] Identifier statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABEL, lc), root_1);

                        adaptor.addChild(root_1, stream_Identifier.nextNode());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class catches_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catches"
    // jkit/java/Java.g:639:1: catches : catchClause ( catchClause )* ;
    public final JavaParser.catches_return catches() throws RecognitionException {
        JavaParser.catches_return retval = new JavaParser.catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.catchClause_return catchClause347 = null;

        JavaParser.catchClause_return catchClause348 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // jkit/java/Java.g:640:2: ( catchClause ( catchClause )* )
            // jkit/java/Java.g:640:4: catchClause ( catchClause )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_catchClause_in_catches4220);
            catchClause347=catchClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause347.getTree());
            // jkit/java/Java.g:640:16: ( catchClause )*
            loop110:
            do {
                int alt110=2;
                alt110 = dfa110.predict(input);
                switch (alt110) {
            	case 1 :
            	    // jkit/java/Java.g:640:17: catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches4223);
            	    catchClause348=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause348.getTree());

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // jkit/java/Java.g:643:1: catchClause : lc= 'catch' '(' formalParameter ')' block -> ^( CATCH[$lc] ^( PARAMETER formalParameter ) block ) ;
    public final JavaParser.catchClause_return catchClause() throws RecognitionException {
        JavaParser.catchClause_return retval = new JavaParser.catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token char_literal349=null;
        Token char_literal351=null;
        JavaParser.formalParameter_return formalParameter350 = null;

        JavaParser.block_return block352 = null;


        Object lc_tree=null;
        Object char_literal349_tree=null;
        Object char_literal351_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // jkit/java/Java.g:644:2: (lc= 'catch' '(' formalParameter ')' block -> ^( CATCH[$lc] ^( PARAMETER formalParameter ) block ) )
            // jkit/java/Java.g:644:4: lc= 'catch' '(' formalParameter ')' block
            {
            lc=(Token)match(input,180,FOLLOW_180_in_catchClause4239); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_180.add(lc);

            char_literal349=(Token)match(input,158,FOLLOW_158_in_catchClause4241); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(char_literal349);

            pushFollow(FOLLOW_formalParameter_in_catchClause4243);
            formalParameter350=formalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter350.getTree());
            char_literal351=(Token)match(input,159,FOLLOW_159_in_catchClause4245); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(char_literal351);

            pushFollow(FOLLOW_block_in_catchClause4247);
            block352=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block352.getTree());


            // AST REWRITE
            // elements: formalParameter, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 644:45: -> ^( CATCH[$lc] ^( PARAMETER formalParameter ) block )
            {
                // jkit/java/Java.g:644:48: ^( CATCH[$lc] ^( PARAMETER formalParameter ) block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CATCH, lc), root_1);

                // jkit/java/Java.g:644:61: ^( PARAMETER formalParameter )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETER, "PARAMETER"), root_2);

                adaptor.addChild(root_2, stream_formalParameter.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class formalParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameter"
    // jkit/java/Java.g:647:1: formalParameter : ( variableModifier )* type variableDeclaratorId ;
    public final JavaParser.formalParameter_return formalParameter() throws RecognitionException {
        JavaParser.formalParameter_return retval = new JavaParser.formalParameter_return();
        retval.start = input.LT(1);
        int formalParameter_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.variableModifier_return variableModifier353 = null;

        JavaParser.type_return type354 = null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId355 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // jkit/java/Java.g:648:2: ( ( variableModifier )* type variableDeclaratorId )
            // jkit/java/Java.g:648:4: ( variableModifier )* type variableDeclaratorId
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:648:4: ( variableModifier )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==142||LA111_0==164) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameter4273);
            	    variableModifier353=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifier353.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameter4276);
            type354=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type354.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameter4278);
            variableDeclaratorId355=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclaratorId355.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, formalParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameter"

    public static class switchBlockStatementGroups_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroups"
    // jkit/java/Java.g:651:1: switchBlockStatementGroups : ( switchBlockStatementGroup )* ;
    public final JavaParser.switchBlockStatementGroups_return switchBlockStatementGroups() throws RecognitionException {
        JavaParser.switchBlockStatementGroups_return retval = new JavaParser.switchBlockStatementGroups_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroups_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.switchBlockStatementGroup_return switchBlockStatementGroup356 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // jkit/java/Java.g:652:2: ( ( switchBlockStatementGroup )* )
            // jkit/java/Java.g:652:4: ( switchBlockStatementGroup )*
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:652:4: ( switchBlockStatementGroup )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==165||LA112_0==181) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // jkit/java/Java.g:652:5: switchBlockStatementGroup
            	    {
            	    pushFollow(FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups4292);
            	    switchBlockStatementGroup356=switchBlockStatementGroup();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchBlockStatementGroup356.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, switchBlockStatementGroups_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroups"

    public static class switchBlockStatementGroup_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroup"
    // jkit/java/Java.g:655:1: switchBlockStatementGroup : switchLabel ( blockStatement )* -> ^( switchLabel ^( BLOCK ( blockStatement )* ) ) ;
    public final JavaParser.switchBlockStatementGroup_return switchBlockStatementGroup() throws RecognitionException {
        JavaParser.switchBlockStatementGroup_return retval = new JavaParser.switchBlockStatementGroup_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroup_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.switchLabel_return switchLabel357 = null;

        JavaParser.blockStatement_return blockStatement358 = null;


        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        RewriteRuleSubtreeStream stream_switchLabel=new RewriteRuleSubtreeStream(adaptor,"rule switchLabel");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // jkit/java/Java.g:656:2: ( switchLabel ( blockStatement )* -> ^( switchLabel ^( BLOCK ( blockStatement )* ) ) )
            // jkit/java/Java.g:656:4: switchLabel ( blockStatement )*
            {
            pushFollow(FOLLOW_switchLabel_in_switchBlockStatementGroup4306);
            switchLabel357=switchLabel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_switchLabel.add(switchLabel357.getTree());
            // jkit/java/Java.g:656:16: ( blockStatement )*
            loop113:
            do {
                int alt113=2;
                alt113 = dfa113.predict(input);
                switch (alt113) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchBlockStatementGroup4308);
            	    blockStatement358=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement358.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);



            // AST REWRITE
            // elements: switchLabel, blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 656:32: -> ^( switchLabel ^( BLOCK ( blockStatement )* ) )
            {
                // jkit/java/Java.g:656:35: ^( switchLabel ^( BLOCK ( blockStatement )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_switchLabel.nextNode(), root_1);

                // jkit/java/Java.g:656:49: ^( BLOCK ( blockStatement )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, "BLOCK"), root_2);

                // jkit/java/Java.g:656:57: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_2, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, switchBlockStatementGroup_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroup"

    public static class switchLabel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchLabel"
    // jkit/java/Java.g:659:1: switchLabel : (lc= 'case' constantExpression ':' -> ^( CASE[$lc] constantExpression ) | lc= 'case' enumConstantName ':' -> ^( CASE[$lc] enumConstantName ) | lc= 'default' ':' -> ^( DEFAULT ) );
    public final JavaParser.switchLabel_return switchLabel() throws RecognitionException {
        JavaParser.switchLabel_return retval = new JavaParser.switchLabel_return();
        retval.start = input.LT(1);
        int switchLabel_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token char_literal360=null;
        Token char_literal362=null;
        Token char_literal363=null;
        JavaParser.constantExpression_return constantExpression359 = null;

        JavaParser.enumConstantName_return enumConstantName361 = null;


        Object lc_tree=null;
        Object char_literal360_tree=null;
        Object char_literal362_tree=null;
        Object char_literal363_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleSubtreeStream stream_enumConstantName=new RewriteRuleSubtreeStream(adaptor,"rule enumConstantName");
        RewriteRuleSubtreeStream stream_constantExpression=new RewriteRuleSubtreeStream(adaptor,"rule constantExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // jkit/java/Java.g:660:2: (lc= 'case' constantExpression ':' -> ^( CASE[$lc] constantExpression ) | lc= 'case' enumConstantName ':' -> ^( CASE[$lc] enumConstantName ) | lc= 'default' ':' -> ^( DEFAULT ) )
            int alt114=3;
            alt114 = dfa114.predict(input);
            switch (alt114) {
                case 1 :
                    // jkit/java/Java.g:660:4: lc= 'case' constantExpression ':'
                    {
                    lc=(Token)match(input,181,FOLLOW_181_in_switchLabel4336); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_181.add(lc);

                    pushFollow(FOLLOW_constantExpression_in_switchLabel4338);
                    constantExpression359=constantExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constantExpression.add(constantExpression359.getTree());
                    char_literal360=(Token)match(input,167,FOLLOW_167_in_switchLabel4340); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(char_literal360);



                    // AST REWRITE
                    // elements: constantExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 660:37: -> ^( CASE[$lc] constantExpression )
                    {
                        // jkit/java/Java.g:660:40: ^( CASE[$lc] constantExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CASE, lc), root_1);

                        adaptor.addChild(root_1, stream_constantExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:661:4: lc= 'case' enumConstantName ':'
                    {
                    lc=(Token)match(input,181,FOLLOW_181_in_switchLabel4356); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_181.add(lc);

                    pushFollow(FOLLOW_enumConstantName_in_switchLabel4358);
                    enumConstantName361=enumConstantName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumConstantName.add(enumConstantName361.getTree());
                    char_literal362=(Token)match(input,167,FOLLOW_167_in_switchLabel4360); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(char_literal362);



                    // AST REWRITE
                    // elements: enumConstantName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 661:35: -> ^( CASE[$lc] enumConstantName )
                    {
                        // jkit/java/Java.g:661:38: ^( CASE[$lc] enumConstantName )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CASE, lc), root_1);

                        adaptor.addChild(root_1, stream_enumConstantName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:662:4: lc= 'default' ':'
                    {
                    lc=(Token)match(input,165,FOLLOW_165_in_switchLabel4376); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_165.add(lc);

                    char_literal363=(Token)match(input,167,FOLLOW_167_in_switchLabel4378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(char_literal363);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 662:21: -> ^( DEFAULT )
                    {
                        // jkit/java/Java.g:662:24: ^( DEFAULT )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DEFAULT, "DEFAULT"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, switchLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchLabel"

    public static class moreStatementExpressions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moreStatementExpressions"
    // jkit/java/Java.g:665:1: moreStatementExpressions : ( ',' statementExpression )* ;
    public final JavaParser.moreStatementExpressions_return moreStatementExpressions() throws RecognitionException {
        JavaParser.moreStatementExpressions_return retval = new JavaParser.moreStatementExpressions_return();
        retval.start = input.LT(1);
        int moreStatementExpressions_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal364=null;
        JavaParser.statementExpression_return statementExpression365 = null;


        Object char_literal364_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // jkit/java/Java.g:666:2: ( ( ',' statementExpression )* )
            // jkit/java/Java.g:666:4: ( ',' statementExpression )*
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/Java.g:666:4: ( ',' statementExpression )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==127) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // jkit/java/Java.g:666:5: ',' statementExpression
            	    {
            	    char_literal364=(Token)match(input,127,FOLLOW_127_in_moreStatementExpressions4397); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal364_tree = (Object)adaptor.create(char_literal364);
            	    adaptor.addChild(root_0, char_literal364_tree);
            	    }
            	    pushFollow(FOLLOW_statementExpression_in_moreStatementExpressions4399);
            	    statementExpression365=statementExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statementExpression365.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, moreStatementExpressions_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moreStatementExpressions"

    public static class forControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forControl"
    // jkit/java/Java.g:669:1: forControl options {k=3; } : ( forVarControl -> ^( FOREACH forVarControl ) | ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )? -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? ) );
    public final JavaParser.forControl_return forControl() throws RecognitionException {
        JavaParser.forControl_return retval = new JavaParser.forControl_return();
        retval.start = input.LT(1);
        int forControl_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal368=null;
        Token char_literal369=null;
        JavaParser.expression_return fc = null;

        JavaParser.forUpdate_return fu = null;

        JavaParser.forVarControl_return forVarControl366 = null;

        JavaParser.forInit_return forInit367 = null;


        Object char_literal368_tree=null;
        Object char_literal369_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleSubtreeStream stream_forUpdate=new RewriteRuleSubtreeStream(adaptor,"rule forUpdate");
        RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
        RewriteRuleSubtreeStream stream_forVarControl=new RewriteRuleSubtreeStream(adaptor,"rule forVarControl");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // jkit/java/Java.g:671:2: ( forVarControl -> ^( FOREACH forVarControl ) | ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )? -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? ) )
            int alt119=2;
            alt119 = dfa119.predict(input);
            switch (alt119) {
                case 1 :
                    // jkit/java/Java.g:671:4: forVarControl
                    {
                    pushFollow(FOLLOW_forVarControl_in_forControl4420);
                    forVarControl366=forVarControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_forVarControl.add(forVarControl366.getTree());


                    // AST REWRITE
                    // elements: forVarControl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 671:18: -> ^( FOREACH forVarControl )
                    {
                        // jkit/java/Java.g:671:21: ^( FOREACH forVarControl )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FOREACH, "FOREACH"), root_1);

                        adaptor.addChild(root_1, stream_forVarControl.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:672:4: ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )?
                    {
                    // jkit/java/Java.g:672:4: ( forInit )?
                    int alt116=2;
                    alt116 = dfa116.predict(input);
                    switch (alt116) {
                        case 1 :
                            // jkit/java/Java.g:0:0: forInit
                            {
                            pushFollow(FOLLOW_forInit_in_forControl4433);
                            forInit367=forInit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forInit.add(forInit367.getTree());

                            }
                            break;

                    }

                    char_literal368=(Token)match(input,118,FOLLOW_118_in_forControl4436); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal368);

                    // jkit/java/Java.g:672:19: (fc= expression )?
                    int alt117=2;
                    alt117 = dfa117.predict(input);
                    switch (alt117) {
                        case 1 :
                            // jkit/java/Java.g:0:0: fc= expression
                            {
                            pushFollow(FOLLOW_expression_in_forControl4440);
                            fc=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(fc.getTree());

                            }
                            break;

                    }

                    char_literal369=(Token)match(input,118,FOLLOW_118_in_forControl4443); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal369);

                    // jkit/java/Java.g:672:38: (fu= forUpdate )?
                    int alt118=2;
                    alt118 = dfa118.predict(input);
                    switch (alt118) {
                        case 1 :
                            // jkit/java/Java.g:0:0: fu= forUpdate
                            {
                            pushFollow(FOLLOW_forUpdate_in_forControl4447);
                            fu=forUpdate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forUpdate.add(fu.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, forUpdate, forInit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 672:50: -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? )
                    {
                        // jkit/java/Java.g:672:53: ^( INIT ( forInit )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INIT, "INIT"), root_1);

                        // jkit/java/Java.g:672:60: ( forInit )?
                        if ( stream_forInit.hasNext() ) {
                            adaptor.addChild(root_1, stream_forInit.nextTree());

                        }
                        stream_forInit.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/Java.g:672:70: ^( TEST ( expression )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TEST, "TEST"), root_1);

                        // jkit/java/Java.g:672:77: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/Java.g:672:90: ^( STEP ( forUpdate )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STEP, "STEP"), root_1);

                        // jkit/java/Java.g:672:97: ( forUpdate )?
                        if ( stream_forUpdate.hasNext() ) {
                            adaptor.addChild(root_1, stream_forUpdate.nextTree());

                        }
                        stream_forUpdate.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, forControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forControl"

    public static class forInit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // jkit/java/Java.g:675:1: forInit : ( ( variableModifier )* type variableDeclarators -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) | expressionList );
    public final JavaParser.forInit_return forInit() throws RecognitionException {
        JavaParser.forInit_return retval = new JavaParser.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.variableModifier_return variableModifier370 = null;

        JavaParser.type_return type371 = null;

        JavaParser.variableDeclarators_return variableDeclarators372 = null;

        JavaParser.expressionList_return expressionList373 = null;


        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // jkit/java/Java.g:676:2: ( ( variableModifier )* type variableDeclarators -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) | expressionList )
            int alt121=2;
            alt121 = dfa121.predict(input);
            switch (alt121) {
                case 1 :
                    // jkit/java/Java.g:676:4: ( variableModifier )* type variableDeclarators
                    {
                    // jkit/java/Java.g:676:4: ( variableModifier )*
                    loop120:
                    do {
                        int alt120=2;
                        int LA120_0 = input.LA(1);

                        if ( (LA120_0==142||LA120_0==164) ) {
                            alt120=1;
                        }


                        switch (alt120) {
                    	case 1 :
                    	    // jkit/java/Java.g:0:0: variableModifier
                    	    {
                    	    pushFollow(FOLLOW_variableModifier_in_forInit4482);
                    	    variableModifier370=variableModifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier370.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop120;
                        }
                    } while (true);

                    pushFollow(FOLLOW_type_in_forInit4485);
                    type371=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type371.getTree());
                    pushFollow(FOLLOW_variableDeclarators_in_forInit4487);
                    variableDeclarators372=variableDeclarators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableDeclarators.add(variableDeclarators372.getTree());


                    // AST REWRITE
                    // elements: variableDeclarators, type, variableModifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 676:47: -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
                    {
                        // jkit/java/Java.g:676:50: ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARDEF, "VARDEF"), root_1);

                        // jkit/java/Java.g:676:59: ^( MODIFIERS ( variableModifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/Java.g:676:71: ( variableModifier )*
                        while ( stream_variableModifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_variableModifier.nextTree());

                        }
                        stream_variableModifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_variableDeclarators.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:677:4: expressionList
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expressionList_in_forInit4509);
                    expressionList373=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList373.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class forVarControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forVarControl"
    // jkit/java/Java.g:680:1: forVarControl : ( variableModifier )* type Identifier ':' expression -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier ) expression ;
    public final JavaParser.forVarControl_return forVarControl() throws RecognitionException {
        JavaParser.forVarControl_return retval = new JavaParser.forVarControl_return();
        retval.start = input.LT(1);
        int forVarControl_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier376=null;
        Token char_literal377=null;
        JavaParser.variableModifier_return variableModifier374 = null;

        JavaParser.type_return type375 = null;

        JavaParser.expression_return expression378 = null;


        Object Identifier376_tree=null;
        Object char_literal377_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // jkit/java/Java.g:681:2: ( ( variableModifier )* type Identifier ':' expression -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier ) expression )
            // jkit/java/Java.g:681:4: ( variableModifier )* type Identifier ':' expression
            {
            // jkit/java/Java.g:681:4: ( variableModifier )*
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==142||LA122_0==164) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    // jkit/java/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_forVarControl4521);
            	    variableModifier374=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier374.getTree());

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_forVarControl4524);
            type375=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type375.getTree());
            Identifier376=(Token)match(input,Identifier,FOLLOW_Identifier_in_forVarControl4526); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier376);

            char_literal377=(Token)match(input,167,FOLLOW_167_in_forVarControl4528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(char_literal377);

            pushFollow(FOLLOW_expression_in_forVarControl4530);
            expression378=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression378.getTree());


            // AST REWRITE
            // elements: Identifier, variableModifier, type, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 681:53: -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier ) expression
            {
                // jkit/java/Java.g:681:56: ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARDEF, "VARDEF"), root_1);

                // jkit/java/Java.g:681:65: ^( MODIFIERS ( variableModifier )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                // jkit/java/Java.g:681:77: ( variableModifier )*
                while ( stream_variableModifier.hasNext() ) {
                    adaptor.addChild(root_2, stream_variableModifier.nextTree());

                }
                stream_variableModifier.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_Identifier.nextNode());

                adaptor.addChild(root_0, root_1);
                }
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, forVarControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forVarControl"

    public static class forUpdate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forUpdate"
    // jkit/java/Java.g:684:1: forUpdate : expressionList ;
    public final JavaParser.forUpdate_return forUpdate() throws RecognitionException {
        JavaParser.forUpdate_return retval = new JavaParser.forUpdate_return();
        retval.start = input.LT(1);
        int forUpdate_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.expressionList_return expressionList379 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // jkit/java/Java.g:685:2: ( expressionList )
            // jkit/java/Java.g:685:4: expressionList
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expressionList_in_forUpdate4560);
            expressionList379=expressionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList379.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, forUpdate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forUpdate"

    public static class parExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // jkit/java/Java.g:690:1: parExpression : '(' expression ')' ;
    public final JavaParser.parExpression_return parExpression() throws RecognitionException {
        JavaParser.parExpression_return retval = new JavaParser.parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal380=null;
        Token char_literal382=null;
        JavaParser.expression_return expression381 = null;


        Object char_literal380_tree=null;
        Object char_literal382_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // jkit/java/Java.g:691:2: ( '(' expression ')' )
            // jkit/java/Java.g:691:4: '(' expression ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal380=(Token)match(input,158,FOLLOW_158_in_parExpression4573); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_parExpression4576);
            expression381=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression381.getTree());
            char_literal382=(Token)match(input,159,FOLLOW_159_in_parExpression4578); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class expressionList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // jkit/java/Java.g:694:1: expressionList : expression ( ',' expression )* ;
    public final JavaParser.expressionList_return expressionList() throws RecognitionException {
        JavaParser.expressionList_return retval = new JavaParser.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal384=null;
        JavaParser.expression_return expression383 = null;

        JavaParser.expression_return expression385 = null;


        Object char_literal384_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // jkit/java/Java.g:695:5: ( expression ( ',' expression )* )
            // jkit/java/Java.g:695:9: expression ( ',' expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList4596);
            expression383=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression383.getTree());
            // jkit/java/Java.g:695:20: ( ',' expression )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==127) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // jkit/java/Java.g:695:21: ',' expression
            	    {
            	    char_literal384=(Token)match(input,127,FOLLOW_127_in_expressionList4599); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList4602);
            	    expression385=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression385.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class statementExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statementExpression"
    // jkit/java/Java.g:698:1: statementExpression : expression ;
    public final JavaParser.statementExpression_return statementExpression() throws RecognitionException {
        JavaParser.statementExpression_return retval = new JavaParser.statementExpression_return();
        retval.start = input.LT(1);
        int statementExpression_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.expression_return expression386 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // jkit/java/Java.g:699:2: ( expression )
            // jkit/java/Java.g:699:4: expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_statementExpression4618);
            expression386=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression386.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, statementExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statementExpression"

    public static class constantExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantExpression"
    // jkit/java/Java.g:702:1: constantExpression : expression ;
    public final JavaParser.constantExpression_return constantExpression() throws RecognitionException {
        JavaParser.constantExpression_return retval = new JavaParser.constantExpression_return();
        retval.start = input.LT(1);
        int constantExpression_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.expression_return expression387 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // jkit/java/Java.g:703:2: ( expression )
            // jkit/java/Java.g:703:4: expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_constantExpression4630);
            expression387=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression387.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, constantExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantExpression"

    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // jkit/java/Java.g:706:1: expression : conditionalExpression ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression ) ;
    public final JavaParser.expression_return expression() throws RecognitionException {
        JavaParser.expression_return retval = new JavaParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal389=null;
        Token char_literal391=null;
        Token char_literal393=null;
        Token char_literal395=null;
        Token char_literal397=null;
        Token string_literal399=null;
        Token string_literal401=null;
        Token string_literal403=null;
        Token char_literal405=null;
        Token char_literal407=null;
        Token char_literal408=null;
        Token char_literal410=null;
        Token char_literal411=null;
        Token char_literal413=null;
        Token char_literal414=null;
        Token char_literal415=null;
        Token char_literal416=null;
        Token i=null;
        List list_i=null;
        JavaParser.conditionalExpression_return conditionalExpression388 = null;

        JavaParser.expression_return expression390 = null;

        JavaParser.expression_return expression392 = null;

        JavaParser.expression_return expression394 = null;

        JavaParser.expression_return expression396 = null;

        JavaParser.expression_return expression398 = null;

        JavaParser.expression_return expression400 = null;

        JavaParser.expression_return expression402 = null;

        JavaParser.expression_return expression404 = null;

        JavaParser.expression_return expression406 = null;

        JavaParser.expression_return expression409 = null;

        JavaParser.expression_return expression412 = null;

        JavaParser.expression_return expression417 = null;


        Object char_literal389_tree=null;
        Object char_literal391_tree=null;
        Object char_literal393_tree=null;
        Object char_literal395_tree=null;
        Object char_literal397_tree=null;
        Object string_literal399_tree=null;
        Object string_literal401_tree=null;
        Object string_literal403_tree=null;
        Object char_literal405_tree=null;
        Object char_literal407_tree=null;
        Object char_literal408_tree=null;
        Object char_literal410_tree=null;
        Object char_literal411_tree=null;
        Object char_literal413_tree=null;
        Object char_literal414_tree=null;
        Object char_literal415_tree=null;
        Object char_literal416_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // jkit/java/Java.g:707:2: ( conditionalExpression ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression ) )
            // jkit/java/Java.g:707:4: conditionalExpression ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression )
            {
            pushFollow(FOLLOW_conditionalExpression_in_expression4642);
            conditionalExpression388=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalExpression.add(conditionalExpression388.getTree());
            // jkit/java/Java.g:708:3: ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression )
            int alt124=13;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    // jkit/java/Java.g:709:4: '=' expression
                    {
                    char_literal389=(Token)match(input,137,FOLLOW_137_in_expression4652); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal389);

                    pushFollow(FOLLOW_expression_in_expression4654);
                    expression390=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression390.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 709:19: -> ^( ASSIGN conditionalExpression expression )
                    {
                        // jkit/java/Java.g:709:22: ^( ASSIGN conditionalExpression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:710:6: i+= '+' '=' expression
                    {
                    i=(Token)match(input,182,FOLLOW_182_in_expression4673); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_182.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal391=(Token)match(input,137,FOLLOW_137_in_expression4675); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal391);

                    pushFollow(FOLLOW_expression_in_expression4677);
                    expression392=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression392.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression, i, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 710:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:710:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:710:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:711:6: i+= '-' '=' expression
                    {
                    i=(Token)match(input,183,FOLLOW_183_in_expression4705); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_183.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal393=(Token)match(input,137,FOLLOW_137_in_expression4707); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal393);

                    pushFollow(FOLLOW_expression_in_expression4709);
                    expression394=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression394.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression, i, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 711:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:711:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:711:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:712:6: i+= '*' '=' expression
                    {
                    i=(Token)match(input,122,FOLLOW_122_in_expression4737); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_122.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal395=(Token)match(input,137,FOLLOW_137_in_expression4739); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal395);

                    pushFollow(FOLLOW_expression_in_expression4741);
                    expression396=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression396.getTree());


                    // AST REWRITE
                    // elements: expression, i, conditionalExpression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 712:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:712:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:712:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:713:6: i+= '/' '=' expression
                    {
                    i=(Token)match(input,184,FOLLOW_184_in_expression4769); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal397=(Token)match(input,137,FOLLOW_137_in_expression4771); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal397);

                    pushFollow(FOLLOW_expression_in_expression4773);
                    expression398=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression398.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, i, conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 713:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:713:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:713:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:714:6: '&=' expression
                    {
                    string_literal399=(Token)match(input,185,FOLLOW_185_in_expression4802); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_185.add(string_literal399);

                    pushFollow(FOLLOW_expression_in_expression4804);
                    expression400=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression400.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 714:22: -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) )
                    {
                        // jkit/java/Java.g:714:25: ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:714:56: ^( AND conditionalExpression expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(AND, "AND"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // jkit/java/Java.g:715:6: '|=' expression
                    {
                    string_literal401=(Token)match(input,186,FOLLOW_186_in_expression4827); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_186.add(string_literal401);

                    pushFollow(FOLLOW_expression_in_expression4829);
                    expression402=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression402.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 715:22: -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) )
                    {
                        // jkit/java/Java.g:715:25: ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:715:56: ^( OR conditionalExpression expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(OR, "OR"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // jkit/java/Java.g:716:6: '^=' expression
                    {
                    string_literal403=(Token)match(input,187,FOLLOW_187_in_expression4852); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_187.add(string_literal403);

                    pushFollow(FOLLOW_expression_in_expression4854);
                    expression404=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression404.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 716:22: -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) )
                    {
                        // jkit/java/Java.g:716:25: ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:716:56: ^( XOR conditionalExpression expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(XOR, "XOR"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // jkit/java/Java.g:717:6: i+= '%' '=' expression
                    {
                    i=(Token)match(input,188,FOLLOW_188_in_expression4882); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_188.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal405=(Token)match(input,137,FOLLOW_137_in_expression4884); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal405);

                    pushFollow(FOLLOW_expression_in_expression4886);
                    expression406=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression406.getTree());


                    // AST REWRITE
                    // elements: i, expression, conditionalExpression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 717:28: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:717:31: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:717:62: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // jkit/java/Java.g:718:6: i+= '<' '<' '=' expression
                    {
                    i=(Token)match(input,126,FOLLOW_126_in_expression4914); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_126.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal407=(Token)match(input,126,FOLLOW_126_in_expression4916); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_126.add(char_literal407);

                    char_literal408=(Token)match(input,137,FOLLOW_137_in_expression4918); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal408);

                    pushFollow(FOLLOW_expression_in_expression4920);
                    expression409=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression409.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression, conditionalExpression, i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 718:32: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:718:35: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:718:66: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // jkit/java/Java.g:719:6: i+= '>' '>' '=' expression
                    {
                    i=(Token)match(input,128,FOLLOW_128_in_expression4948); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    char_literal410=(Token)match(input,128,FOLLOW_128_in_expression4950); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal410);

                    char_literal411=(Token)match(input,137,FOLLOW_137_in_expression4952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal411);

                    pushFollow(FOLLOW_expression_in_expression4954);
                    expression412=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression412.getTree());


                    // AST REWRITE
                    // elements: expression, i, conditionalExpression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 719:32: -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                    {
                        // jkit/java/Java.g:719:35: ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:719:66: ^( LABINOP conditionalExpression $i expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_i.nextNode());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // jkit/java/Java.g:720:6: '>' '>' '>' '=' expression
                    {
                    char_literal413=(Token)match(input,128,FOLLOW_128_in_expression4980); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal413);

                    char_literal414=(Token)match(input,128,FOLLOW_128_in_expression4982); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal414);

                    char_literal415=(Token)match(input,128,FOLLOW_128_in_expression4984); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal415);

                    char_literal416=(Token)match(input,137,FOLLOW_137_in_expression4986); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal416);

                    pushFollow(FOLLOW_expression_in_expression4988);
                    expression417=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression417.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 720:33: -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) )
                    {
                        // jkit/java/Java.g:720:36: ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        // jkit/java/Java.g:720:67: ^( USHR conditionalExpression expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(USHR, "USHR"), root_2);

                        adaptor.addChild(root_2, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // jkit/java/Java.g:721:6: 
                    {

                    // AST REWRITE
                    // elements: conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 721:6: -> conditionalExpression
                    {
                        adaptor.addChild(root_0, stream_conditionalExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // jkit/java/Java.g:725:1: conditionalExpression : conditionalOrExpression ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression ) ;
    public final JavaParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        JavaParser.conditionalExpression_return retval = new JavaParser.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal419=null;
        Token char_literal421=null;
        JavaParser.conditionalOrExpression_return conditionalOrExpression418 = null;

        JavaParser.expression_return expression420 = null;

        JavaParser.expression_return expression422 = null;


        Object char_literal419_tree=null;
        Object char_literal421_tree=null;
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // jkit/java/Java.g:726:5: ( conditionalOrExpression ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression ) )
            // jkit/java/Java.g:726:9: conditionalOrExpression ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression )
            {
            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression5035);
            conditionalOrExpression418=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalOrExpression.add(conditionalOrExpression418.getTree());
            // jkit/java/Java.g:727:6: ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression )
            int alt125=2;
            alt125 = dfa125.predict(input);
            switch (alt125) {
                case 1 :
                    // jkit/java/Java.g:728:7: '?' expression ':' expression
                    {
                    char_literal419=(Token)match(input,156,FOLLOW_156_in_conditionalExpression5052); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_156.add(char_literal419);

                    pushFollow(FOLLOW_expression_in_conditionalExpression5054);
                    expression420=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression420.getTree());
                    char_literal421=(Token)match(input,167,FOLLOW_167_in_conditionalExpression5056); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(char_literal421);

                    pushFollow(FOLLOW_expression_in_conditionalExpression5058);
                    expression422=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression422.getTree());


                    // AST REWRITE
                    // elements: conditionalOrExpression, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 728:37: -> ^( CONDEXPR conditionalOrExpression expression expression )
                    {
                        // jkit/java/Java.g:728:40: ^( CONDEXPR conditionalOrExpression expression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CONDEXPR, "CONDEXPR"), root_1);

                        adaptor.addChild(root_1, stream_conditionalOrExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:729:9: 
                    {

                    // AST REWRITE
                    // elements: conditionalOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 729:9: -> conditionalOrExpression
                    {
                        adaptor.addChild(root_0, stream_conditionalOrExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // jkit/java/Java.g:733:1: conditionalOrExpression : conditionalAndExpression ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression ) ;
    public final JavaParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        JavaParser.conditionalOrExpression_return retval = new JavaParser.conditionalOrExpression_return();
        retval.start = input.LT(1);
        int conditionalOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal424=null;
        JavaParser.conditionalAndExpression_return conditionalAndExpression423 = null;

        JavaParser.conditionalOrExpression_return conditionalOrExpression425 = null;


        Object string_literal424_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_conditionalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalAndExpression");
        RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // jkit/java/Java.g:734:5: ( conditionalAndExpression ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression ) )
            // jkit/java/Java.g:734:9: conditionalAndExpression ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression )
            {
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5105);
            conditionalAndExpression423=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalAndExpression.add(conditionalAndExpression423.getTree());
            // jkit/java/Java.g:735:6: ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression )
            int alt126=2;
            alt126 = dfa126.predict(input);
            switch (alt126) {
                case 1 :
                    // jkit/java/Java.g:736:7: ( '||' conditionalOrExpression )
                    {
                    // jkit/java/Java.g:736:7: ( '||' conditionalOrExpression )
                    // jkit/java/Java.g:736:8: '||' conditionalOrExpression
                    {
                    string_literal424=(Token)match(input,189,FOLLOW_189_in_conditionalOrExpression5123); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_189.add(string_literal424);

                    pushFollow(FOLLOW_conditionalOrExpression_in_conditionalOrExpression5125);
                    conditionalOrExpression425=conditionalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditionalOrExpression.add(conditionalOrExpression425.getTree());

                    }



                    // AST REWRITE
                    // elements: conditionalOrExpression, conditionalAndExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 736:38: -> ^( LOR conditionalAndExpression conditionalOrExpression )
                    {
                        // jkit/java/Java.g:736:41: ^( LOR conditionalAndExpression conditionalOrExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOR, "LOR"), root_1);

                        adaptor.addChild(root_1, stream_conditionalAndExpression.nextTree());
                        adaptor.addChild(root_1, stream_conditionalOrExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:737:9: 
                    {

                    // AST REWRITE
                    // elements: conditionalAndExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 737:9: -> conditionalAndExpression
                    {
                        adaptor.addChild(root_0, stream_conditionalAndExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, conditionalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // jkit/java/Java.g:741:1: conditionalAndExpression : inclusiveOrExpression ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression ) ;
    public final JavaParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        JavaParser.conditionalAndExpression_return retval = new JavaParser.conditionalAndExpression_return();
        retval.start = input.LT(1);
        int conditionalAndExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal427=null;
        JavaParser.inclusiveOrExpression_return inclusiveOrExpression426 = null;

        JavaParser.conditionalAndExpression_return conditionalAndExpression428 = null;


        Object string_literal427_tree=null;
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_conditionalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalAndExpression");
        RewriteRuleSubtreeStream stream_inclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule inclusiveOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // jkit/java/Java.g:742:5: ( inclusiveOrExpression ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression ) )
            // jkit/java/Java.g:742:9: inclusiveOrExpression ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression )
            {
            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5171);
            inclusiveOrExpression426=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inclusiveOrExpression.add(inclusiveOrExpression426.getTree());
            // jkit/java/Java.g:743:6: ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression )
            int alt127=2;
            alt127 = dfa127.predict(input);
            switch (alt127) {
                case 1 :
                    // jkit/java/Java.g:744:7: ( '&&' conditionalAndExpression )
                    {
                    // jkit/java/Java.g:744:7: ( '&&' conditionalAndExpression )
                    // jkit/java/Java.g:744:8: '&&' conditionalAndExpression
                    {
                    string_literal427=(Token)match(input,190,FOLLOW_190_in_conditionalAndExpression5189); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(string_literal427);

                    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalAndExpression5191);
                    conditionalAndExpression428=conditionalAndExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditionalAndExpression.add(conditionalAndExpression428.getTree());

                    }



                    // AST REWRITE
                    // elements: conditionalAndExpression, inclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 744:39: -> ^( LAND inclusiveOrExpression conditionalAndExpression )
                    {
                        // jkit/java/Java.g:744:42: ^( LAND inclusiveOrExpression conditionalAndExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LAND, "LAND"), root_1);

                        adaptor.addChild(root_1, stream_inclusiveOrExpression.nextTree());
                        adaptor.addChild(root_1, stream_conditionalAndExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:745:9: 
                    {

                    // AST REWRITE
                    // elements: inclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 745:9: -> inclusiveOrExpression
                    {
                        adaptor.addChild(root_0, stream_inclusiveOrExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, conditionalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // jkit/java/Java.g:749:1: inclusiveOrExpression : exclusiveOrExpression ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression ) ;
    public final JavaParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        JavaParser.inclusiveOrExpression_return retval = new JavaParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal430=null;
        JavaParser.exclusiveOrExpression_return exclusiveOrExpression429 = null;

        JavaParser.inclusiveOrExpression_return inclusiveOrExpression431 = null;


        Object char_literal430_tree=null;
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleSubtreeStream stream_inclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule inclusiveOrExpression");
        RewriteRuleSubtreeStream stream_exclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule exclusiveOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // jkit/java/Java.g:750:5: ( exclusiveOrExpression ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression ) )
            // jkit/java/Java.g:750:9: exclusiveOrExpression ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression )
            {
            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5243);
            exclusiveOrExpression429=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exclusiveOrExpression.add(exclusiveOrExpression429.getTree());
            // jkit/java/Java.g:751:9: ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression )
            int alt128=2;
            alt128 = dfa128.predict(input);
            switch (alt128) {
                case 1 :
                    // jkit/java/Java.g:752:10: ( '|' inclusiveOrExpression )
                    {
                    // jkit/java/Java.g:752:10: ( '|' inclusiveOrExpression )
                    // jkit/java/Java.g:752:11: '|' inclusiveOrExpression
                    {
                    char_literal430=(Token)match(input,191,FOLLOW_191_in_inclusiveOrExpression5265); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_191.add(char_literal430);

                    pushFollow(FOLLOW_inclusiveOrExpression_in_inclusiveOrExpression5267);
                    inclusiveOrExpression431=inclusiveOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inclusiveOrExpression.add(inclusiveOrExpression431.getTree());

                    }



                    // AST REWRITE
                    // elements: exclusiveOrExpression, inclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 752:38: -> ^( OR exclusiveOrExpression inclusiveOrExpression )
                    {
                        // jkit/java/Java.g:752:41: ^( OR exclusiveOrExpression inclusiveOrExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OR, "OR"), root_1);

                        adaptor.addChild(root_1, stream_exclusiveOrExpression.nextTree());
                        adaptor.addChild(root_1, stream_inclusiveOrExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:753:6: 
                    {

                    // AST REWRITE
                    // elements: exclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 753:6: -> exclusiveOrExpression
                    {
                        adaptor.addChild(root_0, stream_exclusiveOrExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // jkit/java/Java.g:757:1: exclusiveOrExpression : andExpression ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression ) ;
    public final JavaParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        JavaParser.exclusiveOrExpression_return retval = new JavaParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal433=null;
        JavaParser.andExpression_return andExpression432 = null;

        JavaParser.exclusiveOrExpression_return exclusiveOrExpression434 = null;


        Object char_literal433_tree=null;
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        RewriteRuleSubtreeStream stream_exclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule exclusiveOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // jkit/java/Java.g:758:5: ( andExpression ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression ) )
            // jkit/java/Java.g:758:9: andExpression ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression )
            {
            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression5314);
            andExpression432=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression432.getTree());
            // jkit/java/Java.g:759:5: ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression )
            int alt129=2;
            alt129 = dfa129.predict(input);
            switch (alt129) {
                case 1 :
                    // jkit/java/Java.g:760:6: ( '^' exclusiveOrExpression )
                    {
                    // jkit/java/Java.g:760:6: ( '^' exclusiveOrExpression )
                    // jkit/java/Java.g:760:7: '^' exclusiveOrExpression
                    {
                    char_literal433=(Token)match(input,192,FOLLOW_192_in_exclusiveOrExpression5330); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_192.add(char_literal433);

                    pushFollow(FOLLOW_exclusiveOrExpression_in_exclusiveOrExpression5332);
                    exclusiveOrExpression434=exclusiveOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exclusiveOrExpression.add(exclusiveOrExpression434.getTree());

                    }



                    // AST REWRITE
                    // elements: exclusiveOrExpression, andExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 760:34: -> ^( XOR andExpression exclusiveOrExpression )
                    {
                        // jkit/java/Java.g:760:37: ^( XOR andExpression exclusiveOrExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XOR, "XOR"), root_1);

                        adaptor.addChild(root_1, stream_andExpression.nextTree());
                        adaptor.addChild(root_1, stream_exclusiveOrExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:761:8: 
                    {

                    // AST REWRITE
                    // elements: andExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 761:8: -> andExpression
                    {
                        adaptor.addChild(root_0, stream_andExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // jkit/java/Java.g:765:1: andExpression : equalityExpression ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression ) ;
    public final JavaParser.andExpression_return andExpression() throws RecognitionException {
        JavaParser.andExpression_return retval = new JavaParser.andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal436=null;
        JavaParser.equalityExpression_return equalityExpression435 = null;

        JavaParser.andExpression_return andExpression437 = null;


        Object char_literal436_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleSubtreeStream stream_equalityExpression=new RewriteRuleSubtreeStream(adaptor,"rule equalityExpression");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // jkit/java/Java.g:766:5: ( equalityExpression ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression ) )
            // jkit/java/Java.g:766:9: equalityExpression ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression )
            {
            pushFollow(FOLLOW_equalityExpression_in_andExpression5376);
            equalityExpression435=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_equalityExpression.add(equalityExpression435.getTree());
            // jkit/java/Java.g:767:5: ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression )
            int alt130=2;
            alt130 = dfa130.predict(input);
            switch (alt130) {
                case 1 :
                    // jkit/java/Java.g:768:6: ( '&' andExpression )
                    {
                    // jkit/java/Java.g:768:6: ( '&' andExpression )
                    // jkit/java/Java.g:768:7: '&' andExpression
                    {
                    char_literal436=(Token)match(input,129,FOLLOW_129_in_andExpression5392); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_129.add(char_literal436);

                    pushFollow(FOLLOW_andExpression_in_andExpression5394);
                    andExpression437=andExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_andExpression.add(andExpression437.getTree());

                    }



                    // AST REWRITE
                    // elements: andExpression, equalityExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 768:26: -> ^( AND equalityExpression andExpression )
                    {
                        // jkit/java/Java.g:768:29: ^( AND equalityExpression andExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AND, "AND"), root_1);

                        adaptor.addChild(root_1, stream_equalityExpression.nextTree());
                        adaptor.addChild(root_1, stream_andExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:769:8: 
                    {

                    // AST REWRITE
                    // elements: equalityExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 769:8: -> equalityExpression
                    {
                        adaptor.addChild(root_0, stream_equalityExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // jkit/java/Java.g:773:1: equalityExpression : instanceOfExpression ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression ) ;
    public final JavaParser.equalityExpression_return equalityExpression() throws RecognitionException {
        JavaParser.equalityExpression_return retval = new JavaParser.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal439=null;
        Token string_literal441=null;
        JavaParser.instanceOfExpression_return instanceOfExpression438 = null;

        JavaParser.instanceOfExpression_return instanceOfExpression440 = null;

        JavaParser.instanceOfExpression_return instanceOfExpression442 = null;


        Object string_literal439_tree=null;
        Object string_literal441_tree=null;
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_instanceOfExpression=new RewriteRuleSubtreeStream(adaptor,"rule instanceOfExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // jkit/java/Java.g:774:5: ( instanceOfExpression ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression ) )
            // jkit/java/Java.g:774:9: instanceOfExpression ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression )
            {
            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5438);
            instanceOfExpression438=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_instanceOfExpression.add(instanceOfExpression438.getTree());
            // jkit/java/Java.g:775:5: ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression )
            int alt131=3;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // jkit/java/Java.g:776:6: ( '==' instanceOfExpression )
                    {
                    // jkit/java/Java.g:776:6: ( '==' instanceOfExpression )
                    // jkit/java/Java.g:776:7: '==' instanceOfExpression
                    {
                    string_literal439=(Token)match(input,193,FOLLOW_193_in_equalityExpression5454); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(string_literal439);

                    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5456);
                    instanceOfExpression440=instanceOfExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_instanceOfExpression.add(instanceOfExpression440.getTree());

                    }



                    // AST REWRITE
                    // elements: instanceOfExpression, instanceOfExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 776:34: -> ^( EQ instanceOfExpression instanceOfExpression )
                    {
                        // jkit/java/Java.g:776:37: ^( EQ instanceOfExpression instanceOfExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EQ, "EQ"), root_1);

                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());
                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:777:8: ( '!=' instanceOfExpression )
                    {
                    // jkit/java/Java.g:777:8: ( '!=' instanceOfExpression )
                    // jkit/java/Java.g:777:9: '!=' instanceOfExpression
                    {
                    string_literal441=(Token)match(input,194,FOLLOW_194_in_equalityExpression5477); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_194.add(string_literal441);

                    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5479);
                    instanceOfExpression442=instanceOfExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_instanceOfExpression.add(instanceOfExpression442.getTree());

                    }



                    // AST REWRITE
                    // elements: instanceOfExpression, instanceOfExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 777:36: -> ^( NEQ instanceOfExpression instanceOfExpression )
                    {
                        // jkit/java/Java.g:777:39: ^( NEQ instanceOfExpression instanceOfExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEQ, "NEQ"), root_1);

                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());
                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:778:8: 
                    {

                    // AST REWRITE
                    // elements: instanceOfExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 778:8: -> instanceOfExpression
                    {
                        adaptor.addChild(root_0, stream_instanceOfExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // jkit/java/Java.g:782:1: instanceOfExpression : relationalExpression ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression ) ;
    public final JavaParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        JavaParser.instanceOfExpression_return retval = new JavaParser.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal444=null;
        JavaParser.relationalExpression_return relationalExpression443 = null;

        JavaParser.type_return type445 = null;


        Object string_literal444_tree=null;
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_relationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule relationalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // jkit/java/Java.g:783:5: ( relationalExpression ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression ) )
            // jkit/java/Java.g:783:9: relationalExpression ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression )
            {
            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression5523);
            relationalExpression443=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_relationalExpression.add(relationalExpression443.getTree());
            // jkit/java/Java.g:784:5: ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression )
            int alt132=2;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // jkit/java/Java.g:785:6: ( 'instanceof' type )
                    {
                    // jkit/java/Java.g:785:6: ( 'instanceof' type )
                    // jkit/java/Java.g:785:7: 'instanceof' type
                    {
                    string_literal444=(Token)match(input,195,FOLLOW_195_in_instanceOfExpression5538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_195.add(string_literal444);

                    pushFollow(FOLLOW_type_in_instanceOfExpression5540);
                    type445=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type445.getTree());

                    }



                    // AST REWRITE
                    // elements: type, relationalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 785:26: -> ^( INSTANCEOF relationalExpression type )
                    {
                        // jkit/java/Java.g:785:29: ^( INSTANCEOF relationalExpression type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INSTANCEOF, "INSTANCEOF"), root_1);

                        adaptor.addChild(root_1, stream_relationalExpression.nextTree());
                        adaptor.addChild(root_1, stream_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:786:8: 
                    {

                    // AST REWRITE
                    // elements: relationalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 786:8: -> relationalExpression
                    {
                        adaptor.addChild(root_0, stream_relationalExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // jkit/java/Java.g:790:1: relationalExpression : shiftExpression ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression ) ;
    public final JavaParser.relationalExpression_return relationalExpression() throws RecognitionException {
        JavaParser.relationalExpression_return retval = new JavaParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal447=null;
        Token char_literal448=null;
        Token char_literal450=null;
        Token char_literal452=null;
        Token char_literal453=null;
        Token char_literal455=null;
        JavaParser.shiftExpression_return shiftExpression446 = null;

        JavaParser.shiftExpression_return shiftExpression449 = null;

        JavaParser.shiftExpression_return shiftExpression451 = null;

        JavaParser.shiftExpression_return shiftExpression454 = null;

        JavaParser.shiftExpression_return shiftExpression456 = null;


        Object char_literal447_tree=null;
        Object char_literal448_tree=null;
        Object char_literal450_tree=null;
        Object char_literal452_tree=null;
        Object char_literal453_tree=null;
        Object char_literal455_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_shiftExpression=new RewriteRuleSubtreeStream(adaptor,"rule shiftExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // jkit/java/Java.g:791:5: ( shiftExpression ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression ) )
            // jkit/java/Java.g:791:9: shiftExpression ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression )
            {
            pushFollow(FOLLOW_shiftExpression_in_relationalExpression5584);
            shiftExpression446=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression446.getTree());
            // jkit/java/Java.g:792:5: ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression )
            int alt133=5;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    // jkit/java/Java.g:793:6: ( '<' '=' shiftExpression )
                    {
                    // jkit/java/Java.g:793:6: ( '<' '=' shiftExpression )
                    // jkit/java/Java.g:793:7: '<' '=' shiftExpression
                    {
                    char_literal447=(Token)match(input,126,FOLLOW_126_in_relationalExpression5600); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_126.add(char_literal447);

                    char_literal448=(Token)match(input,137,FOLLOW_137_in_relationalExpression5602); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal448);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5604);
                    shiftExpression449=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression449.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 793:32: -> ^( LTEQ shiftExpression shiftExpression )
                    {
                        // jkit/java/Java.g:793:35: ^( LTEQ shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LTEQ, "LTEQ"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:794:8: ( '<' shiftExpression )
                    {
                    // jkit/java/Java.g:794:8: ( '<' shiftExpression )
                    // jkit/java/Java.g:794:9: '<' shiftExpression
                    {
                    char_literal450=(Token)match(input,126,FOLLOW_126_in_relationalExpression5625); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_126.add(char_literal450);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5627);
                    shiftExpression451=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression451.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 794:30: -> ^( LT shiftExpression shiftExpression )
                    {
                        // jkit/java/Java.g:794:33: ^( LT shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LT, "LT"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:795:8: ( '>' '=' shiftExpression )
                    {
                    // jkit/java/Java.g:795:8: ( '>' '=' shiftExpression )
                    // jkit/java/Java.g:795:9: '>' '=' shiftExpression
                    {
                    char_literal452=(Token)match(input,128,FOLLOW_128_in_relationalExpression5648); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal452);

                    char_literal453=(Token)match(input,137,FOLLOW_137_in_relationalExpression5650); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal453);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5652);
                    shiftExpression454=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression454.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 795:34: -> ^( GTEQ shiftExpression shiftExpression )
                    {
                        // jkit/java/Java.g:795:37: ^( GTEQ shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GTEQ, "GTEQ"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:796:8: ( '>' shiftExpression )
                    {
                    // jkit/java/Java.g:796:8: ( '>' shiftExpression )
                    // jkit/java/Java.g:796:9: '>' shiftExpression
                    {
                    char_literal455=(Token)match(input,128,FOLLOW_128_in_relationalExpression5673); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal455);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5675);
                    shiftExpression456=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression456.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 796:30: -> ^( GT shiftExpression shiftExpression )
                    {
                        // jkit/java/Java.g:796:33: ^( GT shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GT, "GT"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:797:8: 
                    {

                    // AST REWRITE
                    // elements: shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 797:8: -> shiftExpression
                    {
                        adaptor.addChild(root_0, stream_shiftExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // jkit/java/Java.g:801:1: shiftExpression : additiveExpression ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression ) ;
    public final JavaParser.shiftExpression_return shiftExpression() throws RecognitionException {
        JavaParser.shiftExpression_return retval = new JavaParser.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal458=null;
        Token char_literal459=null;
        Token char_literal461=null;
        Token char_literal462=null;
        Token char_literal463=null;
        Token i=null;
        List list_i=null;
        JavaParser.additiveExpression_return additiveExpression457 = null;

        JavaParser.additiveExpression_return additiveExpression460 = null;

        JavaParser.additiveExpression_return additiveExpression464 = null;


        Object char_literal458_tree=null;
        Object char_literal459_tree=null;
        Object char_literal461_tree=null;
        Object char_literal462_tree=null;
        Object char_literal463_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // jkit/java/Java.g:802:5: ( additiveExpression ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression ) )
            // jkit/java/Java.g:802:9: additiveExpression ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression )
            {
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression5720);
            additiveExpression457=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression457.getTree());
            // jkit/java/Java.g:803:5: ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression )
            int alt137=3;
            alt137 = dfa137.predict(input);
            switch (alt137) {
                case 1 :
                    // jkit/java/Java.g:804:6: ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+
                    {
                    // jkit/java/Java.g:804:6: ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+
                    int cnt135=0;
                    loop135:
                    do {
                        int alt135=2;
                        alt135 = dfa135.predict(input);
                        switch (alt135) {
                    	case 1 :
                    	    // jkit/java/Java.g:804:7: (i+= '<' '<' | i+= '>' '>' ) additiveExpression
                    	    {
                    	    // jkit/java/Java.g:804:7: (i+= '<' '<' | i+= '>' '>' )
                    	    int alt134=2;
                    	    int LA134_0 = input.LA(1);

                    	    if ( (LA134_0==126) ) {
                    	        alt134=1;
                    	    }
                    	    else if ( (LA134_0==128) ) {
                    	        alt134=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 134, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt134) {
                    	        case 1 :
                    	            // jkit/java/Java.g:804:8: i+= '<' '<'
                    	            {
                    	            i=(Token)match(input,126,FOLLOW_126_in_shiftExpression5739); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_126.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);

                    	            char_literal458=(Token)match(input,126,FOLLOW_126_in_shiftExpression5741); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_126.add(char_literal458);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // jkit/java/Java.g:804:19: i+= '>' '>'
                    	            {
                    	            i=(Token)match(input,128,FOLLOW_128_in_shiftExpression5745); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_128.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);

                    	            char_literal459=(Token)match(input,128,FOLLOW_128_in_shiftExpression5747); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_128.add(char_literal459);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression5750);
                    	    additiveExpression460=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression460.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt135 >= 1 ) break loop135;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(135, input);
                                throw eee;
                        }
                        cnt135++;
                    } while (true);



                    // AST REWRITE
                    // elements: additiveExpression, additiveExpression, i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 804:52: -> ^( LABINOP additiveExpression ( $i additiveExpression )+ )
                    {
                        // jkit/java/Java.g:804:55: ^( LABINOP additiveExpression ( $i additiveExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_1);

                        adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                        if ( !(stream_additiveExpression.hasNext()||stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_additiveExpression.hasNext()||stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                            adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                        }
                        stream_additiveExpression.reset();
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:806:8: ( '>' '>' '>' additiveExpression )+
                    {
                    // jkit/java/Java.g:806:8: ( '>' '>' '>' additiveExpression )+
                    int cnt136=0;
                    loop136:
                    do {
                        int alt136=2;
                        alt136 = dfa136.predict(input);
                        switch (alt136) {
                    	case 1 :
                    	    // jkit/java/Java.g:806:9: '>' '>' '>' additiveExpression
                    	    {
                    	    char_literal461=(Token)match(input,128,FOLLOW_128_in_shiftExpression5784); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_128.add(char_literal461);

                    	    char_literal462=(Token)match(input,128,FOLLOW_128_in_shiftExpression5786); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_128.add(char_literal462);

                    	    char_literal463=(Token)match(input,128,FOLLOW_128_in_shiftExpression5788); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_128.add(char_literal463);

                    	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression5790);
                    	    additiveExpression464=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression464.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt136 >= 1 ) break loop136;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(136, input);
                                throw eee;
                        }
                        cnt136++;
                    } while (true);



                    // AST REWRITE
                    // elements: additiveExpression, additiveExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 806:42: -> ^( USHR additiveExpression ( additiveExpression )+ )
                    {
                        // jkit/java/Java.g:806:45: ^( USHR additiveExpression ( additiveExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(USHR, "USHR"), root_1);

                        adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                        if ( !(stream_additiveExpression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_additiveExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                        }
                        stream_additiveExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:807:8: 
                    {

                    // AST REWRITE
                    // elements: additiveExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 807:8: -> additiveExpression
                    {
                        adaptor.addChild(root_0, stream_additiveExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // jkit/java/Java.g:811:1: additiveExpression : multiplicativeExpression ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression ) ;
    public final JavaParser.additiveExpression_return additiveExpression() throws RecognitionException {
        JavaParser.additiveExpression_return retval = new JavaParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        Object root_0 = null;

        Token i=null;
        List list_i=null;
        JavaParser.multiplicativeExpression_return multiplicativeExpression465 = null;

        JavaParser.multiplicativeExpression_return multiplicativeExpression466 = null;


        Object i_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleSubtreeStream stream_multiplicativeExpression=new RewriteRuleSubtreeStream(adaptor,"rule multiplicativeExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // jkit/java/Java.g:812:5: ( multiplicativeExpression ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression ) )
            // jkit/java/Java.g:812:9: multiplicativeExpression ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression )
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5833);
            multiplicativeExpression465=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(multiplicativeExpression465.getTree());
            // jkit/java/Java.g:813:5: ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression )
            int alt140=2;
            alt140 = dfa140.predict(input);
            switch (alt140) {
                case 1 :
                    // jkit/java/Java.g:814:6: ( (i+= '+' | i+= '-' ) multiplicativeExpression )+
                    {
                    // jkit/java/Java.g:814:6: ( (i+= '+' | i+= '-' ) multiplicativeExpression )+
                    int cnt139=0;
                    loop139:
                    do {
                        int alt139=2;
                        alt139 = dfa139.predict(input);
                        switch (alt139) {
                    	case 1 :
                    	    // jkit/java/Java.g:814:7: (i+= '+' | i+= '-' ) multiplicativeExpression
                    	    {
                    	    // jkit/java/Java.g:814:7: (i+= '+' | i+= '-' )
                    	    int alt138=2;
                    	    int LA138_0 = input.LA(1);

                    	    if ( (LA138_0==182) ) {
                    	        alt138=1;
                    	    }
                    	    else if ( (LA138_0==183) ) {
                    	        alt138=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 138, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt138) {
                    	        case 1 :
                    	            // jkit/java/Java.g:814:8: i+= '+'
                    	            {
                    	            i=(Token)match(input,182,FOLLOW_182_in_additiveExpression5852); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_182.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // jkit/java/Java.g:814:15: i+= '-'
                    	            {
                    	            i=(Token)match(input,183,FOLLOW_183_in_additiveExpression5856); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_183.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5859);
                    	    multiplicativeExpression466=multiplicativeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_multiplicativeExpression.add(multiplicativeExpression466.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt139 >= 1 ) break loop139;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(139, input);
                                throw eee;
                        }
                        cnt139++;
                    } while (true);



                    // AST REWRITE
                    // elements: multiplicativeExpression, i, multiplicativeExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 814:50: -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ )
                    {
                        // jkit/java/Java.g:814:53: ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_1);

                        adaptor.addChild(root_1, stream_multiplicativeExpression.nextTree());
                        if ( !(stream_multiplicativeExpression.hasNext()||stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_multiplicativeExpression.hasNext()||stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                            adaptor.addChild(root_1, stream_multiplicativeExpression.nextTree());

                        }
                        stream_multiplicativeExpression.reset();
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:815:8: 
                    {

                    // AST REWRITE
                    // elements: multiplicativeExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 815:8: -> multiplicativeExpression
                    {
                        adaptor.addChild(root_0, stream_multiplicativeExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // jkit/java/Java.g:819:1: multiplicativeExpression : unaryExpression ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression ) ;
    public final JavaParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        JavaParser.multiplicativeExpression_return retval = new JavaParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        Object root_0 = null;

        Token i=null;
        List list_i=null;
        JavaParser.unaryExpression_return unaryExpression467 = null;

        JavaParser.unaryExpression_return unaryExpression468 = null;


        Object i_tree=null;
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // jkit/java/Java.g:820:5: ( unaryExpression ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression ) )
            // jkit/java/Java.g:820:9: unaryExpression ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression )
            {
            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5910);
            unaryExpression467=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression467.getTree());
            // jkit/java/Java.g:821:5: ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression )
            int alt143=2;
            alt143 = dfa143.predict(input);
            switch (alt143) {
                case 1 :
                    // jkit/java/Java.g:822:6: ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+
                    {
                    // jkit/java/Java.g:822:6: ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+
                    int cnt142=0;
                    loop142:
                    do {
                        int alt142=2;
                        alt142 = dfa142.predict(input);
                        switch (alt142) {
                    	case 1 :
                    	    // jkit/java/Java.g:822:8: (i+= '*' | i+= '/' | i+= '%' ) unaryExpression
                    	    {
                    	    // jkit/java/Java.g:822:8: (i+= '*' | i+= '/' | i+= '%' )
                    	    int alt141=3;
                    	    switch ( input.LA(1) ) {
                    	    case 122:
                    	        {
                    	        alt141=1;
                    	        }
                    	        break;
                    	    case 184:
                    	        {
                    	        alt141=2;
                    	        }
                    	        break;
                    	    case 188:
                    	        {
                    	        alt141=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 141, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt141) {
                    	        case 1 :
                    	            // jkit/java/Java.g:822:9: i+= '*'
                    	            {
                    	            i=(Token)match(input,122,FOLLOW_122_in_multiplicativeExpression5930); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_122.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // jkit/java/Java.g:822:16: i+= '/'
                    	            {
                    	            i=(Token)match(input,184,FOLLOW_184_in_multiplicativeExpression5934); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_184.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // jkit/java/Java.g:822:23: i+= '%'
                    	            {
                    	            i=(Token)match(input,188,FOLLOW_188_in_multiplicativeExpression5938); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_188.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5941);
                    	    unaryExpression468=unaryExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression468.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt142 >= 1 ) break loop142;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(142, input);
                                throw eee;
                        }
                        cnt142++;
                    } while (true);



                    // AST REWRITE
                    // elements: unaryExpression, i, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 822:49: -> ^( LABINOP unaryExpression ( $i unaryExpression )+ )
                    {
                        // jkit/java/Java.g:822:52: ^( LABINOP unaryExpression ( $i unaryExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());
                        if ( !(stream_i.hasNext()||stream_unaryExpression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext()||stream_unaryExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                            adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        }
                        stream_i.reset();
                        stream_unaryExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:823:8: 
                    {

                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 823:8: -> unaryExpression
                    {
                        adaptor.addChild(root_0, stream_unaryExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // jkit/java/Java.g:827:1: unaryExpression : ( '+' unaryExpression -> unaryExpression | '-' unaryExpression -> ^( NEG unaryExpression ) | '++' unaryExpression -> ^( PREINC unaryExpression ) | '--' unaryExpression -> ^( PREDEC unaryExpression ) | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus );
    public final JavaParser.unaryExpression_return unaryExpression() throws RecognitionException {
        JavaParser.unaryExpression_return retval = new JavaParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal469=null;
        Token char_literal471=null;
        Token string_literal473=null;
        Token string_literal475=null;
        JavaParser.unaryExpression_return unaryExpression470 = null;

        JavaParser.unaryExpression_return unaryExpression472 = null;

        JavaParser.unaryExpression_return unaryExpression474 = null;

        JavaParser.unaryExpression_return unaryExpression476 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus477 = null;


        Object char_literal469_tree=null;
        Object char_literal471_tree=null;
        Object string_literal473_tree=null;
        Object string_literal475_tree=null;
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_unaryExpressionNotPlusMinus=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionNotPlusMinus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // jkit/java/Java.g:828:5: ( '+' unaryExpression -> unaryExpression | '-' unaryExpression -> ^( NEG unaryExpression ) | '++' unaryExpression -> ^( PREINC unaryExpression ) | '--' unaryExpression -> ^( PREDEC unaryExpression ) | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus )
            int alt144=5;
            alt144 = dfa144.predict(input);
            switch (alt144) {
                case 1 :
                    // jkit/java/Java.g:828:9: '+' unaryExpression
                    {
                    char_literal469=(Token)match(input,182,FOLLOW_182_in_unaryExpression5993); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_182.add(char_literal469);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5995);
                    unaryExpression470=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression470.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 828:29: -> unaryExpression
                    {
                        adaptor.addChild(root_0, stream_unaryExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:829:7: '-' unaryExpression
                    {
                    char_literal471=(Token)match(input,183,FOLLOW_183_in_unaryExpression6007); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_183.add(char_literal471);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression6009);
                    unaryExpression472=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression472.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 829:27: -> ^( NEG unaryExpression )
                    {
                        // jkit/java/Java.g:829:30: ^( NEG unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEG, "NEG"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:830:9: '++' unaryExpression
                    {
                    string_literal473=(Token)match(input,196,FOLLOW_196_in_unaryExpression6027); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_196.add(string_literal473);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression6029);
                    unaryExpression474=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression474.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 830:30: -> ^( PREINC unaryExpression )
                    {
                        // jkit/java/Java.g:830:33: ^( PREINC unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PREINC, "PREINC"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:831:9: '--' unaryExpression
                    {
                    string_literal475=(Token)match(input,197,FOLLOW_197_in_unaryExpression6047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_197.add(string_literal475);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression6049);
                    unaryExpression476=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression476.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 831:30: -> ^( PREDEC unaryExpression )
                    {
                        // jkit/java/Java.g:831:33: ^( PREDEC unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PREDEC, "PREDEC"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:832:9: unaryExpressionNotPlusMinus
                    {
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression6067);
                    unaryExpressionNotPlusMinus477=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus477.getTree());


                    // AST REWRITE
                    // elements: unaryExpressionNotPlusMinus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 832:37: -> unaryExpressionNotPlusMinus
                    {
                        adaptor.addChild(root_0, stream_unaryExpressionNotPlusMinus.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // jkit/java/Java.g:835:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression -> ^( INV unaryExpression ) | '!' unaryExpression -> ^( NOT unaryExpression ) | castExpression | primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary ) );
    public final JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        JavaParser.unaryExpressionNotPlusMinus_return retval = new JavaParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal478=null;
        Token char_literal480=null;
        Token string_literal485=null;
        Token string_literal486=null;
        Token string_literal487=null;
        Token string_literal488=null;
        JavaParser.unaryExpression_return unaryExpression479 = null;

        JavaParser.unaryExpression_return unaryExpression481 = null;

        JavaParser.castExpression_return castExpression482 = null;

        JavaParser.primary_return primary483 = null;

        JavaParser.selector_return selector484 = null;


        Object char_literal478_tree=null;
        Object char_literal480_tree=null;
        Object string_literal485_tree=null;
        Object string_literal486_tree=null;
        Object string_literal487_tree=null;
        Object string_literal488_tree=null;
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_199=new RewriteRuleTokenStream(adaptor,"token 199");
        RewriteRuleTokenStream stream_198=new RewriteRuleTokenStream(adaptor,"token 198");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_primary=new RewriteRuleSubtreeStream(adaptor,"rule primary");
        RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // jkit/java/Java.g:836:5: ( '~' unaryExpression -> ^( INV unaryExpression ) | '!' unaryExpression -> ^( NOT unaryExpression ) | castExpression | primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary ) )
            int alt148=4;
            alt148 = dfa148.predict(input);
            switch (alt148) {
                case 1 :
                    // jkit/java/Java.g:836:9: '~' unaryExpression
                    {
                    char_literal478=(Token)match(input,198,FOLLOW_198_in_unaryExpressionNotPlusMinus6098); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_198.add(char_literal478);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6100);
                    unaryExpression479=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression479.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 836:29: -> ^( INV unaryExpression )
                    {
                        // jkit/java/Java.g:836:32: ^( INV unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INV, "INV"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:837:8: '!' unaryExpression
                    {
                    char_literal480=(Token)match(input,199,FOLLOW_199_in_unaryExpressionNotPlusMinus6117); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_199.add(char_literal480);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6119);
                    unaryExpression481=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression481.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 837:28: -> ^( NOT unaryExpression )
                    {
                        // jkit/java/Java.g:837:31: ^( NOT unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NOT, "NOT"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:838:9: castExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus6137);
                    castExpression482=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, castExpression482.getTree());

                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:839:6: primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary )
                    {
                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus6144);
                    primary483=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primary.add(primary483.getTree());
                    // jkit/java/Java.g:840:3: ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary )
                    int alt147=4;
                    alt147 = dfa147.predict(input);
                    switch (alt147) {
                        case 1 :
                            // jkit/java/Java.g:841:4: ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) )
                            {
                            // jkit/java/Java.g:841:4: ( selector )+
                            int cnt145=0;
                            loop145:
                            do {
                                int alt145=2;
                                alt145 = dfa145.predict(input);
                                switch (alt145) {
                            	case 1 :
                            	    // jkit/java/Java.g:0:0: selector
                            	    {
                            	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus6154);
                            	    selector484=selector();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_selector.add(selector484.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt145 >= 1 ) break loop145;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(145, input);
                                        throw eee;
                                }
                                cnt145++;
                            } while (true);

                            // jkit/java/Java.g:842:4: ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) )
                            int alt146=3;
                            alt146 = dfa146.predict(input);
                            switch (alt146) {
                                case 1 :
                                    // jkit/java/Java.g:843:5: '++'
                                    {
                                    string_literal485=(Token)match(input,196,FOLLOW_196_in_unaryExpressionNotPlusMinus6167); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_196.add(string_literal485);



                                    // AST REWRITE
                                    // elements: primary, selector
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (Object)adaptor.nil();
                                    // 843:10: -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) )
                                    {
                                        // jkit/java/Java.g:843:13: ^( POSTINC ^( SELECTOR primary ( selector )+ ) )
                                        {
                                        Object root_1 = (Object)adaptor.nil();
                                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTINC, "POSTINC"), root_1);

                                        // jkit/java/Java.g:843:23: ^( SELECTOR primary ( selector )+ )
                                        {
                                        Object root_2 = (Object)adaptor.nil();
                                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTOR, "SELECTOR"), root_2);

                                        adaptor.addChild(root_2, stream_primary.nextTree());
                                        if ( !(stream_selector.hasNext()) ) {
                                            throw new RewriteEarlyExitException();
                                        }
                                        while ( stream_selector.hasNext() ) {
                                            adaptor.addChild(root_2, stream_selector.nextTree());

                                        }
                                        stream_selector.reset();

                                        adaptor.addChild(root_1, root_2);
                                        }

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // jkit/java/Java.g:844:6: '--'
                                    {
                                    string_literal486=(Token)match(input,197,FOLLOW_197_in_unaryExpressionNotPlusMinus6189); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_197.add(string_literal486);



                                    // AST REWRITE
                                    // elements: selector, primary
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (Object)adaptor.nil();
                                    // 844:11: -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) )
                                    {
                                        // jkit/java/Java.g:844:14: ^( POSTDEC ^( SELECTOR primary ( selector )+ ) )
                                        {
                                        Object root_1 = (Object)adaptor.nil();
                                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTDEC, "POSTDEC"), root_1);

                                        // jkit/java/Java.g:844:24: ^( SELECTOR primary ( selector )+ )
                                        {
                                        Object root_2 = (Object)adaptor.nil();
                                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTOR, "SELECTOR"), root_2);

                                        adaptor.addChild(root_2, stream_primary.nextTree());
                                        if ( !(stream_selector.hasNext()) ) {
                                            throw new RewriteEarlyExitException();
                                        }
                                        while ( stream_selector.hasNext() ) {
                                            adaptor.addChild(root_2, stream_selector.nextTree());

                                        }
                                        stream_selector.reset();

                                        adaptor.addChild(root_1, root_2);
                                        }

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 3 :
                                    // jkit/java/Java.g:845:7: 
                                    {

                                    // AST REWRITE
                                    // elements: selector, primary
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (Object)adaptor.nil();
                                    // 845:7: -> ^( SELECTOR primary ( selector )+ )
                                    {
                                        // jkit/java/Java.g:845:10: ^( SELECTOR primary ( selector )+ )
                                        {
                                        Object root_1 = (Object)adaptor.nil();
                                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTOR, "SELECTOR"), root_1);

                                        adaptor.addChild(root_1, stream_primary.nextTree());
                                        if ( !(stream_selector.hasNext()) ) {
                                            throw new RewriteEarlyExitException();
                                        }
                                        while ( stream_selector.hasNext() ) {
                                            adaptor.addChild(root_1, stream_selector.nextTree());

                                        }
                                        stream_selector.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:847:6: '++'
                            {
                            string_literal487=(Token)match(input,196,FOLLOW_196_in_unaryExpressionNotPlusMinus6233); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_196.add(string_literal487);



                            // AST REWRITE
                            // elements: primary
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 847:11: -> ^( POSTINC primary )
                            {
                                // jkit/java/Java.g:847:14: ^( POSTINC primary )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTINC, "POSTINC"), root_1);

                                adaptor.addChild(root_1, stream_primary.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:848:6: '--'
                            {
                            string_literal488=(Token)match(input,197,FOLLOW_197_in_unaryExpressionNotPlusMinus6248); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_197.add(string_literal488);



                            // AST REWRITE
                            // elements: primary
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 848:11: -> ^( POSTDEC primary )
                            {
                                // jkit/java/Java.g:848:14: ^( POSTDEC primary )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTDEC, "POSTDEC"), root_1);

                                adaptor.addChild(root_1, stream_primary.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // jkit/java/Java.g:849:6: 
                            {

                            // AST REWRITE
                            // elements: primary
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 849:6: -> primary
                            {
                                adaptor.addChild(root_0, stream_primary.nextTree());

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class castExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // jkit/java/Java.g:853:1: castExpression : ( '(' primitiveType ')' unaryExpression -> ^( CAST ^( TYPE primitiveType ) unaryExpression ) | '(' type ')' unaryExpressionNotPlusMinus -> ^( CAST type unaryExpressionNotPlusMinus ) | '(' expression ')' unaryExpressionNotPlusMinus ->);
    public final JavaParser.castExpression_return castExpression() throws RecognitionException {
        JavaParser.castExpression_return retval = new JavaParser.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal489=null;
        Token char_literal491=null;
        Token char_literal493=null;
        Token char_literal495=null;
        Token char_literal497=null;
        Token char_literal499=null;
        JavaParser.primitiveType_return primitiveType490 = null;

        JavaParser.unaryExpression_return unaryExpression492 = null;

        JavaParser.type_return type494 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus496 = null;

        JavaParser.expression_return expression498 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus500 = null;


        Object char_literal489_tree=null;
        Object char_literal491_tree=null;
        Object char_literal493_tree=null;
        Object char_literal495_tree=null;
        Object char_literal497_tree=null;
        Object char_literal499_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_unaryExpressionNotPlusMinus=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionNotPlusMinus");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // jkit/java/Java.g:854:5: ( '(' primitiveType ')' unaryExpression -> ^( CAST ^( TYPE primitiveType ) unaryExpression ) | '(' type ')' unaryExpressionNotPlusMinus -> ^( CAST type unaryExpressionNotPlusMinus ) | '(' expression ')' unaryExpressionNotPlusMinus ->)
            int alt149=3;
            alt149 = dfa149.predict(input);
            switch (alt149) {
                case 1 :
                    // jkit/java/Java.g:854:8: '(' primitiveType ')' unaryExpression
                    {
                    char_literal489=(Token)match(input,158,FOLLOW_158_in_castExpression6287); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_158.add(char_literal489);

                    pushFollow(FOLLOW_primitiveType_in_castExpression6289);
                    primitiveType490=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType490.getTree());
                    char_literal491=(Token)match(input,159,FOLLOW_159_in_castExpression6291); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_159.add(char_literal491);

                    pushFollow(FOLLOW_unaryExpression_in_castExpression6293);
                    unaryExpression492=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression492.getTree());


                    // AST REWRITE
                    // elements: unaryExpression, primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 854:46: -> ^( CAST ^( TYPE primitiveType ) unaryExpression )
                    {
                        // jkit/java/Java.g:854:49: ^( CAST ^( TYPE primitiveType ) unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CAST, "CAST"), root_1);

                        // jkit/java/Java.g:854:56: ^( TYPE primitiveType )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                        adaptor.addChild(root_2, stream_primitiveType.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:855:8: '(' type ')' unaryExpressionNotPlusMinus
                    {
                    char_literal493=(Token)match(input,158,FOLLOW_158_in_castExpression6316); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_158.add(char_literal493);

                    pushFollow(FOLLOW_type_in_castExpression6318);
                    type494=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type494.getTree());
                    char_literal495=(Token)match(input,159,FOLLOW_159_in_castExpression6320); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_159.add(char_literal495);

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6322);
                    unaryExpressionNotPlusMinus496=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus496.getTree());


                    // AST REWRITE
                    // elements: unaryExpressionNotPlusMinus, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 855:49: -> ^( CAST type unaryExpressionNotPlusMinus )
                    {
                        // jkit/java/Java.g:855:52: ^( CAST type unaryExpressionNotPlusMinus )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CAST, "CAST"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_unaryExpressionNotPlusMinus.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:856:8: '(' expression ')' unaryExpressionNotPlusMinus
                    {
                    char_literal497=(Token)match(input,158,FOLLOW_158_in_castExpression6341); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_158.add(char_literal497);

                    pushFollow(FOLLOW_expression_in_castExpression6343);
                    expression498=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression498.getTree());
                    char_literal499=(Token)match(input,159,FOLLOW_159_in_castExpression6345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_159.add(char_literal499);

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6347);
                    unaryExpressionNotPlusMinus500=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus500.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 856:55: ->
                    {
                        root_0 = null;
                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class primary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary"
    // jkit/java/Java.g:859:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | literal | 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) ) | 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) ) | type '.' 'class' -> ^( GETCLASS type ) | 'void' '.' 'class' -> ^( GETCLASS ^( TYPE VOID ) ) | 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) ) | Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) ) );
    public final JavaParser.primary_return primary() throws RecognitionException {
        JavaParser.primary_return retval = new JavaParser.primary_return();
        retval.start = input.LT(1);
        int primary_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal505=null;
        Token char_literal508=null;
        Token char_literal510=null;
        Token char_literal511=null;
        Token char_literal512=null;
        Token char_literal513=null;
        Token char_literal514=null;
        Token string_literal516=null;
        Token char_literal518=null;
        Token char_literal519=null;
        Token char_literal521=null;
        Token char_literal522=null;
        Token char_literal523=null;
        Token char_literal524=null;
        Token char_literal525=null;
        Token char_literal529=null;
        Token string_literal530=null;
        Token string_literal531=null;
        Token char_literal532=null;
        Token string_literal533=null;
        Token string_literal534=null;
        Token Identifier536=null;
        List list_i=null;
        JavaParser.parExpression_return parExpression501 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments502 = null;

        JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix503 = null;

        JavaParser.literal_return literal504 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments506 = null;

        JavaParser.primitiveType_return primitiveType507 = null;

        JavaParser.expression_return expression509 = null;

        JavaParser.arrayInitializer_return arrayInitializer515 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments517 = null;

        JavaParser.expression_return expression520 = null;

        JavaParser.arrayInitializer_return arrayInitializer526 = null;

        JavaParser.classCreatorRest_return classCreatorRest527 = null;

        JavaParser.type_return type528 = null;

        JavaParser.arguments_return arguments535 = null;

        JavaParser.arguments_return arguments537 = null;

        JavaParser.refComponent_return i = null;
        Object string_literal505_tree=null;
        Object char_literal508_tree=null;
        Object char_literal510_tree=null;
        Object char_literal511_tree=null;
        Object char_literal512_tree=null;
        Object char_literal513_tree=null;
        Object char_literal514_tree=null;
        Object string_literal516_tree=null;
        Object char_literal518_tree=null;
        Object char_literal519_tree=null;
        Object char_literal521_tree=null;
        Object char_literal522_tree=null;
        Object char_literal523_tree=null;
        Object char_literal524_tree=null;
        Object char_literal525_tree=null;
        Object char_literal529_tree=null;
        Object string_literal530_tree=null;
        Object string_literal531_tree=null;
        Object char_literal532_tree=null;
        Object string_literal533_tree=null;
        Object string_literal534_tree=null;
        Object Identifier536_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_arrayInitializer=new RewriteRuleSubtreeStream(adaptor,"rule arrayInitializer");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classCreatorRest=new RewriteRuleSubtreeStream(adaptor,"rule classCreatorRest");
        RewriteRuleSubtreeStream stream_explicitGenericInvocationSuffix=new RewriteRuleSubtreeStream(adaptor,"rule explicitGenericInvocationSuffix");
        RewriteRuleSubtreeStream stream_refComponent=new RewriteRuleSubtreeStream(adaptor,"rule refComponent");
        RewriteRuleSubtreeStream stream_nonWildcardTypeArguments=new RewriteRuleSubtreeStream(adaptor,"rule nonWildcardTypeArguments");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // jkit/java/Java.g:860:5: ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | literal | 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) ) | 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) ) | type '.' 'class' -> ^( GETCLASS type ) | 'void' '.' 'class' -> ^( GETCLASS ^( TYPE VOID ) ) | 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) ) | Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) ) )
            int alt163=9;
            alt163 = dfa163.predict(input);
            switch (alt163) {
                case 1 :
                    // jkit/java/Java.g:860:7: parExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_primary6367);
                    parExpression501=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression501.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:861:6: nonWildcardTypeArguments explicitGenericInvocationSuffix
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6374);
                    nonWildcardTypeArguments502=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments502.getTree());
                    pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary6376);
                    explicitGenericInvocationSuffix503=explicitGenericInvocationSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicitGenericInvocationSuffix.add(explicitGenericInvocationSuffix503.getTree());


                    // AST REWRITE
                    // elements: explicitGenericInvocationSuffix, nonWildcardTypeArguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 861:63: -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                    {
                        // jkit/java/Java.g:861:66: ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                        // jkit/java/Java.g:861:75: ^( TYPE_PARAMETER nonWildcardTypeArguments )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETER, "TYPE_PARAMETER"), root_2);

                        adaptor.addChild(root_2, stream_nonWildcardTypeArguments.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_explicitGenericInvocationSuffix.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:862:9: literal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primary6400);
                    literal504=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal504.getTree());

                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:863:9: 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) )
                    {
                    string_literal505=(Token)match(input,200,FOLLOW_200_in_primary6410); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_200.add(string_literal505);

                    // jkit/java/Java.g:863:15: ( nonWildcardTypeArguments )?
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==126) ) {
                        alt150=1;
                    }
                    switch (alt150) {
                        case 1 :
                            // jkit/java/Java.g:0:0: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6412);
                            nonWildcardTypeArguments506=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments506.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_primitiveType_in_primary6415);
                    primitiveType507=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType507.getTree());
                    // jkit/java/Java.g:864:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) )
                    int alt154=2;
                    alt154 = dfa154.predict(input);
                    switch (alt154) {
                        case 1 :
                            // jkit/java/Java.g:865:7: ( '[' expression ']' )+ ( '[' ']' )*
                            {
                            // jkit/java/Java.g:865:7: ( '[' expression ']' )+
                            int cnt151=0;
                            loop151:
                            do {
                                int alt151=2;
                                alt151 = dfa151.predict(input);
                                switch (alt151) {
                            	case 1 :
                            	    // jkit/java/Java.g:865:8: '[' expression ']'
                            	    {
                            	    char_literal508=(Token)match(input,135,FOLLOW_135_in_primary6431); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal508);

                            	    pushFollow(FOLLOW_expression_in_primary6433);
                            	    expression509=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_expression.add(expression509.getTree());
                            	    char_literal510=(Token)match(input,136,FOLLOW_136_in_primary6435); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_136.add(char_literal510);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt151 >= 1 ) break loop151;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(151, input);
                                        throw eee;
                                }
                                cnt151++;
                            } while (true);

                            // jkit/java/Java.g:865:29: ( '[' ']' )*
                            loop152:
                            do {
                                int alt152=2;
                                alt152 = dfa152.predict(input);
                                switch (alt152) {
                            	case 1 :
                            	    // jkit/java/Java.g:865:30: '[' ']'
                            	    {
                            	    char_literal511=(Token)match(input,135,FOLLOW_135_in_primary6440); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal511);

                            	    char_literal512=(Token)match(input,136,FOLLOW_136_in_primary6442); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_136.add(char_literal512);


                            	    }
                            	    break;

                            	default :
                            	    break loop152;
                                }
                            } while (true);



                            // AST REWRITE
                            // elements: primitiveType, 135, expression
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 865:40: -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* )
                            {
                                // jkit/java/Java.g:865:43: ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                                // jkit/java/Java.g:865:49: ^( TYPE primitiveType ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, stream_primitiveType.nextTree());
                                // jkit/java/Java.g:865:70: ( '[' )*
                                while ( stream_135.hasNext() ) {
                                    adaptor.addChild(root_2, stream_135.nextNode());

                                }
                                stream_135.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:865:76: ( expression )*
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:866:9: ( '[' ']' )+ arrayInitializer
                            {
                            // jkit/java/Java.g:866:9: ( '[' ']' )+
                            int cnt153=0;
                            loop153:
                            do {
                                int alt153=2;
                                int LA153_0 = input.LA(1);

                                if ( (LA153_0==135) ) {
                                    alt153=1;
                                }


                                switch (alt153) {
                            	case 1 :
                            	    // jkit/java/Java.g:866:10: '[' ']'
                            	    {
                            	    char_literal513=(Token)match(input,135,FOLLOW_135_in_primary6473); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal513);

                            	    char_literal514=(Token)match(input,136,FOLLOW_136_in_primary6475); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_136.add(char_literal514);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt153 >= 1 ) break loop153;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(153, input);
                                        throw eee;
                                }
                                cnt153++;
                            } while (true);

                            pushFollow(FOLLOW_arrayInitializer_in_primary6479);
                            arrayInitializer515=arrayInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arrayInitializer.add(arrayInitializer515.getTree());


                            // AST REWRITE
                            // elements: arrayInitializer, primitiveType, 135
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 866:37: -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer )
                            {
                                // jkit/java/Java.g:866:40: ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYINIT, "ARRAYINIT"), root_1);

                                // jkit/java/Java.g:866:52: ^( TYPE primitiveType ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, stream_primitiveType.nextTree());
                                // jkit/java/Java.g:866:73: ( '[' )*
                                while ( stream_135.hasNext() ) {
                                    adaptor.addChild(root_2, stream_135.nextNode());

                                }
                                stream_135.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_arrayInitializer.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:868:9: 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) )
                    {
                    string_literal516=(Token)match(input,200,FOLLOW_200_in_primary6511); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_200.add(string_literal516);

                    // jkit/java/Java.g:868:15: ( nonWildcardTypeArguments )?
                    int alt155=2;
                    int LA155_0 = input.LA(1);

                    if ( (LA155_0==126) ) {
                        alt155=1;
                    }
                    switch (alt155) {
                        case 1 :
                            // jkit/java/Java.g:0:0: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6513);
                            nonWildcardTypeArguments517=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments517.getTree());

                            }
                            break;

                    }

                    // jkit/java/Java.g:868:41: (i+= refComponent ( '.' i+= refComponent )* )
                    // jkit/java/Java.g:868:42: i+= refComponent ( '.' i+= refComponent )*
                    {
                    pushFollow(FOLLOW_refComponent_in_primary6519);
                    i=refComponent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i.getTree());

                    // jkit/java/Java.g:868:58: ( '.' i+= refComponent )*
                    loop156:
                    do {
                        int alt156=2;
                        int LA156_0 = input.LA(1);

                        if ( (LA156_0==121) ) {
                            alt156=1;
                        }


                        switch (alt156) {
                    	case 1 :
                    	    // jkit/java/Java.g:868:59: '.' i+= refComponent
                    	    {
                    	    char_literal518=(Token)match(input,121,FOLLOW_121_in_primary6522); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_121.add(char_literal518);

                    	    pushFollow(FOLLOW_refComponent_in_primary6526);
                    	    i=refComponent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop156;
                        }
                    } while (true);


                    }

                    // jkit/java/Java.g:869:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) )
                    int alt160=3;
                    alt160 = dfa160.predict(input);
                    switch (alt160) {
                        case 1 :
                            // jkit/java/Java.g:870:7: ( '[' expression ']' )+ ( '[' ']' )*
                            {
                            // jkit/java/Java.g:870:7: ( '[' expression ']' )+
                            int cnt157=0;
                            loop157:
                            do {
                                int alt157=2;
                                alt157 = dfa157.predict(input);
                                switch (alt157) {
                            	case 1 :
                            	    // jkit/java/Java.g:870:8: '[' expression ']'
                            	    {
                            	    char_literal519=(Token)match(input,135,FOLLOW_135_in_primary6545); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal519);

                            	    pushFollow(FOLLOW_expression_in_primary6547);
                            	    expression520=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_expression.add(expression520.getTree());
                            	    char_literal521=(Token)match(input,136,FOLLOW_136_in_primary6549); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_136.add(char_literal521);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt157 >= 1 ) break loop157;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(157, input);
                                        throw eee;
                                }
                                cnt157++;
                            } while (true);

                            // jkit/java/Java.g:870:29: ( '[' ']' )*
                            loop158:
                            do {
                                int alt158=2;
                                alt158 = dfa158.predict(input);
                                switch (alt158) {
                            	case 1 :
                            	    // jkit/java/Java.g:870:30: '[' ']'
                            	    {
                            	    char_literal522=(Token)match(input,135,FOLLOW_135_in_primary6554); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal522);

                            	    char_literal523=(Token)match(input,136,FOLLOW_136_in_primary6556); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_136.add(char_literal523);


                            	    }
                            	    break;

                            	default :
                            	    break loop158;
                                }
                            } while (true);



                            // AST REWRITE
                            // elements: 135, expression, i
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: i
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                            root_0 = (Object)adaptor.nil();
                            // 870:40: -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* )
                            {
                                // jkit/java/Java.g:870:43: ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                                // jkit/java/Java.g:870:49: ^( TYPE ( $i)+ ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                if ( !(stream_i.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_i.hasNext() ) {
                                    adaptor.addChild(root_2, stream_i.nextTree());

                                }
                                stream_i.reset();
                                // jkit/java/Java.g:870:60: ( '[' )*
                                while ( stream_135.hasNext() ) {
                                    adaptor.addChild(root_2, stream_135.nextNode());

                                }
                                stream_135.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:870:66: ( expression )*
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:871:9: ( '[' ']' )+ arrayInitializer
                            {
                            // jkit/java/Java.g:871:9: ( '[' ']' )+
                            int cnt159=0;
                            loop159:
                            do {
                                int alt159=2;
                                int LA159_0 = input.LA(1);

                                if ( (LA159_0==135) ) {
                                    alt159=1;
                                }


                                switch (alt159) {
                            	case 1 :
                            	    // jkit/java/Java.g:871:10: '[' ']'
                            	    {
                            	    char_literal524=(Token)match(input,135,FOLLOW_135_in_primary6589); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_135.add(char_literal524);

                            	    char_literal525=(Token)match(input,136,FOLLOW_136_in_primary6591); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_136.add(char_literal525);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt159 >= 1 ) break loop159;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(159, input);
                                        throw eee;
                                }
                                cnt159++;
                            } while (true);

                            pushFollow(FOLLOW_arrayInitializer_in_primary6595);
                            arrayInitializer526=arrayInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arrayInitializer.add(arrayInitializer526.getTree());


                            // AST REWRITE
                            // elements: i, 135, arrayInitializer
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: i
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                            root_0 = (Object)adaptor.nil();
                            // 871:37: -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer )
                            {
                                // jkit/java/Java.g:871:40: ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYINIT, "ARRAYINIT"), root_1);

                                // jkit/java/Java.g:871:52: ^( TYPE ( $i)+ ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                if ( !(stream_i.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_i.hasNext() ) {
                                    adaptor.addChild(root_2, stream_i.nextTree());

                                }
                                stream_i.reset();
                                // jkit/java/Java.g:871:63: ( '[' )*
                                while ( stream_135.hasNext() ) {
                                    adaptor.addChild(root_2, stream_135.nextNode());

                                }
                                stream_135.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_arrayInitializer.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/Java.g:872:9: classCreatorRest
                            {
                            pushFollow(FOLLOW_classCreatorRest_in_primary6624);
                            classCreatorRest527=classCreatorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classCreatorRest.add(classCreatorRest527.getTree());


                            // AST REWRITE
                            // elements: i, classCreatorRest
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: i
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                            root_0 = (Object)adaptor.nil();
                            // 872:26: -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? )
                            {
                                // jkit/java/Java.g:872:29: ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                                // jkit/java/Java.g:872:35: ^( TYPE ( $i)+ )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                if ( !(stream_i.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_i.hasNext() ) {
                                    adaptor.addChild(root_2, stream_i.nextTree());

                                }
                                stream_i.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/Java.g:872:47: ( classCreatorRest )?
                                if ( stream_classCreatorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_classCreatorRest.nextTree());

                                }
                                stream_classCreatorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // jkit/java/Java.g:874:9: type '.' 'class'
                    {
                    pushFollow(FOLLOW_type_in_primary6656);
                    type528=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type528.getTree());
                    char_literal529=(Token)match(input,121,FOLLOW_121_in_primary6658); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal529);

                    string_literal530=(Token)match(input,123,FOLLOW_123_in_primary6660); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_123.add(string_literal530);



                    // AST REWRITE
                    // elements: type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 874:26: -> ^( GETCLASS type )
                    {
                        // jkit/java/Java.g:874:29: ^( GETCLASS type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GETCLASS, "GETCLASS"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // jkit/java/Java.g:875:9: 'void' '.' 'class'
                    {
                    string_literal531=(Token)match(input,133,FOLLOW_133_in_primary6682); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(string_literal531);

                    char_literal532=(Token)match(input,121,FOLLOW_121_in_primary6684); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal532);

                    string_literal533=(Token)match(input,123,FOLLOW_123_in_primary6686); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_123.add(string_literal533);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 875:28: -> ^( GETCLASS ^( TYPE VOID ) )
                    {
                        // jkit/java/Java.g:875:31: ^( GETCLASS ^( TYPE VOID ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GETCLASS, "GETCLASS"), root_1);

                        // jkit/java/Java.g:875:42: ^( TYPE VOID )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                        adaptor.addChild(root_2, (Object)adaptor.create(VOID, "VOID"));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // jkit/java/Java.g:876:8: 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) )
                    {
                    string_literal534=(Token)match(input,157,FOLLOW_157_in_primary6707); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(string_literal534);

                    // jkit/java/Java.g:877:3: ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) )
                    int alt161=2;
                    alt161 = dfa161.predict(input);
                    switch (alt161) {
                        case 1 :
                            // jkit/java/Java.g:878:4: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primary6717);
                            arguments535=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments535.getTree());


                            // AST REWRITE
                            // elements: arguments, 157
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 878:14: -> ^( INVOKE 'super' ( arguments )? )
                            {
                                // jkit/java/Java.g:878:17: ^( INVOKE 'super' ( arguments )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                                adaptor.addChild(root_1, stream_157.nextNode());
                                // jkit/java/Java.g:878:34: ( arguments )?
                                if ( stream_arguments.hasNext() ) {
                                    adaptor.addChild(root_1, stream_arguments.nextTree());

                                }
                                stream_arguments.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:879:6: 
                            {

                            // AST REWRITE
                            // elements: 157
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 879:6: -> ^( VAR 'super' )
                            {
                                // jkit/java/Java.g:879:9: ^( VAR 'super' )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VAR, "VAR"), root_1);

                                adaptor.addChild(root_1, stream_157.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // jkit/java/Java.g:881:9: Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) )
                    {
                    Identifier536=(Token)match(input,Identifier,FOLLOW_Identifier_in_primary6755); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier536);

                    // jkit/java/Java.g:882:6: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) )
                    int alt162=2;
                    alt162 = dfa162.predict(input);
                    switch (alt162) {
                        case 1 :
                            // jkit/java/Java.g:883:7: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primary6771);
                            arguments537=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments537.getTree());


                            // AST REWRITE
                            // elements: Identifier, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 883:17: -> ^( INVOKE Identifier ( arguments )? )
                            {
                                // jkit/java/Java.g:883:20: ^( INVOKE Identifier ( arguments )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:883:40: ( arguments )?
                                if ( stream_arguments.hasNext() ) {
                                    adaptor.addChild(root_1, stream_arguments.nextTree());

                                }
                                stream_arguments.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:884:9: 
                            {

                            // AST REWRITE
                            // elements: Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 884:9: -> ^( VAR Identifier )
                            {
                                // jkit/java/Java.g:884:12: ^( VAR Identifier )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VAR, "VAR"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, primary_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class innerCreator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerCreator"
    // jkit/java/Java.g:888:1: innerCreator : Identifier classCreatorRest -> ^( TYPE Identifier ) ( classCreatorRest )? ;
    public final JavaParser.innerCreator_return innerCreator() throws RecognitionException {
        JavaParser.innerCreator_return retval = new JavaParser.innerCreator_return();
        retval.start = input.LT(1);
        int innerCreator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier538=null;
        JavaParser.classCreatorRest_return classCreatorRest539 = null;


        Object Identifier538_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_classCreatorRest=new RewriteRuleSubtreeStream(adaptor,"rule classCreatorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // jkit/java/Java.g:889:2: ( Identifier classCreatorRest -> ^( TYPE Identifier ) ( classCreatorRest )? )
            // jkit/java/Java.g:889:4: Identifier classCreatorRest
            {
            Identifier538=(Token)match(input,Identifier,FOLLOW_Identifier_in_innerCreator6816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier538);

            pushFollow(FOLLOW_classCreatorRest_in_innerCreator6818);
            classCreatorRest539=classCreatorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classCreatorRest.add(classCreatorRest539.getTree());


            // AST REWRITE
            // elements: classCreatorRest, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 889:32: -> ^( TYPE Identifier ) ( classCreatorRest )?
            {
                // jkit/java/Java.g:889:35: ^( TYPE Identifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_Identifier.nextNode());

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/Java.g:889:54: ( classCreatorRest )?
                if ( stream_classCreatorRest.hasNext() ) {
                    adaptor.addChild(root_0, stream_classCreatorRest.nextTree());

                }
                stream_classCreatorRest.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, innerCreator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "innerCreator"

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classCreatorRest"
    // jkit/java/Java.g:892:1: classCreatorRest : arguments ( classBody )? -> ( arguments )? ( classBody )? ;
    public final JavaParser.classCreatorRest_return classCreatorRest() throws RecognitionException {
        JavaParser.classCreatorRest_return retval = new JavaParser.classCreatorRest_return();
        retval.start = input.LT(1);
        int classCreatorRest_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.arguments_return arguments540 = null;

        JavaParser.classBody_return classBody541 = null;


        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // jkit/java/Java.g:893:2: ( arguments ( classBody )? -> ( arguments )? ( classBody )? )
            // jkit/java/Java.g:893:4: arguments ( classBody )?
            {
            pushFollow(FOLLOW_arguments_in_classCreatorRest6840);
            arguments540=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arguments.add(arguments540.getTree());
            // jkit/java/Java.g:893:14: ( classBody )?
            int alt164=2;
            alt164 = dfa164.predict(input);
            switch (alt164) {
                case 1 :
                    // jkit/java/Java.g:0:0: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_classCreatorRest6842);
                    classBody541=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody541.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classBody, arguments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 893:25: -> ( arguments )? ( classBody )?
            {
                // jkit/java/Java.g:893:28: ( arguments )?
                if ( stream_arguments.hasNext() ) {
                    adaptor.addChild(root_0, stream_arguments.nextTree());

                }
                stream_arguments.reset();
                // jkit/java/Java.g:893:39: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_classBody.nextTree());

                }
                stream_classBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, classCreatorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classCreatorRest"

    public static class explicitGenericInvocation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocation"
    // jkit/java/Java.g:896:1: explicitGenericInvocation : nonWildcardTypeArguments explicitGenericInvocationSuffix ;
    public final JavaParser.explicitGenericInvocation_return explicitGenericInvocation() throws RecognitionException {
        JavaParser.explicitGenericInvocation_return retval = new JavaParser.explicitGenericInvocation_return();
        retval.start = input.LT(1);
        int explicitGenericInvocation_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments542 = null;

        JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix543 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // jkit/java/Java.g:897:2: ( nonWildcardTypeArguments explicitGenericInvocationSuffix )
            // jkit/java/Java.g:897:4: nonWildcardTypeArguments explicitGenericInvocationSuffix
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation6863);
            nonWildcardTypeArguments542=nonWildcardTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments542.getTree());
            pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_explicitGenericInvocation6865);
            explicitGenericInvocationSuffix543=explicitGenericInvocationSuffix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, explicitGenericInvocationSuffix543.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, explicitGenericInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocation"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // jkit/java/Java.g:900:1: nonWildcardTypeArguments : '<' typeList '>' -> typeList ;
    public final JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        JavaParser.nonWildcardTypeArguments_return retval = new JavaParser.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);
        int nonWildcardTypeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal544=null;
        Token char_literal546=null;
        JavaParser.typeList_return typeList545 = null;


        Object char_literal544_tree=null;
        Object char_literal546_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // jkit/java/Java.g:901:2: ( '<' typeList '>' -> typeList )
            // jkit/java/Java.g:901:4: '<' typeList '>'
            {
            char_literal544=(Token)match(input,126,FOLLOW_126_in_nonWildcardTypeArguments6877); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal544);

            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments6879);
            typeList545=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeList.add(typeList545.getTree());
            char_literal546=(Token)match(input,128,FOLLOW_128_in_nonWildcardTypeArguments6881); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal546);



            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 901:21: -> typeList
            {
                adaptor.addChild(root_0, stream_typeList.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, nonWildcardTypeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"

    public static class explicitGenericInvocationSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocationSuffix"
    // jkit/java/Java.g:904:1: explicitGenericInvocationSuffix : ( 'super' superSuffix -> 'super' ( superSuffix )? | Identifier arguments -> Identifier ( arguments )? );
    public final JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix() throws RecognitionException {
        JavaParser.explicitGenericInvocationSuffix_return retval = new JavaParser.explicitGenericInvocationSuffix_return();
        retval.start = input.LT(1);
        int explicitGenericInvocationSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal547=null;
        Token Identifier549=null;
        JavaParser.superSuffix_return superSuffix548 = null;

        JavaParser.arguments_return arguments550 = null;


        Object string_literal547_tree=null;
        Object Identifier549_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_superSuffix=new RewriteRuleSubtreeStream(adaptor,"rule superSuffix");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // jkit/java/Java.g:905:2: ( 'super' superSuffix -> 'super' ( superSuffix )? | Identifier arguments -> Identifier ( arguments )? )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==157) ) {
                alt165=1;
            }
            else if ( (LA165_0==Identifier) ) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }
            switch (alt165) {
                case 1 :
                    // jkit/java/Java.g:905:4: 'super' superSuffix
                    {
                    string_literal547=(Token)match(input,157,FOLLOW_157_in_explicitGenericInvocationSuffix6897); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(string_literal547);

                    pushFollow(FOLLOW_superSuffix_in_explicitGenericInvocationSuffix6899);
                    superSuffix548=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_superSuffix.add(superSuffix548.getTree());


                    // AST REWRITE
                    // elements: 157, superSuffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 905:24: -> 'super' ( superSuffix )?
                    {
                        adaptor.addChild(root_0, stream_157.nextNode());
                        // jkit/java/Java.g:905:35: ( superSuffix )?
                        if ( stream_superSuffix.hasNext() ) {
                            adaptor.addChild(root_0, stream_superSuffix.nextTree());

                        }
                        stream_superSuffix.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:906:6: Identifier arguments
                    {
                    Identifier549=(Token)match(input,Identifier,FOLLOW_Identifier_in_explicitGenericInvocationSuffix6913); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier549);

                    pushFollow(FOLLOW_arguments_in_explicitGenericInvocationSuffix6915);
                    arguments550=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments550.getTree());


                    // AST REWRITE
                    // elements: Identifier, arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 906:27: -> Identifier ( arguments )?
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/Java.g:906:41: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            adaptor.addChild(root_0, stream_arguments.nextTree());

                        }
                        stream_arguments.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, explicitGenericInvocationSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocationSuffix"

    public static class superSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "superSuffix"
    // jkit/java/Java.g:909:1: superSuffix : ( arguments -> ( arguments )? | '.' Identifier ( arguments )? );
    public final JavaParser.superSuffix_return superSuffix() throws RecognitionException {
        JavaParser.superSuffix_return retval = new JavaParser.superSuffix_return();
        retval.start = input.LT(1);
        int superSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal552=null;
        Token Identifier553=null;
        JavaParser.arguments_return arguments551 = null;

        JavaParser.arguments_return arguments554 = null;


        Object char_literal552_tree=null;
        Object Identifier553_tree=null;
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // jkit/java/Java.g:910:2: ( arguments -> ( arguments )? | '.' Identifier ( arguments )? )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==158) ) {
                alt167=1;
            }
            else if ( (LA167_0==121) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // jkit/java/Java.g:910:4: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_superSuffix6934);
                    arguments551=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments551.getTree());


                    // AST REWRITE
                    // elements: arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 910:14: -> ( arguments )?
                    {
                        // jkit/java/Java.g:910:17: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            adaptor.addChild(root_0, stream_arguments.nextTree());

                        }
                        stream_arguments.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:911:6: '.' Identifier ( arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal552=(Token)match(input,121,FOLLOW_121_in_superSuffix6946); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal552_tree = (Object)adaptor.create(char_literal552);
                    adaptor.addChild(root_0, char_literal552_tree);
                    }
                    Identifier553=(Token)match(input,Identifier,FOLLOW_Identifier_in_superSuffix6948); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier553_tree = (Object)adaptor.create(Identifier553);
                    adaptor.addChild(root_0, Identifier553_tree);
                    }
                    // jkit/java/Java.g:911:21: ( arguments )?
                    int alt166=2;
                    alt166 = dfa166.predict(input);
                    switch (alt166) {
                        case 1 :
                            // jkit/java/Java.g:911:22: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_superSuffix6951);
                            arguments554=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments554.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, superSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "superSuffix"

    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selector"
    // jkit/java/Java.g:914:1: selector : ( '.' 'super' arguments -> ^( INVOKE 'super' ( arguments )? ) | '.' 'new' ( nonWildcardTypeArguments )? innerCreator -> ^( NEW innerCreator ) | '.' nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | '.' Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) ) | '[' expression ']' -> ^( ARRAYINDEX expression ) );
    public final JavaParser.selector_return selector() throws RecognitionException {
        JavaParser.selector_return retval = new JavaParser.selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal555=null;
        Token string_literal556=null;
        Token char_literal558=null;
        Token string_literal559=null;
        Token char_literal562=null;
        Token char_literal565=null;
        Token Identifier566=null;
        Token char_literal568=null;
        Token char_literal570=null;
        JavaParser.arguments_return arguments557 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments560 = null;

        JavaParser.innerCreator_return innerCreator561 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments563 = null;

        JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix564 = null;

        JavaParser.arguments_return arguments567 = null;

        JavaParser.expression_return expression569 = null;


        Object char_literal555_tree=null;
        Object string_literal556_tree=null;
        Object char_literal558_tree=null;
        Object string_literal559_tree=null;
        Object char_literal562_tree=null;
        Object char_literal565_tree=null;
        Object Identifier566_tree=null;
        Object char_literal568_tree=null;
        Object char_literal570_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_innerCreator=new RewriteRuleSubtreeStream(adaptor,"rule innerCreator");
        RewriteRuleSubtreeStream stream_explicitGenericInvocationSuffix=new RewriteRuleSubtreeStream(adaptor,"rule explicitGenericInvocationSuffix");
        RewriteRuleSubtreeStream stream_nonWildcardTypeArguments=new RewriteRuleSubtreeStream(adaptor,"rule nonWildcardTypeArguments");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // jkit/java/Java.g:915:2: ( '.' 'super' arguments -> ^( INVOKE 'super' ( arguments )? ) | '.' 'new' ( nonWildcardTypeArguments )? innerCreator -> ^( NEW innerCreator ) | '.' nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | '.' Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) ) | '[' expression ']' -> ^( ARRAYINDEX expression ) )
            int alt170=5;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==121) ) {
                switch ( input.LA(2) ) {
                case 157:
                    {
                    alt170=1;
                    }
                    break;
                case 200:
                    {
                    alt170=2;
                    }
                    break;
                case Identifier:
                    {
                    alt170=4;
                    }
                    break;
                case 126:
                    {
                    alt170=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 170, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA170_0==135) ) {
                alt170=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }
            switch (alt170) {
                case 1 :
                    // jkit/java/Java.g:915:4: '.' 'super' arguments
                    {
                    char_literal555=(Token)match(input,121,FOLLOW_121_in_selector6965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal555);

                    string_literal556=(Token)match(input,157,FOLLOW_157_in_selector6967); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(string_literal556);

                    pushFollow(FOLLOW_arguments_in_selector6969);
                    arguments557=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments557.getTree());


                    // AST REWRITE
                    // elements: arguments, 157
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 915:26: -> ^( INVOKE 'super' ( arguments )? )
                    {
                        // jkit/java/Java.g:915:29: ^( INVOKE 'super' ( arguments )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                        adaptor.addChild(root_1, stream_157.nextNode());
                        // jkit/java/Java.g:915:46: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            adaptor.addChild(root_1, stream_arguments.nextTree());

                        }
                        stream_arguments.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/Java.g:916:6: '.' 'new' ( nonWildcardTypeArguments )? innerCreator
                    {
                    char_literal558=(Token)match(input,121,FOLLOW_121_in_selector6987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal558);

                    string_literal559=(Token)match(input,200,FOLLOW_200_in_selector6989); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_200.add(string_literal559);

                    // jkit/java/Java.g:916:16: ( nonWildcardTypeArguments )?
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==126) ) {
                        alt168=1;
                    }
                    switch (alt168) {
                        case 1 :
                            // jkit/java/Java.g:916:17: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector6992);
                            nonWildcardTypeArguments560=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments560.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_innerCreator_in_selector6996);
                    innerCreator561=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_innerCreator.add(innerCreator561.getTree());


                    // AST REWRITE
                    // elements: innerCreator
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 916:57: -> ^( NEW innerCreator )
                    {
                        // jkit/java/Java.g:916:60: ^( NEW innerCreator )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                        adaptor.addChild(root_1, stream_innerCreator.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/Java.g:917:5: '.' nonWildcardTypeArguments explicitGenericInvocationSuffix
                    {
                    char_literal562=(Token)match(input,121,FOLLOW_121_in_selector7011); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal562);

                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector7013);
                    nonWildcardTypeArguments563=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments563.getTree());
                    pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_selector7015);
                    explicitGenericInvocationSuffix564=explicitGenericInvocationSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicitGenericInvocationSuffix.add(explicitGenericInvocationSuffix564.getTree());


                    // AST REWRITE
                    // elements: nonWildcardTypeArguments, explicitGenericInvocationSuffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 917:66: -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                    {
                        // jkit/java/Java.g:917:69: ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                        // jkit/java/Java.g:917:78: ^( TYPE_PARAMETER nonWildcardTypeArguments )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETER, "TYPE_PARAMETER"), root_2);

                        adaptor.addChild(root_2, stream_nonWildcardTypeArguments.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_explicitGenericInvocationSuffix.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/Java.g:918:4: '.' Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) )
                    {
                    char_literal565=(Token)match(input,121,FOLLOW_121_in_selector7034); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal565);

                    Identifier566=(Token)match(input,Identifier,FOLLOW_Identifier_in_selector7036); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier566);

                    // jkit/java/Java.g:919:3: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) )
                    int alt169=2;
                    alt169 = dfa169.predict(input);
                    switch (alt169) {
                        case 1 :
                            // jkit/java/Java.g:920:4: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector7046);
                            arguments567=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments567.getTree());


                            // AST REWRITE
                            // elements: Identifier, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 920:14: -> ^( INVOKE Identifier ( arguments )? )
                            {
                                // jkit/java/Java.g:920:17: ^( INVOKE Identifier ( arguments )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/Java.g:920:37: ( arguments )?
                                if ( stream_arguments.hasNext() ) {
                                    adaptor.addChild(root_1, stream_arguments.nextTree());

                                }
                                stream_arguments.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/Java.g:921:6: 
                            {

                            // AST REWRITE
                            // elements: Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 921:6: -> ^( DEREF Identifier )
                            {
                                // jkit/java/Java.g:921:9: ^( DEREF Identifier )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DEREF, "DEREF"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // jkit/java/Java.g:923:6: '[' expression ']'
                    {
                    char_literal568=(Token)match(input,135,FOLLOW_135_in_selector7081); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal568);

                    pushFollow(FOLLOW_expression_in_selector7083);
                    expression569=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression569.getTree());
                    char_literal570=(Token)match(input,136,FOLLOW_136_in_selector7085); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal570);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 923:25: -> ^( ARRAYINDEX expression )
                    {
                        // jkit/java/Java.g:923:28: ^( ARRAYINDEX expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYINDEX, "ARRAYINDEX"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selector"

    public static class arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // jkit/java/Java.g:926:1: arguments : '(' ( expressionList )? ')' ;
    public final JavaParser.arguments_return arguments() throws RecognitionException {
        JavaParser.arguments_return retval = new JavaParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal571=null;
        Token char_literal573=null;
        JavaParser.expressionList_return expressionList572 = null;


        Object char_literal571_tree=null;
        Object char_literal573_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // jkit/java/Java.g:927:2: ( '(' ( expressionList )? ')' )
            // jkit/java/Java.g:927:4: '(' ( expressionList )? ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal571=(Token)match(input,158,FOLLOW_158_in_arguments7104); if (state.failed) return retval;
            // jkit/java/Java.g:927:9: ( expressionList )?
            int alt171=2;
            alt171 = dfa171.predict(input);
            switch (alt171) {
                case 1 :
                    // jkit/java/Java.g:0:0: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments7107);
                    expressionList572=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList572.getTree());

                    }
                    break;

            }

            char_literal573=(Token)match(input,159,FOLLOW_159_in_arguments7110); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred1_Java
    public final void synpred1_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:205:4: ( annotations )
        // jkit/java/Java.g:205:4: annotations
        {
        pushFollow(FOLLOW_annotations_in_synpred1_Java457);
        annotations();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_Java

    // $ANTLR start synpred35_Java
    public final void synpred35_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:295:4: ( 'static' block )
        // jkit/java/Java.g:295:4: 'static' block
        {
        match(input,120,FOLLOW_120_in_synpred35_Java1190); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred35_Java1192);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_Java

    // $ANTLR start synpred37_Java
    public final void synpred37_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:296:4: ( ( 'static' )? block )
        // jkit/java/Java.g:296:4: ( 'static' )? block
        {
        // jkit/java/Java.g:296:4: ( 'static' )?
        int alt174=2;
        int LA174_0 = input.LA(1);

        if ( (LA174_0==120) ) {
            alt174=1;
        }
        switch (alt174) {
            case 1 :
                // jkit/java/Java.g:0:0: 'static'
                {
                match(input,120,FOLLOW_120_in_synpred37_Java1205); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_block_in_synpred37_Java1208);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_Java

    // $ANTLR start synpred40_Java
    public final void synpred40_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:299:9: ( methodDeclaration )
        // jkit/java/Java.g:299:9: methodDeclaration
        {
        pushFollow(FOLLOW_methodDeclaration_in_synpred40_Java1253);
        methodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_Java

    // $ANTLR start synpred41_Java
    public final void synpred41_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:300:9: ( fieldDeclaration )
        // jkit/java/Java.g:300:9: fieldDeclaration
        {
        pushFollow(FOLLOW_fieldDeclaration_in_synpred41_Java1279);
        fieldDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_Java

    // $ANTLR start synpred49_Java
    public final void synpred49_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:329:3: ( constantDeclaration )
        // jkit/java/Java.g:329:3: constantDeclaration
        {
        pushFollow(FOLLOW_constantDeclaration_in_synpred49_Java1592);
        constantDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred49_Java

    // $ANTLR start synpred50_Java
    public final void synpred50_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:330:5: ( type Identifier interfaceMethodDeclaratorRest )
        // jkit/java/Java.g:330:5: type Identifier interfaceMethodDeclaratorRest
        {
        pushFollow(FOLLOW_type_in_synpred50_Java1614);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,Identifier,FOLLOW_Identifier_in_synpred50_Java1616); if (state.failed) return ;
        pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_synpred50_Java1618);
        interfaceMethodDeclaratorRest();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred50_Java

    // $ANTLR start synpred87_Java
    public final void synpred87_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:434:16: ( '.' Identifier )
        // jkit/java/Java.g:434:16: '.' Identifier
        {
        match(input,121,FOLLOW_121_in_synpred87_Java2537); if (state.failed) return ;
        match(input,Identifier,FOLLOW_Identifier_in_synpred87_Java2539); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred87_Java

    // $ANTLR start synpred105_Java
    public final void synpred105_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:478:4: ( ( 'extends' type )? )
        // jkit/java/Java.g:478:4: ( 'extends' type )?
        {
        // jkit/java/Java.g:478:4: ( 'extends' type )?
        int alt183=2;
        int LA183_0 = input.LA(1);

        if ( (LA183_0==124) ) {
            alt183=1;
        }
        switch (alt183) {
            case 1 :
                // jkit/java/Java.g:478:5: 'extends' type
                {
                match(input,124,FOLLOW_124_in_synpred105_Java2841); if (state.failed) return ;
                pushFollow(FOLLOW_type_in_synpred105_Java2843);
                type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred105_Java

    // $ANTLR start synpred121_Java
    public final void synpred121_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:530:4: ( annotation )
        // jkit/java/Java.g:530:4: annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred121_Java3287);
        annotation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_Java

    // $ANTLR start synpred138_Java
    public final void synpred138_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:578:6: ( interfaceDeclaration ( ';' )? )
        // jkit/java/Java.g:578:6: interfaceDeclaration ( ';' )?
        {
        pushFollow(FOLLOW_interfaceDeclaration_in_synpred138_Java3535);
        interfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;
        // jkit/java/Java.g:578:27: ( ';' )?
        int alt188=2;
        int LA188_0 = input.LA(1);

        if ( (LA188_0==118) ) {
            alt188=1;
        }
        switch (alt188) {
            case 1 :
                // jkit/java/Java.g:0:0: ';'
                {
                match(input,118,FOLLOW_118_in_synpred138_Java3537); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred138_Java

    // $ANTLR start synpred145_Java
    public final void synpred145_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:607:4: ( localVariableDeclaration )
        // jkit/java/Java.g:607:4: localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred145_Java3671);
        localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred145_Java

    // $ANTLR start synpred146_Java
    public final void synpred146_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:608:4: ( classOrInterfaceDeclaration )
        // jkit/java/Java.g:608:4: classOrInterfaceDeclaration
        {
        pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred146_Java3676);
        classOrInterfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred146_Java

    // $ANTLR start synpred151_Java
    public final void synpred151_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:619:55: ( 'else' statement )
        // jkit/java/Java.g:619:55: 'else' statement
        {
        match(input,169,FOLLOW_169_in_synpred151_Java3789); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred151_Java3791);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred151_Java

    // $ANTLR start synpred156_Java
    public final void synpred156_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:624:9: ( catches 'finally' block )
        // jkit/java/Java.g:624:9: catches 'finally' block
        {
        pushFollow(FOLLOW_catches_in_synpred156_Java3920);
        catches();

        state._fsp--;
        if (state.failed) return ;
        match(input,174,FOLLOW_174_in_synpred156_Java3924); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred156_Java3926);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred156_Java

    // $ANTLR start synpred157_Java
    public final void synpred157_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:625:9: ( catches )
        // jkit/java/Java.g:625:9: catches
        {
        pushFollow(FOLLOW_catches_in_synpred157_Java3954);
        catches();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred157_Java

    // $ANTLR start synpred174_Java
    public final void synpred174_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:660:4: ( 'case' constantExpression ':' )
        // jkit/java/Java.g:660:4: 'case' constantExpression ':'
        {
        match(input,181,FOLLOW_181_in_synpred174_Java4336); if (state.failed) return ;
        pushFollow(FOLLOW_constantExpression_in_synpred174_Java4338);
        constantExpression();

        state._fsp--;
        if (state.failed) return ;
        match(input,167,FOLLOW_167_in_synpred174_Java4340); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_Java

    // $ANTLR start synpred175_Java
    public final void synpred175_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:661:4: ( 'case' enumConstantName ':' )
        // jkit/java/Java.g:661:4: 'case' enumConstantName ':'
        {
        match(input,181,FOLLOW_181_in_synpred175_Java4356); if (state.failed) return ;
        pushFollow(FOLLOW_enumConstantName_in_synpred175_Java4358);
        enumConstantName();

        state._fsp--;
        if (state.failed) return ;
        match(input,167,FOLLOW_167_in_synpred175_Java4360); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_Java

    // $ANTLR start synpred177_Java
    public final void synpred177_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:671:4: ( forVarControl )
        // jkit/java/Java.g:671:4: forVarControl
        {
        pushFollow(FOLLOW_forVarControl_in_synpred177_Java4420);
        forVarControl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_Java

    // $ANTLR start synpred182_Java
    public final void synpred182_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:676:4: ( ( variableModifier )* type variableDeclarators )
        // jkit/java/Java.g:676:4: ( variableModifier )* type variableDeclarators
        {
        // jkit/java/Java.g:676:4: ( variableModifier )*
        loop196:
        do {
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==142||LA196_0==164) ) {
                alt196=1;
            }


            switch (alt196) {
        	case 1 :
        	    // jkit/java/Java.g:0:0: variableModifier
        	    {
        	    pushFollow(FOLLOW_variableModifier_in_synpred182_Java4482);
        	    variableModifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop196;
            }
        } while (true);

        pushFollow(FOLLOW_type_in_synpred182_Java4485);
        type();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_variableDeclarators_in_synpred182_Java4487);
        variableDeclarators();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_Java

    // $ANTLR start synpred185_Java
    public final void synpred185_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:709:4: ( '=' expression )
        // jkit/java/Java.g:709:4: '=' expression
        {
        match(input,137,FOLLOW_137_in_synpred185_Java4652); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred185_Java4654);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred185_Java

    // $ANTLR start synpred186_Java
    public final void synpred186_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:710:6: ( '+' '=' expression )
        // jkit/java/Java.g:710:6: '+' '=' expression
        {
        match(input,182,FOLLOW_182_in_synpred186_Java4673); if (state.failed) return ;
        match(input,137,FOLLOW_137_in_synpred186_Java4675); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred186_Java4677);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_Java

    // $ANTLR start synpred187_Java
    public final void synpred187_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:711:6: ( '-' '=' expression )
        // jkit/java/Java.g:711:6: '-' '=' expression
        {
        match(input,183,FOLLOW_183_in_synpred187_Java4705); if (state.failed) return ;
        match(input,137,FOLLOW_137_in_synpred187_Java4707); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred187_Java4709);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_Java

    // $ANTLR start synpred188_Java
    public final void synpred188_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:712:6: ( '*' '=' expression )
        // jkit/java/Java.g:712:6: '*' '=' expression
        {
        match(input,122,FOLLOW_122_in_synpred188_Java4737); if (state.failed) return ;
        match(input,137,FOLLOW_137_in_synpred188_Java4739); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred188_Java4741);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_Java

    // $ANTLR start synpred189_Java
    public final void synpred189_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:713:6: ( '/' '=' expression )
        // jkit/java/Java.g:713:6: '/' '=' expression
        {
        match(input,184,FOLLOW_184_in_synpred189_Java4769); if (state.failed) return ;
        match(input,137,FOLLOW_137_in_synpred189_Java4771); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred189_Java4773);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_Java

    // $ANTLR start synpred190_Java
    public final void synpred190_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:714:6: ( '&=' expression )
        // jkit/java/Java.g:714:6: '&=' expression
        {
        match(input,185,FOLLOW_185_in_synpred190_Java4802); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred190_Java4804);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_Java

    // $ANTLR start synpred191_Java
    public final void synpred191_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:715:6: ( '|=' expression )
        // jkit/java/Java.g:715:6: '|=' expression
        {
        match(input,186,FOLLOW_186_in_synpred191_Java4827); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred191_Java4829);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_Java

    // $ANTLR start synpred192_Java
    public final void synpred192_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:716:6: ( '^=' expression )
        // jkit/java/Java.g:716:6: '^=' expression
        {
        match(input,187,FOLLOW_187_in_synpred192_Java4852); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred192_Java4854);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_Java

    // $ANTLR start synpred193_Java
    public final void synpred193_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:717:6: ( '%' '=' expression )
        // jkit/java/Java.g:717:6: '%' '=' expression
        {
        match(input,188,FOLLOW_188_in_synpred193_Java4882); if (state.failed) return ;
        match(input,137,FOLLOW_137_in_synpred193_Java4884); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred193_Java4886);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_Java

    // $ANTLR start synpred194_Java
    public final void synpred194_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:718:6: ( '<' '<' '=' expression )
        // jkit/java/Java.g:718:6: '<' '<' '=' expression
        {
        match(input,126,FOLLOW_126_in_synpred194_Java4914); if (state.failed) return ;
        match(input,126,FOLLOW_126_in_synpred194_Java4916); if (state.failed) return ;
        match(input,137,FOLLOW_137_in_synpred194_Java4918); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred194_Java4920);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred194_Java

    // $ANTLR start synpred195_Java
    public final void synpred195_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:719:6: ( '>' '>' '=' expression )
        // jkit/java/Java.g:719:6: '>' '>' '=' expression
        {
        match(input,128,FOLLOW_128_in_synpred195_Java4948); if (state.failed) return ;
        match(input,128,FOLLOW_128_in_synpred195_Java4950); if (state.failed) return ;
        match(input,137,FOLLOW_137_in_synpred195_Java4952); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred195_Java4954);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred195_Java

    // $ANTLR start synpred196_Java
    public final void synpred196_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:720:6: ( '>' '>' '>' '=' expression )
        // jkit/java/Java.g:720:6: '>' '>' '>' '=' expression
        {
        match(input,128,FOLLOW_128_in_synpred196_Java4980); if (state.failed) return ;
        match(input,128,FOLLOW_128_in_synpred196_Java4982); if (state.failed) return ;
        match(input,128,FOLLOW_128_in_synpred196_Java4984); if (state.failed) return ;
        match(input,137,FOLLOW_137_in_synpred196_Java4986); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred196_Java4988);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred196_Java

    // $ANTLR start synpred207_Java
    public final void synpred207_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:794:8: ( ( '<' shiftExpression ) )
        // jkit/java/Java.g:794:8: ( '<' shiftExpression )
        {
        // jkit/java/Java.g:794:8: ( '<' shiftExpression )
        // jkit/java/Java.g:794:9: '<' shiftExpression
        {
        match(input,126,FOLLOW_126_in_synpred207_Java5625); if (state.failed) return ;
        pushFollow(FOLLOW_shiftExpression_in_synpred207_Java5627);
        shiftExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred207_Java

    // $ANTLR start synpred211_Java
    public final void synpred211_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:804:7: ( ( '<' '<' | '>' '>' ) additiveExpression )
        // jkit/java/Java.g:804:7: ( '<' '<' | '>' '>' ) additiveExpression
        {
        // jkit/java/Java.g:804:7: ( '<' '<' | '>' '>' )
        int alt197=2;
        int LA197_0 = input.LA(1);

        if ( (LA197_0==126) ) {
            alt197=1;
        }
        else if ( (LA197_0==128) ) {
            alt197=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 197, 0, input);

            throw nvae;
        }
        switch (alt197) {
            case 1 :
                // jkit/java/Java.g:804:8: '<' '<'
                {
                match(input,126,FOLLOW_126_in_synpred211_Java5739); if (state.failed) return ;
                match(input,126,FOLLOW_126_in_synpred211_Java5741); if (state.failed) return ;

                }
                break;
            case 2 :
                // jkit/java/Java.g:804:19: '>' '>'
                {
                match(input,128,FOLLOW_128_in_synpred211_Java5745); if (state.failed) return ;
                match(input,128,FOLLOW_128_in_synpred211_Java5747); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_additiveExpression_in_synpred211_Java5750);
        additiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred211_Java

    // $ANTLR start synpred212_Java
    public final void synpred212_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:804:6: ( ( ( '<' '<' | '>' '>' ) additiveExpression )+ )
        // jkit/java/Java.g:804:6: ( ( '<' '<' | '>' '>' ) additiveExpression )+
        {
        // jkit/java/Java.g:804:6: ( ( '<' '<' | '>' '>' ) additiveExpression )+
        int cnt199=0;
        loop199:
        do {
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==126||LA199_0==128) ) {
                alt199=1;
            }


            switch (alt199) {
        	case 1 :
        	    // jkit/java/Java.g:804:7: ( '<' '<' | '>' '>' ) additiveExpression
        	    {
        	    // jkit/java/Java.g:804:7: ( '<' '<' | '>' '>' )
        	    int alt198=2;
        	    int LA198_0 = input.LA(1);

        	    if ( (LA198_0==126) ) {
        	        alt198=1;
        	    }
        	    else if ( (LA198_0==128) ) {
        	        alt198=2;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        NoViableAltException nvae =
        	            new NoViableAltException("", 198, 0, input);

        	        throw nvae;
        	    }
        	    switch (alt198) {
        	        case 1 :
        	            // jkit/java/Java.g:804:8: '<' '<'
        	            {
        	            match(input,126,FOLLOW_126_in_synpred212_Java5739); if (state.failed) return ;
        	            match(input,126,FOLLOW_126_in_synpred212_Java5741); if (state.failed) return ;

        	            }
        	            break;
        	        case 2 :
        	            // jkit/java/Java.g:804:19: '>' '>'
        	            {
        	            match(input,128,FOLLOW_128_in_synpred212_Java5745); if (state.failed) return ;
        	            match(input,128,FOLLOW_128_in_synpred212_Java5747); if (state.failed) return ;

        	            }
        	            break;

        	    }

        	    pushFollow(FOLLOW_additiveExpression_in_synpred212_Java5750);
        	    additiveExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt199 >= 1 ) break loop199;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(199, input);
                    throw eee;
            }
            cnt199++;
        } while (true);


        }
    }
    // $ANTLR end synpred212_Java

    // $ANTLR start synpred213_Java
    public final void synpred213_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:806:9: ( '>' '>' '>' additiveExpression )
        // jkit/java/Java.g:806:9: '>' '>' '>' additiveExpression
        {
        match(input,128,FOLLOW_128_in_synpred213_Java5784); if (state.failed) return ;
        match(input,128,FOLLOW_128_in_synpred213_Java5786); if (state.failed) return ;
        match(input,128,FOLLOW_128_in_synpred213_Java5788); if (state.failed) return ;
        pushFollow(FOLLOW_additiveExpression_in_synpred213_Java5790);
        additiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred213_Java

    // $ANTLR start synpred214_Java
    public final void synpred214_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:806:8: ( ( '>' '>' '>' additiveExpression )+ )
        // jkit/java/Java.g:806:8: ( '>' '>' '>' additiveExpression )+
        {
        // jkit/java/Java.g:806:8: ( '>' '>' '>' additiveExpression )+
        int cnt200=0;
        loop200:
        do {
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==128) ) {
                alt200=1;
            }


            switch (alt200) {
        	case 1 :
        	    // jkit/java/Java.g:806:9: '>' '>' '>' additiveExpression
        	    {
        	    match(input,128,FOLLOW_128_in_synpred214_Java5784); if (state.failed) return ;
        	    match(input,128,FOLLOW_128_in_synpred214_Java5786); if (state.failed) return ;
        	    match(input,128,FOLLOW_128_in_synpred214_Java5788); if (state.failed) return ;
        	    pushFollow(FOLLOW_additiveExpression_in_synpred214_Java5790);
        	    additiveExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt200 >= 1 ) break loop200;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(200, input);
                    throw eee;
            }
            cnt200++;
        } while (true);


        }
    }
    // $ANTLR end synpred214_Java

    // $ANTLR start synpred228_Java
    public final void synpred228_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:838:9: ( castExpression )
        // jkit/java/Java.g:838:9: castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred228_Java6137);
        castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred228_Java

    // $ANTLR start synpred235_Java
    public final void synpred235_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:854:8: ( '(' primitiveType ')' unaryExpression )
        // jkit/java/Java.g:854:8: '(' primitiveType ')' unaryExpression
        {
        match(input,158,FOLLOW_158_in_synpred235_Java6287); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred235_Java6289);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;
        match(input,159,FOLLOW_159_in_synpred235_Java6291); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred235_Java6293);
        unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred235_Java

    // $ANTLR start synpred236_Java
    public final void synpred236_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:855:8: ( '(' type ')' unaryExpressionNotPlusMinus )
        // jkit/java/Java.g:855:8: '(' type ')' unaryExpressionNotPlusMinus
        {
        match(input,158,FOLLOW_158_in_synpred236_Java6316); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred236_Java6318);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,159,FOLLOW_159_in_synpred236_Java6320); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_synpred236_Java6322);
        unaryExpressionNotPlusMinus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_Java

    // $ANTLR start synpred241_Java
    public final void synpred241_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:865:8: ( '[' expression ']' )
        // jkit/java/Java.g:865:8: '[' expression ']'
        {
        match(input,135,FOLLOW_135_in_synpred241_Java6431); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred241_Java6433);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,136,FOLLOW_136_in_synpred241_Java6435); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_Java

    // $ANTLR start synpred245_Java
    public final void synpred245_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:863:9: ( 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer ) )
        // jkit/java/Java.g:863:9: 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer )
        {
        match(input,200,FOLLOW_200_in_synpred245_Java6410); if (state.failed) return ;
        // jkit/java/Java.g:863:15: ( nonWildcardTypeArguments )?
        int alt207=2;
        int LA207_0 = input.LA(1);

        if ( (LA207_0==126) ) {
            alt207=1;
        }
        switch (alt207) {
            case 1 :
                // jkit/java/Java.g:0:0: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred245_Java6412);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_primitiveType_in_synpred245_Java6415);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;
        // jkit/java/Java.g:864:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer )
        int alt211=2;
        alt211 = dfa211.predict(input);
        switch (alt211) {
            case 1 :
                // jkit/java/Java.g:865:7: ( '[' expression ']' )+ ( '[' ']' )*
                {
                // jkit/java/Java.g:865:7: ( '[' expression ']' )+
                int cnt208=0;
                loop208:
                do {
                    int alt208=2;
                    alt208 = dfa208.predict(input);
                    switch (alt208) {
                	case 1 :
                	    // jkit/java/Java.g:865:8: '[' expression ']'
                	    {
                	    match(input,135,FOLLOW_135_in_synpred245_Java6431); if (state.failed) return ;
                	    pushFollow(FOLLOW_expression_in_synpred245_Java6433);
                	    expression();

                	    state._fsp--;
                	    if (state.failed) return ;
                	    match(input,136,FOLLOW_136_in_synpred245_Java6435); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt208 >= 1 ) break loop208;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(208, input);
                            throw eee;
                    }
                    cnt208++;
                } while (true);

                // jkit/java/Java.g:865:29: ( '[' ']' )*
                loop209:
                do {
                    int alt209=2;
                    int LA209_0 = input.LA(1);

                    if ( (LA209_0==135) ) {
                        alt209=1;
                    }


                    switch (alt209) {
                	case 1 :
                	    // jkit/java/Java.g:865:30: '[' ']'
                	    {
                	    match(input,135,FOLLOW_135_in_synpred245_Java6440); if (state.failed) return ;
                	    match(input,136,FOLLOW_136_in_synpred245_Java6442); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop209;
                    }
                } while (true);


                }
                break;
            case 2 :
                // jkit/java/Java.g:866:9: ( '[' ']' )+ arrayInitializer
                {
                // jkit/java/Java.g:866:9: ( '[' ']' )+
                int cnt210=0;
                loop210:
                do {
                    int alt210=2;
                    int LA210_0 = input.LA(1);

                    if ( (LA210_0==135) ) {
                        alt210=1;
                    }


                    switch (alt210) {
                	case 1 :
                	    // jkit/java/Java.g:866:10: '[' ']'
                	    {
                	    match(input,135,FOLLOW_135_in_synpred245_Java6473); if (state.failed) return ;
                	    match(input,136,FOLLOW_136_in_synpred245_Java6475); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt210 >= 1 ) break loop210;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(210, input);
                            throw eee;
                    }
                    cnt210++;
                } while (true);

                pushFollow(FOLLOW_arrayInitializer_in_synpred245_Java6479);
                arrayInitializer();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred245_Java

    // $ANTLR start synpred248_Java
    public final void synpred248_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:870:8: ( '[' expression ']' )
        // jkit/java/Java.g:870:8: '[' expression ']'
        {
        match(input,135,FOLLOW_135_in_synpred248_Java6545); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred248_Java6547);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,136,FOLLOW_136_in_synpred248_Java6549); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred248_Java

    // $ANTLR start synpred253_Java
    public final void synpred253_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:868:9: ( 'new' ( nonWildcardTypeArguments )? ( refComponent ( '.' refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest ) )
        // jkit/java/Java.g:868:9: 'new' ( nonWildcardTypeArguments )? ( refComponent ( '.' refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest )
        {
        match(input,200,FOLLOW_200_in_synpred253_Java6511); if (state.failed) return ;
        // jkit/java/Java.g:868:15: ( nonWildcardTypeArguments )?
        int alt215=2;
        int LA215_0 = input.LA(1);

        if ( (LA215_0==126) ) {
            alt215=1;
        }
        switch (alt215) {
            case 1 :
                // jkit/java/Java.g:0:0: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred253_Java6513);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // jkit/java/Java.g:868:41: ( refComponent ( '.' refComponent )* )
        // jkit/java/Java.g:868:42: refComponent ( '.' refComponent )*
        {
        pushFollow(FOLLOW_refComponent_in_synpred253_Java6519);
        refComponent();

        state._fsp--;
        if (state.failed) return ;
        // jkit/java/Java.g:868:58: ( '.' refComponent )*
        loop216:
        do {
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==121) ) {
                alt216=1;
            }


            switch (alt216) {
        	case 1 :
        	    // jkit/java/Java.g:868:59: '.' refComponent
        	    {
        	    match(input,121,FOLLOW_121_in_synpred253_Java6522); if (state.failed) return ;
        	    pushFollow(FOLLOW_refComponent_in_synpred253_Java6526);
        	    refComponent();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop216;
            }
        } while (true);


        }

        // jkit/java/Java.g:869:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest )
        int alt220=3;
        alt220 = dfa220.predict(input);
        switch (alt220) {
            case 1 :
                // jkit/java/Java.g:870:7: ( '[' expression ']' )+ ( '[' ']' )*
                {
                // jkit/java/Java.g:870:7: ( '[' expression ']' )+
                int cnt217=0;
                loop217:
                do {
                    int alt217=2;
                    alt217 = dfa217.predict(input);
                    switch (alt217) {
                	case 1 :
                	    // jkit/java/Java.g:870:8: '[' expression ']'
                	    {
                	    match(input,135,FOLLOW_135_in_synpred253_Java6545); if (state.failed) return ;
                	    pushFollow(FOLLOW_expression_in_synpred253_Java6547);
                	    expression();

                	    state._fsp--;
                	    if (state.failed) return ;
                	    match(input,136,FOLLOW_136_in_synpred253_Java6549); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt217 >= 1 ) break loop217;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(217, input);
                            throw eee;
                    }
                    cnt217++;
                } while (true);

                // jkit/java/Java.g:870:29: ( '[' ']' )*
                loop218:
                do {
                    int alt218=2;
                    int LA218_0 = input.LA(1);

                    if ( (LA218_0==135) ) {
                        alt218=1;
                    }


                    switch (alt218) {
                	case 1 :
                	    // jkit/java/Java.g:870:30: '[' ']'
                	    {
                	    match(input,135,FOLLOW_135_in_synpred253_Java6554); if (state.failed) return ;
                	    match(input,136,FOLLOW_136_in_synpred253_Java6556); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop218;
                    }
                } while (true);


                }
                break;
            case 2 :
                // jkit/java/Java.g:871:9: ( '[' ']' )+ arrayInitializer
                {
                // jkit/java/Java.g:871:9: ( '[' ']' )+
                int cnt219=0;
                loop219:
                do {
                    int alt219=2;
                    int LA219_0 = input.LA(1);

                    if ( (LA219_0==135) ) {
                        alt219=1;
                    }


                    switch (alt219) {
                	case 1 :
                	    // jkit/java/Java.g:871:10: '[' ']'
                	    {
                	    match(input,135,FOLLOW_135_in_synpred253_Java6589); if (state.failed) return ;
                	    match(input,136,FOLLOW_136_in_synpred253_Java6591); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt219 >= 1 ) break loop219;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(219, input);
                            throw eee;
                    }
                    cnt219++;
                } while (true);

                pushFollow(FOLLOW_arrayInitializer_in_synpred253_Java6595);
                arrayInitializer();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // jkit/java/Java.g:872:9: classCreatorRest
                {
                pushFollow(FOLLOW_classCreatorRest_in_synpred253_Java6624);
                classCreatorRest();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred253_Java

    // $ANTLR start synpred254_Java
    public final void synpred254_Java_fragment() throws RecognitionException {   
        // jkit/java/Java.g:874:9: ( type '.' 'class' )
        // jkit/java/Java.g:874:9: type '.' 'class'
        {
        pushFollow(FOLLOW_type_in_synpred254_Java6656);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,121,FOLLOW_121_in_synpred254_Java6658); if (state.failed) return ;
        match(input,123,FOLLOW_123_in_synpred254_Java6660); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_Java

    // Delegated rules

    public final boolean synpred253_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA10 dfa10 = new DFA10(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA163 dfa163 = new DFA163(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA162 dfa162 = new DFA162(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA171 dfa171 = new DFA171(this);
    protected DFA211 dfa211 = new DFA211(this);
    protected DFA208 dfa208 = new DFA208(this);
    protected DFA220 dfa220 = new DFA220(this);
    protected DFA217 dfa217 = new DFA217(this);
    static final String DFA1_eotS =
        "\26\uffff";
    static final String DFA1_eofS =
        "\26\uffff";
    static final String DFA1_minS =
        "\1\12\1\142\22\uffff\1\0\1\uffff";
    static final String DFA1_maxS =
        "\1\u00a4\1\u0084\22\uffff\1\0\1\uffff";
    static final String DFA1_acceptS =
        "\2\uffff\1\2\22\uffff\1\1";
    static final String DFA1_specialS =
        "\24\uffff\1\0\1\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\2\152\uffff\4\2\2\uffff\1\2\10\uffff\1\2\5\uffff\12\2\20"+
            "\uffff\1\1",
            "\1\24\41\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "205:4: ( annotations )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA1_20 = input.LA(1);

                         
                        int index1_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Java()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index1_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 1, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA2_eotS =
        "\23\uffff";
    static final String DFA2_eofS =
        "\23\uffff";
    static final String DFA2_minS =
        "\1\12\22\uffff";
    static final String DFA2_maxS =
        "\1\u00a4\22\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\1\1\2\20\uffff";
    static final String DFA2_specialS =
        "\23\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\2\152\uffff\1\1\3\2\2\uffff\1\2\10\uffff\1\2\5\uffff\12\2"+
            "\20\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "205:17: ( packageDeclaration )?";
        }
    }
    static final String DFA3_eotS =
        "\22\uffff";
    static final String DFA3_eofS =
        "\22\uffff";
    static final String DFA3_minS =
        "\1\12\21\uffff";
    static final String DFA3_maxS =
        "\1\u00a4\21\uffff";
    static final String DFA3_acceptS =
        "\1\uffff\1\2\17\uffff\1\1";
    static final String DFA3_specialS =
        "\22\uffff}>";
    static final String[] DFA3_transitionS = {
            "\1\1\153\uffff\1\1\1\21\1\1\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\1\20\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "()* loopback of 205:37: ( importDeclaration )*";
        }
    }
    static final String DFA4_eotS =
        "\22\uffff";
    static final String DFA4_eofS =
        "\1\1\21\uffff";
    static final String DFA4_minS =
        "\1\12\21\uffff";
    static final String DFA4_maxS =
        "\1\u00a4\21\uffff";
    static final String DFA4_acceptS =
        "\1\uffff\1\2\1\1\17\uffff";
    static final String DFA4_specialS =
        "\22\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\2\153\uffff\1\2\1\uffff\1\2\2\uffff\1\2\10\uffff\1\2\5\uffff"+
            "\12\2\20\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 205:56: ( typeDeclaration )+";
        }
    }
    static final String DFA10_eotS =
        "\21\uffff";
    static final String DFA10_eofS =
        "\21\uffff";
    static final String DFA10_minS =
        "\1\12\20\uffff";
    static final String DFA10_maxS =
        "\1\u00a4\20\uffff";
    static final String DFA10_acceptS =
        "\1\uffff\1\1\16\uffff\1\2";
    static final String DFA10_specialS =
        "\21\uffff}>";
    static final String[] DFA10_transitionS = {
            "\1\1\153\uffff\1\20\1\uffff\1\1\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\1\20\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA10_eot = DFA.unpackEncodedString(DFA10_eotS);
    static final short[] DFA10_eof = DFA.unpackEncodedString(DFA10_eofS);
    static final char[] DFA10_min = DFA.unpackEncodedStringToUnsignedChars(DFA10_minS);
    static final char[] DFA10_max = DFA.unpackEncodedStringToUnsignedChars(DFA10_maxS);
    static final short[] DFA10_accept = DFA.unpackEncodedString(DFA10_acceptS);
    static final short[] DFA10_special = DFA.unpackEncodedString(DFA10_specialS);
    static final short[][] DFA10_transition;

    static {
        int numStates = DFA10_transitionS.length;
        DFA10_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA10_transition[i] = DFA.unpackEncodedString(DFA10_transitionS[i]);
        }
    }

    class DFA10 extends DFA {

        public DFA10(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = DFA10_eot;
            this.eof = DFA10_eof;
            this.min = DFA10_min;
            this.max = DFA10_max;
            this.accept = DFA10_accept;
            this.special = DFA10_special;
            this.transition = DFA10_transition;
        }
        public String getDescription() {
            return "220:1: typeDeclaration : ( classOrInterfaceDeclaration | ';' );";
        }
    }
    static final String DFA11_eotS =
        "\22\uffff";
    static final String DFA11_eofS =
        "\22\uffff";
    static final String DFA11_minS =
        "\1\12\3\uffff\1\142\15\uffff";
    static final String DFA11_maxS =
        "\1\u00a4\3\uffff\1\u0084\15\uffff";
    static final String DFA11_acceptS =
        "\1\uffff\1\2\3\uffff\1\1\14\uffff";
    static final String DFA11_specialS =
        "\22\uffff}>";
    static final String[] DFA11_transitionS = {
            "\1\1\155\uffff\1\5\2\uffff\1\1\10\uffff\1\1\5\uffff\12\5\20"+
            "\uffff\1\4",
            "",
            "",
            "",
            "\1\5\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 226:4: ( modifier )*";
        }
    }
    static final String DFA26_eotS =
        "\30\uffff";
    static final String DFA26_eofS =
        "\1\1\27\uffff";
    static final String DFA26_minS =
        "\1\12\27\uffff";
    static final String DFA26_maxS =
        "\1\u00a4\27\uffff";
    static final String DFA26_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\24\uffff";
    static final String DFA26_specialS =
        "\30\uffff}>";
    static final String[] DFA26_transitionS = {
            "\1\3\127\uffff\1\3\23\uffff\1\3\1\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\3\3\uffff\1\3\1\1\2\3\4\uffff\22\3\10\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "()* loopback of 269:8: ( classBodyDeclaration )*";
        }
    }
    static final String DFA31_eotS =
        "\27\uffff";
    static final String DFA31_eofS =
        "\27\uffff";
    static final String DFA31_minS =
        "\1\12\26\uffff";
    static final String DFA31_maxS =
        "\1\u00a4\26\uffff";
    static final String DFA31_acceptS =
        "\1\uffff\1\2\1\1\24\uffff";
    static final String DFA31_specialS =
        "\27\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\2\127\uffff\1\2\23\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\1\2\2\4\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "()* loopback of 286:9: ( classBodyDeclaration )*";
        }
    }
    static final String DFA32_eotS =
        "\26\uffff";
    static final String DFA32_eofS =
        "\26\uffff";
    static final String DFA32_minS =
        "\1\12\25\uffff";
    static final String DFA32_maxS =
        "\1\u00a4\25\uffff";
    static final String DFA32_acceptS =
        "\1\uffff\1\2\1\1\23\uffff";
    static final String DFA32_specialS =
        "\26\uffff}>";
    static final String[] DFA32_transitionS = {
            "\1\2\127\uffff\1\2\23\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\1\2\2\4\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "()* loopback of 290:9: ( interfaceBodyDeclaration )*";
        }
    }
    static final String DFA36_eotS =
        "\53\uffff";
    static final String DFA36_eofS =
        "\53\uffff";
    static final String DFA36_minS =
        "\1\12\1\uffff\1\12\23\uffff\1\0\24\uffff";
    static final String DFA36_maxS =
        "\1\u00a4\1\uffff\1\u00a4\23\uffff\1\0\24\uffff";
    static final String DFA36_acceptS =
        "\1\uffff\1\1\1\uffff\1\3\1\4\45\uffff\1\2";
    static final String DFA36_specialS =
        "\26\uffff\1\0\24\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\4\127\uffff\1\4\23\uffff\1\1\1\uffff\1\2\2\uffff\1\4\2\uffff"+
            "\1\4\3\uffff\1\3\1\uffff\2\4\4\uffff\22\4\10\uffff\1\4",
            "",
            "\1\4\127\uffff\1\4\25\uffff\1\4\2\uffff\1\4\2\uffff\1\4\3\uffff"+
            "\1\26\1\uffff\2\4\4\uffff\22\4\10\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "293:1: classBodyDeclaration : ( ';' | 'static' block -> ^( STATIC block ) | ( 'static' )? block -> block | ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_22 = input.LA(1);

                         
                        int index36_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_Java()) ) {s = 42;}

                        else if ( (synpred37_Java()) ) {s = 3;}

                         
                        input.seek(index36_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA34_eotS =
        "\26\uffff";
    static final String DFA34_eofS =
        "\26\uffff";
    static final String DFA34_minS =
        "\1\12\5\uffff\1\142\17\uffff";
    static final String DFA34_maxS =
        "\1\u00a4\5\uffff\1\u0084\17\uffff";
    static final String DFA34_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\14\uffff";
    static final String DFA34_specialS =
        "\26\uffff}>";
    static final String[] DFA34_transitionS = {
            "\1\1\127\uffff\1\1\25\uffff\1\11\2\uffff\1\1\2\uffff\1\1\5\uffff"+
            "\2\1\4\uffff\12\11\10\1\10\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "\1\11\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA34_eot = DFA.unpackEncodedString(DFA34_eotS);
    static final short[] DFA34_eof = DFA.unpackEncodedString(DFA34_eofS);
    static final char[] DFA34_min = DFA.unpackEncodedStringToUnsignedChars(DFA34_minS);
    static final char[] DFA34_max = DFA.unpackEncodedStringToUnsignedChars(DFA34_maxS);
    static final short[] DFA34_accept = DFA.unpackEncodedString(DFA34_acceptS);
    static final short[] DFA34_special = DFA.unpackEncodedString(DFA34_specialS);
    static final short[][] DFA34_transition;

    static {
        int numStates = DFA34_transitionS.length;
        DFA34_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA34_transition[i] = DFA.unpackEncodedString(DFA34_transitionS[i]);
        }
    }

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = DFA34_eot;
            this.eof = DFA34_eof;
            this.min = DFA34_min;
            this.max = DFA34_max;
            this.accept = DFA34_accept;
            this.special = DFA34_special;
            this.transition = DFA34_transition;
        }
        public String getDescription() {
            return "()* loopback of 297:4: ( modifier )*";
        }
    }
    static final String DFA35_eotS =
        "\22\uffff";
    static final String DFA35_eofS =
        "\22\uffff";
    static final String DFA35_minS =
        "\1\12\1\uffff\2\142\5\uffff\4\0\1\uffff\2\0\2\uffff";
    static final String DFA35_maxS =
        "\1\u00a4\1\uffff\1\u009e\1\u0087\5\uffff\4\0\1\uffff\2\0\2\uffff";
    static final String DFA35_acceptS =
        "\1\uffff\1\1\2\uffff\1\4\1\6\1\uffff\1\7\1\10\4\uffff\1\5\2\uffff"+
        "\1\2\1\3";
    static final String DFA35_specialS =
        "\11\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\2\uffff}>";
    static final String[] DFA35_transitionS = {
            "\1\10\127\uffff\1\2\30\uffff\1\7\2\uffff\1\1\5\uffff\1\5\1\4"+
            "\16\uffff\10\3\10\uffff\1\5",
            "",
            "\1\14\26\uffff\1\12\4\uffff\1\11\10\uffff\1\13\26\uffff\1\15",
            "\1\17\44\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "297:14: ( genericMethodOrConstructorDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? methodDeclaration ) | fieldDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? fieldDeclaration ) | 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( NONE ) constructorDeclaratorRest ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA35_9 = input.LA(1);

                         
                        int index35_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_Java()) ) {s = 16;}

                        else if ( (synpred41_Java()) ) {s = 17;}

                         
                        input.seek(index35_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA35_10 = input.LA(1);

                         
                        int index35_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_Java()) ) {s = 16;}

                        else if ( (synpred41_Java()) ) {s = 17;}

                         
                        input.seek(index35_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA35_11 = input.LA(1);

                         
                        int index35_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_Java()) ) {s = 16;}

                        else if ( (synpred41_Java()) ) {s = 17;}

                         
                        input.seek(index35_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA35_12 = input.LA(1);

                         
                        int index35_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_Java()) ) {s = 16;}

                        else if ( (synpred41_Java()) ) {s = 17;}

                         
                        input.seek(index35_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA35_14 = input.LA(1);

                         
                        int index35_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_Java()) ) {s = 16;}

                        else if ( (synpred41_Java()) ) {s = 17;}

                         
                        input.seek(index35_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA35_15 = input.LA(1);

                         
                        int index35_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_Java()) ) {s = 16;}

                        else if ( (synpred41_Java()) ) {s = 17;}

                         
                        input.seek(index35_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 35, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA40_eotS =
        "\25\uffff";
    static final String DFA40_eofS =
        "\25\uffff";
    static final String DFA40_minS =
        "\1\12\24\uffff";
    static final String DFA40_maxS =
        "\1\u00a4\24\uffff";
    static final String DFA40_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA40_specialS =
        "\25\uffff}>";
    static final String[] DFA40_transitionS = {
            "\1\1\127\uffff\1\1\23\uffff\1\24\1\uffff\1\1\2\uffff\1\1\2\uffff"+
            "\1\1\5\uffff\2\1\4\uffff\22\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "327:1: interfaceBodyDeclaration : ( ( modifier )* ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) ) | ';' );";
        }
    }
    static final String DFA38_eotS =
        "\26\uffff";
    static final String DFA38_eofS =
        "\26\uffff";
    static final String DFA38_minS =
        "\1\12\5\uffff\1\142\17\uffff";
    static final String DFA38_maxS =
        "\1\u00a4\5\uffff\1\u0084\17\uffff";
    static final String DFA38_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\14\uffff";
    static final String DFA38_specialS =
        "\26\uffff}>";
    static final String[] DFA38_transitionS = {
            "\1\1\127\uffff\1\1\25\uffff\1\11\2\uffff\1\1\2\uffff\1\1\5\uffff"+
            "\2\1\4\uffff\12\11\10\1\10\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "\1\11\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "()* loopback of 328:4: ( modifier )*";
        }
    }
    static final String DFA39_eotS =
        "\21\uffff";
    static final String DFA39_eofS =
        "\21\uffff";
    static final String DFA39_minS =
        "\1\12\2\142\6\uffff\6\0\2\uffff";
    static final String DFA39_maxS =
        "\1\u00a4\2\u0087\6\uffff\6\0\2\uffff";
    static final String DFA39_acceptS =
        "\3\uffff\1\3\1\4\1\5\1\uffff\1\6\1\7\6\uffff\1\1\1\2";
    static final String DFA39_specialS =
        "\11\uffff\1\0\1\1\1\2\1\3\1\4\1\5\2\uffff}>";
    static final String[] DFA39_transitionS = {
            "\1\10\127\uffff\1\1\30\uffff\1\7\2\uffff\1\3\5\uffff\1\5\1\4"+
            "\16\uffff\10\2\10\uffff\1\5",
            "\1\14\26\uffff\1\12\4\uffff\1\11\10\uffff\1\13",
            "\1\16\44\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "328:14: ( constantDeclaration -> ^( FIELD ( ^( MODIFIERS ( modifier )* ) )? constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? interfaceGenericMethodDecl ) | 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ( ^( MODIFIERS ( modifier )* ) )? Identifier ^( TYPE VOID ) ( voidInterfaceMethodDeclaratorRest )? ) | interfaceDeclaration -> ^( INTERFACE ( ^( MODIFIERS ( modifier )* ) )? interfaceDeclaration ) | classDeclaration -> ^( CLASS ( ^( MODIFIERS ( modifier )* ) )? classDeclaration ) | enumDeclaration -> ^( ENUM ( ^( MODIFIERS ( modifier )* ) )? enumDeclaration ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_9 = input.LA(1);

                         
                        int index39_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_Java()) ) {s = 15;}

                        else if ( (synpred50_Java()) ) {s = 16;}

                         
                        input.seek(index39_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA39_10 = input.LA(1);

                         
                        int index39_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_Java()) ) {s = 15;}

                        else if ( (synpred50_Java()) ) {s = 16;}

                         
                        input.seek(index39_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA39_11 = input.LA(1);

                         
                        int index39_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_Java()) ) {s = 15;}

                        else if ( (synpred50_Java()) ) {s = 16;}

                         
                        input.seek(index39_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA39_12 = input.LA(1);

                         
                        int index39_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_Java()) ) {s = 15;}

                        else if ( (synpred50_Java()) ) {s = 16;}

                         
                        input.seek(index39_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA39_13 = input.LA(1);

                         
                        int index39_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_Java()) ) {s = 15;}

                        else if ( (synpred50_Java()) ) {s = 16;}

                         
                        input.seek(index39_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA39_14 = input.LA(1);

                         
                        int index39_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_Java()) ) {s = 15;}

                        else if ( (synpred50_Java()) ) {s = 16;}

                         
                        input.seek(index39_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA56_eotS =
        "\25\uffff";
    static final String DFA56_eofS =
        "\25\uffff";
    static final String DFA56_minS =
        "\1\142\24\uffff";
    static final String DFA56_maxS =
        "\1\u00c8\24\uffff";
    static final String DFA56_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA56_specialS =
        "\25\uffff}>";
    static final String[] DFA56_transitionS = {
            "\7\2\25\uffff\1\2\3\uffff\1\1\2\uffff\1\2\16\uffff\10\2\1\uffff"+
            "\2\2\2\uffff\3\2\22\uffff\2\2\14\uffff\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "409:1: variableInitializer : ( arrayInitializer | expression );";
        }
    }
    static final String DFA59_eotS =
        "\26\uffff";
    static final String DFA59_eofS =
        "\26\uffff";
    static final String DFA59_minS =
        "\1\142\25\uffff";
    static final String DFA59_maxS =
        "\1\u00c8\25\uffff";
    static final String DFA59_acceptS =
        "\1\uffff\1\1\23\uffff\1\2";
    static final String DFA59_specialS =
        "\26\uffff}>";
    static final String[] DFA59_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\1\1\25\1\uffff\1\1\16\uffff\10\1"+
            "\1\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "415:8: ( variableInitializer ( ',' variableInitializer )* ( ',' )? )?";
        }
    }
    static final String DFA57_eotS =
        "\30\uffff";
    static final String DFA57_eofS =
        "\30\uffff";
    static final String DFA57_minS =
        "\1\177\1\142\26\uffff";
    static final String DFA57_maxS =
        "\1\u0083\1\u00c8\26\uffff";
    static final String DFA57_acceptS =
        "\2\uffff\1\2\1\1\24\uffff";
    static final String DFA57_specialS =
        "\30\uffff}>";
    static final String[] DFA57_transitionS = {
            "\1\1\3\uffff\1\2",
            "\7\3\25\uffff\1\3\3\uffff\1\3\1\2\1\uffff\1\3\16\uffff\10\3"+
            "\1\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "()* loopback of 415:29: ( ',' variableInitializer )*";
        }
    }
    static final String DFA60_eotS =
        "\15\uffff";
    static final String DFA60_eofS =
        "\15\uffff";
    static final String DFA60_minS =
        "\1\170\14\uffff";
    static final String DFA60_maxS =
        "\1\u00a4\14\uffff";
    static final String DFA60_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA60_specialS =
        "\15\uffff}>";
    static final String[] DFA60_transitionS = {
            "\1\5\21\uffff\1\2\1\3\1\4\1\6\1\7\1\10\1\11\1\12\1\13\1\14\20"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "418:1: modifier : ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' );";
        }
    }
    static final String DFA63_eotS =
        "\43\uffff";
    static final String DFA63_eofS =
        "\1\1\42\uffff";
    static final String DFA63_minS =
        "\1\142\37\uffff\1\142\2\uffff";
    static final String DFA63_maxS =
        "\1\u00c2\37\uffff\1\173\2\uffff";
    static final String DFA63_acceptS =
        "\1\uffff\1\2\40\uffff\1\1";
    static final String DFA63_specialS =
        "\43\uffff}>";
    static final String[] DFA63_transitionS = {
            "\1\1\23\uffff\1\1\2\uffff\1\40\1\1\2\uffff\7\1\3\uffff\3\1\22"+
            "\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\42\30\uffff\1\1",
            "",
            ""
    };

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "()* loopback of 447:20: ( '.' i+= refComponent )*";
        }
    }
    static final String DFA64_eotS =
        "\41\uffff";
    static final String DFA64_eofS =
        "\1\1\40\uffff";
    static final String DFA64_minS =
        "\1\142\40\uffff";
    static final String DFA64_maxS =
        "\1\u00c2\40\uffff";
    static final String DFA64_acceptS =
        "\1\uffff\1\2\36\uffff\1\1";
    static final String DFA64_specialS =
        "\41\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\1\23\uffff\1\1\2\uffff\2\1\2\uffff\7\1\3\uffff\1\40\2\1\22"+
            "\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "()* loopback of 447:43: ( '[' ']' )*";
        }
    }
    static final String DFA65_eotS =
        "\41\uffff";
    static final String DFA65_eofS =
        "\1\1\40\uffff";
    static final String DFA65_minS =
        "\1\142\40\uffff";
    static final String DFA65_maxS =
        "\1\u00c2\40\uffff";
    static final String DFA65_acceptS =
        "\1\uffff\1\2\36\uffff\1\1";
    static final String DFA65_specialS =
        "\41\uffff}>";
    static final String[] DFA65_transitionS = {
            "\1\1\23\uffff\1\1\2\uffff\2\1\2\uffff\7\1\3\uffff\1\40\2\1\22"+
            "\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "()* loopback of 448:18: ( '[' ']' )*";
        }
    }
    static final String DFA67_eotS =
        "\46\uffff";
    static final String DFA67_eofS =
        "\1\2\45\uffff";
    static final String DFA67_minS =
        "\2\142\44\uffff";
    static final String DFA67_maxS =
        "\1\u00c2\1\u009c\44\uffff";
    static final String DFA67_acceptS =
        "\2\uffff\1\2\40\uffff\1\1\2\uffff";
    static final String DFA67_specialS =
        "\46\uffff}>";
    static final String[] DFA67_transitionS = {
            "\1\2\23\uffff\1\2\2\uffff\2\2\2\uffff\1\2\1\1\5\2\3\uffff\3"+
            "\2\22\uffff\1\2\1\uffff\3\2\6\uffff\1\2\16\uffff\15\2",
            "\1\43\33\uffff\1\2\25\uffff\11\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "452:18: ( typeArguments )?";
        }
    }
    static final String DFA72_eotS =
        "\52\uffff";
    static final String DFA72_eofS =
        "\1\4\51\uffff";
    static final String DFA72_minS =
        "\1\174\1\uffff\3\0\45\uffff";
    static final String DFA72_maxS =
        "\1\u009d\1\uffff\3\0\45\uffff";
    static final String DFA72_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\44\uffff";
    static final String DFA72_specialS =
        "\2\uffff\1\0\1\1\1\2\45\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\1\2\uffff\1\2\1\3\34\uffff\1\5",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "477:8: ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA72_2 = input.LA(1);

                         
                        int index72_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index72_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA72_3 = input.LA(1);

                         
                        int index72_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index72_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA72_4 = input.LA(1);

                         
                        int index72_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index72_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 72, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA81_eotS =
        "\30\uffff";
    static final String DFA81_eofS =
        "\1\1\27\uffff";
    static final String DFA81_minS =
        "\1\12\2\uffff\1\142\22\uffff\1\0\1\uffff";
    static final String DFA81_maxS =
        "\1\u00a4\2\uffff\1\u0084\22\uffff\1\0\1\uffff";
    static final String DFA81_acceptS =
        "\1\uffff\1\2\25\uffff\1\1";
    static final String DFA81_specialS =
        "\26\uffff\1\0\1\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\1\127\uffff\1\1\22\uffff\4\1\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\1\20\uffff\1\3",
            "",
            "",
            "\1\26\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "()+ loopback of 530:4: ( annotation )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA81_22 = input.LA(1);

                         
                        int index81_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_Java()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA83_eotS =
        "\34\uffff";
    static final String DFA83_eofS =
        "\1\2\33\uffff";
    static final String DFA83_minS =
        "\1\12\33\uffff";
    static final String DFA83_maxS =
        "\1\u00a4\33\uffff";
    static final String DFA83_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA83_specialS =
        "\34\uffff}>";
    static final String[] DFA83_transitionS = {
            "\1\2\127\uffff\1\2\22\uffff\4\2\2\uffff\1\2\2\uffff\2\2\3\uffff"+
            "\3\2\4\uffff\22\2\2\uffff\1\1\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "534:23: ( '(' ( elementValuePairs )? ')' )?";
        }
    }
    static final String DFA82_eotS =
        "\27\uffff";
    static final String DFA82_eofS =
        "\27\uffff";
    static final String DFA82_minS =
        "\1\142\26\uffff";
    static final String DFA82_maxS =
        "\1\u00c8\26\uffff";
    static final String DFA82_acceptS =
        "\1\uffff\1\1\24\uffff\1\2";
    static final String DFA82_specialS =
        "\27\uffff}>";
    static final String[] DFA82_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\1\2\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\1\26\1\uffff\4\1\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "534:28: ( elementValuePairs )?";
        }
    }
    static final String DFA84_eotS =
        "\35\uffff";
    static final String DFA84_eofS =
        "\1\1\34\uffff";
    static final String DFA84_minS =
        "\1\12\34\uffff";
    static final String DFA84_maxS =
        "\1\u00a4\34\uffff";
    static final String DFA84_acceptS =
        "\1\uffff\1\2\32\uffff\1\1";
    static final String DFA84_specialS =
        "\35\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\1\127\uffff\1\1\22\uffff\4\1\1\34\1\uffff\1\1\2\uffff\2\1"+
            "\3\uffff\3\1\4\uffff\22\1\2\uffff\2\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "()* loopback of 538:15: ( '.' Identifier )*";
        }
    }
    static final String DFA86_eotS =
        "\57\uffff";
    static final String DFA86_eofS =
        "\1\uffff\1\2\55\uffff";
    static final String DFA86_minS =
        "\1\142\1\171\55\uffff";
    static final String DFA86_maxS =
        "\1\u00c8\1\u00c5\55\uffff";
    static final String DFA86_acceptS =
        "\2\uffff\1\2\23\uffff\1\1\30\uffff";
    static final String DFA86_specialS =
        "\57\uffff}>";
    static final String[] DFA86_transitionS = {
            "\1\1\6\2\25\uffff\1\2\3\uffff\1\2\2\uffff\1\2\16\uffff\10\2"+
            "\1\uffff\2\2\2\uffff\4\2\21\uffff\2\2\14\uffff\5\2",
            "\2\2\3\uffff\4\2\5\uffff\1\2\1\uffff\1\26\22\uffff\1\2\1\uffff"+
            "\2\2\26\uffff\3\2\3\uffff\12\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "546:4: ( Identifier '=' )?";
        }
    }
    static final String DFA87_eotS =
        "\26\uffff";
    static final String DFA87_eofS =
        "\26\uffff";
    static final String DFA87_minS =
        "\1\142\25\uffff";
    static final String DFA87_maxS =
        "\1\u00c8\25\uffff";
    static final String DFA87_acceptS =
        "\1\uffff\1\1\22\uffff\1\2\1\3";
    static final String DFA87_specialS =
        "\26\uffff}>";
    static final String[] DFA87_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\25\2\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\2\uffff\3\1\1\24\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "549:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );";
        }
    }
    static final String DFA89_eotS =
        "\27\uffff";
    static final String DFA89_eofS =
        "\27\uffff";
    static final String DFA89_minS =
        "\1\142\26\uffff";
    static final String DFA89_maxS =
        "\1\u00c8\26\uffff";
    static final String DFA89_acceptS =
        "\1\uffff\1\1\24\uffff\1\2";
    static final String DFA89_specialS =
        "\27\uffff}>";
    static final String[] DFA89_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\1\1\26\1\uffff\1\1\16\uffff\10\1"+
            "\1\uffff\2\1\2\uffff\4\1\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
    static final short[][] DFA89_transition;

    static {
        int numStates = DFA89_transitionS.length;
        DFA89_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;
        }
        public String getDescription() {
            return "556:8: ( elementValue ( ',' elementValue )* )?";
        }
    }
    static final String DFA90_eotS =
        "\23\uffff";
    static final String DFA90_eofS =
        "\23\uffff";
    static final String DFA90_minS =
        "\1\12\22\uffff";
    static final String DFA90_maxS =
        "\1\u00a4\22\uffff";
    static final String DFA90_acceptS =
        "\1\uffff\1\1\20\uffff\1\2";
    static final String DFA90_specialS =
        "\23\uffff}>";
    static final String[] DFA90_transitionS = {
            "\1\1\127\uffff\1\1\25\uffff\1\1\2\uffff\1\1\7\uffff\1\22\1\1"+
            "\5\uffff\22\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA90_eot = DFA.unpackEncodedString(DFA90_eotS);
    static final short[] DFA90_eof = DFA.unpackEncodedString(DFA90_eofS);
    static final char[] DFA90_min = DFA.unpackEncodedStringToUnsignedChars(DFA90_minS);
    static final char[] DFA90_max = DFA.unpackEncodedStringToUnsignedChars(DFA90_maxS);
    static final short[] DFA90_accept = DFA.unpackEncodedString(DFA90_acceptS);
    static final short[] DFA90_special = DFA.unpackEncodedString(DFA90_specialS);
    static final short[][] DFA90_transition;

    static {
        int numStates = DFA90_transitionS.length;
        DFA90_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA90_transition[i] = DFA.unpackEncodedString(DFA90_transitionS[i]);
        }
    }

    class DFA90 extends DFA {

        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = DFA90_eot;
            this.eof = DFA90_eof;
            this.min = DFA90_min;
            this.max = DFA90_max;
            this.accept = DFA90_accept;
            this.special = DFA90_special;
            this.transition = DFA90_transition;
        }
        public String getDescription() {
            return "564:8: ( annotationTypeElementDeclarations )?";
        }
    }
    static final String DFA91_eotS =
        "\24\uffff";
    static final String DFA91_eofS =
        "\1\1\23\uffff";
    static final String DFA91_minS =
        "\1\12\23\uffff";
    static final String DFA91_maxS =
        "\1\u00a4\23\uffff";
    static final String DFA91_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\20\uffff";
    static final String DFA91_specialS =
        "\24\uffff}>";
    static final String[] DFA91_transitionS = {
            "\1\3\127\uffff\1\3\25\uffff\1\3\2\uffff\1\3\7\uffff\1\1\1\3"+
            "\5\uffff\22\3\10\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA91_eot = DFA.unpackEncodedString(DFA91_eotS);
    static final short[] DFA91_eof = DFA.unpackEncodedString(DFA91_eofS);
    static final char[] DFA91_min = DFA.unpackEncodedStringToUnsignedChars(DFA91_minS);
    static final char[] DFA91_max = DFA.unpackEncodedStringToUnsignedChars(DFA91_maxS);
    static final short[] DFA91_accept = DFA.unpackEncodedString(DFA91_acceptS);
    static final short[] DFA91_special = DFA.unpackEncodedString(DFA91_specialS);
    static final short[][] DFA91_transition;

    static {
        int numStates = DFA91_transitionS.length;
        DFA91_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA91_transition[i] = DFA.unpackEncodedString(DFA91_transitionS[i]);
        }
    }

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = DFA91_eot;
            this.eof = DFA91_eof;
            this.min = DFA91_min;
            this.max = DFA91_max;
            this.accept = DFA91_accept;
            this.special = DFA91_special;
            this.transition = DFA91_transition;
        }
        public String getDescription() {
            return "()* loopback of 568:39: ( annotationTypeElementDeclaration )*";
        }
    }
    static final String DFA92_eotS =
        "\24\uffff";
    static final String DFA92_eofS =
        "\24\uffff";
    static final String DFA92_minS =
        "\1\12\4\uffff\1\142\16\uffff";
    static final String DFA92_maxS =
        "\1\u00a4\4\uffff\1\u0084\16\uffff";
    static final String DFA92_acceptS =
        "\1\uffff\1\2\5\uffff\1\1\14\uffff";
    static final String DFA92_specialS =
        "\24\uffff}>";
    static final String[] DFA92_transitionS = {
            "\1\1\127\uffff\1\1\25\uffff\1\7\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\7\10\1\10\uffff\1\5",
            "",
            "",
            "",
            "",
            "\1\7\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "()* loopback of 572:4: ( modifier )*";
        }
    }
    static final String DFA93_eotS =
        "\25\uffff";
    static final String DFA93_eofS =
        "\1\2\24\uffff";
    static final String DFA93_minS =
        "\1\12\24\uffff";
    static final String DFA93_maxS =
        "\1\u00a4\24\uffff";
    static final String DFA93_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA93_specialS =
        "\25\uffff}>";
    static final String[] DFA93_transitionS = {
            "\1\2\127\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "577:23: ( ';' )?";
        }
    }
    static final String DFA94_eotS =
        "\25\uffff";
    static final String DFA94_eofS =
        "\1\2\24\uffff";
    static final String DFA94_minS =
        "\1\12\24\uffff";
    static final String DFA94_maxS =
        "\1\u00a4\24\uffff";
    static final String DFA94_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA94_specialS =
        "\25\uffff}>";
    static final String[] DFA94_transitionS = {
            "\1\2\127\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "578:27: ( ';' )?";
        }
    }
    static final String DFA95_eotS =
        "\25\uffff";
    static final String DFA95_eofS =
        "\1\2\24\uffff";
    static final String DFA95_minS =
        "\1\12\24\uffff";
    static final String DFA95_maxS =
        "\1\u00a4\24\uffff";
    static final String DFA95_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA95_specialS =
        "\25\uffff}>";
    static final String[] DFA95_transitionS = {
            "\1\2\127\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA95_eot = DFA.unpackEncodedString(DFA95_eotS);
    static final short[] DFA95_eof = DFA.unpackEncodedString(DFA95_eofS);
    static final char[] DFA95_min = DFA.unpackEncodedStringToUnsignedChars(DFA95_minS);
    static final char[] DFA95_max = DFA.unpackEncodedStringToUnsignedChars(DFA95_maxS);
    static final short[] DFA95_accept = DFA.unpackEncodedString(DFA95_acceptS);
    static final short[] DFA95_special = DFA.unpackEncodedString(DFA95_specialS);
    static final short[][] DFA95_transition;

    static {
        int numStates = DFA95_transitionS.length;
        DFA95_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA95_transition[i] = DFA.unpackEncodedString(DFA95_transitionS[i]);
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = DFA95_eot;
            this.eof = DFA95_eof;
            this.min = DFA95_min;
            this.max = DFA95_max;
            this.accept = DFA95_accept;
            this.special = DFA95_special;
            this.transition = DFA95_transition;
        }
        public String getDescription() {
            return "579:22: ( ';' )?";
        }
    }
    static final String DFA96_eotS =
        "\25\uffff";
    static final String DFA96_eofS =
        "\1\2\24\uffff";
    static final String DFA96_minS =
        "\1\12\24\uffff";
    static final String DFA96_maxS =
        "\1\u00a4\24\uffff";
    static final String DFA96_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA96_specialS =
        "\25\uffff}>";
    static final String[] DFA96_transitionS = {
            "\1\2\127\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "580:32: ( ';' )?";
        }
    }
    static final String DFA100_eotS =
        "\61\uffff";
    static final String DFA100_eofS =
        "\61\uffff";
    static final String DFA100_minS =
        "\1\12\60\uffff";
    static final String DFA100_maxS =
        "\1\u00c8\60\uffff";
    static final String DFA100_acceptS =
        "\1\uffff\1\2\1\1\56\uffff";
    static final String DFA100_specialS =
        "\61\uffff}>";
    static final String[] DFA100_transitionS = {
            "\1\2\127\uffff\7\2\15\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\1\2\2\4\uffff\22\2\1\uffff\2\2\2\uffff\4"+
            "\2\1\uffff\1\2\1\uffff\1\2\1\uffff\4\2\1\uffff\5\2\2\uffff\2"+
            "\2\14\uffff\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA100_eot = DFA.unpackEncodedString(DFA100_eotS);
    static final short[] DFA100_eof = DFA.unpackEncodedString(DFA100_eofS);
    static final char[] DFA100_min = DFA.unpackEncodedStringToUnsignedChars(DFA100_minS);
    static final char[] DFA100_max = DFA.unpackEncodedStringToUnsignedChars(DFA100_maxS);
    static final short[] DFA100_accept = DFA.unpackEncodedString(DFA100_acceptS);
    static final short[] DFA100_special = DFA.unpackEncodedString(DFA100_specialS);
    static final short[][] DFA100_transition;

    static {
        int numStates = DFA100_transitionS.length;
        DFA100_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA100_transition[i] = DFA.unpackEncodedString(DFA100_transitionS[i]);
        }
    }

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = DFA100_eot;
            this.eof = DFA100_eof;
            this.min = DFA100_min;
            this.max = DFA100_max;
            this.accept = DFA100_accept;
            this.special = DFA100_special;
            this.transition = DFA100_transition;
        }
        public String getDescription() {
            return "()* loopback of 603:8: ( blockStatement )*";
        }
    }
    static final String DFA101_eotS =
        "\162\uffff";
    static final String DFA101_eofS =
        "\162\uffff";
    static final String DFA101_minS =
        "\2\12\3\142\6\uffff\1\12\46\uffff\2\0\16\uffff\1\0\1\uffff\3\0\30"+
        "\uffff\1\0\22\uffff";
    static final String DFA101_maxS =
        "\1\u00c8\1\u00a4\1\u0084\1\u00c5\1\u0087\6\uffff\1\u00a4\46\uffff"+
        "\2\0\16\uffff\1\0\1\uffff\3\0\30\uffff\1\0\22\uffff";
    static final String DFA101_acceptS =
        "\5\uffff\1\2\14\uffff\1\3\35\uffff\1\1\101\uffff";
    static final String DFA101_specialS =
        "\62\uffff\1\0\1\1\16\uffff\1\2\1\uffff\1\3\1\4\1\5\30\uffff\1\6"+
        "\22\uffff}>";
    static final String[] DFA101_transitionS = {
            "\1\5\127\uffff\1\3\6\22\15\uffff\1\22\1\uffff\1\5\2\uffff\1"+
            "\5\2\uffff\1\22\3\uffff\1\22\1\uffff\1\5\1\22\4\uffff\4\5\1"+
            "\1\1\5\1\13\3\5\10\4\1\uffff\2\22\2\uffff\3\22\1\2\1\uffff\1"+
            "\22\1\uffff\1\22\1\uffff\4\22\1\uffff\5\22\2\uffff\2\22\14\uffff"+
            "\5\22",
            "\1\5\127\uffff\1\60\25\uffff\1\5\2\uffff\1\5\10\uffff\1\5\5"+
            "\uffff\4\5\1\62\5\5\10\60\10\uffff\1\63",
            "\1\102\41\uffff\1\5",
            "\1\60\23\uffff\1\22\2\uffff\1\105\1\22\3\uffff\1\104\1\uffff"+
            "\2\22\5\uffff\1\106\1\uffff\1\22\22\uffff\1\22\1\uffff\1\22"+
            "\10\uffff\1\22\16\uffff\20\22",
            "\1\60\26\uffff\1\22\15\uffff\1\137",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\5\155\uffff\1\5\2\uffff\1\5\10\uffff\1\5\5\uffff\12\5\12"+
            "\uffff\1\22\5\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "606:1: blockStatement : ( localVariableDeclaration | classOrInterfaceDeclaration | statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA101_50 = input.LA(1);

                         
                        int index101_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_Java()) ) {s = 48;}

                        else if ( (synpred146_Java()) ) {s = 5;}

                         
                        input.seek(index101_50);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA101_51 = input.LA(1);

                         
                        int index101_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_Java()) ) {s = 48;}

                        else if ( (synpred146_Java()) ) {s = 5;}

                         
                        input.seek(index101_51);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA101_66 = input.LA(1);

                         
                        int index101_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_Java()) ) {s = 48;}

                        else if ( (synpred146_Java()) ) {s = 5;}

                         
                        input.seek(index101_66);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA101_68 = input.LA(1);

                         
                        int index101_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index101_68);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA101_69 = input.LA(1);

                         
                        int index101_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index101_69);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA101_70 = input.LA(1);

                         
                        int index101_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index101_70);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA101_95 = input.LA(1);

                         
                        int index101_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index101_95);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 101, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA109_eotS =
        "\75\uffff";
    static final String DFA109_eofS =
        "\75\uffff";
    static final String DFA109_minS =
        "\1\142\35\uffff\1\166\36\uffff";
    static final String DFA109_maxS =
        "\1\u00c8\35\uffff\1\u00c5\36\uffff";
    static final String DFA109_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\22\uffff\1\20\32\uffff";
    static final String DFA109_specialS =
        "\75\uffff}>";
    static final String[] DFA109_transitionS = {
            "\1\36\6\17\15\uffff\1\16\7\uffff\1\17\3\uffff\1\1\2\uffff\1"+
            "\17\12\uffff\1\11\3\uffff\10\17\1\uffff\2\17\2\uffff\3\17\2"+
            "\uffff\1\2\1\uffff\1\3\1\uffff\1\4\1\5\1\6\1\7\1\uffff\1\10"+
            "\1\12\1\13\1\14\1\15\2\uffff\2\17\14\uffff\5\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\17\2\uffff\2\17\3\uffff\1\17\1\uffff\2\17\5\uffff\1\17\1"+
            "\uffff\1\17\22\uffff\1\17\1\uffff\1\17\10\uffff\1\42\16\uffff"+
            "\20\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA109_eot = DFA.unpackEncodedString(DFA109_eotS);
    static final short[] DFA109_eof = DFA.unpackEncodedString(DFA109_eofS);
    static final char[] DFA109_min = DFA.unpackEncodedStringToUnsignedChars(DFA109_minS);
    static final char[] DFA109_max = DFA.unpackEncodedStringToUnsignedChars(DFA109_maxS);
    static final short[] DFA109_accept = DFA.unpackEncodedString(DFA109_acceptS);
    static final short[] DFA109_special = DFA.unpackEncodedString(DFA109_specialS);
    static final short[][] DFA109_transition;

    static {
        int numStates = DFA109_transitionS.length;
        DFA109_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA109_transition[i] = DFA.unpackEncodedString(DFA109_transitionS[i]);
        }
    }

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = DFA109_eot;
            this.eof = DFA109_eof;
            this.min = DFA109_min;
            this.max = DFA109_max;
            this.accept = DFA109_accept;
            this.special = DFA109_special;
            this.transition = DFA109_transition;
        }
        public String getDescription() {
            return "616:1: statement : ( block | lc= 'assert' expression ( ':' expression )? ';' -> ^( ASSERT[$lc] expression ( expression )? ) | lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> ^( IF[$lc] parExpression statement ( statement )? ) | lc= 'for' '(' forControl ')' statement -> ^( FOR[$lc] forControl statement ) | lc= 'while' parExpression statement -> ^( WHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'do' statement 'while' parExpression ';' -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) ) | lc= 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups ) | lc= 'synchronized' parExpression block -> ^( SYNCHRONIZED[$lc] parExpression block ) | lc= 'return' ( expression )? ';' -> ^( RETURN[$lc] ( expression )? ) | lc= 'throw' expression ';' -> ^( THROW[$lc] expression ) | lc= 'break' ( Identifier )? ';' -> ^( BREAK[$lc] ( Identifier )? ) | lc= 'continue' ( Identifier )? ';' -> ^( CONTINUE[$lc] ( Identifier )? ) | ';' -> ^( BLOCK ) | statementExpression ';' -> statementExpression | lc= Identifier ':' statement -> ^( LABEL[$lc] Identifier statement ) );";
        }
    }
    static final String DFA106_eotS =
        "\25\uffff";
    static final String DFA106_eofS =
        "\25\uffff";
    static final String DFA106_minS =
        "\1\142\24\uffff";
    static final String DFA106_maxS =
        "\1\u00c8\24\uffff";
    static final String DFA106_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA106_specialS =
        "\25\uffff}>";
    static final String[] DFA106_transitionS = {
            "\7\1\15\uffff\1\24\7\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "630:19: ( expression )?";
        }
    }
    static final String DFA110_eotS =
        "\67\uffff";
    static final String DFA110_eofS =
        "\1\1\66\uffff";
    static final String DFA110_minS =
        "\1\12\66\uffff";
    static final String DFA110_maxS =
        "\1\u00c8\66\uffff";
    static final String DFA110_acceptS =
        "\1\uffff\1\2\64\uffff\1\1";
    static final String DFA110_specialS =
        "\67\uffff}>";
    static final String[] DFA110_transitionS = {
            "\1\1\127\uffff\7\1\15\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff"+
            "\1\1\3\uffff\4\1\4\uffff\22\1\1\uffff\2\1\2\uffff\6\1\1\uffff"+
            "\14\1\1\66\3\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "()* loopback of 640:16: ( catchClause )*";
        }
    }
    static final String DFA113_eotS =
        "\64\uffff";
    static final String DFA113_eofS =
        "\1\1\63\uffff";
    static final String DFA113_minS =
        "\1\12\63\uffff";
    static final String DFA113_maxS =
        "\1\u00c8\63\uffff";
    static final String DFA113_acceptS =
        "\1\uffff\1\2\3\uffff\1\1\56\uffff";
    static final String DFA113_specialS =
        "\64\uffff}>";
    static final String[] DFA113_transitionS = {
            "\1\5\127\uffff\7\5\15\uffff\1\5\1\uffff\1\5\2\uffff\1\5\2\uffff"+
            "\1\5\3\uffff\1\5\1\1\2\5\4\uffff\22\5\1\uffff\2\5\2\uffff\4"+
            "\5\1\1\1\5\1\uffff\1\5\1\uffff\4\5\1\uffff\5\5\1\uffff\1\1\2"+
            "\5\14\uffff\5\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "()* loopback of 656:16: ( blockStatement )*";
        }
    }
    static final String DFA114_eotS =
        "\27\uffff";
    static final String DFA114_eofS =
        "\27\uffff";
    static final String DFA114_minS =
        "\1\u00a5\1\142\1\uffff\1\0\23\uffff";
    static final String DFA114_maxS =
        "\1\u00b5\1\u00c8\1\uffff\1\0\23\uffff";
    static final String DFA114_acceptS =
        "\2\uffff\1\3\1\uffff\1\1\21\uffff\1\2";
    static final String DFA114_specialS =
        "\3\uffff\1\0\23\uffff}>";
    static final String[] DFA114_transitionS = {
            "\1\2\17\uffff\1\1",
            "\1\3\6\4\25\uffff\1\4\6\uffff\1\4\16\uffff\10\4\1\uffff\2\4"+
            "\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_eotS);
    static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_eofS);
    static final char[] DFA114_min = DFA.unpackEncodedStringToUnsignedChars(DFA114_minS);
    static final char[] DFA114_max = DFA.unpackEncodedStringToUnsignedChars(DFA114_maxS);
    static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_acceptS);
    static final short[] DFA114_special = DFA.unpackEncodedString(DFA114_specialS);
    static final short[][] DFA114_transition;

    static {
        int numStates = DFA114_transitionS.length;
        DFA114_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA114_transition[i] = DFA.unpackEncodedString(DFA114_transitionS[i]);
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = DFA114_eot;
            this.eof = DFA114_eof;
            this.min = DFA114_min;
            this.max = DFA114_max;
            this.accept = DFA114_accept;
            this.special = DFA114_special;
            this.transition = DFA114_transition;
        }
        public String getDescription() {
            return "659:1: switchLabel : (lc= 'case' constantExpression ':' -> ^( CASE[$lc] constantExpression ) | lc= 'case' enumConstantName ':' -> ^( CASE[$lc] enumConstantName ) | lc= 'default' ':' -> ^( DEFAULT ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA114_3 = input.LA(1);

                         
                        int index114_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_Java()) ) {s = 4;}

                        else if ( (synpred175_Java()) ) {s = 22;}

                         
                        input.seek(index114_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 114, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA119_eotS =
        "\u0085\uffff";
    static final String DFA119_eofS =
        "\u0085\uffff";
    static final String DFA119_minS =
        "\5\142\22\uffff\10\142\1\166\30\uffff\1\u0088\1\uffff\1\166\21\0"+
        "\2\uffff\3\0\23\uffff\1\0\1\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA119_maxS =
        "\1\u00c8\1\u00a4\1\142\1\u00c5\1\u0087\22\uffff\2\u0087\1\u00a4"+
        "\1\142\1\u00a4\3\u00c8\1\u00a7\30\uffff\1\u0088\1\uffff\1\u00a7"+
        "\21\0\2\uffff\3\0\23\uffff\1\0\1\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA119_acceptS =
        "\5\uffff\1\2\164\uffff\1\1\12\uffff";
    static final String DFA119_specialS =
        "\73\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\2\uffff\1\21\1\22\1\23\23\uffff\1\24\1\uffff"+
        "\1\25\30\uffff\1\26\5\uffff}>";
    static final String[] DFA119_transitionS = {
            "\1\3\6\5\15\uffff\1\5\7\uffff\1\5\6\uffff\1\5\10\uffff\1\1\5"+
            "\uffff\10\4\1\uffff\2\5\2\uffff\3\5\1\2\21\uffff\2\5\14\uffff"+
            "\5\5",
            "\1\27\53\uffff\1\31\5\uffff\10\30\10\uffff\1\32",
            "\1\33",
            "\1\37\23\uffff\1\5\2\uffff\1\35\1\5\3\uffff\1\34\3\5\5\uffff"+
            "\1\36\1\uffff\1\5\22\uffff\1\5\1\uffff\1\5\27\uffff\20\5",
            "\1\72\26\uffff\1\5\15\uffff\1\70",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\76\26\uffff\1\74\4\uffff\1\73\10\uffff\1\75",
            "\1\100\44\uffff\1\77",
            "\1\101\53\uffff\1\103\5\uffff\10\102\10\uffff\1\104",
            "\1\105",
            "\1\110\26\uffff\1\106\24\uffff\1\112\5\uffff\10\111\2\uffff"+
            "\1\107\5\uffff\1\113",
            "\1\116\6\5\25\uffff\1\5\6\uffff\1\5\3\uffff\1\5\12\uffff\10"+
            "\117\1\120\2\5\2\uffff\3\5\22\uffff\2\5\14\uffff\5\5",
            "\1\144\30\uffff\1\5\2\uffff\1\5\36\uffff\1\5\52\uffff\1\5",
            "\7\5\25\uffff\1\5\6\uffff\1\5\2\uffff\1\146\13\uffff\10\5\1"+
            "\uffff\2\5\2\uffff\3\5\22\uffff\2\5\14\uffff\5\5",
            "\1\5\10\uffff\1\5\7\uffff\1\5\1\uffff\1\5\35\uffff\1\172",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\177",
            "",
            "\1\5\10\uffff\1\5\7\uffff\1\5\1\uffff\1\5\35\uffff\1\172",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "669:1: forControl options {k=3; } : ( forVarControl -> ^( FOREACH forVarControl ) | ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )? -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA119_59 = input.LA(1);

                         
                        int index119_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_59);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA119_60 = input.LA(1);

                         
                        int index119_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_60);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA119_61 = input.LA(1);

                         
                        int index119_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_61);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA119_62 = input.LA(1);

                         
                        int index119_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_62);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA119_63 = input.LA(1);

                         
                        int index119_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_63);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA119_64 = input.LA(1);

                         
                        int index119_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_64);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA119_65 = input.LA(1);

                         
                        int index119_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_65);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA119_66 = input.LA(1);

                         
                        int index119_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_66);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA119_67 = input.LA(1);

                         
                        int index119_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_67);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA119_68 = input.LA(1);

                         
                        int index119_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_68);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA119_69 = input.LA(1);

                         
                        int index119_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_69);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA119_70 = input.LA(1);

                         
                        int index119_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_70);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA119_71 = input.LA(1);

                         
                        int index119_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_71);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA119_72 = input.LA(1);

                         
                        int index119_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_72);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA119_73 = input.LA(1);

                         
                        int index119_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_73);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA119_74 = input.LA(1);

                         
                        int index119_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_74);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA119_75 = input.LA(1);

                         
                        int index119_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_75);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA119_78 = input.LA(1);

                         
                        int index119_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_78);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA119_79 = input.LA(1);

                         
                        int index119_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_79);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA119_80 = input.LA(1);

                         
                        int index119_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_80);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA119_100 = input.LA(1);

                         
                        int index119_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_100);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA119_102 = input.LA(1);

                         
                        int index119_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_102);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA119_127 = input.LA(1);

                         
                        int index119_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_127);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 119, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA116_eotS =
        "\27\uffff";
    static final String DFA116_eofS =
        "\27\uffff";
    static final String DFA116_minS =
        "\1\142\26\uffff";
    static final String DFA116_maxS =
        "\1\u00c8\26\uffff";
    static final String DFA116_acceptS =
        "\1\uffff\1\1\24\uffff\1\2";
    static final String DFA116_specialS =
        "\27\uffff}>";
    static final String[] DFA116_transitionS = {
            "\7\1\15\uffff\1\26\7\uffff\1\1\6\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\10\1\1\uffff\2\1\2\uffff\4\1\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "672:4: ( forInit )?";
        }
    }
    static final String DFA117_eotS =
        "\25\uffff";
    static final String DFA117_eofS =
        "\25\uffff";
    static final String DFA117_minS =
        "\1\142\24\uffff";
    static final String DFA117_maxS =
        "\1\u00c8\24\uffff";
    static final String DFA117_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA117_specialS =
        "\25\uffff}>";
    static final String[] DFA117_transitionS = {
            "\7\1\15\uffff\1\24\7\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "672:19: (fc= expression )?";
        }
    }
    static final String DFA118_eotS =
        "\25\uffff";
    static final String DFA118_eofS =
        "\25\uffff";
    static final String DFA118_minS =
        "\1\142\24\uffff";
    static final String DFA118_maxS =
        "\1\u00c8\24\uffff";
    static final String DFA118_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA118_specialS =
        "\25\uffff}>";
    static final String[] DFA118_transitionS = {
            "\7\1\25\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff\2\1\1\24"+
            "\1\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "672:38: (fu= forUpdate )?";
        }
    }
    static final String DFA121_eotS =
        "\66\uffff";
    static final String DFA121_eofS =
        "\3\uffff\1\5\62\uffff";
    static final String DFA121_minS =
        "\1\142\2\uffff\2\142\21\uffff\3\0\32\uffff\1\0\2\uffff";
    static final String DFA121_maxS =
        "\1\u00c8\2\uffff\1\u00c5\1\u0087\21\uffff\3\0\32\uffff\1\0\2\uffff";
    static final String DFA121_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\60\uffff";
    static final String DFA121_specialS =
        "\26\uffff\1\0\1\1\1\2\32\uffff\1\3\2\uffff}>";
    static final String[] DFA121_transitionS = {
            "\1\3\6\5\25\uffff\1\5\6\uffff\1\5\10\uffff\1\1\5\uffff\10\4"+
            "\1\uffff\2\5\2\uffff\3\5\1\1\21\uffff\2\5\14\uffff\5\5",
            "",
            "",
            "\1\1\23\uffff\1\5\2\uffff\1\27\1\5\3\uffff\1\26\3\5\5\uffff"+
            "\1\30\1\uffff\1\5\22\uffff\1\5\1\uffff\1\5\27\uffff\20\5",
            "\1\1\26\uffff\1\5\15\uffff\1\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "675:1: forInit : ( ( variableModifier )* type variableDeclarators -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) | expressionList );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA121_22 = input.LA(1);

                         
                        int index121_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index121_22);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA121_23 = input.LA(1);

                         
                        int index121_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index121_23);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA121_24 = input.LA(1);

                         
                        int index121_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index121_24);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA121_51 = input.LA(1);

                         
                        int index121_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index121_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA124_eotS =
        "\162\uffff";
    static final String DFA124_eofS =
        "\1\14\161\uffff";
    static final String DFA124_minS =
        "\1\166\13\0\146\uffff";
    static final String DFA124_maxS =
        "\1\u00bc\13\0\146\uffff";
    static final String DFA124_acceptS =
        "\14\uffff\1\15\31\uffff\1\1\1\uffff\1\2\1\uffff\1\3\1\uffff\1\4"+
        "\1\uffff\1\5\23\uffff\1\6\23\uffff\1\7\23\uffff\1\10\1\uffff\1\11"+
        "\1\uffff\1\12\1\uffff\1\13\1\14";
    static final String DFA124_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\146\uffff}>";
    static final String[] DFA124_transitionS = {
            "\1\14\3\uffff\1\4\3\uffff\1\12\1\14\1\13\2\uffff\1\14\4\uffff"+
            "\1\14\1\1\25\uffff\1\14\7\uffff\1\14\16\uffff\1\2\1\3\1\5\1"+
            "\6\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "708:3: ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | i+= '+' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '-' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '*' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '/' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '&=' expression -> ^( ASSIGN conditionalExpression ^( AND conditionalExpression expression ) ) | '|=' expression -> ^( ASSIGN conditionalExpression ^( OR conditionalExpression expression ) ) | '^=' expression -> ^( ASSIGN conditionalExpression ^( XOR conditionalExpression expression ) ) | i+= '%' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '<' '<' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | i+= '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( LABINOP conditionalExpression $i expression ) ) | '>' '>' '>' '=' expression -> ^( ASSIGN conditionalExpression ^( USHR conditionalExpression expression ) ) | -> conditionalExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA124_1 = input.LA(1);

                         
                        int index124_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_Java()) ) {s = 38;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA124_2 = input.LA(1);

                         
                        int index124_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_Java()) ) {s = 40;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA124_3 = input.LA(1);

                         
                        int index124_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_Java()) ) {s = 42;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA124_4 = input.LA(1);

                         
                        int index124_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Java()) ) {s = 44;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA124_5 = input.LA(1);

                         
                        int index124_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_Java()) ) {s = 46;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA124_6 = input.LA(1);

                         
                        int index124_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred190_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA124_7 = input.LA(1);

                         
                        int index124_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_Java()) ) {s = 86;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA124_8 = input.LA(1);

                         
                        int index124_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred192_Java()) ) {s = 106;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA124_9 = input.LA(1);

                         
                        int index124_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_Java()) ) {s = 108;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA124_10 = input.LA(1);

                         
                        int index124_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_Java()) ) {s = 110;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA124_11 = input.LA(1);

                         
                        int index124_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195_Java()) ) {s = 112;}

                        else if ( (synpred196_Java()) ) {s = 113;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA125_eotS =
        "\24\uffff";
    static final String DFA125_eofS =
        "\1\2\23\uffff";
    static final String DFA125_minS =
        "\1\166\23\uffff";
    static final String DFA125_maxS =
        "\1\u00bc\23\uffff";
    static final String DFA125_acceptS =
        "\1\uffff\1\1\1\2\21\uffff";
    static final String DFA125_specialS =
        "\24\uffff}>";
    static final String[] DFA125_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\1\2\uffff\1\2\7\uffff\1\2\16\uffff\7\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "727:6: ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression )";
        }
    }
    static final String DFA126_eotS =
        "\25\uffff";
    static final String DFA126_eofS =
        "\1\2\24\uffff";
    static final String DFA126_minS =
        "\1\166\24\uffff";
    static final String DFA126_maxS =
        "\1\u00bd\24\uffff";
    static final String DFA126_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA126_specialS =
        "\25\uffff}>";
    static final String[] DFA126_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\7\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "735:6: ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression )";
        }
    }
    static final String DFA127_eotS =
        "\26\uffff";
    static final String DFA127_eofS =
        "\1\2\25\uffff";
    static final String DFA127_minS =
        "\1\166\25\uffff";
    static final String DFA127_maxS =
        "\1\u00be\25\uffff";
    static final String DFA127_acceptS =
        "\1\uffff\1\1\1\2\23\uffff";
    static final String DFA127_specialS =
        "\26\uffff}>";
    static final String[] DFA127_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\10\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "743:6: ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression )";
        }
    }
    static final String DFA128_eotS =
        "\27\uffff";
    static final String DFA128_eofS =
        "\1\2\26\uffff";
    static final String DFA128_minS =
        "\1\166\26\uffff";
    static final String DFA128_maxS =
        "\1\u00bf\26\uffff";
    static final String DFA128_acceptS =
        "\1\uffff\1\1\1\2\24\uffff";
    static final String DFA128_specialS =
        "\27\uffff}>";
    static final String[] DFA128_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\11\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "751:9: ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression )";
        }
    }
    static final String DFA129_eotS =
        "\30\uffff";
    static final String DFA129_eofS =
        "\1\2\27\uffff";
    static final String DFA129_minS =
        "\1\166\27\uffff";
    static final String DFA129_maxS =
        "\1\u00c0\27\uffff";
    static final String DFA129_acceptS =
        "\1\uffff\1\1\1\2\25\uffff";
    static final String DFA129_specialS =
        "\30\uffff}>";
    static final String[] DFA129_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\12\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "759:5: ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression )";
        }
    }
    static final String DFA130_eotS =
        "\31\uffff";
    static final String DFA130_eofS =
        "\1\2\30\uffff";
    static final String DFA130_minS =
        "\1\166\30\uffff";
    static final String DFA130_maxS =
        "\1\u00c0\30\uffff";
    static final String DFA130_acceptS =
        "\1\uffff\1\1\1\2\26\uffff";
    static final String DFA130_specialS =
        "\31\uffff}>";
    static final String[] DFA130_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\1\1\1\uffff\1\2\4\uffff\2\2\22"+
            "\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\13\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "767:5: ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression )";
        }
    }
    static final String DFA131_eotS =
        "\33\uffff";
    static final String DFA131_eofS =
        "\1\3\32\uffff";
    static final String DFA131_minS =
        "\1\166\32\uffff";
    static final String DFA131_maxS =
        "\1\u00c2\32\uffff";
    static final String DFA131_acceptS =
        "\1\uffff\1\1\1\2\1\3\27\uffff";
    static final String DFA131_specialS =
        "\33\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\4\3\1\uffff\1\3\4\uffff\2\3\22\uffff"+
            "\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\13\3\1\1\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "775:5: ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression )";
        }
    }
    static final String DFA132_eotS =
        "\34\uffff";
    static final String DFA132_eofS =
        "\1\2\33\uffff";
    static final String DFA132_minS =
        "\1\166\33\uffff";
    static final String DFA132_maxS =
        "\1\u00c3\33\uffff";
    static final String DFA132_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA132_specialS =
        "\34\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\4\2\1\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\15\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "784:5: ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression )";
        }
    }
    static final String DFA133_eotS =
        "\105\uffff";
    static final String DFA133_eofS =
        "\1\3\104\uffff";
    static final String DFA133_minS =
        "\1\166\2\142\32\uffff\1\0\47\uffff";
    static final String DFA133_maxS =
        "\1\u00c3\2\u00c8\32\uffff\1\0\47\uffff";
    static final String DFA133_acceptS =
        "\3\uffff\1\5\30\uffff\1\1\1\uffff\1\2\21\uffff\1\3\1\uffff\1\4\22"+
        "\uffff";
    static final String DFA133_specialS =
        "\35\uffff\1\0\47\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\4\uffff"+
            "\2\3\22\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3",
            "\7\36\25\uffff\1\35\6\uffff\1\36\3\uffff\1\34\12\uffff\10\36"+
            "\1\uffff\2\36\2\uffff\3\36\22\uffff\2\36\14\uffff\5\36",
            "\7\62\25\uffff\1\62\1\uffff\1\3\4\uffff\1\62\3\uffff\1\60\12"+
            "\uffff\10\62\1\uffff\2\62\2\uffff\3\62\22\uffff\2\62\14\uffff"+
            "\5\62",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "792:5: ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA133_29 = input.LA(1);

                         
                        int index133_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred207_Java()) ) {s = 30;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index133_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA137_eotS =
        "\107\uffff";
    static final String DFA137_eofS =
        "\1\3\106\uffff";
    static final String DFA137_minS =
        "\1\166\2\142\31\uffff\1\0\23\uffff\1\0\26\uffff";
    static final String DFA137_maxS =
        "\1\u00c3\2\u00c8\31\uffff\1\0\23\uffff\1\0\26\uffff";
    static final String DFA137_acceptS =
        "\3\uffff\1\3\101\uffff\1\1\1\2";
    static final String DFA137_specialS =
        "\34\uffff\1\0\23\uffff\1\1\26\uffff}>";
    static final String[] DFA137_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\4\uffff"+
            "\2\3\22\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3",
            "\7\3\25\uffff\1\34\6\uffff\1\3\3\uffff\1\3\12\uffff\10\3\1"+
            "\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "\7\3\25\uffff\1\3\1\uffff\1\60\4\uffff\1\3\3\uffff\1\3\12\uffff"+
            "\10\3\1\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "803:5: ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA137_28 = input.LA(1);

                         
                        int index137_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred212_Java()) ) {s = 69;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index137_28);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA137_48 = input.LA(1);

                         
                        int index137_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred212_Java()) ) {s = 69;}

                        else if ( (synpred214_Java()) ) {s = 70;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index137_48);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA135_eotS =
        "\106\uffff";
    static final String DFA135_eofS =
        "\1\3\105\uffff";
    static final String DFA135_minS =
        "\1\166\2\142\32\uffff\1\0\23\uffff\1\0\24\uffff";
    static final String DFA135_maxS =
        "\1\u00c3\2\u00c8\32\uffff\1\0\23\uffff\1\0\24\uffff";
    static final String DFA135_acceptS =
        "\3\uffff\1\2\101\uffff\1\1";
    static final String DFA135_specialS =
        "\35\uffff\1\0\23\uffff\1\1\24\uffff}>";
    static final String[] DFA135_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\4\uffff"+
            "\2\3\22\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3",
            "\7\3\25\uffff\1\35\6\uffff\1\3\3\uffff\1\3\12\uffff\10\3\1"+
            "\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "\7\3\25\uffff\1\3\1\uffff\1\61\4\uffff\1\3\3\uffff\1\3\12\uffff"+
            "\10\3\1\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "()+ loopback of 804:6: ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA135_29 = input.LA(1);

                         
                        int index135_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_Java()) ) {s = 69;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index135_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA135_49 = input.LA(1);

                         
                        int index135_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_Java()) ) {s = 69;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index135_49);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA136_eotS =
        "\62\uffff";
    static final String DFA136_eofS =
        "\1\1\61\uffff";
    static final String DFA136_minS =
        "\1\166\1\uffff\1\142\32\uffff\1\0\24\uffff";
    static final String DFA136_maxS =
        "\1\u00c3\1\uffff\1\u00c8\32\uffff\1\0\24\uffff";
    static final String DFA136_acceptS =
        "\1\uffff\1\2\57\uffff\1\1";
    static final String DFA136_specialS =
        "\35\uffff\1\0\24\uffff}>";
    static final String[] DFA136_transitionS = {
            "\1\1\3\uffff\1\1\3\uffff\2\1\1\2\1\1\1\uffff\1\1\4\uffff\2\1"+
            "\22\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\16\1",
            "",
            "\7\1\25\uffff\1\1\1\uffff\1\35\4\uffff\1\1\3\uffff\1\1\12\uffff"+
            "\10\1\1\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "()+ loopback of 806:8: ( '>' '>' '>' additiveExpression )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA136_29 = input.LA(1);

                         
                        int index136_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred213_Java()) ) {s = 49;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index136_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA140_eotS =
        "\104\uffff";
    static final String DFA140_eofS =
        "\1\3\103\uffff";
    static final String DFA140_minS =
        "\1\166\2\142\101\uffff";
    static final String DFA140_maxS =
        "\1\u00c3\2\u00c8\101\uffff";
    static final String DFA140_acceptS =
        "\3\uffff\1\2\31\uffff\1\1\46\uffff";
    static final String DFA140_specialS =
        "\104\uffff}>";
    static final String[] DFA140_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\4\3\1\uffff\1\3\4\uffff\2\3\22\uffff"+
            "\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\1\1\1\2\14\3",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\3\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\3\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "813:5: ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression )";
        }
    }
    static final String DFA139_eotS =
        "\104\uffff";
    static final String DFA139_eofS =
        "\1\1\103\uffff";
    static final String DFA139_minS =
        "\1\166\21\uffff\2\142\60\uffff";
    static final String DFA139_maxS =
        "\1\u00c3\21\uffff\2\u00c8\60\uffff";
    static final String DFA139_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\46\uffff";
    static final String DFA139_specialS =
        "\104\uffff}>";
    static final String[] DFA139_transitionS = {
            "\1\1\3\uffff\1\1\3\uffff\4\1\1\uffff\1\1\4\uffff\2\1\22\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\1\22\1\23\14\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA139_eot = DFA.unpackEncodedString(DFA139_eotS);
    static final short[] DFA139_eof = DFA.unpackEncodedString(DFA139_eofS);
    static final char[] DFA139_min = DFA.unpackEncodedStringToUnsignedChars(DFA139_minS);
    static final char[] DFA139_max = DFA.unpackEncodedStringToUnsignedChars(DFA139_maxS);
    static final short[] DFA139_accept = DFA.unpackEncodedString(DFA139_acceptS);
    static final short[] DFA139_special = DFA.unpackEncodedString(DFA139_specialS);
    static final short[][] DFA139_transition;

    static {
        int numStates = DFA139_transitionS.length;
        DFA139_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA139_transition[i] = DFA.unpackEncodedString(DFA139_transitionS[i]);
        }
    }

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;
        }
        public String getDescription() {
            return "()+ loopback of 814:6: ( (i+= '+' | i+= '-' ) multiplicativeExpression )+";
        }
    }
    static final String DFA143_eotS =
        "\130\uffff";
    static final String DFA143_eofS =
        "\1\4\127\uffff";
    static final String DFA143_minS =
        "\1\166\3\142\124\uffff";
    static final String DFA143_maxS =
        "\1\u00c3\3\u00c8\124\uffff";
    static final String DFA143_acceptS =
        "\4\uffff\1\2\30\uffff\1\1\72\uffff";
    static final String DFA143_specialS =
        "\130\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\4\3\uffff\1\1\3\uffff\4\4\1\uffff\1\4\4\uffff\2\4\22\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\16\uffff\2\4\1\2\3\4\1\3\7\4",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\4\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\4\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\4\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "821:5: ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression )";
        }
    }
    static final String DFA142_eotS =
        "\130\uffff";
    static final String DFA142_eofS =
        "\1\1\127\uffff";
    static final String DFA142_minS =
        "\1\166\23\uffff\2\142\3\uffff\1\142\76\uffff";
    static final String DFA142_maxS =
        "\1\u00c3\23\uffff\2\u00c8\3\uffff\1\u00c8\76\uffff";
    static final String DFA142_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\72\uffff";
    static final String DFA142_specialS =
        "\130\uffff}>";
    static final String[] DFA142_transitionS = {
            "\1\1\3\uffff\1\24\3\uffff\4\1\1\uffff\1\1\4\uffff\2\1\22\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\2\1\1\25\3\1\1\31\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "()+ loopback of 822:6: ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+";
        }
    }
    static final String DFA144_eotS =
        "\24\uffff";
    static final String DFA144_eofS =
        "\24\uffff";
    static final String DFA144_minS =
        "\1\142\23\uffff";
    static final String DFA144_maxS =
        "\1\u00c8\23\uffff";
    static final String DFA144_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\16\uffff";
    static final String DFA144_specialS =
        "\24\uffff}>";
    static final String[] DFA144_transitionS = {
            "\7\5\25\uffff\1\5\6\uffff\1\5\16\uffff\10\5\1\uffff\2\5\2\uffff"+
            "\3\5\22\uffff\1\1\1\2\14\uffff\1\3\1\4\3\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "827:1: unaryExpression : ( '+' unaryExpression -> unaryExpression | '-' unaryExpression -> ^( NEG unaryExpression ) | '++' unaryExpression -> ^( PREINC unaryExpression ) | '--' unaryExpression -> ^( PREDEC unaryExpression ) | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus );";
        }
    }
    static final String DFA148_eotS =
        "\44\uffff";
    static final String DFA148_eofS =
        "\44\uffff";
    static final String DFA148_minS =
        "\1\142\2\uffff\1\142\14\uffff\23\0\1\uffff";
    static final String DFA148_maxS =
        "\1\u00c8\2\uffff\1\u00c8\14\uffff\23\0\1\uffff";
    static final String DFA148_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\36\uffff\1\3";
    static final String DFA148_specialS =
        "\20\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff}>";
    static final String[] DFA148_transitionS = {
            "\7\4\25\uffff\1\4\6\uffff\1\4\16\uffff\10\4\1\uffff\1\4\1\3"+
            "\2\uffff\3\4\42\uffff\1\1\1\2\1\4",
            "",
            "",
            "\1\20\1\33\1\34\1\35\3\32\25\uffff\1\31\6\uffff\1\41\16\uffff"+
            "\10\21\1\uffff\1\42\1\30\2\uffff\1\37\2\36\22\uffff\1\22\1\23"+
            "\14\uffff\1\24\1\25\1\26\1\27\1\40",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "835:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression -> ^( INV unaryExpression ) | '!' unaryExpression -> ^( NOT unaryExpression ) | castExpression | primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA148_16 = input.LA(1);

                         
                        int index148_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA148_17 = input.LA(1);

                         
                        int index148_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA148_18 = input.LA(1);

                         
                        int index148_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA148_19 = input.LA(1);

                         
                        int index148_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA148_20 = input.LA(1);

                         
                        int index148_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA148_21 = input.LA(1);

                         
                        int index148_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_21);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA148_22 = input.LA(1);

                         
                        int index148_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_22);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA148_23 = input.LA(1);

                         
                        int index148_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_23);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA148_24 = input.LA(1);

                         
                        int index148_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_24);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA148_25 = input.LA(1);

                         
                        int index148_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_25);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA148_26 = input.LA(1);

                         
                        int index148_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_26);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA148_27 = input.LA(1);

                         
                        int index148_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_27);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA148_28 = input.LA(1);

                         
                        int index148_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_28);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA148_29 = input.LA(1);

                         
                        int index148_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_29);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA148_30 = input.LA(1);

                         
                        int index148_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_30);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA148_31 = input.LA(1);

                         
                        int index148_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_31);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA148_32 = input.LA(1);

                         
                        int index148_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_32);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA148_33 = input.LA(1);

                         
                        int index148_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_33);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA148_34 = input.LA(1);

                         
                        int index148_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 148, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA147_eotS =
        "\40\uffff";
    static final String DFA147_eofS =
        "\1\5\37\uffff";
    static final String DFA147_minS =
        "\1\166\37\uffff";
    static final String DFA147_maxS =
        "\1\u00c5\37\uffff";
    static final String DFA147_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\32\uffff";
    static final String DFA147_specialS =
        "\40\uffff}>";
    static final String[] DFA147_transitionS = {
            "\1\5\2\uffff\1\1\1\5\3\uffff\4\5\1\uffff\1\5\3\uffff\1\1\2\5"+
            "\22\uffff\1\5\2\uffff\1\5\7\uffff\1\5\16\uffff\16\5\1\3\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_eotS);
    static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_eofS);
    static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_minS);
    static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_maxS);
    static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_acceptS);
    static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_specialS);
    static final short[][] DFA147_transition;

    static {
        int numStates = DFA147_transitionS.length;
        DFA147_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA147_transition[i] = DFA.unpackEncodedString(DFA147_transitionS[i]);
        }
    }

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;
        }
        public String getDescription() {
            return "840:3: ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary )";
        }
    }
    static final String DFA145_eotS =
        "\40\uffff";
    static final String DFA145_eofS =
        "\1\1\37\uffff";
    static final String DFA145_minS =
        "\1\166\37\uffff";
    static final String DFA145_maxS =
        "\1\u00c5\37\uffff";
    static final String DFA145_acceptS =
        "\1\uffff\1\2\34\uffff\1\1\1\uffff";
    static final String DFA145_specialS =
        "\40\uffff}>";
    static final String[] DFA145_transitionS = {
            "\1\1\2\uffff\1\36\1\1\3\uffff\4\1\1\uffff\1\1\3\uffff\1\36\2"+
            "\1\22\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\20\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "()+ loopback of 841:4: ( selector )+";
        }
    }
    static final String DFA146_eotS =
        "\36\uffff";
    static final String DFA146_eofS =
        "\1\3\35\uffff";
    static final String DFA146_minS =
        "\1\166\35\uffff";
    static final String DFA146_maxS =
        "\1\u00c5\35\uffff";
    static final String DFA146_acceptS =
        "\1\uffff\1\1\1\2\1\3\32\uffff";
    static final String DFA146_specialS =
        "\36\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\4\3\1\uffff\1\3\4\uffff\2\3\22\uffff"+
            "\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3\1\1\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "842:4: ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) )";
        }
    }
    static final String DFA149_eotS =
        "\27\uffff";
    static final String DFA149_eofS =
        "\27\uffff";
    static final String DFA149_minS =
        "\1\u009e\1\142\2\0\23\uffff";
    static final String DFA149_maxS =
        "\1\u009e\1\u00c8\2\0\23\uffff";
    static final String DFA149_acceptS =
        "\4\uffff\1\3\20\uffff\1\2\1\1";
    static final String DFA149_specialS =
        "\2\uffff\1\0\1\1\23\uffff}>";
    static final String[] DFA149_transitionS = {
            "\1\1",
            "\1\2\6\4\25\uffff\1\4\6\uffff\1\4\16\uffff\10\3\1\uffff\2\4"+
            "\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "853:1: castExpression : ( '(' primitiveType ')' unaryExpression -> ^( CAST ^( TYPE primitiveType ) unaryExpression ) | '(' type ')' unaryExpressionNotPlusMinus -> ^( CAST type unaryExpressionNotPlusMinus ) | '(' expression ')' unaryExpressionNotPlusMinus ->);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_2 = input.LA(1);

                         
                        int index149_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_Java()) ) {s = 21;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA149_3 = input.LA(1);

                         
                        int index149_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_Java()) ) {s = 22;}

                        else if ( (synpred236_Java()) ) {s = 21;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA163_eotS =
        "\61\uffff";
    static final String DFA163_eofS =
        "\12\uffff\1\24\46\uffff";
    static final String DFA163_minS =
        "\1\142\10\uffff\1\142\1\166\3\uffff\1\0\2\uffff\3\0\35\uffff";
    static final String DFA163_maxS =
        "\1\u00c8\10\uffff\1\u009b\1\u00c5\3\uffff\1\0\2\uffff\3\0\35\uffff";
    static final String DFA163_acceptS =
        "\1\uffff\1\1\1\2\1\3\7\uffff\1\6\1\7\1\10\1\uffff\1\4\1\5\3\uffff"+
        "\1\11\34\uffff";
    static final String DFA163_specialS =
        "\16\uffff\1\0\2\uffff\1\1\1\2\1\3\35\uffff}>";
    static final String[] DFA163_transitionS = {
            "\1\12\6\3\25\uffff\1\2\6\uffff\1\14\16\uffff\10\13\1\uffff\1"+
            "\15\1\1\2\uffff\3\3\44\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\20\33\uffff\1\16\25\uffff\10\17",
            "\1\24\2\uffff\1\22\1\24\3\uffff\1\21\3\24\1\uffff\1\24\3\uffff"+
            "\1\23\2\24\22\uffff\1\24\1\uffff\2\24\7\uffff\1\24\16\uffff"+
            "\20\24",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA163_eot = DFA.unpackEncodedString(DFA163_eotS);
    static final short[] DFA163_eof = DFA.unpackEncodedString(DFA163_eofS);
    static final char[] DFA163_min = DFA.unpackEncodedStringToUnsignedChars(DFA163_minS);
    static final char[] DFA163_max = DFA.unpackEncodedStringToUnsignedChars(DFA163_maxS);
    static final short[] DFA163_accept = DFA.unpackEncodedString(DFA163_acceptS);
    static final short[] DFA163_special = DFA.unpackEncodedString(DFA163_specialS);
    static final short[][] DFA163_transition;

    static {
        int numStates = DFA163_transitionS.length;
        DFA163_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA163_transition[i] = DFA.unpackEncodedString(DFA163_transitionS[i]);
        }
    }

    class DFA163 extends DFA {

        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = DFA163_eot;
            this.eof = DFA163_eof;
            this.min = DFA163_min;
            this.max = DFA163_max;
            this.accept = DFA163_accept;
            this.special = DFA163_special;
            this.transition = DFA163_transition;
        }
        public String getDescription() {
            return "859:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | literal | 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) ) | 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) ) | type '.' 'class' -> ^( GETCLASS type ) | 'void' '.' 'class' -> ^( GETCLASS ^( TYPE VOID ) ) | 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) ) | Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA163_14 = input.LA(1);

                         
                        int index163_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 15;}

                        else if ( (synpred253_Java()) ) {s = 16;}

                         
                        input.seek(index163_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA163_17 = input.LA(1);

                         
                        int index163_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_Java()) ) {s = 11;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index163_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA163_18 = input.LA(1);

                         
                        int index163_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_Java()) ) {s = 11;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index163_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA163_19 = input.LA(1);

                         
                        int index163_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_Java()) ) {s = 11;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index163_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 163, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA154_eotS =
        "\26\uffff";
    static final String DFA154_eofS =
        "\26\uffff";
    static final String DFA154_minS =
        "\1\u0087\1\142\24\uffff";
    static final String DFA154_maxS =
        "\1\u0087\1\u00c8\24\uffff";
    static final String DFA154_acceptS =
        "\2\uffff\1\2\1\1\22\uffff";
    static final String DFA154_specialS =
        "\26\uffff}>";
    static final String[] DFA154_transitionS = {
            "\1\1",
            "\7\3\25\uffff\1\3\6\uffff\1\3\2\uffff\1\2\13\uffff\10\3\1\uffff"+
            "\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "864:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) )";
        }
    }
    static final String DFA151_eotS =
        "\65\uffff";
    static final String DFA151_eofS =
        "\1\2\64\uffff";
    static final String DFA151_minS =
        "\1\166\1\142\37\uffff\23\0\1\uffff";
    static final String DFA151_maxS =
        "\1\u00c5\1\u00c8\37\uffff\23\0\1\uffff";
    static final String DFA151_acceptS =
        "\2\uffff\1\2\61\uffff\1\1";
    static final String DFA151_specialS =
        "\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff}>";
    static final String[] DFA151_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\1\1\2\2\22"+
            "\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\20\2",
            "\1\60\1\52\1\53\1\54\3\51\25\uffff\1\50\6\uffff\1\62\2\uffff"+
            "\1\2\13\uffff\10\61\1\uffff\1\63\1\47\2\uffff\1\56\2\55\22\uffff"+
            "\1\41\1\42\14\uffff\1\43\1\44\1\45\1\46\1\57",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA151_eot = DFA.unpackEncodedString(DFA151_eotS);
    static final short[] DFA151_eof = DFA.unpackEncodedString(DFA151_eofS);
    static final char[] DFA151_min = DFA.unpackEncodedStringToUnsignedChars(DFA151_minS);
    static final char[] DFA151_max = DFA.unpackEncodedStringToUnsignedChars(DFA151_maxS);
    static final short[] DFA151_accept = DFA.unpackEncodedString(DFA151_acceptS);
    static final short[] DFA151_special = DFA.unpackEncodedString(DFA151_specialS);
    static final short[][] DFA151_transition;

    static {
        int numStates = DFA151_transitionS.length;
        DFA151_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA151_transition[i] = DFA.unpackEncodedString(DFA151_transitionS[i]);
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;
        }
        public String getDescription() {
            return "()+ loopback of 865:7: ( '[' expression ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA151_33 = input.LA(1);

                         
                        int index151_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_33);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA151_34 = input.LA(1);

                         
                        int index151_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_34);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA151_35 = input.LA(1);

                         
                        int index151_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_35);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA151_36 = input.LA(1);

                         
                        int index151_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_36);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA151_37 = input.LA(1);

                         
                        int index151_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_37);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA151_38 = input.LA(1);

                         
                        int index151_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_38);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA151_39 = input.LA(1);

                         
                        int index151_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_39);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA151_40 = input.LA(1);

                         
                        int index151_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_40);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA151_41 = input.LA(1);

                         
                        int index151_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_41);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA151_42 = input.LA(1);

                         
                        int index151_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_42);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA151_43 = input.LA(1);

                         
                        int index151_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_43);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA151_44 = input.LA(1);

                         
                        int index151_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_44);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA151_45 = input.LA(1);

                         
                        int index151_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_45);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA151_46 = input.LA(1);

                         
                        int index151_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_46);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA151_47 = input.LA(1);

                         
                        int index151_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_47);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA151_48 = input.LA(1);

                         
                        int index151_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_48);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA151_49 = input.LA(1);

                         
                        int index151_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_49);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA151_50 = input.LA(1);

                         
                        int index151_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_50);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA151_51 = input.LA(1);

                         
                        int index151_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 151, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA152_eotS =
        "\64\uffff";
    static final String DFA152_eofS =
        "\1\1\63\uffff";
    static final String DFA152_minS =
        "\1\166\1\uffff\1\142\61\uffff";
    static final String DFA152_maxS =
        "\1\u00c5\1\uffff\1\u00c8\61\uffff";
    static final String DFA152_acceptS =
        "\1\uffff\1\2\36\uffff\1\1\23\uffff";
    static final String DFA152_specialS =
        "\64\uffff}>";
    static final String[] DFA152_transitionS = {
            "\1\1\2\uffff\2\1\3\uffff\4\1\1\uffff\1\1\3\uffff\1\2\2\1\22"+
            "\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\20\1",
            "",
            "\7\1\25\uffff\1\1\6\uffff\1\1\2\uffff\1\40\13\uffff\10\1\1"+
            "\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "()* loopback of 865:29: ( '[' ']' )*";
        }
    }
    static final String DFA160_eotS =
        "\27\uffff";
    static final String DFA160_eofS =
        "\27\uffff";
    static final String DFA160_minS =
        "\1\u0087\1\142\25\uffff";
    static final String DFA160_maxS =
        "\1\u009e\1\u00c8\25\uffff";
    static final String DFA160_acceptS =
        "\2\uffff\1\3\1\2\1\1\22\uffff";
    static final String DFA160_specialS =
        "\27\uffff}>";
    static final String[] DFA160_transitionS = {
            "\1\1\26\uffff\1\2",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\3\13\uffff\10\4\1\uffff"+
            "\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_eotS);
    static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_eofS);
    static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_minS);
    static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_maxS);
    static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_acceptS);
    static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_specialS);
    static final short[][] DFA160_transition;

    static {
        int numStates = DFA160_transitionS.length;
        DFA160_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA160_transition[i] = DFA.unpackEncodedString(DFA160_transitionS[i]);
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = DFA160_eot;
            this.eof = DFA160_eof;
            this.min = DFA160_min;
            this.max = DFA160_max;
            this.accept = DFA160_accept;
            this.special = DFA160_special;
            this.transition = DFA160_transition;
        }
        public String getDescription() {
            return "869:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) )";
        }
    }
    static final String DFA157_eotS =
        "\65\uffff";
    static final String DFA157_eofS =
        "\1\2\64\uffff";
    static final String DFA157_minS =
        "\1\166\1\142\37\uffff\23\0\1\uffff";
    static final String DFA157_maxS =
        "\1\u00c5\1\u00c8\37\uffff\23\0\1\uffff";
    static final String DFA157_acceptS =
        "\2\uffff\1\2\61\uffff\1\1";
    static final String DFA157_specialS =
        "\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff}>";
    static final String[] DFA157_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\1\1\2\2\22"+
            "\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\20\2",
            "\1\60\1\52\1\53\1\54\3\51\25\uffff\1\50\6\uffff\1\62\2\uffff"+
            "\1\2\13\uffff\10\61\1\uffff\1\63\1\47\2\uffff\1\56\2\55\22\uffff"+
            "\1\41\1\42\14\uffff\1\43\1\44\1\45\1\46\1\57",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "()+ loopback of 870:7: ( '[' expression ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_33 = input.LA(1);

                         
                        int index157_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_33);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA157_34 = input.LA(1);

                         
                        int index157_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_34);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA157_35 = input.LA(1);

                         
                        int index157_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_35);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA157_36 = input.LA(1);

                         
                        int index157_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_36);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA157_37 = input.LA(1);

                         
                        int index157_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_37);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA157_38 = input.LA(1);

                         
                        int index157_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_38);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA157_39 = input.LA(1);

                         
                        int index157_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_39);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA157_40 = input.LA(1);

                         
                        int index157_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_40);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA157_41 = input.LA(1);

                         
                        int index157_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_41);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA157_42 = input.LA(1);

                         
                        int index157_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_42);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA157_43 = input.LA(1);

                         
                        int index157_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_43);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA157_44 = input.LA(1);

                         
                        int index157_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_44);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA157_45 = input.LA(1);

                         
                        int index157_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_45);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA157_46 = input.LA(1);

                         
                        int index157_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_46);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA157_47 = input.LA(1);

                         
                        int index157_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_47);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA157_48 = input.LA(1);

                         
                        int index157_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_48);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA157_49 = input.LA(1);

                         
                        int index157_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_49);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA157_50 = input.LA(1);

                         
                        int index157_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_50);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA157_51 = input.LA(1);

                         
                        int index157_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA158_eotS =
        "\64\uffff";
    static final String DFA158_eofS =
        "\1\1\63\uffff";
    static final String DFA158_minS =
        "\1\166\1\uffff\1\142\61\uffff";
    static final String DFA158_maxS =
        "\1\u00c5\1\uffff\1\u00c8\61\uffff";
    static final String DFA158_acceptS =
        "\1\uffff\1\2\36\uffff\1\1\23\uffff";
    static final String DFA158_specialS =
        "\64\uffff}>";
    static final String[] DFA158_transitionS = {
            "\1\1\2\uffff\2\1\3\uffff\4\1\1\uffff\1\1\3\uffff\1\2\2\1\22"+
            "\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\20\1",
            "",
            "\7\1\25\uffff\1\1\6\uffff\1\1\2\uffff\1\40\13\uffff\10\1\1"+
            "\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "()* loopback of 870:29: ( '[' ']' )*";
        }
    }
    static final String DFA161_eotS =
        "\41\uffff";
    static final String DFA161_eofS =
        "\1\2\40\uffff";
    static final String DFA161_minS =
        "\1\166\40\uffff";
    static final String DFA161_maxS =
        "\1\u00c5\40\uffff";
    static final String DFA161_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA161_specialS =
        "\41\uffff}>";
    static final String[] DFA161_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "877:3: ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) )";
        }
    }
    static final String DFA162_eotS =
        "\41\uffff";
    static final String DFA162_eofS =
        "\1\2\40\uffff";
    static final String DFA162_minS =
        "\1\166\40\uffff";
    static final String DFA162_maxS =
        "\1\u00c5\40\uffff";
    static final String DFA162_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA162_specialS =
        "\41\uffff}>";
    static final String[] DFA162_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA162_eot = DFA.unpackEncodedString(DFA162_eotS);
    static final short[] DFA162_eof = DFA.unpackEncodedString(DFA162_eofS);
    static final char[] DFA162_min = DFA.unpackEncodedStringToUnsignedChars(DFA162_minS);
    static final char[] DFA162_max = DFA.unpackEncodedStringToUnsignedChars(DFA162_maxS);
    static final short[] DFA162_accept = DFA.unpackEncodedString(DFA162_acceptS);
    static final short[] DFA162_special = DFA.unpackEncodedString(DFA162_specialS);
    static final short[][] DFA162_transition;

    static {
        int numStates = DFA162_transitionS.length;
        DFA162_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA162_transition[i] = DFA.unpackEncodedString(DFA162_transitionS[i]);
        }
    }

    class DFA162 extends DFA {

        public DFA162(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = DFA162_eot;
            this.eof = DFA162_eof;
            this.min = DFA162_min;
            this.max = DFA162_max;
            this.accept = DFA162_accept;
            this.special = DFA162_special;
            this.transition = DFA162_transition;
        }
        public String getDescription() {
            return "882:6: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) )";
        }
    }
    static final String DFA164_eotS =
        "\41\uffff";
    static final String DFA164_eofS =
        "\1\2\40\uffff";
    static final String DFA164_minS =
        "\1\166\40\uffff";
    static final String DFA164_maxS =
        "\1\u00c5\40\uffff";
    static final String DFA164_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA164_specialS =
        "\41\uffff}>";
    static final String[] DFA164_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\1\1\2\3\uffff\3\2\22\uffff\1"+
            "\2\2\uffff\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "893:14: ( classBody )?";
        }
    }
    static final String DFA166_eotS =
        "\41\uffff";
    static final String DFA166_eofS =
        "\1\2\40\uffff";
    static final String DFA166_minS =
        "\1\166\40\uffff";
    static final String DFA166_maxS =
        "\1\u00c5\40\uffff";
    static final String DFA166_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA166_specialS =
        "\41\uffff}>";
    static final String[] DFA166_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "911:21: ( arguments )?";
        }
    }
    static final String DFA169_eotS =
        "\41\uffff";
    static final String DFA169_eofS =
        "\1\2\40\uffff";
    static final String DFA169_minS =
        "\1\166\40\uffff";
    static final String DFA169_maxS =
        "\1\u00c5\40\uffff";
    static final String DFA169_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA169_specialS =
        "\41\uffff}>";
    static final String[] DFA169_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA169_eot = DFA.unpackEncodedString(DFA169_eotS);
    static final short[] DFA169_eof = DFA.unpackEncodedString(DFA169_eofS);
    static final char[] DFA169_min = DFA.unpackEncodedStringToUnsignedChars(DFA169_minS);
    static final char[] DFA169_max = DFA.unpackEncodedStringToUnsignedChars(DFA169_maxS);
    static final short[] DFA169_accept = DFA.unpackEncodedString(DFA169_acceptS);
    static final short[] DFA169_special = DFA.unpackEncodedString(DFA169_specialS);
    static final short[][] DFA169_transition;

    static {
        int numStates = DFA169_transitionS.length;
        DFA169_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA169_transition[i] = DFA.unpackEncodedString(DFA169_transitionS[i]);
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = DFA169_eot;
            this.eof = DFA169_eof;
            this.min = DFA169_min;
            this.max = DFA169_max;
            this.accept = DFA169_accept;
            this.special = DFA169_special;
            this.transition = DFA169_transition;
        }
        public String getDescription() {
            return "919:3: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) )";
        }
    }
    static final String DFA171_eotS =
        "\25\uffff";
    static final String DFA171_eofS =
        "\25\uffff";
    static final String DFA171_minS =
        "\1\142\24\uffff";
    static final String DFA171_maxS =
        "\1\u00c8\24\uffff";
    static final String DFA171_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA171_specialS =
        "\25\uffff}>";
    static final String[] DFA171_transitionS = {
            "\7\1\25\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff\2\1\1\24"+
            "\1\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA171_eot = DFA.unpackEncodedString(DFA171_eotS);
    static final short[] DFA171_eof = DFA.unpackEncodedString(DFA171_eofS);
    static final char[] DFA171_min = DFA.unpackEncodedStringToUnsignedChars(DFA171_minS);
    static final char[] DFA171_max = DFA.unpackEncodedStringToUnsignedChars(DFA171_maxS);
    static final short[] DFA171_accept = DFA.unpackEncodedString(DFA171_acceptS);
    static final short[] DFA171_special = DFA.unpackEncodedString(DFA171_specialS);
    static final short[][] DFA171_transition;

    static {
        int numStates = DFA171_transitionS.length;
        DFA171_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA171_transition[i] = DFA.unpackEncodedString(DFA171_transitionS[i]);
        }
    }

    class DFA171 extends DFA {

        public DFA171(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 171;
            this.eot = DFA171_eot;
            this.eof = DFA171_eof;
            this.min = DFA171_min;
            this.max = DFA171_max;
            this.accept = DFA171_accept;
            this.special = DFA171_special;
            this.transition = DFA171_transition;
        }
        public String getDescription() {
            return "927:9: ( expressionList )?";
        }
    }
    static final String DFA211_eotS =
        "\26\uffff";
    static final String DFA211_eofS =
        "\26\uffff";
    static final String DFA211_minS =
        "\1\u0087\1\142\24\uffff";
    static final String DFA211_maxS =
        "\1\u0087\1\u00c8\24\uffff";
    static final String DFA211_acceptS =
        "\2\uffff\1\2\1\1\22\uffff";
    static final String DFA211_specialS =
        "\26\uffff}>";
    static final String[] DFA211_transitionS = {
            "\1\1",
            "\7\3\25\uffff\1\3\6\uffff\1\3\2\uffff\1\2\13\uffff\10\3\1\uffff"+
            "\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA211_eot = DFA.unpackEncodedString(DFA211_eotS);
    static final short[] DFA211_eof = DFA.unpackEncodedString(DFA211_eofS);
    static final char[] DFA211_min = DFA.unpackEncodedStringToUnsignedChars(DFA211_minS);
    static final char[] DFA211_max = DFA.unpackEncodedStringToUnsignedChars(DFA211_maxS);
    static final short[] DFA211_accept = DFA.unpackEncodedString(DFA211_acceptS);
    static final short[] DFA211_special = DFA.unpackEncodedString(DFA211_specialS);
    static final short[][] DFA211_transition;

    static {
        int numStates = DFA211_transitionS.length;
        DFA211_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA211_transition[i] = DFA.unpackEncodedString(DFA211_transitionS[i]);
        }
    }

    class DFA211 extends DFA {

        public DFA211(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 211;
            this.eot = DFA211_eot;
            this.eof = DFA211_eof;
            this.min = DFA211_min;
            this.max = DFA211_max;
            this.accept = DFA211_accept;
            this.special = DFA211_special;
            this.transition = DFA211_transition;
        }
        public String getDescription() {
            return "864:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer )";
        }
    }
    static final String DFA208_eotS =
        "\27\uffff";
    static final String DFA208_eofS =
        "\1\2\26\uffff";
    static final String DFA208_minS =
        "\1\u0087\1\142\25\uffff";
    static final String DFA208_maxS =
        "\1\u0087\1\u00c8\25\uffff";
    static final String DFA208_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\22\uffff";
    static final String DFA208_specialS =
        "\27\uffff}>";
    static final String[] DFA208_transitionS = {
            "\1\1",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\2\13\uffff\10\4\1\uffff"+
            "\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA208_eot = DFA.unpackEncodedString(DFA208_eotS);
    static final short[] DFA208_eof = DFA.unpackEncodedString(DFA208_eofS);
    static final char[] DFA208_min = DFA.unpackEncodedStringToUnsignedChars(DFA208_minS);
    static final char[] DFA208_max = DFA.unpackEncodedStringToUnsignedChars(DFA208_maxS);
    static final short[] DFA208_accept = DFA.unpackEncodedString(DFA208_acceptS);
    static final short[] DFA208_special = DFA.unpackEncodedString(DFA208_specialS);
    static final short[][] DFA208_transition;

    static {
        int numStates = DFA208_transitionS.length;
        DFA208_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA208_transition[i] = DFA.unpackEncodedString(DFA208_transitionS[i]);
        }
    }

    class DFA208 extends DFA {

        public DFA208(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 208;
            this.eot = DFA208_eot;
            this.eof = DFA208_eof;
            this.min = DFA208_min;
            this.max = DFA208_max;
            this.accept = DFA208_accept;
            this.special = DFA208_special;
            this.transition = DFA208_transition;
        }
        public String getDescription() {
            return "()+ loopback of 865:7: ( '[' expression ']' )+";
        }
    }
    static final String DFA220_eotS =
        "\27\uffff";
    static final String DFA220_eofS =
        "\27\uffff";
    static final String DFA220_minS =
        "\1\u0087\1\142\25\uffff";
    static final String DFA220_maxS =
        "\1\u009e\1\u00c8\25\uffff";
    static final String DFA220_acceptS =
        "\2\uffff\1\3\1\2\1\1\22\uffff";
    static final String DFA220_specialS =
        "\27\uffff}>";
    static final String[] DFA220_transitionS = {
            "\1\1\26\uffff\1\2",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\3\13\uffff\10\4\1\uffff"+
            "\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA220_eot = DFA.unpackEncodedString(DFA220_eotS);
    static final short[] DFA220_eof = DFA.unpackEncodedString(DFA220_eofS);
    static final char[] DFA220_min = DFA.unpackEncodedStringToUnsignedChars(DFA220_minS);
    static final char[] DFA220_max = DFA.unpackEncodedStringToUnsignedChars(DFA220_maxS);
    static final short[] DFA220_accept = DFA.unpackEncodedString(DFA220_acceptS);
    static final short[] DFA220_special = DFA.unpackEncodedString(DFA220_specialS);
    static final short[][] DFA220_transition;

    static {
        int numStates = DFA220_transitionS.length;
        DFA220_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA220_transition[i] = DFA.unpackEncodedString(DFA220_transitionS[i]);
        }
    }

    class DFA220 extends DFA {

        public DFA220(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 220;
            this.eot = DFA220_eot;
            this.eof = DFA220_eof;
            this.min = DFA220_min;
            this.max = DFA220_max;
            this.accept = DFA220_accept;
            this.special = DFA220_special;
            this.transition = DFA220_transition;
        }
        public String getDescription() {
            return "869:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest )";
        }
    }
    static final String DFA217_eotS =
        "\27\uffff";
    static final String DFA217_eofS =
        "\1\2\26\uffff";
    static final String DFA217_minS =
        "\1\u0087\1\142\25\uffff";
    static final String DFA217_maxS =
        "\1\u0087\1\u00c8\25\uffff";
    static final String DFA217_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\22\uffff";
    static final String DFA217_specialS =
        "\27\uffff}>";
    static final String[] DFA217_transitionS = {
            "\1\1",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\2\13\uffff\10\4\1\uffff"+
            "\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA217_eot = DFA.unpackEncodedString(DFA217_eotS);
    static final short[] DFA217_eof = DFA.unpackEncodedString(DFA217_eofS);
    static final char[] DFA217_min = DFA.unpackEncodedStringToUnsignedChars(DFA217_minS);
    static final char[] DFA217_max = DFA.unpackEncodedStringToUnsignedChars(DFA217_maxS);
    static final short[] DFA217_accept = DFA.unpackEncodedString(DFA217_acceptS);
    static final short[] DFA217_special = DFA.unpackEncodedString(DFA217_specialS);
    static final short[][] DFA217_transition;

    static {
        int numStates = DFA217_transitionS.length;
        DFA217_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA217_transition[i] = DFA.unpackEncodedString(DFA217_transitionS[i]);
        }
    }

    class DFA217 extends DFA {

        public DFA217(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 217;
            this.eot = DFA217_eot;
            this.eof = DFA217_eof;
            this.min = DFA217_min;
            this.max = DFA217_max;
            this.accept = DFA217_accept;
            this.special = DFA217_special;
            this.transition = DFA217_transition;
        }
        public String getDescription() {
            return "()+ loopback of 870:7: ( '[' expression ']' )+";
        }
    }
 

    public static final BitSet FOLLOW_annotations_in_compilationUnit457 = new BitSet(new long[]{0x0000000000000400L,0x09E0000000000000L,0x00000010000FFC10L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit460 = new BitSet(new long[]{0x0000000000000400L,0x09E0000000000000L,0x00000010000FFC10L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit463 = new BitSet(new long[]{0x0000000000000400L,0x09E0000000000000L,0x00000010000FFC10L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit466 = new BitSet(new long[]{0x0000000000000402L,0x09E0000000000000L,0x00000010000FFC10L});
    public static final BitSet FOLLOW_117_in_packageDeclaration500 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_qualifiedName_in_packageDeclaration502 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_packageDeclaration504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_importDeclaration524 = new BitSet(new long[]{0x0000000000000000L,0x0100000400000000L});
    public static final BitSet FOLLOW_120_in_importDeclaration531 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration535 = new BitSet(new long[]{0x0000000000000000L,0x0240000000000000L});
    public static final BitSet FOLLOW_121_in_importDeclaration538 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration542 = new BitSet(new long[]{0x0000000000000000L,0x0240000000000000L});
    public static final BitSet FOLLOW_121_in_importDeclaration547 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_importDeclaration551 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_importDeclaration555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration574 = new BitSet(new long[]{0x0000000000000000L,0x0240000000000000L});
    public static final BitSet FOLLOW_121_in_importDeclaration577 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration581 = new BitSet(new long[]{0x0000000000000000L,0x0240000000000000L});
    public static final BitSet FOLLOW_121_in_importDeclaration586 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_importDeclaration590 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_importDeclaration594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_typeDeclaration631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_classOrInterfaceDeclaration643 = new BitSet(new long[]{0x0000000000000400L,0x0900000000000000L,0x00000010000FFC10L});
    public static final BitSet FOLLOW_classDeclaration_in_classOrInterfaceDeclaration650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classOrInterfaceDeclaration672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_classDeclaration727 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_classDeclaration729 = new BitSet(new long[]{0x0000000000000000L,0x7000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_typeParameters_in_classDeclaration732 = new BitSet(new long[]{0x0000000000000000L,0x7000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_124_in_classDeclaration745 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_type_in_classDeclaration747 = new BitSet(new long[]{0x0000000000000000L,0x7000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_125_in_classDeclaration761 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_typeList_in_classDeclaration763 = new BitSet(new long[]{0x0000000000000000L,0x7000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classBody_in_classDeclaration775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_typeParameters812 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters816 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_127_in_typeParameters819 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters823 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_typeParameters827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeParameter844 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_typeParameter847 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_bound_in_typeParameter849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_bound883 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_bound886 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_type_in_bound890 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_in_enumDeclaration909 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_enumDeclaration911 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_125_in_enumDeclaration914 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_typeList_in_enumDeclaration916 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_enumBody_in_enumDeclaration920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_enumBody946 = new BitSet(new long[]{0x0000000000000000L,0x0040000400000000L,0x0000001000000008L});
    public static final BitSet FOLLOW_enumConstants_in_enumBody948 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_enumBodyDeclarations_in_enumBody951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_enumBody954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants973 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_enumConstants976 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants978 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_annotations_in_enumConstant997 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_enumConstant1000 = new BitSet(new long[]{0x0000000000000002L,0x7000000000000000L,0x0000000040000004L});
    public static final BitSet FOLLOW_arguments_in_enumConstant1003 = new BitSet(new long[]{0x0000000000000002L,0x7000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classBody_in_enumConstant1008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_enumBodyDeclarations1043 = new BitSet(new long[]{0x0000000000000402L,0x4940000400000000L,0x000000100FFFFC34L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_enumBodyDeclarations1046 = new BitSet(new long[]{0x0000000000000402L,0x4940000400000000L,0x000000100FFFFC34L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration1065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration1070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_normalInterfaceDeclaration1082 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_normalInterfaceDeclaration1084 = new BitSet(new long[]{0x0000000000000000L,0x5000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_typeParameters_in_normalInterfaceDeclaration1086 = new BitSet(new long[]{0x0000000000000000L,0x5000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_124_in_normalInterfaceDeclaration1090 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_typeList_in_normalInterfaceDeclaration1092 = new BitSet(new long[]{0x0000000000000000L,0x5000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_interfaceBody_in_normalInterfaceDeclaration1096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList1127 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_typeList1130 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_type_in_typeList1133 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_130_in_classBody1147 = new BitSet(new long[]{0x0000000000000400L,0x4940000400000000L,0x000000100FFFFC3CL});
    public static final BitSet FOLLOW_classBodyDeclaration_in_classBody1150 = new BitSet(new long[]{0x0000000000000400L,0x4940000400000000L,0x000000100FFFFC3CL});
    public static final BitSet FOLLOW_131_in_classBody1153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_interfaceBody1166 = new BitSet(new long[]{0x0000000000000400L,0x4940000400000000L,0x000000100FFFFC3CL});
    public static final BitSet FOLLOW_interfaceBodyDeclaration_in_interfaceBody1169 = new BitSet(new long[]{0x0000000000000400L,0x4940000400000000L,0x000000100FFFFC3CL});
    public static final BitSet FOLLOW_131_in_interfaceBody1172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_classBodyDeclaration1184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_classBodyDeclaration1190 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration1192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_classBodyDeclaration1205 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration1208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_classBodyDeclaration1217 = new BitSet(new long[]{0x0000000000000400L,0x4940000400000000L,0x000000100FFFFC34L});
    public static final BitSet FOLLOW_genericMethodOrConstructorDecl_in_classBodyDeclaration1227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_classBodyDeclaration1253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_classBodyDeclaration1279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_classBodyDeclaration1304 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_classBodyDeclaration1306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_classBodyDeclaration1308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_classBodyDeclaration1342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_classBodyDeclaration1344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classBodyDeclaration1375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_classBodyDeclaration1400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classBodyDeclaration1427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_genericMethodOrConstructorDecl1461 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00020L});
    public static final BitSet FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl1463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericMethodOrConstructorRest1475 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_genericMethodOrConstructorRest1493 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest1517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_methodDeclaration1538 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_methodDeclaration1540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_methodDeclaration1542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_fieldDeclaration1562 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_fieldDeclaration1564 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_fieldDeclaration1566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_interfaceBodyDeclaration1585 = new BitSet(new long[]{0x0000000000000400L,0x4940000400000000L,0x000000100FFFFC34L});
    public static final BitSet FOLLOW_constantDeclaration_in_interfaceBodyDeclaration1592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceBodyDeclaration1614 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceBodyDeclaration1616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceGenericMethodDecl_in_interfaceBodyDeclaration1645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_interfaceBodyDeclaration1667 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceBodyDeclaration1669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_interfaceBodyDeclaration1702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_interfaceBodyDeclaration1725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_interfaceBodyDeclaration1752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_interfaceBodyDeclaration1777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaratorRest1791 = new BitSet(new long[]{0x0000000000000000L,0x0140000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_134_in_methodDeclaratorRest1803 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_typeList_in_methodDeclaratorRest1805 = new BitSet(new long[]{0x0000000000000000L,0x0140000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_methodBody_in_methodDeclaratorRest1821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_methodDeclaratorRest1849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidMethodDeclaratorRest1883 = new BitSet(new long[]{0x0000000000000000L,0x0140000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_134_in_voidMethodDeclaratorRest1886 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_typeList_in_voidMethodDeclaratorRest1888 = new BitSet(new long[]{0x0000000000000000L,0x0140000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_methodBody_in_voidMethodDeclaratorRest1904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_voidMethodDeclaratorRest1932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest1966 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_interfaceMethodDeclaratorRest1969 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_typeList_in_interfaceMethodDeclaratorRest1971 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_interfaceMethodDeclaratorRest1975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceGenericMethodDecl1999 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00020L});
    public static final BitSet FOLLOW_type_in_interfaceGenericMethodDecl2005 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceGenericMethodDecl2007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl2009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_interfaceGenericMethodDecl2025 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceGenericMethodDecl2027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl2029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest2059 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_voidInterfaceMethodDeclaratorRest2062 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_typeList_in_voidInterfaceMethodDeclaratorRest2064 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_voidInterfaceMethodDeclaratorRest2068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_constructorDeclaratorRest2092 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_134_in_constructorDeclaratorRest2095 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_typeList_in_constructorDeclaratorRest2097 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_methodBody_in_constructorDeclaratorRest2101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators2130 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_variableDeclarators2133 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators2137 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclarator2156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_variableDeclaratorRest_in_variableDeclarator2158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_variableDeclaratorRest2180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_variableDeclaratorRest2182 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_137_in_variableDeclaratorRest2187 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0000E6FF00024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest2189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_variableDeclaratorRest2204 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0000E6FF00024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest2206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_constantDeclaration2224 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_constantDeclarators_in_constantDeclaration2226 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_constantDeclaration2228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_constantDeclarator2245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclarator2247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclarator_in_constantDeclarators2270 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_constantDeclarators2273 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_constantDeclarator_in_constantDeclarators2277 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_135_in_constantDeclaratorRest2298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_constantDeclaratorRest2300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_137_in_constantDeclaratorRest2304 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0000E6FF00024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_variableInitializer_in_constantDeclaratorRest2306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaratorId2325 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_variableDeclaratorId2328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_variableDeclaratorId2330 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer2343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer2353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_arrayInitializer2365 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0000E6FF0002CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer2368 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_127_in_arrayInitializer2371 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0000E6FF00024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer2373 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_127_in_arrayInitializer2378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_arrayInitializer2385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_modifier2410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_modifier2420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_modifier2430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_modifier2440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_modifier2450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_modifier2460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_modifier2470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_modifier2480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_modifier2490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_modifier2500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_modifier2510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_modifier2520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_packageOrTypeName2534 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_packageOrTypeName2537 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_packageOrTypeName2539 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_Identifier_in_enumConstantName2557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeName2573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_packageOrTypeName_in_typeName2583 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_typeName2585 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_typeName2587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_refComponent_in_type2600 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_121_in_type2603 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_refComponent_in_type2607 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_type2612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_type2614 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_primitiveType_in_type2636 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_type2639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_type2641 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_Identifier_in_refComponent2670 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeArguments_in_refComponent2673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_primitiveType0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_variableModifier2773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_variableModifier2783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_typeArguments2794 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000001FF00000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments2798 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_127_in_typeArguments2801 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000001FF00000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments2805 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_typeArguments2809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument2827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_typeArgument2832 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_124_in_typeArgument2841 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_type_in_typeArgument2843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_typeArgument2876 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000000FF00000L});
    public static final BitSet FOLLOW_type_in_typeArgument2878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList2920 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_qualifiedNameList2923 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList2926 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_158_in_formalParameters2940 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000108FF04000L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameters2942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_formalParameters2945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameterDecls2962 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls2965 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDecls2977 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_formalParameterDecls2980 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameterDecls2982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_formalParameterDecls3016 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDecls3018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_methodBody3061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName3079 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_qualifiedName3082 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName3086 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_integerLiteral_in_literal3109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FloatingPointLiteral_in_literal3127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CharacterLiteral_in_literal3145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal3163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal3181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_literal3199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_integerLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_booleanLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotations3287 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_164_in_annotation3299 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_annotationName_in_annotation3301 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_annotation3304 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001EEFF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_elementValuePairs_in_annotation3306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_annotation3309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationName3331 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_annotationName3334 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_annotationName3336 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs3350 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_elementValuePairs3353 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs3355 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_Identifier_in_elementValuePair3370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_elementValuePair3372 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair3376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue3388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue3395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue3402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_elementValueArrayInitializer3414 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF0402CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer3417 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_127_in_elementValueArrayInitializer3420 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer3422 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_elementValueArrayInitializer3429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_annotationTypeDeclaration3441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_annotationTypeDeclaration3443 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_annotationTypeDeclaration3445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_annotationTypeBody_in_annotationTypeDeclaration3447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_annotationTypeBody3459 = new BitSet(new long[]{0x0000000000000400L,0x4940000400000000L,0x000000100FFFFC3CL});
    public static final BitSet FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody3462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_annotationTypeBody3466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3479 = new BitSet(new long[]{0x0000000000000402L,0x4940000400000000L,0x000000100FFFFC34L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3483 = new BitSet(new long[]{0x0000000000000402L,0x4940000400000000L,0x000000100FFFFC34L});
    public static final BitSet FOLLOW_modifier_in_annotationTypeElementDeclaration3498 = new BitSet(new long[]{0x0000000000000400L,0x4940000400000000L,0x000000100FFFFC34L});
    public static final BitSet FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration3502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_annotationTypeElementRest3514 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest3516 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_annotationTypeElementRest3518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_annotationTypeElementRest3525 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_annotationTypeElementRest3527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_annotationTypeElementRest3535 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_annotationTypeElementRest3537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_annotationTypeElementRest3545 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_annotationTypeElementRest3547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest3555 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_annotationTypeElementRest3557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest3570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest3577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationMethodRest3590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_annotationMethodRest3592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_annotationMethodRest3594 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_defaultValue_in_annotationMethodRest3597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarators_in_annotationConstantRest3614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_defaultValue3629 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_elementValue_in_defaultValue3631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_block3645 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_blockStatement_in_block3647 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_131_in_block3650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_blockStatement3671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_blockStatement3676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement3684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_localVariableDeclaration3696 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration3699 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_localVariableDeclaration3701 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_localVariableDeclaration3703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement3732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_statement3742 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0000E6FF00024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_statement3744 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_statement3747 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0000E6FF00024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_statement3749 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_statement3753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_statement3775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_parExpression_in_statement3777 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_statement_in_statement3779 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_169_in_statement3789 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_statement_in_statement3791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_statement3817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_statement3819 = new BitSet(new long[]{0x0000000000000000L,0x404001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_forControl_in_statement3821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_statement3823 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_statement_in_statement3825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_statement3846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_parExpression_in_statement3848 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_statement_in_statement3850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_statement3875 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_statement_in_statement3877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_171_in_statement3879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_parExpression_in_statement3881 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_statement3883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_statement3908 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_block_in_statement3910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010400000000000L});
    public static final BitSet FOLLOW_catches_in_statement3920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_174_in_statement3924 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_block_in_statement3926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_statement3954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_statement3977 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_block_in_statement3979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_statement4013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_parExpression_in_statement4015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_statement4017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020002000000008L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_statement4019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_statement4021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_statement4042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_parExpression_in_statement4044 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_block_in_statement4046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_statement4067 = new BitSet(new long[]{0x0000000000000000L,0x404001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_statement4069 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_statement4072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_statement4092 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_statement4094 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_statement4096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_statement4115 = new BitSet(new long[]{0x0000000000000000L,0x0040000400000000L});
    public static final BitSet FOLLOW_Identifier_in_statement4117 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_statement4120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_statement4140 = new BitSet(new long[]{0x0000000000000000L,0x0040000400000000L});
    public static final BitSet FOLLOW_Identifier_in_statement4142 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_statement4145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_statement4163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementExpression_in_statement4178 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_statement4180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_statement4194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_statement4196 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_statement_in_statement4198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches4220 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_catchClause_in_catches4223 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_180_in_catchClause4239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_catchClause4241 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_formalParameter_in_catchClause4243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_catchClause4245 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_block_in_catchClause4247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameter4273 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_formalParameter4276 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameter4278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups4292 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020002000000000L});
    public static final BitSet FOLLOW_switchLabel_in_switchBlockStatementGroup4306 = new BitSet(new long[]{0x0000000000000402L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_blockStatement_in_switchBlockStatementGroup4308 = new BitSet(new long[]{0x0000000000000402L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_181_in_switchLabel4336 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_constantExpression_in_switchLabel4338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_switchLabel4340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_switchLabel4356 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_enumConstantName_in_switchLabel4358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_switchLabel4360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_switchLabel4376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_switchLabel4378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_moreStatementExpressions4397 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_statementExpression_in_moreStatementExpressions4399 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_forVarControl_in_forControl4420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_forControl4433 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_forControl4436 = new BitSet(new long[]{0x0000000000000000L,0x404001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_forControl4440 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_forControl4443 = new BitSet(new long[]{0x0000000000000002L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_forUpdate_in_forControl4447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forInit4482 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_forInit4485 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_forInit4487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit4509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forVarControl4521 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_forVarControl4524 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_forVarControl4526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_forVarControl4528 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_forVarControl4530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdate4560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_parExpression4573 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_parExpression4576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_parExpression4578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList4596 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_expressionList4599 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expressionList4602 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_expression_in_statementExpression4618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constantExpression4630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression4642 = new BitSet(new long[]{0x0000000000000002L,0x4400000000000000L,0x1FC0000000000201L});
    public static final BitSet FOLLOW_137_in_expression4652 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_expression4673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_expression4675 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_expression4705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_expression4707 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_expression4737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_expression4739 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_expression4769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_expression4771 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_expression4802 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_expression4827 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_expression4852 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_expression4882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_expression4884 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_expression4914 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_expression4916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_expression4918 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_expression4948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_expression4950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_expression4952 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_expression4980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_expression4982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_expression4984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_expression4986 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_expression4988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression5035 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_156_in_conditionalExpression5052 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression5054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_conditionalExpression5056 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression5058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5105 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_189_in_conditionalOrExpression5123 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalOrExpression5125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5171 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_conditionalAndExpression5189 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalAndExpression5191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5243 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_191_in_inclusiveOrExpression5265 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_inclusiveOrExpression5267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression5314 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_192_in_exclusiveOrExpression5330 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_exclusiveOrExpression5332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression5376 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_andExpression5392 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_andExpression_in_andExpression5394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5438 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_193_in_equalityExpression5454 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_equalityExpression5477 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression5523 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_195_in_instanceOfExpression5538 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression5540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5584 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_126_in_relationalExpression5600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_relationalExpression5602 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_relationalExpression5625 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_relationalExpression5648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_relationalExpression5650 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_relationalExpression5673 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5720 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_126_in_shiftExpression5739 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_shiftExpression5741 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_128_in_shiftExpression5745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_shiftExpression5747 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5750 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_shiftExpression5784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_shiftExpression5786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_shiftExpression5788 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5790 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5833 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00C0000000000000L});
    public static final BitSet FOLLOW_182_in_additiveExpression5852 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_183_in_additiveExpression5856 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5859 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00C0000000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5910 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L,0x1100000000000000L});
    public static final BitSet FOLLOW_122_in_multiplicativeExpression5930 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_184_in_multiplicativeExpression5934 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_188_in_multiplicativeExpression5938 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5941 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L,0x1100000000000000L});
    public static final BitSet FOLLOW_182_in_unaryExpression5993 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_unaryExpression6007 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_unaryExpression6027 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_unaryExpression6047 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression6067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_unaryExpressionNotPlusMinus6098 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_unaryExpressionNotPlusMinus6117 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus6137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus6144 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000000000000080L,0x0000000000000030L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus6154 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000000000000080L,0x0000000000000030L});
    public static final BitSet FOLLOW_196_in_unaryExpressionNotPlusMinus6167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_unaryExpressionNotPlusMinus6189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_unaryExpressionNotPlusMinus6233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_unaryExpressionNotPlusMinus6248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_castExpression6287 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression6289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_castExpression6291 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression6293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_castExpression6316 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_castExpression6318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_castExpression6320 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_castExpression6341 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_castExpression6343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_castExpression6345 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary6367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6374 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_primary6376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary6400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_primary6410 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6412 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_primitiveType_in_primary6415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_primary6431 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_primary6433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_primary6435 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_primary6440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_primary6442 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_primary6473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_primary6475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000084L});
    public static final BitSet FOLLOW_arrayInitializer_in_primary6479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_primary6511 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6513 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L});
    public static final BitSet FOLLOW_refComponent_in_primary6519 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_121_in_primary6522 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L});
    public static final BitSet FOLLOW_refComponent_in_primary6526 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_135_in_primary6545 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_primary6547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_primary6549 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_primary6554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_primary6556 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_primary6589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_primary6591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000084L});
    public static final BitSet FOLLOW_arrayInitializer_in_primary6595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_primary6624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_primary6656 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_primary6658 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_primary6660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_primary6682 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_primary6684 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_primary6686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_primary6707 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_arguments_in_primary6717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_primary6755 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_arguments_in_primary6771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_innerCreator6816 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator6818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest6840 = new BitSet(new long[]{0x0000000000000002L,0x7000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classBody_in_classCreatorRest6842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation6863 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_explicitGenericInvocation6865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_nonWildcardTypeArguments6877 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments6879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_nonWildcardTypeArguments6881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_explicitGenericInvocationSuffix6897 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_superSuffix_in_explicitGenericInvocationSuffix6899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_explicitGenericInvocationSuffix6913 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocationSuffix6915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix6934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_superSuffix6946 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_superSuffix6948 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_arguments_in_superSuffix6951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_selector6965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_157_in_selector6967 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_arguments_in_selector6969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_selector6987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_200_in_selector6989 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector6992 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L});
    public static final BitSet FOLLOW_innerCreator_in_selector6996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_selector7011 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector7013 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_selector7015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_selector7034 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_selector7036 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_arguments_in_selector7046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_selector7081 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_selector7083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_selector7085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_arguments7104 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001EEFF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expressionList_in_arguments7107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_arguments7110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_synpred1_Java457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_synpred35_Java1190 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_block_in_synpred35_Java1192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_synpred37_Java1205 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_block_in_synpred37_Java1208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_synpred40_Java1253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_synpred41_Java1279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaration_in_synpred49_Java1592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred50_Java1614 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_synpred50_Java1616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_synpred50_Java1618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_synpred87_Java2537 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Identifier_in_synpred87_Java2539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_synpred105_Java2841 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_synpred105_Java2843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred121_Java3287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_synpred138_Java3535 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_synpred138_Java3537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred145_Java3671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred146_Java3676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_synpred151_Java3789 = new BitSet(new long[]{0x0000000000000400L,0x494001FC00000000L,0x00CFBD5E6FFFFC7CL,0x00000000000001F0L});
    public static final BitSet FOLLOW_statement_in_synpred151_Java3791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred156_Java3920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_174_in_synpred156_Java3924 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_block_in_synpred156_Java3926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred157_Java3954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_synpred174_Java4336 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_constantExpression_in_synpred174_Java4338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_synpred174_Java4340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_synpred175_Java4356 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_enumConstantName_in_synpred175_Java4358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_synpred175_Java4360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forVarControl_in_synpred177_Java4420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_synpred182_Java4482 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_synpred182_Java4485 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_synpred182_Java4487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_synpred185_Java4652 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred185_Java4654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_synpred186_Java4673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_synpred186_Java4675 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred186_Java4677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_synpred187_Java4705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_synpred187_Java4707 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred187_Java4709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_synpred188_Java4737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_synpred188_Java4739 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred188_Java4741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_synpred189_Java4769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_synpred189_Java4771 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred189_Java4773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_synpred190_Java4802 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred190_Java4804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_synpred191_Java4827 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred191_Java4829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_synpred192_Java4852 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred192_Java4854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_synpred193_Java4882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_synpred193_Java4884 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred193_Java4886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_synpred194_Java4914 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_synpred194_Java4916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_synpred194_Java4918 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred194_Java4920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_synpred195_Java4948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred195_Java4950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_synpred195_Java4952 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred195_Java4954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_synpred196_Java4980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred196_Java4982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred196_Java4984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_synpred196_Java4986 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred196_Java4988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_synpred207_Java5625 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_shiftExpression_in_synpred207_Java5627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_synpred211_Java5739 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_synpred211_Java5741 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_128_in_synpred211_Java5745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred211_Java5747 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred211_Java5750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_synpred212_Java5739 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_synpred212_Java5741 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_128_in_synpred212_Java5745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred212_Java5747 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred212_Java5750 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred213_Java5784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred213_Java5786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred213_Java5788 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred213_Java5790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_synpred214_Java5784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred214_Java5786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred214_Java5788 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred214_Java5790 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_castExpression_in_synpred228_Java6137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_synpred235_Java6287 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_primitiveType_in_synpred235_Java6289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_synpred235_Java6291 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred235_Java6293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_synpred236_Java6316 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_type_in_synpred236_Java6318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_synpred236_Java6320 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_synpred236_Java6322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_synpred241_Java6431 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred241_Java6433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred241_Java6435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_synpred245_Java6410 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred245_Java6412 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L,0x000000100FF04000L});
    public static final BitSet FOLLOW_primitiveType_in_synpred245_Java6415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred245_Java6431 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred245_Java6433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred245_Java6435 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred245_Java6440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred245_Java6442 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred245_Java6473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred245_Java6475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000084L});
    public static final BitSet FOLLOW_arrayInitializer_in_synpred245_Java6479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_synpred248_Java6545 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred248_Java6547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred248_Java6549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_synpred253_Java6511 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred253_Java6513 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L});
    public static final BitSet FOLLOW_refComponent_in_synpred253_Java6519 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_121_in_synpred253_Java6522 = new BitSet(new long[]{0x0000000000000000L,0x4000000400000000L});
    public static final BitSet FOLLOW_refComponent_in_synpred253_Java6526 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_135_in_synpred253_Java6545 = new BitSet(new long[]{0x0000000000000000L,0x400001FC00000000L,0x00C0001E6FF04024L,0x00000000000001F0L});
    public static final BitSet FOLLOW_expression_in_synpred253_Java6547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred253_Java6549 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred253_Java6554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred253_Java6556 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred253_Java6589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred253_Java6591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000084L});
    public static final BitSet FOLLOW_arrayInitializer_in_synpred253_Java6595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_synpred253_Java6624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred254_Java6656 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_synpred254_Java6658 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_synpred254_Java6660 = new BitSet(new long[]{0x0000000000000002L});

}